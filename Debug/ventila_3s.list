
ventila_3s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001516c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000591fc  08015300  08015300  00025300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806e4fc  0806e4fc  00080a80  2**0
                  CONTENTS
  4 .ARM          00000008  0806e4fc  0806e4fc  0007e4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806e504  0806e504  00080a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806e504  0806e504  0007e504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806e508  0806e508  0007e508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a80  20000000  0806e50c  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e1c  20000a80  0806ef8c  00080a80  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a89c  0806ef8c  0008a89c  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00080a80  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b504  00000000  00000000  00080ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047c4  00000000  00000000  000abfb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fd0  00000000  00000000  000b0780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d60  00000000  00000000  000b2750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bcc4  00000000  00000000  000b44b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000187f6  00000000  00000000  000e0174  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001059fd  00000000  00000000  000f896a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000056b7  00000000  00000000  001fe367  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000001c1  00000000  00000000  00203a1e  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000020  00000000  00000000  00203be0  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000dd8c  00000000  00000000  00203c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a80 	.word	0x20000a80
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080152e4 	.word	0x080152e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a84 	.word	0x20000a84
 80001cc:	080152e4 	.word	0x080152e4

080001d0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001d0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001d2:	2b01      	cmp	r3, #1
	IT       LS
 80001d4:	bf98      	it	ls
	BXLS     lr
 80001d6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001dc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001ee:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001f0:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001f2:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001f4:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001fe:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000204:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000208:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800020c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000210:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800021a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800022c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800022e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000230:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800023a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800023c:	2b01      	cmp	r3, #1
	IT       LS
 800023e:	bf98      	it	ls
	BXLS     lr
 8000240:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000246:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000252:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000270:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000276:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800027a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000282:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000284:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000286:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800028e:	4770      	bx	lr

08000290 <_ai_platform_get_io_buffers_info>:
 8000290:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	2500      	movs	r5, #0
 8000296:	46aa      	mov	sl, r5
 8000298:	b082      	sub	sp, #8
 800029a:	4607      	mov	r7, r0
 800029c:	46ab      	mov	fp, r5
 800029e:	46d0      	mov	r8, sl
 80002a0:	46d1      	mov	r9, sl
 80002a2:	e028      	b.n	80002f6 <_ai_platform_get_io_buffers_info+0x66>
 80002a4:	2000      	movs	r0, #0
 80002a6:	e01c      	b.n	80002e2 <_ai_platform_get_io_buffers_info+0x52>
 80002a8:	f850 400a 	ldr.w	r4, [r0, sl]
 80002ac:	b364      	cbz	r4, 8000308 <_ai_platform_get_io_buffers_info+0x78>
 80002ae:	68b8      	ldr	r0, [r7, #8]
 80002b0:	6841      	ldr	r1, [r0, #4]
 80002b2:	6880      	ldr	r0, [r0, #8]
 80002b4:	4440      	add	r0, r8
 80002b6:	eb01 0609 	add.w	r6, r1, r9
 80002ba:	9000      	str	r0, [sp, #0]
 80002bc:	69a1      	ldr	r1, [r4, #24]
 80002be:	6808      	ldr	r0, [r1, #0]
 80002c0:	f005 fd58 	bl	8005d74 <ai_array_to_buffer_fmt>
 80002c4:	6030      	str	r0, [r6, #0]
 80002c6:	2101      	movs	r1, #1
 80002c8:	80b1      	strh	r1, [r6, #4]
 80002ca:	68e0      	ldr	r0, [r4, #12]
 80002cc:	68c1      	ldr	r1, [r0, #12]
 80002ce:	80f1      	strh	r1, [r6, #6]
 80002d0:	6882      	ldr	r2, [r0, #8]
 80002d2:	8132      	strh	r2, [r6, #8]
 80002d4:	6840      	ldr	r0, [r0, #4]
 80002d6:	60f0      	str	r0, [r6, #12]
 80002d8:	69a1      	ldr	r1, [r4, #24]
 80002da:	688a      	ldr	r2, [r1, #8]
 80002dc:	6132      	str	r2, [r6, #16]
 80002de:	9800      	ldr	r0, [sp, #0]
 80002e0:	b9e0      	cbnz	r0, 800031c <_ai_platform_get_io_buffers_info+0x8c>
 80002e2:	6170      	str	r0, [r6, #20]
 80002e4:	1c6d      	adds	r5, r5, #1
 80002e6:	f10b 0b01 	add.w	fp, fp, #1
 80002ea:	f109 0918 	add.w	r9, r9, #24
 80002ee:	f108 0808 	add.w	r8, r8, #8
 80002f2:	f10a 0a04 	add.w	sl, sl, #4
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	bf14      	ite	ne
 80002fa:	8838      	ldrhne	r0, [r7, #0]
 80002fc:	2000      	moveq	r0, #0
 80002fe:	4583      	cmp	fp, r0
 8000300:	d202      	bcs.n	8000308 <_ai_platform_get_io_buffers_info+0x78>
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	2800      	cmp	r0, #0
 8000306:	d1cf      	bne.n	80002a8 <_ai_platform_get_io_buffers_info+0x18>
 8000308:	b2a8      	uxth	r0, r5
 800030a:	b118      	cbz	r0, 8000314 <_ai_platform_get_io_buffers_info+0x84>
 800030c:	68b9      	ldr	r1, [r7, #8]
 800030e:	9802      	ldr	r0, [sp, #8]
 8000310:	684a      	ldr	r2, [r1, #4]
 8000312:	6002      	str	r2, [r0, #0]
 8000314:	b2a8      	uxth	r0, r5
 8000316:	b003      	add	sp, #12
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	9900      	ldr	r1, [sp, #0]
 800031e:	2000      	movs	r0, #0
 8000320:	6008      	str	r0, [r1, #0]
 8000322:	9a00      	ldr	r2, [sp, #0]
 8000324:	6820      	ldr	r0, [r4, #0]
 8000326:	6050      	str	r0, [r2, #4]
 8000328:	2800      	cmp	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	8840      	ldrhne	r0, [r0, #2]
 800032e:	2800      	cmpne	r0, #0
 8000330:	d0b8      	beq.n	80002a4 <_ai_platform_get_io_buffers_info+0x14>
 8000332:	9800      	ldr	r0, [sp, #0]
 8000334:	2101      	movs	r1, #1
 8000336:	6001      	str	r1, [r0, #0]
 8000338:	9800      	ldr	r0, [sp, #0]
 800033a:	e7d2      	b.n	80002e2 <_ai_platform_get_io_buffers_info+0x52>

0800033c <_platform_network_state_setup>:
 800033c:	b430      	push	{r4, r5}
 800033e:	68d3      	ldr	r3, [r2, #12]
 8000340:	6955      	ldr	r5, [r2, #20]
 8000342:	68dc      	ldr	r4, [r3, #12]
 8000344:	68eb      	ldr	r3, [r5, #12]
 8000346:	435c      	muls	r4, r3
 8000348:	6084      	str	r4, [r0, #8]
 800034a:	888d      	ldrh	r5, [r1, #4]
 800034c:	436c      	muls	r4, r5
 800034e:	60c4      	str	r4, [r0, #12]
 8000350:	6909      	ldr	r1, [r1, #16]
 8000352:	68c3      	ldr	r3, [r0, #12]
 8000354:	6041      	str	r1, [r0, #4]
 8000356:	4419      	add	r1, r3
 8000358:	6001      	str	r1, [r0, #0]
 800035a:	6992      	ldr	r2, [r2, #24]
 800035c:	6814      	ldr	r4, [r2, #0]
 800035e:	00a1      	lsls	r1, r4, #2
 8000360:	d407      	bmi.n	8000372 <_platform_network_state_setup+0x36>
 8000362:	6894      	ldr	r4, [r2, #8]
 8000364:	68d1      	ldr	r1, [r2, #12]
 8000366:	6843      	ldr	r3, [r0, #4]
 8000368:	1a64      	subs	r4, r4, r1
 800036a:	1919      	adds	r1, r3, r4
 800036c:	6091      	str	r1, [r2, #8]
 800036e:	6840      	ldr	r0, [r0, #4]
 8000370:	60d0      	str	r0, [r2, #12]
 8000372:	bc30      	pop	{r4, r5}
 8000374:	4770      	bx	lr

08000376 <ai_platform_runtime_get_revision>:
 8000376:	f8df 0814 	ldr.w	r0, [pc, #2068]	; 8000b8c <.text_18>
 800037a:	6801      	ldr	r1, [r0, #0]
 800037c:	0849      	lsrs	r1, r1, #1
 800037e:	0049      	lsls	r1, r1, #1
 8000380:	6001      	str	r1, [r0, #0]
 8000382:	2001      	movs	r0, #1
 8000384:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 8000b90 <.text_19>
 8000388:	6088      	str	r0, [r1, #8]
 800038a:	6888      	ldr	r0, [r1, #8]
 800038c:	2800      	cmp	r0, #0
 800038e:	d1fc      	bne.n	800038a <ai_platform_runtime_get_revision+0x14>
 8000390:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 8000b94 <.text_20>
 8000394:	600a      	str	r2, [r1, #0]
 8000396:	6808      	ldr	r0, [r1, #0]
 8000398:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000b98 <.text_21>
 800039c:	4288      	cmp	r0, r1
 800039e:	d000      	beq.n	80003a2 <ai_platform_runtime_get_revision+0x2c>
 80003a0:	e7fe      	b.n	80003a0 <ai_platform_runtime_get_revision+0x2a>
 80003a2:	a0ad      	add	r0, pc, #692	; (adr r0, 8000658 <.text_13>)
 80003a4:	4770      	bx	lr

080003a6 <ai_platform_runtime_get_version>:
 80003a6:	f8df 07e4 	ldr.w	r0, [pc, #2020]	; 8000b8c <.text_18>
 80003aa:	6801      	ldr	r1, [r0, #0]
 80003ac:	0849      	lsrs	r1, r1, #1
 80003ae:	0049      	lsls	r1, r1, #1
 80003b0:	6001      	str	r1, [r0, #0]
 80003b2:	2001      	movs	r0, #1
 80003b4:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000b90 <.text_19>
 80003b8:	6088      	str	r0, [r1, #8]
 80003ba:	6888      	ldr	r0, [r1, #8]
 80003bc:	2800      	cmp	r0, #0
 80003be:	d1fc      	bne.n	80003ba <ai_platform_runtime_get_version+0x14>
 80003c0:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 8000b94 <.text_20>
 80003c4:	600a      	str	r2, [r1, #0]
 80003c6:	6808      	ldr	r0, [r1, #0]
 80003c8:	f8df 17cc 	ldr.w	r1, [pc, #1996]	; 8000b98 <.text_21>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	d000      	beq.n	80003d2 <ai_platform_runtime_get_version+0x2c>
 80003d0:	e7fe      	b.n	80003d0 <ai_platform_runtime_get_version+0x2a>
 80003d2:	f20f 72d0 	addw	r2, pc, #2000	; 0x7d0
 80003d6:	6810      	ldr	r0, [r2, #0]
 80003d8:	4770      	bx	lr

080003da <ai_platform_api_get_version>:
 80003da:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 8000b8c <.text_18>
 80003de:	6801      	ldr	r1, [r0, #0]
 80003e0:	0849      	lsrs	r1, r1, #1
 80003e2:	0049      	lsls	r1, r1, #1
 80003e4:	6001      	str	r1, [r0, #0]
 80003e6:	2001      	movs	r0, #1
 80003e8:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000b90 <.text_19>
 80003ec:	6088      	str	r0, [r1, #8]
 80003ee:	6888      	ldr	r0, [r1, #8]
 80003f0:	2800      	cmp	r0, #0
 80003f2:	d1fc      	bne.n	80003ee <ai_platform_api_get_version+0x14>
 80003f4:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 8000b94 <.text_20>
 80003f8:	600a      	str	r2, [r1, #0]
 80003fa:	6808      	ldr	r0, [r1, #0]
 80003fc:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 8000b98 <.text_21>
 8000400:	4288      	cmp	r0, r1
 8000402:	d000      	beq.n	8000406 <ai_platform_api_get_version+0x2c>
 8000404:	e7fe      	b.n	8000404 <ai_platform_api_get_version+0x2a>
 8000406:	f20f 72a0 	addw	r2, pc, #1952	; 0x7a0
 800040a:	6810      	ldr	r0, [r2, #0]
 800040c:	4770      	bx	lr

0800040e <ai_platform_interface_api_get_version>:
 800040e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000b8c <.text_18>
 8000412:	6801      	ldr	r1, [r0, #0]
 8000414:	0849      	lsrs	r1, r1, #1
 8000416:	0049      	lsls	r1, r1, #1
 8000418:	6001      	str	r1, [r0, #0]
 800041a:	2001      	movs	r0, #1
 800041c:	f8df 1770 	ldr.w	r1, [pc, #1904]	; 8000b90 <.text_19>
 8000420:	6088      	str	r0, [r1, #8]
 8000422:	6888      	ldr	r0, [r1, #8]
 8000424:	2800      	cmp	r0, #0
 8000426:	d1fc      	bne.n	8000422 <ai_platform_interface_api_get_version+0x14>
 8000428:	f8df 2768 	ldr.w	r2, [pc, #1896]	; 8000b94 <.text_20>
 800042c:	600a      	str	r2, [r1, #0]
 800042e:	6808      	ldr	r0, [r1, #0]
 8000430:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000b98 <.text_21>
 8000434:	4288      	cmp	r0, r1
 8000436:	d000      	beq.n	800043a <ai_platform_interface_api_get_version+0x2c>
 8000438:	e7fe      	b.n	8000438 <ai_platform_interface_api_get_version+0x2a>
 800043a:	f20f 7270 	addw	r2, pc, #1904	; 0x770
 800043e:	6810      	ldr	r0, [r2, #0]
 8000440:	4770      	bx	lr

08000442 <ai_platform_context_acquire>:
 8000442:	b120      	cbz	r0, 800044e <ai_platform_context_acquire+0xc>
 8000444:	6801      	ldr	r1, [r0, #0]
 8000446:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8000b9c <.text_22>
 800044a:	4291      	cmp	r1, r2
 800044c:	d000      	beq.n	8000450 <ai_platform_context_acquire+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	f8df 1738 	ldr.w	r1, [pc, #1848]	; 8000b8c <.text_18>
 8000454:	680a      	ldr	r2, [r1, #0]
 8000456:	0852      	lsrs	r2, r2, #1
 8000458:	0052      	lsls	r2, r2, #1
 800045a:	600a      	str	r2, [r1, #0]
 800045c:	2101      	movs	r1, #1
 800045e:	f8df 2730 	ldr.w	r2, [pc, #1840]	; 8000b90 <.text_19>
 8000462:	6091      	str	r1, [r2, #8]
 8000464:	6891      	ldr	r1, [r2, #8]
 8000466:	2900      	cmp	r1, #0
 8000468:	d1fc      	bne.n	8000464 <ai_platform_context_acquire+0x22>
 800046a:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8000b94 <.text_20>
 800046e:	6013      	str	r3, [r2, #0]
 8000470:	6811      	ldr	r1, [r2, #0]
 8000472:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 8000b98 <.text_21>
 8000476:	4291      	cmp	r1, r2
 8000478:	d000      	beq.n	800047c <ai_platform_context_acquire+0x3a>
 800047a:	e7fe      	b.n	800047a <ai_platform_context_acquire+0x38>
 800047c:	4770      	bx	lr

0800047e <ai_platform_context_release>:
 800047e:	f8df 171c 	ldr.w	r1, [pc, #1820]	; 8000b9c <.text_22>
 8000482:	6001      	str	r1, [r0, #0]
 8000484:	4770      	bx	lr

08000486 <ai_platform_network_get_error>:
 8000486:	b120      	cbz	r0, 8000492 <ai_platform_network_get_error+0xc>
 8000488:	6801      	ldr	r1, [r0, #0]
 800048a:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000b9c <.text_22>
 800048e:	4291      	cmp	r1, r2
 8000490:	d000      	beq.n	8000494 <ai_platform_network_get_error+0xe>
 8000492:	2000      	movs	r0, #0
 8000494:	f8df 16f4 	ldr.w	r1, [pc, #1780]	; 8000b8c <.text_18>
 8000498:	680a      	ldr	r2, [r1, #0]
 800049a:	0852      	lsrs	r2, r2, #1
 800049c:	0052      	lsls	r2, r2, #1
 800049e:	600a      	str	r2, [r1, #0]
 80004a0:	2101      	movs	r1, #1
 80004a2:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8000b90 <.text_19>
 80004a6:	6091      	str	r1, [r2, #8]
 80004a8:	6891      	ldr	r1, [r2, #8]
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d1fc      	bne.n	80004a8 <ai_platform_network_get_error+0x22>
 80004ae:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 8000b94 <.text_20>
 80004b2:	6013      	str	r3, [r2, #0]
 80004b4:	6811      	ldr	r1, [r2, #0]
 80004b6:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8000b98 <.text_21>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d000      	beq.n	80004c0 <ai_platform_network_get_error+0x3a>
 80004be:	e7fe      	b.n	80004be <ai_platform_network_get_error+0x38>
 80004c0:	2800      	cmp	r0, #0
 80004c2:	bf1c      	itt	ne
 80004c4:	3010      	addne	r0, #16
 80004c6:	f000 bb83 	bne.w	8000bd0 <core_get_error>
 80004ca:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 80004ce:	6800      	ldr	r0, [r0, #0]
 80004d0:	4770      	bx	lr

080004d2 <ai_platform_network_set_error>:
 80004d2:	2800      	cmp	r0, #0
 80004d4:	bf1c      	itt	ne
 80004d6:	3010      	addne	r0, #16
 80004d8:	f000 bb7f 	bne.w	8000bda <core_set_error>
 80004dc:	4770      	bx	lr

080004de <ai_platform_api_get_network_report>:
 80004de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004e2:	ea5f 0900 	movs.w	r9, r0
 80004e6:	b081      	sub	sp, #4
 80004e8:	460c      	mov	r4, r1
 80004ea:	d005      	beq.n	80004f8 <ai_platform_api_get_network_report+0x1a>
 80004ec:	f8d9 0000 	ldr.w	r0, [r9]
 80004f0:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 8000b9c <.text_22>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	d001      	beq.n	80004fc <ai_platform_api_get_network_report+0x1e>
 80004f8:	f04f 0900 	mov.w	r9, #0
 80004fc:	f8df 568c 	ldr.w	r5, [pc, #1676]	; 8000b8c <.text_18>
 8000500:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8000b90 <.text_19>
 8000504:	6828      	ldr	r0, [r5, #0]
 8000506:	0840      	lsrs	r0, r0, #1
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	6028      	str	r0, [r5, #0]
 800050c:	2101      	movs	r1, #1
 800050e:	60b1      	str	r1, [r6, #8]
 8000510:	68b0      	ldr	r0, [r6, #8]
 8000512:	2800      	cmp	r0, #0
 8000514:	d1fc      	bne.n	8000510 <ai_platform_api_get_network_report+0x32>
 8000516:	f8df 767c 	ldr.w	r7, [pc, #1660]	; 8000b94 <.text_20>
 800051a:	f8df 867c 	ldr.w	r8, [pc, #1660]	; 8000b98 <.text_21>
 800051e:	6037      	str	r7, [r6, #0]
 8000520:	6830      	ldr	r0, [r6, #0]
 8000522:	4540      	cmp	r0, r8
 8000524:	d000      	beq.n	8000528 <ai_platform_api_get_network_report+0x4a>
 8000526:	e7fe      	b.n	8000526 <ai_platform_api_get_network_report+0x48>
 8000528:	f1b9 0f00 	cmp.w	r9, #0
 800052c:	bf18      	it	ne
 800052e:	2c00      	cmpne	r4, #0
 8000530:	d034      	beq.n	800059c <ai_platform_api_get_network_report+0xbe>
 8000532:	2000      	movs	r0, #0
 8000534:	66e0      	str	r0, [r4, #108]	; 0x6c
 8000536:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 800053a:	b152      	cbz	r2, 8000552 <ai_platform_api_get_network_report+0x74>
 800053c:	e000      	b.n	8000540 <ai_platform_api_get_network_report+0x62>
 800053e:	4602      	mov	r2, r0
 8000540:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8000542:	1c49      	adds	r1, r1, #1
 8000544:	66e1      	str	r1, [r4, #108]	; 0x6c
 8000546:	68d0      	ldr	r0, [r2, #12]
 8000548:	4282      	cmp	r2, r0
 800054a:	bf18      	it	ne
 800054c:	2800      	cmpne	r0, #0
 800054e:	d1f6      	bne.n	800053e <ai_platform_api_get_network_report+0x60>
 8000550:	b911      	cbnz	r1, 8000558 <ai_platform_api_get_network_report+0x7a>
 8000552:	2218      	movs	r2, #24
 8000554:	2111      	movs	r1, #17
 8000556:	e01d      	b.n	8000594 <ai_platform_api_get_network_report+0xb6>
 8000558:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 800055c:	b108      	cbz	r0, 8000562 <ai_platform_api_get_network_report+0x84>
 800055e:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 8000562:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8000566:	f7ff fe93 	bl	8000290 <_ai_platform_get_io_buffers_info>
 800056a:	8620      	strh	r0, [r4, #48]	; 0x30
 800056c:	b910      	cbnz	r0, 8000574 <ai_platform_api_get_network_report+0x96>
 800056e:	2218      	movs	r2, #24
 8000570:	2112      	movs	r1, #18
 8000572:	e00f      	b.n	8000594 <ai_platform_api_get_network_report+0xb6>
 8000574:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 8000578:	2802      	cmp	r0, #2
 800057a:	bfa6      	itte	ge
 800057c:	f8d9 004c 	ldrge.w	r0, [r9, #76]	; 0x4c
 8000580:	300c      	addge	r0, #12
 8000582:	2000      	movlt	r0, #0
 8000584:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8000588:	f7ff fe82 	bl	8000290 <_ai_platform_get_io_buffers_info>
 800058c:	8660      	strh	r0, [r4, #50]	; 0x32
 800058e:	b948      	cbnz	r0, 80005a4 <ai_platform_api_get_network_report+0xc6>
 8000590:	2218      	movs	r2, #24
 8000592:	2113      	movs	r1, #19
 8000594:	f109 0010 	add.w	r0, r9, #16
 8000598:	f000 fb1f 	bl	8000bda <core_set_error>
 800059c:	2000      	movs	r0, #0
 800059e:	b001      	add	sp, #4
 80005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80005a8:	6720      	str	r0, [r4, #112]	; 0x70
 80005aa:	f109 0230 	add.w	r2, r9, #48	; 0x30
 80005ae:	e892 5c09 	ldmia.w	r2, {r0, r3, sl, fp, ip, lr}
 80005b2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80005b6:	f109 0918 	add.w	r9, r9, #24
 80005ba:	e881 5c09 	stmia.w	r1, {r0, r3, sl, fp, ip, lr}
 80005be:	e899 540e 	ldmia.w	r9, {r1, r2, r3, sl, ip, lr}
 80005c2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80005c6:	e880 540e 	stmia.w	r0, {r1, r2, r3, sl, ip, lr}
 80005ca:	6828      	ldr	r0, [r5, #0]
 80005cc:	0840      	lsrs	r0, r0, #1
 80005ce:	0040      	lsls	r0, r0, #1
 80005d0:	6028      	str	r0, [r5, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	60b3      	str	r3, [r6, #8]
 80005d6:	68b0      	ldr	r0, [r6, #8]
 80005d8:	2800      	cmp	r0, #0
 80005da:	d1fc      	bne.n	80005d6 <ai_platform_api_get_network_report+0xf8>
 80005dc:	6037      	str	r7, [r6, #0]
 80005de:	6831      	ldr	r1, [r6, #0]
 80005e0:	4541      	cmp	r1, r8
 80005e2:	d000      	beq.n	80005e6 <ai_platform_api_get_network_report+0x108>
 80005e4:	e7fe      	b.n	80005e4 <ai_platform_api_get_network_report+0x106>
 80005e6:	a01c      	add	r0, pc, #112	; (adr r0, 8000658 <.text_13>)
 80005e8:	6120      	str	r0, [r4, #16]
 80005ea:	6829      	ldr	r1, [r5, #0]
 80005ec:	0849      	lsrs	r1, r1, #1
 80005ee:	0049      	lsls	r1, r1, #1
 80005f0:	6029      	str	r1, [r5, #0]
 80005f2:	60b3      	str	r3, [r6, #8]
 80005f4:	68b0      	ldr	r0, [r6, #8]
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d1fc      	bne.n	80005f4 <ai_platform_api_get_network_report+0x116>
 80005fa:	6037      	str	r7, [r6, #0]
 80005fc:	6831      	ldr	r1, [r6, #0]
 80005fe:	4541      	cmp	r1, r8
 8000600:	d000      	beq.n	8000604 <ai_platform_api_get_network_report+0x126>
 8000602:	e7fe      	b.n	8000602 <ai_platform_api_get_network_report+0x124>
 8000604:	f20f 509c 	addw	r0, pc, #1436	; 0x59c
 8000608:	6802      	ldr	r2, [r0, #0]
 800060a:	6162      	str	r2, [r4, #20]
 800060c:	6829      	ldr	r1, [r5, #0]
 800060e:	0849      	lsrs	r1, r1, #1
 8000610:	0049      	lsls	r1, r1, #1
 8000612:	6029      	str	r1, [r5, #0]
 8000614:	60b3      	str	r3, [r6, #8]
 8000616:	68b0      	ldr	r0, [r6, #8]
 8000618:	2800      	cmp	r0, #0
 800061a:	d1fc      	bne.n	8000616 <ai_platform_api_get_network_report+0x138>
 800061c:	6037      	str	r7, [r6, #0]
 800061e:	6831      	ldr	r1, [r6, #0]
 8000620:	4541      	cmp	r1, r8
 8000622:	d000      	beq.n	8000626 <ai_platform_api_get_network_report+0x148>
 8000624:	e7fe      	b.n	8000624 <ai_platform_api_get_network_report+0x146>
 8000626:	f20f 5080 	addw	r0, pc, #1408	; 0x580
 800062a:	6802      	ldr	r2, [r0, #0]
 800062c:	6262      	str	r2, [r4, #36]	; 0x24
 800062e:	6829      	ldr	r1, [r5, #0]
 8000630:	0849      	lsrs	r1, r1, #1
 8000632:	0049      	lsls	r1, r1, #1
 8000634:	6029      	str	r1, [r5, #0]
 8000636:	60b3      	str	r3, [r6, #8]
 8000638:	68b0      	ldr	r0, [r6, #8]
 800063a:	2800      	cmp	r0, #0
 800063c:	d1fc      	bne.n	8000638 <ai_platform_api_get_network_report+0x15a>
 800063e:	6037      	str	r7, [r6, #0]
 8000640:	6831      	ldr	r1, [r6, #0]
 8000642:	4541      	cmp	r1, r8
 8000644:	d000      	beq.n	8000648 <ai_platform_api_get_network_report+0x16a>
 8000646:	e7fe      	b.n	8000646 <ai_platform_api_get_network_report+0x168>
 8000648:	f20f 5060 	addw	r0, pc, #1376	; 0x560
 800064c:	6802      	ldr	r2, [r0, #0]
 800064e:	62a2      	str	r2, [r4, #40]	; 0x28
 8000650:	2001      	movs	r0, #1
 8000652:	b001      	add	sp, #4
 8000654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000658 <.text_13>:
 8000658:	00000000 	.word	0x00000000

0800065c <ai_platform_network_create>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	9d04      	ldr	r5, [sp, #16]
 8000660:	4604      	mov	r4, r0
 8000662:	9805      	ldr	r0, [sp, #20]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	042d      	lsls	r5, r5, #16
 8000668:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 800066c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000670:	f20f 5050 	addw	r0, pc, #1360	; 0x550
 8000674:	6806      	ldr	r6, [r0, #0]
 8000676:	f8df 0514 	ldr.w	r0, [pc, #1300]	; 8000b8c <.text_18>
 800067a:	6801      	ldr	r1, [r0, #0]
 800067c:	0849      	lsrs	r1, r1, #1
 800067e:	0049      	lsls	r1, r1, #1
 8000680:	6001      	str	r1, [r0, #0]
 8000682:	2001      	movs	r0, #1
 8000684:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000b90 <.text_19>
 8000688:	6088      	str	r0, [r1, #8]
 800068a:	6888      	ldr	r0, [r1, #8]
 800068c:	2800      	cmp	r0, #0
 800068e:	d1fc      	bne.n	800068a <ai_platform_network_create+0x2e>
 8000690:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8000b94 <.text_20>
 8000694:	600b      	str	r3, [r1, #0]
 8000696:	6808      	ldr	r0, [r1, #0]
 8000698:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 8000b98 <.text_21>
 800069c:	4288      	cmp	r0, r1
 800069e:	d000      	beq.n	80006a2 <ai_platform_network_create+0x46>
 80006a0:	e7fe      	b.n	80006a0 <ai_platform_network_create+0x44>
 80006a2:	b91c      	cbnz	r4, 80006ac <ai_platform_network_create+0x50>
 80006a4:	f20f 5020 	addw	r0, pc, #1312	; 0x520
 80006a8:	6800      	ldr	r0, [r0, #0]
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000b9c <.text_22>
 80006b0:	6011      	str	r1, [r2, #0]
 80006b2:	6022      	str	r2, [r4, #0]
 80006b4:	f000 fa8a 	bl	8000bcc <core_init>
 80006b8:	b910      	cbnz	r0, 80006c0 <ai_platform_network_create+0x64>
 80006ba:	f20f 40f4 	addw	r0, pc, #1268	; 0x4f4
 80006be:	e00d      	b.n	80006dc <ai_platform_network_create+0x80>
 80006c0:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 8000ba0 <.text_23>
 80006c4:	428d      	cmp	r5, r1
 80006c6:	bf28      	it	cs
 80006c8:	f20f 40e8 	addwcs	r0, pc, #1256	; 0x4e8
 80006cc:	d206      	bcs.n	80006dc <ai_platform_network_create+0x80>
 80006ce:	f20f 40e8 	addw	r0, pc, #1256	; 0x4e8
 80006d2:	f000 fa97 	bl	8000c04 <ai_check_custom_types>
 80006d6:	b920      	cbnz	r0, 80006e2 <ai_platform_network_create+0x86>
 80006d8:	f20f 40e0 	addw	r0, pc, #1248	; 0x4e0
 80006dc:	6806      	ldr	r6, [r0, #0]
 80006de:	2100      	movs	r1, #0
 80006e0:	6021      	str	r1, [r4, #0]
 80006e2:	4630      	mov	r0, r6
 80006e4:	bd70      	pop	{r4, r5, r6, pc}

080006e6 <ai_platform_network_destroy>:
 80006e6:	b130      	cbz	r0, 80006f6 <ai_platform_network_destroy+0x10>
 80006e8:	6801      	ldr	r1, [r0, #0]
 80006ea:	f8df 24b0 	ldr.w	r2, [pc, #1200]	; 8000b9c <.text_22>
 80006ee:	4291      	cmp	r1, r2
 80006f0:	bf08      	it	eq
 80006f2:	4602      	moveq	r2, r0
 80006f4:	d000      	beq.n	80006f8 <ai_platform_network_destroy+0x12>
 80006f6:	2200      	movs	r2, #0
 80006f8:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8000b8c <.text_18>
 80006fc:	680b      	ldr	r3, [r1, #0]
 80006fe:	085b      	lsrs	r3, r3, #1
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	600b      	str	r3, [r1, #0]
 8000704:	2101      	movs	r1, #1
 8000706:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 8000b90 <.text_19>
 800070a:	6099      	str	r1, [r3, #8]
 800070c:	6899      	ldr	r1, [r3, #8]
 800070e:	2900      	cmp	r1, #0
 8000710:	d1fc      	bne.n	800070c <ai_platform_network_destroy+0x26>
 8000712:	f8df c480 	ldr.w	ip, [pc, #1152]	; 8000b94 <.text_20>
 8000716:	f8c3 c000 	str.w	ip, [r3]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 8000b98 <.text_21>
 8000720:	4299      	cmp	r1, r3
 8000722:	d000      	beq.n	8000726 <ai_platform_network_destroy+0x40>
 8000724:	e7fe      	b.n	8000724 <ai_platform_network_destroy+0x3e>
 8000726:	b102      	cbz	r2, 800072a <ai_platform_network_destroy+0x44>
 8000728:	2000      	movs	r0, #0
 800072a:	4770      	bx	lr

0800072c <ai_platform_network_init>:
 800072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000730:	b081      	sub	sp, #4
 8000732:	460a      	mov	r2, r1
 8000734:	b120      	cbz	r0, 8000740 <ai_platform_network_init+0x14>
 8000736:	6801      	ldr	r1, [r0, #0]
 8000738:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8000b9c <.text_22>
 800073c:	4299      	cmp	r1, r3
 800073e:	d000      	beq.n	8000742 <ai_platform_network_init+0x16>
 8000740:	2000      	movs	r0, #0
 8000742:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8000b8c <.text_18>
 8000746:	680b      	ldr	r3, [r1, #0]
 8000748:	085b      	lsrs	r3, r3, #1
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	600b      	str	r3, [r1, #0]
 800074e:	2101      	movs	r1, #1
 8000750:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 8000b90 <.text_19>
 8000754:	6099      	str	r1, [r3, #8]
 8000756:	6899      	ldr	r1, [r3, #8]
 8000758:	2900      	cmp	r1, #0
 800075a:	d1fc      	bne.n	8000756 <ai_platform_network_init+0x2a>
 800075c:	f8df 4434 	ldr.w	r4, [pc, #1076]	; 8000b94 <.text_20>
 8000760:	601c      	str	r4, [r3, #0]
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 8000b98 <.text_21>
 8000768:	4299      	cmp	r1, r3
 800076a:	d000      	beq.n	800076e <ai_platform_network_init+0x42>
 800076c:	e7fe      	b.n	800076c <ai_platform_network_init+0x40>
 800076e:	2800      	cmp	r0, #0
 8000770:	d035      	beq.n	80007de <ai_platform_network_init+0xb2>
 8000772:	b90a      	cbnz	r2, 8000778 <ai_platform_network_init+0x4c>
 8000774:	2211      	movs	r2, #17
 8000776:	e012      	b.n	800079e <ai_platform_network_init+0x72>
 8000778:	6913      	ldr	r3, [r2, #16]
 800077a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800077c:	b939      	cbnz	r1, 800078e <ai_platform_network_init+0x62>
 800077e:	8c11      	ldrh	r1, [r2, #32]
 8000780:	8bd5      	ldrh	r5, [r2, #30]
 8000782:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8000784:	4369      	muls	r1, r5
 8000786:	4361      	muls	r1, r4
 8000788:	bf18      	it	ne
 800078a:	2213      	movne	r2, #19
 800078c:	d107      	bne.n	800079e <ai_platform_network_init+0x72>
 800078e:	b973      	cbnz	r3, 80007ae <ai_platform_network_init+0x82>
 8000790:	8911      	ldrh	r1, [r2, #8]
 8000792:	88d4      	ldrh	r4, [r2, #6]
 8000794:	68d3      	ldr	r3, [r2, #12]
 8000796:	4361      	muls	r1, r4
 8000798:	4359      	muls	r1, r3
 800079a:	d008      	beq.n	80007ae <ai_platform_network_init+0x82>
 800079c:	2212      	movs	r2, #18
 800079e:	2110      	movs	r1, #16
 80007a0:	3010      	adds	r0, #16
 80007a2:	f000 fa1a 	bl	8000bda <core_set_error>
 80007a6:	2000      	movs	r0, #0
 80007a8:	b001      	add	sp, #4
 80007aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007ae:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 80007b2:	f100 0118 	add.w	r1, r0, #24
 80007b6:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 80007ba:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 80007be:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 80007c2:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 80007c6:	2103      	movs	r1, #3
 80007c8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80007ca:	60c1      	str	r1, [r0, #12]
 80007cc:	b13a      	cbz	r2, 80007de <ai_platform_network_init+0xb2>
 80007ce:	e000      	b.n	80007d2 <ai_platform_network_init+0xa6>
 80007d0:	460a      	mov	r2, r1
 80007d2:	68d1      	ldr	r1, [r2, #12]
 80007d4:	6090      	str	r0, [r2, #8]
 80007d6:	428a      	cmp	r2, r1
 80007d8:	bf18      	it	ne
 80007da:	2900      	cmpne	r1, #0
 80007dc:	d1f8      	bne.n	80007d0 <ai_platform_network_init+0xa4>
 80007de:	b001      	add	sp, #4
 80007e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080007e4 <ai_platform_network_process>:
 80007e4:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	460a      	mov	r2, r1
 80007ec:	b120      	cbz	r0, 80007f8 <ai_platform_network_process+0x14>
 80007ee:	6801      	ldr	r1, [r0, #0]
 80007f0:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000b9c <.text_22>
 80007f4:	4299      	cmp	r1, r3
 80007f6:	d000      	beq.n	80007fa <ai_platform_network_process+0x16>
 80007f8:	2000      	movs	r0, #0
 80007fa:	f8df 1390 	ldr.w	r1, [pc, #912]	; 8000b8c <.text_18>
 80007fe:	680b      	ldr	r3, [r1, #0]
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	600b      	str	r3, [r1, #0]
 8000806:	2101      	movs	r1, #1
 8000808:	f8df 3384 	ldr.w	r3, [pc, #900]	; 8000b90 <.text_19>
 800080c:	6099      	str	r1, [r3, #8]
 800080e:	6899      	ldr	r1, [r3, #8]
 8000810:	2900      	cmp	r1, #0
 8000812:	d1fc      	bne.n	800080e <ai_platform_network_process+0x2a>
 8000814:	f8df 437c 	ldr.w	r4, [pc, #892]	; 8000b94 <.text_20>
 8000818:	601c      	str	r4, [r3, #0]
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000b98 <.text_21>
 8000820:	4299      	cmp	r1, r3
 8000822:	d000      	beq.n	8000826 <ai_platform_network_process+0x42>
 8000824:	e7fe      	b.n	8000824 <ai_platform_network_process+0x40>
 8000826:	2800      	cmp	r0, #0
 8000828:	f000 8113 	beq.w	8000a52 <ai_platform_network_process+0x26e>
 800082c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000830:	b101      	cbz	r1, 8000834 <ai_platform_network_process+0x50>
 8000832:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000834:	2300      	movs	r3, #0
 8000836:	82c3      	strh	r3, [r0, #22]
 8000838:	2400      	movs	r4, #0
 800083a:	7b03      	ldrb	r3, [r0, #12]
 800083c:	8284      	strh	r4, [r0, #20]
 800083e:	f003 0303 	and.w	r3, r3, #3
 8000842:	2b03      	cmp	r3, #3
 8000844:	d002      	beq.n	800084c <ai_platform_network_process+0x68>
 8000846:	2230      	movs	r2, #48	; 0x30
 8000848:	2111      	movs	r1, #17
 800084a:	e0ff      	b.n	8000a4c <ai_platform_network_process+0x268>
 800084c:	2a00      	cmp	r2, #0
 800084e:	bf1e      	ittt	ne
 8000850:	2900      	cmpne	r1, #0
 8000852:	880b      	ldrhne	r3, [r1, #0]
 8000854:	2b00      	cmpne	r3, #0
 8000856:	f000 80f7 	beq.w	8000a48 <ai_platform_network_process+0x264>
 800085a:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 800085e:	9100      	str	r1, [sp, #0]
 8000860:	46a0      	mov	r8, r4
 8000862:	46a1      	mov	r9, r4
 8000864:	2600      	movs	r6, #0
 8000866:	1d17      	adds	r7, r2, #4
 8000868:	4682      	mov	sl, r0
 800086a:	e014      	b.n	8000896 <ai_platform_network_process+0xb2>
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	2800      	cmp	r0, #0
 8000870:	f000 80e9 	beq.w	8000a46 <ai_platform_network_process+0x262>
 8000874:	8838      	ldrh	r0, [r7, #0]
 8000876:	2800      	cmp	r0, #0
 8000878:	d052      	beq.n	8000920 <ai_platform_network_process+0x13c>
 800087a:	4558      	cmp	r0, fp
 800087c:	bf28      	it	cs
 800087e:	4683      	movcs	fp, r0
 8000880:	4622      	mov	r2, r4
 8000882:	1f39      	subs	r1, r7, #4
 8000884:	4628      	mov	r0, r5
 8000886:	f7ff fd59 	bl	800033c <_platform_network_state_setup>
 800088a:	f108 0801 	add.w	r8, r8, #1
 800088e:	3718      	adds	r7, #24
 8000890:	3610      	adds	r6, #16
 8000892:	f109 0904 	add.w	r9, r9, #4
 8000896:	9800      	ldr	r0, [sp, #0]
 8000898:	8801      	ldrh	r1, [r0, #0]
 800089a:	4588      	cmp	r8, r1
 800089c:	d24a      	bcs.n	8000934 <ai_platform_network_process+0x150>
 800089e:	6840      	ldr	r0, [r0, #4]
 80008a0:	2800      	cmp	r0, #0
 80008a2:	bf1c      	itt	ne
 80008a4:	f850 4009 	ldrne.w	r4, [r0, r9]
 80008a8:	2c00      	cmpne	r4, #0
 80008aa:	d043      	beq.n	8000934 <ai_platform_network_process+0x150>
 80008ac:	9800      	ldr	r0, [sp, #0]
 80008ae:	6881      	ldr	r1, [r0, #8]
 80008b0:	680a      	ldr	r2, [r1, #0]
 80008b2:	1995      	adds	r5, r2, r6
 80008b4:	f000 80c7 	beq.w	8000a46 <ai_platform_network_process+0x262>
 80008b8:	69a0      	ldr	r0, [r4, #24]
 80008ba:	6841      	ldr	r1, [r0, #4]
 80008bc:	887b      	ldrh	r3, [r7, #2]
 80008be:	88ba      	ldrh	r2, [r7, #4]
 80008c0:	68b8      	ldr	r0, [r7, #8]
 80008c2:	fb03 fc02 	mul.w	ip, r3, r2
 80008c6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008ca:	4561      	cmp	r1, ip
 80008cc:	d32d      	bcc.n	800092a <ai_platform_network_process+0x146>
 80008ce:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80008d2:	f8dc e00c 	ldr.w	lr, [ip, #12]
 80008d6:	459e      	cmp	lr, r3
 80008d8:	bf01      	itttt	eq
 80008da:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 80008de:	4293      	cmpeq	r3, r2
 80008e0:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 80008e4:	4282      	cmpeq	r2, r0
 80008e6:	d120      	bne.n	800092a <ai_platform_network_process+0x146>
 80008e8:	69a0      	ldr	r0, [r4, #24]
 80008ea:	6800      	ldr	r0, [r0, #0]
 80008ec:	f005 fb1a 	bl	8005f24 <ai_array_get_byte_size>
 80008f0:	68e1      	ldr	r1, [r4, #12]
 80008f2:	68ca      	ldr	r2, [r1, #12]
 80008f4:	6961      	ldr	r1, [r4, #20]
 80008f6:	68cb      	ldr	r3, [r1, #12]
 80008f8:	435a      	muls	r2, r3
 80008fa:	4290      	cmp	r0, r2
 80008fc:	d315      	bcc.n	800092a <ai_platform_network_process+0x146>
 80008fe:	69a0      	ldr	r0, [r4, #24]
 8000900:	6800      	ldr	r0, [r0, #0]
 8000902:	f005 fa37 	bl	8005d74 <ai_array_to_buffer_fmt>
 8000906:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800090a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800090e:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000912:	4288      	cmp	r0, r1
 8000914:	d0aa      	beq.n	800086c <ai_platform_network_process+0x88>
 8000916:	2219      	movs	r2, #25
 8000918:	2112      	movs	r1, #18
 800091a:	f10a 0010 	add.w	r0, sl, #16
 800091e:	e096      	b.n	8000a4e <ai_platform_network_process+0x26a>
 8000920:	2221      	movs	r2, #33	; 0x21
 8000922:	2112      	movs	r1, #18
 8000924:	f10a 0010 	add.w	r0, sl, #16
 8000928:	e091      	b.n	8000a4e <ai_platform_network_process+0x26a>
 800092a:	2218      	movs	r2, #24
 800092c:	2112      	movs	r1, #18
 800092e:	f10a 0010 	add.w	r0, sl, #16
 8000932:	e08c      	b.n	8000a4e <ai_platform_network_process+0x26a>
 8000934:	9902      	ldr	r1, [sp, #8]
 8000936:	2900      	cmp	r1, #0
 8000938:	4655      	mov	r5, sl
 800093a:	d075      	beq.n	8000a28 <ai_platform_network_process+0x244>
 800093c:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000940:	2802      	cmp	r0, #2
 8000942:	db7b      	blt.n	8000a3c <ai_platform_network_process+0x258>
 8000944:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8000946:	300c      	adds	r0, #12
 8000948:	bf1c      	itt	ne
 800094a:	8802      	ldrhne	r2, [r0, #0]
 800094c:	2a00      	cmpne	r2, #0
 800094e:	d075      	beq.n	8000a3c <ai_platform_network_process+0x258>
 8000950:	f04f 0800 	mov.w	r8, #0
 8000954:	46c1      	mov	r9, r8
 8000956:	2600      	movs	r6, #0
 8000958:	1d0f      	adds	r7, r1, #4
 800095a:	9000      	str	r0, [sp, #0]
 800095c:	e013      	b.n	8000986 <ai_platform_network_process+0x1a2>
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	2800      	cmp	r0, #0
 8000962:	d059      	beq.n	8000a18 <ai_platform_network_process+0x234>
 8000964:	8838      	ldrh	r0, [r7, #0]
 8000966:	2800      	cmp	r0, #0
 8000968:	d051      	beq.n	8000a0e <ai_platform_network_process+0x22a>
 800096a:	4558      	cmp	r0, fp
 800096c:	bf28      	it	cs
 800096e:	4683      	movcs	fp, r0
 8000970:	4622      	mov	r2, r4
 8000972:	1f39      	subs	r1, r7, #4
 8000974:	4628      	mov	r0, r5
 8000976:	f7ff fce1 	bl	800033c <_platform_network_state_setup>
 800097a:	f108 0801 	add.w	r8, r8, #1
 800097e:	3718      	adds	r7, #24
 8000980:	3610      	adds	r6, #16
 8000982:	f109 0904 	add.w	r9, r9, #4
 8000986:	9800      	ldr	r0, [sp, #0]
 8000988:	8801      	ldrh	r1, [r0, #0]
 800098a:	4588      	cmp	r8, r1
 800098c:	d249      	bcs.n	8000a22 <ai_platform_network_process+0x23e>
 800098e:	6840      	ldr	r0, [r0, #4]
 8000990:	2800      	cmp	r0, #0
 8000992:	bf1c      	itt	ne
 8000994:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000998:	2c00      	cmpne	r4, #0
 800099a:	d042      	beq.n	8000a22 <ai_platform_network_process+0x23e>
 800099c:	9800      	ldr	r0, [sp, #0]
 800099e:	6881      	ldr	r1, [r0, #8]
 80009a0:	680a      	ldr	r2, [r1, #0]
 80009a2:	1995      	adds	r5, r2, r6
 80009a4:	d038      	beq.n	8000a18 <ai_platform_network_process+0x234>
 80009a6:	69a0      	ldr	r0, [r4, #24]
 80009a8:	6841      	ldr	r1, [r0, #4]
 80009aa:	887b      	ldrh	r3, [r7, #2]
 80009ac:	88ba      	ldrh	r2, [r7, #4]
 80009ae:	68b8      	ldr	r0, [r7, #8]
 80009b0:	fb03 fc02 	mul.w	ip, r3, r2
 80009b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80009b8:	4561      	cmp	r1, ip
 80009ba:	d33e      	bcc.n	8000a3a <ai_platform_network_process+0x256>
 80009bc:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80009c0:	f8dc e00c 	ldr.w	lr, [ip, #12]
 80009c4:	459e      	cmp	lr, r3
 80009c6:	bf01      	itttt	eq
 80009c8:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 80009cc:	4293      	cmpeq	r3, r2
 80009ce:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 80009d2:	4282      	cmpeq	r2, r0
 80009d4:	d131      	bne.n	8000a3a <ai_platform_network_process+0x256>
 80009d6:	69a0      	ldr	r0, [r4, #24]
 80009d8:	6800      	ldr	r0, [r0, #0]
 80009da:	f005 faa3 	bl	8005f24 <ai_array_get_byte_size>
 80009de:	68e1      	ldr	r1, [r4, #12]
 80009e0:	68ca      	ldr	r2, [r1, #12]
 80009e2:	6961      	ldr	r1, [r4, #20]
 80009e4:	68cb      	ldr	r3, [r1, #12]
 80009e6:	435a      	muls	r2, r3
 80009e8:	4290      	cmp	r0, r2
 80009ea:	d326      	bcc.n	8000a3a <ai_platform_network_process+0x256>
 80009ec:	69a0      	ldr	r0, [r4, #24]
 80009ee:	6800      	ldr	r0, [r0, #0]
 80009f0:	f005 f9c0 	bl	8005d74 <ai_array_to_buffer_fmt>
 80009f4:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80009f8:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80009fc:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000a00:	4288      	cmp	r0, r1
 8000a02:	d0ac      	beq.n	800095e <ai_platform_network_process+0x17a>
 8000a04:	2219      	movs	r2, #25
 8000a06:	2113      	movs	r1, #19
 8000a08:	f10a 0010 	add.w	r0, sl, #16
 8000a0c:	e01f      	b.n	8000a4e <ai_platform_network_process+0x26a>
 8000a0e:	2221      	movs	r2, #33	; 0x21
 8000a10:	2113      	movs	r1, #19
 8000a12:	f10a 0010 	add.w	r0, sl, #16
 8000a16:	e01a      	b.n	8000a4e <ai_platform_network_process+0x26a>
 8000a18:	2217      	movs	r2, #23
 8000a1a:	2113      	movs	r1, #19
 8000a1c:	f10a 0010 	add.w	r0, sl, #16
 8000a20:	e015      	b.n	8000a4e <ai_platform_network_process+0x26a>
 8000a22:	4655      	mov	r5, sl
 8000a24:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000a28:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	bf14      	ite	ne
 8000a30:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000a34:	f04f 0a00 	moveq.w	sl, #0
 8000a38:	e00f      	b.n	8000a5a <ai_platform_network_process+0x276>
 8000a3a:	4655      	mov	r5, sl
 8000a3c:	2218      	movs	r2, #24
 8000a3e:	2113      	movs	r1, #19
 8000a40:	f105 0010 	add.w	r0, r5, #16
 8000a44:	e003      	b.n	8000a4e <ai_platform_network_process+0x26a>
 8000a46:	4650      	mov	r0, sl
 8000a48:	2217      	movs	r2, #23
 8000a4a:	2112      	movs	r1, #18
 8000a4c:	3010      	adds	r0, #16
 8000a4e:	f000 f8c4 	bl	8000bda <core_set_error>
 8000a52:	2000      	movs	r0, #0
 8000a54:	b003      	add	sp, #12
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5a:	2802      	cmp	r0, #2
 8000a5c:	bfa6      	itte	ge
 8000a5e:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 8000a60:	f100 0b0c 	addge.w	fp, r0, #12
 8000a64:	f04f 0b00 	movlt.w	fp, #0
 8000a68:	8ae8      	ldrh	r0, [r5, #22]
 8000a6a:	8aa9      	ldrh	r1, [r5, #20]
 8000a6c:	ebb0 0f01 	cmp.w	r0, r1
 8000a70:	f080 8087 	bcs.w	8000b82 <ai_platform_network_process+0x39e>
 8000a74:	f04f 0800 	mov.w	r8, #0
 8000a78:	4654      	mov	r4, sl
 8000a7a:	46c1      	mov	r9, r8
 8000a7c:	46c2      	mov	sl, r8
 8000a7e:	e018      	b.n	8000ab2 <ai_platform_network_process+0x2ce>
 8000a80:	6882      	ldr	r2, [r0, #8]
 8000a82:	68c3      	ldr	r3, [r0, #12]
 8000a84:	6871      	ldr	r1, [r6, #4]
 8000a86:	1ad2      	subs	r2, r2, r3
 8000a88:	4411      	add	r1, r2
 8000a8a:	6081      	str	r1, [r0, #8]
 8000a8c:	6872      	ldr	r2, [r6, #4]
 8000a8e:	60c2      	str	r2, [r0, #12]
 8000a90:	6870      	ldr	r0, [r6, #4]
 8000a92:	68b1      	ldr	r1, [r6, #8]
 8000a94:	4408      	add	r0, r1
 8000a96:	6070      	str	r0, [r6, #4]
 8000a98:	6831      	ldr	r1, [r6, #0]
 8000a9a:	4288      	cmp	r0, r1
 8000a9c:	d302      	bcc.n	8000aa4 <ai_platform_network_process+0x2c0>
 8000a9e:	68f0      	ldr	r0, [r6, #12]
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	4408      	add	r0, r1
 8000aa4:	6070      	str	r0, [r6, #4]
 8000aa6:	f10a 0a01 	add.w	sl, sl, #1
 8000aaa:	f109 0910 	add.w	r9, r9, #16
 8000aae:	f108 0804 	add.w	r8, r8, #4
 8000ab2:	2c00      	cmp	r4, #0
 8000ab4:	bf14      	ite	ne
 8000ab6:	8820      	ldrhne	r0, [r4, #0]
 8000ab8:	2000      	moveq	r0, #0
 8000aba:	4582      	cmp	sl, r0
 8000abc:	d212      	bcs.n	8000ae4 <ai_platform_network_process+0x300>
 8000abe:	6860      	ldr	r0, [r4, #4]
 8000ac0:	b180      	cbz	r0, 8000ae4 <ai_platform_network_process+0x300>
 8000ac2:	f850 0008 	ldr.w	r0, [r0, r8]
 8000ac6:	b168      	cbz	r0, 8000ae4 <ai_platform_network_process+0x300>
 8000ac8:	68a1      	ldr	r1, [r4, #8]
 8000aca:	6980      	ldr	r0, [r0, #24]
 8000acc:	680a      	ldr	r2, [r1, #0]
 8000ace:	6801      	ldr	r1, [r0, #0]
 8000ad0:	eb02 0609 	add.w	r6, r2, r9
 8000ad4:	008a      	lsls	r2, r1, #2
 8000ad6:	d5d3      	bpl.n	8000a80 <ai_platform_network_process+0x29c>
 8000ad8:	68b2      	ldr	r2, [r6, #8]
 8000ada:	6871      	ldr	r1, [r6, #4]
 8000adc:	6880      	ldr	r0, [r0, #8]
 8000ade:	f00f f8c8 	bl	800fc72 <__aeabi_memcpy>
 8000ae2:	e7d5      	b.n	8000a90 <ai_platform_network_process+0x2ac>
 8000ae4:	46a2      	mov	sl, r4
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	f000 f936 	bl	8000d58 <ai_layers_forward_all>
 8000aec:	f04f 0800 	mov.w	r8, #0
 8000af0:	465c      	mov	r4, fp
 8000af2:	46c1      	mov	r9, r8
 8000af4:	46c3      	mov	fp, r8
 8000af6:	e017      	b.n	8000b28 <ai_platform_network_process+0x344>
 8000af8:	6871      	ldr	r1, [r6, #4]
 8000afa:	68b2      	ldr	r2, [r6, #8]
 8000afc:	4411      	add	r1, r2
 8000afe:	6071      	str	r1, [r6, #4]
 8000b00:	6832      	ldr	r2, [r6, #0]
 8000b02:	4291      	cmp	r1, r2
 8000b04:	d302      	bcc.n	8000b0c <ai_platform_network_process+0x328>
 8000b06:	68f1      	ldr	r1, [r6, #12]
 8000b08:	4249      	negs	r1, r1
 8000b0a:	4411      	add	r1, r2
 8000b0c:	6071      	str	r1, [r6, #4]
 8000b0e:	6882      	ldr	r2, [r0, #8]
 8000b10:	68c3      	ldr	r3, [r0, #12]
 8000b12:	1ad2      	subs	r2, r2, r3
 8000b14:	4411      	add	r1, r2
 8000b16:	6081      	str	r1, [r0, #8]
 8000b18:	6872      	ldr	r2, [r6, #4]
 8000b1a:	60c2      	str	r2, [r0, #12]
 8000b1c:	f10b 0b01 	add.w	fp, fp, #1
 8000b20:	f109 0910 	add.w	r9, r9, #16
 8000b24:	f108 0804 	add.w	r8, r8, #4
 8000b28:	2c00      	cmp	r4, #0
 8000b2a:	bf14      	ite	ne
 8000b2c:	8820      	ldrhne	r0, [r4, #0]
 8000b2e:	2000      	moveq	r0, #0
 8000b30:	4583      	cmp	fp, r0
 8000b32:	d21d      	bcs.n	8000b70 <ai_platform_network_process+0x38c>
 8000b34:	6860      	ldr	r0, [r4, #4]
 8000b36:	b1d8      	cbz	r0, 8000b70 <ai_platform_network_process+0x38c>
 8000b38:	f850 0008 	ldr.w	r0, [r0, r8]
 8000b3c:	b1c0      	cbz	r0, 8000b70 <ai_platform_network_process+0x38c>
 8000b3e:	68a1      	ldr	r1, [r4, #8]
 8000b40:	6980      	ldr	r0, [r0, #24]
 8000b42:	680a      	ldr	r2, [r1, #0]
 8000b44:	6801      	ldr	r1, [r0, #0]
 8000b46:	eb02 0609 	add.w	r6, r2, r9
 8000b4a:	008a      	lsls	r2, r1, #2
 8000b4c:	d5d4      	bpl.n	8000af8 <ai_platform_network_process+0x314>
 8000b4e:	6881      	ldr	r1, [r0, #8]
 8000b50:	68b2      	ldr	r2, [r6, #8]
 8000b52:	6870      	ldr	r0, [r6, #4]
 8000b54:	f00f f88d 	bl	800fc72 <__aeabi_memcpy>
 8000b58:	6870      	ldr	r0, [r6, #4]
 8000b5a:	68b1      	ldr	r1, [r6, #8]
 8000b5c:	4408      	add	r0, r1
 8000b5e:	6070      	str	r0, [r6, #4]
 8000b60:	6831      	ldr	r1, [r6, #0]
 8000b62:	4288      	cmp	r0, r1
 8000b64:	d302      	bcc.n	8000b6c <ai_platform_network_process+0x388>
 8000b66:	68f0      	ldr	r0, [r6, #12]
 8000b68:	4240      	negs	r0, r0
 8000b6a:	4408      	add	r0, r1
 8000b6c:	6070      	str	r0, [r6, #4]
 8000b6e:	e7d5      	b.n	8000b1c <ai_platform_network_process+0x338>
 8000b70:	8ae8      	ldrh	r0, [r5, #22]
 8000b72:	8aa9      	ldrh	r1, [r5, #20]
 8000b74:	1c40      	adds	r0, r0, #1
 8000b76:	82e8      	strh	r0, [r5, #22]
 8000b78:	46a3      	mov	fp, r4
 8000b7a:	b280      	uxth	r0, r0
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	f4ff af79 	bcc.w	8000a74 <ai_platform_network_process+0x290>
 8000b82:	8ae8      	ldrh	r0, [r5, #22]
 8000b84:	b003      	add	sp, #12
 8000b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000b8c <.text_18>:
 8000b8c:	e0002000 	.word	0xe0002000

08000b90 <.text_19>:
 8000b90:	40023000 	.word	0x40023000

08000b94 <.text_20>:
 8000b94:	f407a5c2 	.word	0xf407a5c2

08000b98 <.text_21>:
 8000b98:	b5e8b5cd 	.word	0xb5e8b5cd

08000b9c <.text_22>:
 8000b9c:	a1c00100 	.word	0xa1c00100

08000ba0 <.text_23>:
 8000ba0:	01030001 	.word	0x01030001

08000ba4 <.text_24>:
 8000ba4:	00000104 	.word	0x00000104

08000ba8 <.text_25>:
 8000ba8:	00000101 	.word	0x00000101

08000bac <.text_26>:
 8000bac:	00000301 	.word	0x00000301

08000bb0 <.text_27>:
 8000bb0:	00001030 	.word	0x00001030

08000bb4 <.text_28>:
 8000bb4:	00001001 	.word	0x00001001

08000bb8 <_platform_network_sanity_check{5}::signatures>:
 8000bb8:	84048403                                ....

08000bbc <.text_30>:
 8000bbc:	00001002 	.word	0x00001002

08000bc0 <.text_31>:
 8000bc0:	00001010 	.word	0x00001010

08000bc4 <.text_32>:
 8000bc4:	00000000 	.word	0x00000000

08000bc8 <.text_33>:
 8000bc8:	00001010 	.word	0x00001010

08000bcc <core_init>:
 8000bcc:	2001      	movs	r0, #1
 8000bce:	4770      	bx	lr

08000bd0 <core_get_error>:
 8000bd0:	4601      	mov	r1, r0
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	6808      	ldr	r0, [r1, #0]
 8000bd6:	600a      	str	r2, [r1, #0]
 8000bd8:	4770      	bx	lr

08000bda <core_set_error>:
 8000bda:	7803      	ldrb	r3, [r0, #0]
 8000bdc:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000be0:	d104      	bne.n	8000bec <core_set_error+0x12>
 8000be2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000be6:	6001      	str	r1, [r0, #0]
 8000be8:	2001      	movs	r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	2000      	movs	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <ai_layers_forward_layer>:
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	6921      	ldr	r1, [r4, #16]
 8000bf6:	4788      	blx	r1
 8000bf8:	68e0      	ldr	r0, [r4, #12]
 8000bfa:	42a0      	cmp	r0, r4
 8000bfc:	bf08      	it	eq
 8000bfe:	2000      	moveq	r0, #0
 8000c00:	bd10      	pop	{r4, pc}
	...

08000c04 <ai_check_custom_types>:
 8000c04:	b500      	push	{lr}
 8000c06:	b081      	sub	sp, #4
 8000c08:	b160      	cbz	r0, 8000c24 <ai_check_custom_types+0x20>
 8000c0a:	7801      	ldrb	r1, [r0, #0]
 8000c0c:	2903      	cmp	r1, #3
 8000c0e:	d109      	bne.n	8000c24 <ai_check_custom_types+0x20>
 8000c10:	f05f 0204 	movs.w	r2, #4
 8000c14:	a18d      	add	r1, pc, #564	; (adr r1, 8000e4c <ai_check_custom_types::ref_signatures>)
 8000c16:	f00f f859 	bl	800fccc <memcmp>
 8000c1a:	1e40      	subs	r0, r0, #1
 8000c1c:	4180      	sbcs	r0, r0
 8000c1e:	0fc0      	lsrs	r0, r0, #31
 8000c20:	b001      	add	sp, #4
 8000c22:	bd00      	pop	{pc}
 8000c24:	2000      	movs	r0, #0
 8000c26:	b001      	add	sp, #4
 8000c28:	bd00      	pop	{pc}
	...

08000c2c <ai_layer_type_name>:
 8000c2c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000c30:	1a81      	subs	r1, r0, r2
 8000c32:	2901      	cmp	r1, #1
 8000c34:	bf81      	itttt	hi
 8000c36:	1ec9      	subhi	r1, r1, #3
 8000c38:	290d      	cmphi	r1, #13
 8000c3a:	390f      	subhi	r1, #15
 8000c3c:	2909      	cmphi	r1, #9
 8000c3e:	f200 806b 	bhi.w	8000d18 <ai_layer_type_name+0xec>
 8000c42:	1a80      	subs	r0, r0, r2
 8000c44:	d033      	beq.n	8000cae <ai_layer_type_name+0x82>
 8000c46:	1e40      	subs	r0, r0, #1
 8000c48:	d033      	beq.n	8000cb2 <ai_layer_type_name+0x86>
 8000c4a:	1e80      	subs	r0, r0, #2
 8000c4c:	d033      	beq.n	8000cb6 <ai_layer_type_name+0x8a>
 8000c4e:	1e40      	subs	r0, r0, #1
 8000c50:	d034      	beq.n	8000cbc <ai_layer_type_name+0x90>
 8000c52:	1e40      	subs	r0, r0, #1
 8000c54:	d034      	beq.n	8000cc0 <ai_layer_type_name+0x94>
 8000c56:	1e40      	subs	r0, r0, #1
 8000c58:	d034      	beq.n	8000cc4 <ai_layer_type_name+0x98>
 8000c5a:	1e40      	subs	r0, r0, #1
 8000c5c:	d034      	beq.n	8000cc8 <ai_layer_type_name+0x9c>
 8000c5e:	1e40      	subs	r0, r0, #1
 8000c60:	d034      	beq.n	8000ccc <ai_layer_type_name+0xa0>
 8000c62:	1e40      	subs	r0, r0, #1
 8000c64:	d034      	beq.n	8000cd0 <ai_layer_type_name+0xa4>
 8000c66:	1e40      	subs	r0, r0, #1
 8000c68:	d034      	beq.n	8000cd4 <ai_layer_type_name+0xa8>
 8000c6a:	1e40      	subs	r0, r0, #1
 8000c6c:	d034      	beq.n	8000cd8 <ai_layer_type_name+0xac>
 8000c6e:	1e40      	subs	r0, r0, #1
 8000c70:	d034      	beq.n	8000cdc <ai_layer_type_name+0xb0>
 8000c72:	1e40      	subs	r0, r0, #1
 8000c74:	d034      	beq.n	8000ce0 <ai_layer_type_name+0xb4>
 8000c76:	1e40      	subs	r0, r0, #1
 8000c78:	d034      	beq.n	8000ce4 <ai_layer_type_name+0xb8>
 8000c7a:	1e40      	subs	r0, r0, #1
 8000c7c:	d034      	beq.n	8000ce8 <ai_layer_type_name+0xbc>
 8000c7e:	1e40      	subs	r0, r0, #1
 8000c80:	d034      	beq.n	8000cec <ai_layer_type_name+0xc0>
 8000c82:	1e80      	subs	r0, r0, #2
 8000c84:	d034      	beq.n	8000cf0 <ai_layer_type_name+0xc4>
 8000c86:	1e40      	subs	r0, r0, #1
 8000c88:	d034      	beq.n	8000cf4 <ai_layer_type_name+0xc8>
 8000c8a:	1e40      	subs	r0, r0, #1
 8000c8c:	d034      	beq.n	8000cf8 <ai_layer_type_name+0xcc>
 8000c8e:	1e40      	subs	r0, r0, #1
 8000c90:	d034      	beq.n	8000cfc <ai_layer_type_name+0xd0>
 8000c92:	1e40      	subs	r0, r0, #1
 8000c94:	d034      	beq.n	8000d00 <ai_layer_type_name+0xd4>
 8000c96:	1e40      	subs	r0, r0, #1
 8000c98:	d034      	beq.n	8000d04 <ai_layer_type_name+0xd8>
 8000c9a:	1e40      	subs	r0, r0, #1
 8000c9c:	d034      	beq.n	8000d08 <ai_layer_type_name+0xdc>
 8000c9e:	1e40      	subs	r0, r0, #1
 8000ca0:	d034      	beq.n	8000d0c <ai_layer_type_name+0xe0>
 8000ca2:	1e40      	subs	r0, r0, #1
 8000ca4:	d034      	beq.n	8000d10 <ai_layer_type_name+0xe4>
 8000ca6:	1e40      	subs	r0, r0, #1
 8000ca8:	d034      	beq.n	8000d14 <ai_layer_type_name+0xe8>
 8000caa:	a01c      	add	r0, pc, #112	; (adr r0, 8000d1c <.text_5>)
 8000cac:	4770      	bx	lr
 8000cae:	a01c      	add	r0, pc, #112	; (adr r0, 8000d20 <.text_6>)
 8000cb0:	4770      	bx	lr
 8000cb2:	a01c      	add	r0, pc, #112	; (adr r0, 8000d24 <.text_7>)
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	a031      	add	r0, pc, #196	; (adr r0, 8000d80 <.text_15>)
 8000cba:	4770      	bx	lr
 8000cbc:	a032      	add	r0, pc, #200	; (adr r0, 8000d88 <.text_16>)
 8000cbe:	4770      	bx	lr
 8000cc0:	a019      	add	r0, pc, #100	; (adr r0, 8000d28 <.text_8>)
 8000cc2:	4770      	bx	lr
 8000cc4:	a019      	add	r0, pc, #100	; (adr r0, 8000d2c <.text_9>)
 8000cc6:	4770      	bx	lr
 8000cc8:	a031      	add	r0, pc, #196	; (adr r0, 8000d90 <.text_17>)
 8000cca:	4770      	bx	lr
 8000ccc:	a018      	add	r0, pc, #96	; (adr r0, 8000d30 <.text_10>)
 8000cce:	4770      	bx	lr
 8000cd0:	a031      	add	r0, pc, #196	; (adr r0, 8000d98 <.text_18>)
 8000cd2:	4770      	bx	lr
 8000cd4:	a032      	add	r0, pc, #200	; (adr r0, 8000da0 <.text_19>)
 8000cd6:	4770      	bx	lr
 8000cd8:	a036      	add	r0, pc, #216	; (adr r0, 8000db4 <.text_20>)
 8000cda:	4770      	bx	lr
 8000cdc:	a038      	add	r0, pc, #224	; (adr r0, 8000dc0 <.text_21>)
 8000cde:	4770      	bx	lr
 8000ce0:	a014      	add	r0, pc, #80	; (adr r0, 8000d34 <.text_11>)
 8000ce2:	4770      	bx	lr
 8000ce4:	a038      	add	r0, pc, #224	; (adr r0, 8000dc8 <.text_22>)
 8000ce6:	4770      	bx	lr
 8000ce8:	a039      	add	r0, pc, #228	; (adr r0, 8000dd0 <.text_23>)
 8000cea:	4770      	bx	lr
 8000cec:	a03b      	add	r0, pc, #236	; (adr r0, 8000ddc <.text_24>)
 8000cee:	4770      	bx	lr
 8000cf0:	a03f      	add	r0, pc, #252	; (adr r0, 8000df0 <.text_25>)
 8000cf2:	4770      	bx	lr
 8000cf4:	a040      	add	r0, pc, #256	; (adr r0, 8000df8 <.text_26>)
 8000cf6:	4770      	bx	lr
 8000cf8:	a041      	add	r0, pc, #260	; (adr r0, 8000e00 <.text_27>)
 8000cfa:	4770      	bx	lr
 8000cfc:	a043      	add	r0, pc, #268	; (adr r0, 8000e0c <.text_28>)
 8000cfe:	4770      	bx	lr
 8000d00:	a044      	add	r0, pc, #272	; (adr r0, 8000e14 <.text_29>)
 8000d02:	4770      	bx	lr
 8000d04:	a045      	add	r0, pc, #276	; (adr r0, 8000e1c <.text_30>)
 8000d06:	4770      	bx	lr
 8000d08:	a00b      	add	r0, pc, #44	; (adr r0, 8000d38 <.text_12>)
 8000d0a:	4770      	bx	lr
 8000d0c:	a049      	add	r0, pc, #292	; (adr r0, 8000e34 <.text_31>)
 8000d0e:	4770      	bx	lr
 8000d10:	a04a      	add	r0, pc, #296	; (adr r0, 8000e3c <.text_32>)
 8000d12:	4770      	bx	lr
 8000d14:	a04b      	add	r0, pc, #300	; (adr r0, 8000e44 <.text_33>)
 8000d16:	4770      	bx	lr
 8000d18:	a000      	add	r0, pc, #0	; (adr r0, 8000d1c <.text_5>)
 8000d1a:	4770      	bx	lr

08000d1c <.text_5>:
 8000d1c:	00000000 	.word	0x00000000

08000d20 <.text_6>:
 8000d20:	00444441 	.word	0x00444441

08000d24 <.text_7>:
 8000d24:	00004e42 	.word	0x00004e42

08000d28 <.text_8>:
 8000d28:	00555247 	.word	0x00555247

08000d2c <.text_9>:
 8000d2c:	004e524c 	.word	0x004e524c

08000d30 <.text_10>:
 8000d30:	00004c4e 	.word	0x00004c4e

08000d34 <.text_11>:
 8000d34:	00004d53 	.word	0x00004d53

08000d38 <.text_12>:
 8000d38:	00444150 	.word	0x00444150

08000d3c <ai_layer_type_is_valid>:
 8000d3c:	f242 7111 	movw	r1, #10001	; 0x2711
 8000d40:	1a40      	subs	r0, r0, r1
 8000d42:	2801      	cmp	r0, #1
 8000d44:	bf81      	itttt	hi
 8000d46:	1ec0      	subhi	r0, r0, #3
 8000d48:	280d      	cmphi	r0, #13
 8000d4a:	380f      	subhi	r0, #15
 8000d4c:	2809      	cmphi	r0, #9
 8000d4e:	d801      	bhi.n	8000d54 <ai_layer_type_is_valid+0x18>
 8000d50:	2001      	movs	r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	2000      	movs	r0, #0
 8000d56:	4770      	bx	lr

08000d58 <ai_layers_forward_all>:
 8000d58:	b530      	push	{r4, r5, lr}
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	b081      	sub	sp, #4
 8000d5e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000d60:	b158      	cbz	r0, 8000d7a <ai_layers_forward_all+0x22>
 8000d62:	6560      	str	r0, [r4, #84]	; 0x54
 8000d64:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000d66:	6929      	ldr	r1, [r5, #16]
 8000d68:	4628      	mov	r0, r5
 8000d6a:	4788      	blx	r1
 8000d6c:	68e8      	ldr	r0, [r5, #12]
 8000d6e:	42a8      	cmp	r0, r5
 8000d70:	bf08      	it	eq
 8000d72:	2000      	moveq	r0, #0
 8000d74:	2800      	cmp	r0, #0
 8000d76:	6560      	str	r0, [r4, #84]	; 0x54
 8000d78:	d1f4      	bne.n	8000d64 <ai_layers_forward_all+0xc>
 8000d7a:	b001      	add	sp, #4
 8000d7c:	bd30      	pop	{r4, r5, pc}
	...

08000d80 <.text_15>:
 8000d80:	564e4f43 	.word	0x564e4f43
 8000d84:	00004432 	.word	0x00004432

08000d88 <.text_16>:
 8000d88:	534e4544 	.word	0x534e4544
 8000d8c:	0045      	.short	0x0045
	...

08000d90 <.text_17>:
 8000d90:	4d54534c 	.word	0x4d54534c
 8000d94:	00          	.byte	0x00
 8000d95:	00          	.byte	0x00
	...

08000d98 <.text_18>:
 8000d98:	4d524f4e 	.word	0x4d524f4e
 8000d9c:	00          	.byte	0x00
 8000d9d:	00          	.byte	0x00
	...

08000da0 <.text_19>:
 8000da0:	4954504f 	.word	0x4954504f
 8000da4:	455a494d 	.word	0x455a494d
 8000da8:	4f435f44 	.word	0x4f435f44
 8000dac:	4432564e 	.word	0x4432564e
 8000db0:	00          	.byte	0x00
 8000db1:	00          	.byte	0x00
	...

08000db4 <.text_20>:
 8000db4:	4e415254 	.word	0x4e415254
 8000db8:	534f5053 	.word	0x534f5053
 8000dbc:	0045      	.short	0x0045
	...

08000dc0 <.text_21>:
 8000dc0:	4c4f4f50 	.word	0x4c4f4f50
 8000dc4:	00          	.byte	0x00
 8000dc5:	00          	.byte	0x00
	...

08000dc8 <.text_22>:
 8000dc8:	494c5053 	.word	0x494c5053
 8000dcc:	0054      	.short	0x0054
	...

08000dd0 <.text_23>:
 8000dd0:	454d4954 	.word	0x454d4954
 8000dd4:	4c45445f 	.word	0x4c45445f
 8000dd8:	00005941 	.word	0x00005941

08000ddc <.text_24>:
 8000ddc:	454d4954 	.word	0x454d4954
 8000de0:	5349445f 	.word	0x5349445f
 8000de4:	42495254 	.word	0x42495254
 8000de8:	44455455 	.word	0x44455455
 8000dec:	00          	.byte	0x00
 8000ded:	00          	.byte	0x00
	...

08000df0 <.text_25>:
 8000df0:	434e4f43 	.word	0x434e4f43
 8000df4:	00005441 	.word	0x00005441

08000df8 <.text_26>:
 8000df8:	4d4d4547 	.word	0x4d4d4547
 8000dfc:	00          	.byte	0x00
 8000dfd:	00          	.byte	0x00
	...

08000e00 <.text_27>:
 8000e00:	41535055 	.word	0x41535055
 8000e04:	454c504d 	.word	0x454c504d
 8000e08:	00          	.byte	0x00
 8000e09:	00          	.byte	0x00
	...

08000e0c <.text_28>:
 8000e0c:	57544c45 	.word	0x57544c45
 8000e10:	00455349 	.word	0x00455349

08000e14 <.text_29>:
 8000e14:	454e4547 	.word	0x454e4547
 8000e18:	00434952 	.word	0x00434952

08000e1c <.text_30>:
 8000e1c:	54534e49 	.word	0x54534e49
 8000e20:	45434e41 	.word	0x45434e41
 8000e24:	4d524f4e 	.word	0x4d524f4e
 8000e28:	5a494c41 	.word	0x5a494c41
 8000e2c:	4f495441 	.word	0x4f495441
 8000e30:	004e      	.short	0x004e
	...

08000e34 <.text_31>:
 8000e34:	43494c53 	.word	0x43494c53
 8000e38:	0045      	.short	0x0045
	...

08000e3c <.text_32>:
 8000e3c:	454c4954 	.word	0x454c4954
 8000e40:	00          	.byte	0x00
 8000e41:	00          	.byte	0x00
	...

08000e44 <.text_33>:
 8000e44:	55444552 	.word	0x55444552
 8000e48:	00004543 	.word	0x00004543

08000e4c <ai_check_custom_types::ref_signatures>:
 8000e4c:	84048403                                ....

08000e50 <ai_conv2d_stripe_f32>:
 8000e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e54:	b098      	sub	sp, #96	; 0x60
 8000e56:	9825      	ldr	r0, [sp, #148]	; 0x94
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	f000 82cb 	beq.w	80013f4 <ai_conv2d_stripe_f32+0x5a4>
 8000e5e:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e62:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8000e66:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8000e68:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8000e6a:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8000e6c:	9004      	str	r0, [sp, #16]
 8000e6e:	fb07 6a0a 	mla	sl, r7, sl, r6
 8000e72:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000e74:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8000e78:	f8cd a014 	str.w	sl, [sp, #20]
 8000e7c:	1904      	adds	r4, r0, r4
 8000e7e:	1e64      	subs	r4, r4, #1
 8000e80:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000e82:	9100      	str	r1, [sp, #0]
 8000e84:	fb94 f6f6 	sdiv	r6, r4, r6
 8000e88:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000e8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8000e8e:	4346      	muls	r6, r0
 8000e90:	9616      	str	r6, [sp, #88]	; 0x58
 8000e92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e96:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8000e98:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e9a:	9306      	str	r3, [sp, #24]
 8000e9c:	4344      	muls	r4, r0
 8000e9e:	9415      	str	r4, [sp, #84]	; 0x54
 8000ea0:	437e      	muls	r6, r7
 8000ea2:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000ea6:	437c      	muls	r4, r7
 8000ea8:	9414      	str	r4, [sp, #80]	; 0x50
 8000eaa:	4346      	muls	r6, r0
 8000eac:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000eb0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000eb2:	960b      	str	r6, [sp, #44]	; 0x2c
 8000eb4:	1a24      	subs	r4, r4, r0
 8000eb6:	9413      	str	r4, [sp, #76]	; 0x4c
 8000eb8:	4604      	mov	r4, r0
 8000eba:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000ebc:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8000ebe:	4344      	muls	r4, r0
 8000ec0:	9412      	str	r4, [sp, #72]	; 0x48
 8000ec2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000ec4:	4344      	muls	r4, r0
 8000ec6:	9411      	str	r4, [sp, #68]	; 0x44
 8000ec8:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
 8000ecc:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000ed0:	fb14 f000 	smulbb	r0, r4, r0
 8000ed4:	900a      	str	r0, [sp, #40]	; 0x28
 8000ed6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000ed8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000eda:	fbb4 f0f0 	udiv	r0, r4, r0
 8000ede:	9010      	str	r0, [sp, #64]	; 0x40
 8000ee0:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000ee2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000ee4:	fbb4 f0f0 	udiv	r0, r4, r0
 8000ee8:	900f      	str	r0, [sp, #60]	; 0x3c
 8000eea:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000eec:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000eee:	fbb4 f0f0 	udiv	r0, r4, r0
 8000ef2:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000ef4:	900e      	str	r0, [sp, #56]	; 0x38
 8000ef6:	4374      	muls	r4, r6
 8000ef8:	940d      	str	r4, [sp, #52]	; 0x34
 8000efa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000efc:	1b2d      	subs	r5, r5, r4
 8000efe:	950c      	str	r5, [sp, #48]	; 0x30
 8000f00:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8000f02:	9924      	ldr	r1, [sp, #144]	; 0x90
 8000f04:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000f06:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8000f08:	427f      	negs	r7, r7
 8000f0a:	bfd8      	it	le
 8000f0c:	2700      	movle	r7, #0
 8000f0e:	1a09      	subs	r1, r1, r0
 8000f10:	4291      	cmp	r1, r2
 8000f12:	bf3d      	ittte	cc
 8000f14:	9824      	ldrcc	r0, [sp, #144]	; 0x90
 8000f16:	9e2c      	ldrcc	r6, [sp, #176]	; 0xb0
 8000f18:	1b86      	subcc	r6, r0, r6
 8000f1a:	4616      	movcs	r6, r2
 8000f1c:	9a05      	ldr	r2, [sp, #20]
 8000f1e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8000f20:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000f22:	18ba      	adds	r2, r7, r2
 8000f24:	434a      	muls	r2, r1
 8000f26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000f2a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8000f2c:	b900      	cbnz	r0, 8000f30 <ai_conv2d_stripe_f32+0xe0>
 8000f2e:	9800      	ldr	r0, [sp, #0]
 8000f30:	9001      	str	r0, [sp, #4]
 8000f32:	1bf6      	subs	r6, r6, r7
 8000f34:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f38:	2801      	cmp	r0, #1
 8000f3a:	bf04      	itt	eq
 8000f3c:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000f3e:	2801      	cmpeq	r0, #1
 8000f40:	f040 80a9 	bne.w	8001096 <ai_conv2d_stripe_f32+0x246>
 8000f44:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8000f46:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000f4a:	1ba4      	subs	r4, r4, r6
 8000f4c:	434c      	muls	r4, r1
 8000f4e:	1b80      	subs	r0, r0, r6
 8000f50:	4341      	muls	r1, r0
 8000f52:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8000f54:	1b40      	subs	r0, r0, r5
 8000f56:	fb00 fc03 	mul.w	ip, r0, r3
 8000f5a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f5c:	9b06      	ldr	r3, [sp, #24]
 8000f5e:	4407      	add	r7, r0
 8000f60:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000f62:	4347      	muls	r7, r0
 8000f64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000f68:	4370      	muls	r0, r6
 8000f6a:	9e01      	ldr	r6, [sp, #4]
 8000f6c:	9b00      	ldr	r3, [sp, #0]
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f72:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8000f76:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000f78:	bf0c      	ite	eq
 8000f7a:	eddf 0aaf 	vldreq	s1, [pc, #700]	; 8001238 <ai_conv2d_stripe_f32+0x3e8>
 8000f7e:	eef0 0a40 	vmovne.f32	s1, s0
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	f000 8222 	beq.w	80013cc <ai_conv2d_stripe_f32+0x57c>
 8000f88:	46b0      	mov	r8, r6
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	f8cd c008 	str.w	ip, [sp, #8]
 8000f92:	461d      	mov	r5, r3
 8000f94:	f8dd e000 	ldr.w	lr, [sp]
 8000f98:	9b00      	ldr	r3, [sp, #0]
 8000f9a:	463a      	mov	r2, r7
 8000f9c:	4682      	mov	sl, r0
 8000f9e:	f8cd 9004 	str.w	r9, [sp, #4]
 8000fa2:	46c4      	mov	ip, r8
 8000fa4:	f02a 0703 	bic.w	r7, sl, #3
 8000fa8:	ed9c 1a00 	vldr	s2, [ip]
 8000fac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000fb0:	2e00      	cmp	r6, #0
 8000fb2:	ee21 1a20 	vmul.f32	s2, s2, s1
 8000fb6:	dd61      	ble.n	800107c <ai_conv2d_stripe_f32+0x22c>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	2f00      	cmp	r7, #0
 8000fbc:	f04f 0900 	mov.w	r9, #0
 8000fc0:	f340 801f 	ble.w	8001002 <ai_conv2d_stripe_f32+0x1b2>
 8000fc4:	edd2 4a00 	vldr	s9, [r2]
 8000fc8:	ed98 5a00 	vldr	s10, [r8]
 8000fcc:	edd2 3a01 	vldr	s7, [r2, #4]
 8000fd0:	ed98 4a01 	vldr	s8, [r8, #4]
 8000fd4:	edd2 2a02 	vldr	s5, [r2, #8]
 8000fd8:	ed98 3a02 	vldr	s6, [r8, #8]
 8000fdc:	edd2 1a03 	vldr	s3, [r2, #12]
 8000fe0:	ed98 2a03 	vldr	s4, [r8, #12]
 8000fe4:	ee04 1a85 	vmla.f32	s2, s9, s10
 8000fe8:	ee03 1a84 	vmla.f32	s2, s7, s8
 8000fec:	3210      	adds	r2, #16
 8000fee:	f109 0904 	add.w	r9, r9, #4
 8000ff2:	ee02 1a83 	vmla.f32	s2, s5, s6
 8000ff6:	45b9      	cmp	r9, r7
 8000ff8:	ee01 1a82 	vmla.f32	s2, s3, s4
 8000ffc:	f108 0810 	add.w	r8, r8, #16
 8001000:	dbe0      	blt.n	8000fc4 <ai_conv2d_stripe_f32+0x174>
 8001002:	45d1      	cmp	r9, sl
 8001004:	f280 8034 	bge.w	8001070 <ai_conv2d_stripe_f32+0x220>
 8001008:	f109 0901 	add.w	r9, r9, #1
 800100c:	edd2 2a00 	vldr	s5, [r2]
 8001010:	edd8 1a00 	vldr	s3, [r8]
 8001014:	1d12      	adds	r2, r2, #4
 8001016:	45d1      	cmp	r9, sl
 8001018:	ee02 1aa1 	vmla.f32	s2, s5, s3
 800101c:	f108 0804 	add.w	r8, r8, #4
 8001020:	da26      	bge.n	8001070 <ai_conv2d_stripe_f32+0x220>
 8001022:	f109 0901 	add.w	r9, r9, #1
 8001026:	ed92 3a00 	vldr	s6, [r2]
 800102a:	ed98 2a00 	vldr	s4, [r8]
 800102e:	1d12      	adds	r2, r2, #4
 8001030:	45d1      	cmp	r9, sl
 8001032:	ee03 1a02 	vmla.f32	s2, s6, s4
 8001036:	f108 0804 	add.w	r8, r8, #4
 800103a:	da19      	bge.n	8001070 <ai_conv2d_stripe_f32+0x220>
 800103c:	f109 0901 	add.w	r9, r9, #1
 8001040:	edd2 2a00 	vldr	s5, [r2]
 8001044:	edd8 1a00 	vldr	s3, [r8]
 8001048:	1d12      	adds	r2, r2, #4
 800104a:	45d1      	cmp	r9, sl
 800104c:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001050:	f108 0804 	add.w	r8, r8, #4
 8001054:	da0c      	bge.n	8001070 <ai_conv2d_stripe_f32+0x220>
 8001056:	f109 0901 	add.w	r9, r9, #1
 800105a:	ed92 2a00 	vldr	s4, [r2]
 800105e:	ed98 3a00 	vldr	s6, [r8]
 8001062:	1d12      	adds	r2, r2, #4
 8001064:	45d1      	cmp	r9, sl
 8001066:	ee02 1a03 	vmla.f32	s2, s4, s6
 800106a:	f108 0804 	add.w	r8, r8, #4
 800106e:	dbcb      	blt.n	8001008 <ai_conv2d_stripe_f32+0x1b8>
 8001070:	1e40      	subs	r0, r0, #1
 8001072:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8001076:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800107a:	d19e      	bne.n	8000fba <ai_conv2d_stripe_f32+0x16a>
 800107c:	9802      	ldr	r0, [sp, #8]
 800107e:	ed8e 1a00 	vstr	s2, [lr]
 8001082:	1e6d      	subs	r5, r5, #1
 8001084:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8001088:	f10e 0e04 	add.w	lr, lr, #4
 800108c:	f10c 0c04 	add.w	ip, ip, #4
 8001090:	d18a      	bne.n	8000fa8 <ai_conv2d_stripe_f32+0x158>
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	e19a      	b.n	80013cc <ai_conv2d_stripe_f32+0x57c>
 8001096:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001098:	4288      	cmp	r0, r1
 800109a:	bf04      	itt	eq
 800109c:	980a      	ldreq	r0, [sp, #40]	; 0x28
 800109e:	2801      	cmpeq	r0, #1
 80010a0:	f040 80cc 	bne.w	800123c <ai_conv2d_stripe_f32+0x3ec>
 80010a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80010a6:	9b06      	ldr	r3, [sp, #24]
 80010a8:	9c00      	ldr	r4, [sp, #0]
 80010aa:	9002      	str	r0, [sp, #8]
 80010ac:	9824      	ldr	r0, [sp, #144]	; 0x90
 80010ae:	1b81      	subs	r1, r0, r6
 80010b0:	9822      	ldr	r0, [sp, #136]	; 0x88
 80010b2:	fb01 fa00 	mul.w	sl, r1, r0
 80010b6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80010b8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80010ba:	eba0 0c06 	sub.w	ip, r0, r6
 80010be:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80010c0:	1b40      	subs	r0, r0, r5
 80010c2:	4341      	muls	r1, r0
 80010c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80010c6:	183f      	adds	r7, r7, r0
 80010c8:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 80010cc:	9b01      	ldr	r3, [sp, #4]
 80010ce:	42a3      	cmp	r3, r4
 80010d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80010d2:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80010d6:	bf0c      	ite	eq
 80010d8:	eddf 0a57 	vldreq	s1, [pc, #348]	; 8001238 <ai_conv2d_stripe_f32+0x3e8>
 80010dc:	eef0 0a40 	vmovne.f32	s1, s0
 80010e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80010e2:	2400      	movs	r4, #0
 80010e4:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 80010e8:	4596      	cmp	lr, r2
 80010ea:	9203      	str	r2, [sp, #12]
 80010ec:	f080 816e 	bcs.w	80013cc <ai_conv2d_stripe_f32+0x57c>
 80010f0:	9b00      	ldr	r3, [sp, #0]
 80010f2:	9a02      	ldr	r2, [sp, #8]
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	f000 8097 	beq.w	8001228 <ai_conv2d_stripe_f32+0x3d8>
 80010fa:	9a01      	ldr	r2, [sp, #4]
 80010fc:	9500      	str	r5, [sp, #0]
 80010fe:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8001102:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8001106:	f8dd b008 	ldr.w	fp, [sp, #8]
 800110a:	9108      	str	r1, [sp, #32]
 800110c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001110:	4615      	mov	r5, r2
 8001112:	9a00      	ldr	r2, [sp, #0]
 8001114:	ed97 1a00 	vldr	s2, [r7]
 8001118:	9907      	ldr	r1, [sp, #28]
 800111a:	2a00      	cmp	r2, #0
 800111c:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001120:	f340 8072 	ble.w	8001208 <ai_conv2d_stripe_f32+0x3b8>
 8001124:	f026 0e03 	bic.w	lr, r6, #3
 8001128:	f1be 0f00 	cmp.w	lr, #0
 800112c:	f04f 0900 	mov.w	r9, #0
 8001130:	f340 8029 	ble.w	8001186 <ai_conv2d_stripe_f32+0x336>
 8001134:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001138:	edd0 1a00 	vldr	s3, [r0]
 800113c:	ed91 2a00 	vldr	s4, [r1]
 8001140:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001144:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001148:	edd0 1a01 	vldr	s3, [r0, #4]
 800114c:	ed91 2a00 	vldr	s4, [r1]
 8001150:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001154:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001158:	edd0 1a02 	vldr	s3, [r0, #8]
 800115c:	ed91 2a00 	vldr	s4, [r1]
 8001160:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001164:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001168:	f109 0904 	add.w	r9, r9, #4
 800116c:	edd0 1a03 	vldr	s3, [r0, #12]
 8001170:	ed91 2a00 	vldr	s4, [r1]
 8001174:	3010      	adds	r0, #16
 8001176:	45f1      	cmp	r9, lr
 8001178:	ee01 1a82 	vmla.f32	s2, s3, s4
 800117c:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001180:	dbda      	blt.n	8001138 <ai_conv2d_stripe_f32+0x2e8>
 8001182:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 8001186:	45b1      	cmp	r9, r6
 8001188:	f280 8038 	bge.w	80011fc <ai_conv2d_stripe_f32+0x3ac>
 800118c:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8001190:	f109 0901 	add.w	r9, r9, #1
 8001194:	edd0 1a00 	vldr	s3, [r0]
 8001198:	ed91 2a00 	vldr	s4, [r1]
 800119c:	1d00      	adds	r0, r0, #4
 800119e:	45b1      	cmp	r9, r6
 80011a0:	ee01 1a82 	vmla.f32	s2, s3, s4
 80011a4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80011a8:	da26      	bge.n	80011f8 <ai_conv2d_stripe_f32+0x3a8>
 80011aa:	f109 0901 	add.w	r9, r9, #1
 80011ae:	ed90 2a00 	vldr	s4, [r0]
 80011b2:	edd1 1a00 	vldr	s3, [r1]
 80011b6:	1d00      	adds	r0, r0, #4
 80011b8:	45b1      	cmp	r9, r6
 80011ba:	ee02 1a21 	vmla.f32	s2, s4, s3
 80011be:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80011c2:	da19      	bge.n	80011f8 <ai_conv2d_stripe_f32+0x3a8>
 80011c4:	f109 0901 	add.w	r9, r9, #1
 80011c8:	edd0 1a00 	vldr	s3, [r0]
 80011cc:	ed91 2a00 	vldr	s4, [r1]
 80011d0:	1d00      	adds	r0, r0, #4
 80011d2:	45b1      	cmp	r9, r6
 80011d4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80011d8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80011dc:	da0c      	bge.n	80011f8 <ai_conv2d_stripe_f32+0x3a8>
 80011de:	f109 0901 	add.w	r9, r9, #1
 80011e2:	ed90 2a00 	vldr	s4, [r0]
 80011e6:	edd1 1a00 	vldr	s3, [r1]
 80011ea:	1d00      	adds	r0, r0, #4
 80011ec:	45b1      	cmp	r9, r6
 80011ee:	ee02 1a21 	vmla.f32	s2, s4, s3
 80011f2:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80011f6:	dbcb      	blt.n	8001190 <ai_conv2d_stripe_f32+0x340>
 80011f8:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 80011fc:	1e52      	subs	r2, r2, #1
 80011fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8001202:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001206:	d18d      	bne.n	8001124 <ai_conv2d_stripe_f32+0x2d4>
 8001208:	9908      	ldr	r1, [sp, #32]
 800120a:	ed85 1a00 	vstr	s2, [r5]
 800120e:	1c64      	adds	r4, r4, #1
 8001210:	1d2d      	adds	r5, r5, #4
 8001212:	1d3f      	adds	r7, r7, #4
 8001214:	f1bb 0b01 	subs.w	fp, fp, #1
 8001218:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800121c:	f47f af79 	bne.w	8001112 <ai_conv2d_stripe_f32+0x2c2>
 8001220:	9d00      	ldr	r5, [sp, #0]
 8001222:	9908      	ldr	r1, [sp, #32]
 8001224:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8001228:	9a03      	ldr	r2, [sp, #12]
 800122a:	f10e 0e04 	add.w	lr, lr, #4
 800122e:	4596      	cmp	lr, r2
 8001230:	f4bf af2f 	bcs.w	8001092 <ai_conv2d_stripe_f32+0x242>
 8001234:	e75d      	b.n	80010f2 <ai_conv2d_stripe_f32+0x2a2>
 8001236:	bf00      	nop
 8001238:	00000000 	.word	0x00000000
 800123c:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 8001240:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8001244:	4608      	mov	r0, r1
 8001246:	1bcb      	subs	r3, r1, r7
 8001248:	fb97 f4f0 	sdiv	r4, r7, r0
 800124c:	fb00 3004 	mla	r0, r0, r4, r3
 8001250:	fb90 faf1 	sdiv	sl, r0, r1
 8001254:	fb01 0a1a 	mls	sl, r1, sl, r0
 8001258:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 800125c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800125e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8001260:	fb90 f0f3 	sdiv	r0, r0, r3
 8001264:	fb03 4000 	mla	r0, r3, r0, r4
 8001268:	1876      	adds	r6, r6, r1
 800126a:	fb90 fbf3 	sdiv	fp, r0, r3
 800126e:	1e76      	subs	r6, r6, #1
 8001270:	187f      	adds	r7, r7, r1
 8001272:	fb03 0b1b 	mls	fp, r3, fp, r0
 8001276:	eba6 060a 	sub.w	r6, r6, sl
 800127a:	eba5 050b 	sub.w	r5, r5, fp
 800127e:	1e7f      	subs	r7, r7, #1
 8001280:	fb96 f0f1 	sdiv	r0, r6, r1
 8001284:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001286:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001288:	195d      	adds	r5, r3, r5
 800128a:	1e6d      	subs	r5, r5, #1
 800128c:	fb00 9911 	mls	r9, r0, r1, r9
 8001290:	fb97 f1f1 	sdiv	r1, r7, r1
 8001294:	fb95 fcf3 	sdiv	ip, r5, r3
 8001298:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800129a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800129c:	9509      	str	r5, [sp, #36]	; 0x24
 800129e:	eba6 060c 	sub.w	r6, r6, ip
 80012a2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80012a4:	1a2d      	subs	r5, r5, r0
 80012a6:	fb05 f803 	mul.w	r8, r5, r3
 80012aa:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80012ac:	435d      	muls	r5, r3
 80012ae:	fb06 fe05 	mul.w	lr, r6, r5
 80012b2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80012b4:	9e06      	ldr	r6, [sp, #24]
 80012b6:	194d      	adds	r5, r1, r5
 80012b8:	fb04 f909 	mul.w	r9, r4, r9
 80012bc:	435d      	muls	r5, r3
 80012be:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80012c0:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 80012c4:	9d01      	ldr	r5, [sp, #4]
 80012c6:	9e00      	ldr	r6, [sp, #0]
 80012c8:	1ae4      	subs	r4, r4, r3
 80012ca:	42b5      	cmp	r5, r6
 80012cc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80012ce:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80012d0:	445d      	add	r5, fp
 80012d2:	fb06 aa05 	mla	sl, r6, r5, sl
 80012d6:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80012d8:	fb0a f505 	mul.w	r5, sl, r5
 80012dc:	bf0c      	ite	eq
 80012de:	eddf 0a9e 	vldreq	s1, [pc, #632]	; 8001558 <.text_5>
 80012e2:	eef0 0a40 	vmovne.f32	s1, s0
 80012e6:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 80012ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80012ec:	2500      	movs	r5, #0
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	d06c      	beq.n	80013cc <ai_conv2d_stripe_f32+0x57c>
 80012f2:	9202      	str	r2, [sp, #8]
 80012f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	d062      	beq.n	80013c0 <ai_conv2d_stripe_f32+0x570>
 80012fa:	9a01      	ldr	r2, [sp, #4]
 80012fc:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8001300:	9a00      	ldr	r2, [sp, #0]
 8001302:	f8cd c00c 	str.w	ip, [sp, #12]
 8001306:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800130a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800130c:	f8cd e020 	str.w	lr, [sp, #32]
 8001310:	f8cd 701c 	str.w	r7, [sp, #28]
 8001314:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001318:	ed96 1a00 	vldr	s2, [r6]
 800131c:	9f07      	ldr	r7, [sp, #28]
 800131e:	f1be 0f00 	cmp.w	lr, #0
 8001322:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001326:	dd3b      	ble.n	80013a0 <ai_conv2d_stripe_f32+0x550>
 8001328:	2800      	cmp	r0, #0
 800132a:	dd32      	ble.n	8001392 <ai_conv2d_stripe_f32+0x542>
 800132c:	ea4f 0c00 	mov.w	ip, r0
 8001330:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 8001334:	455f      	cmp	r7, fp
 8001336:	d227      	bcs.n	8001388 <ai_conv2d_stripe_f32+0x538>
 8001338:	edd1 2a00 	vldr	s5, [r1]
 800133c:	edd7 1a00 	vldr	s3, [r7]
 8001340:	1d09      	adds	r1, r1, #4
 8001342:	1d3f      	adds	r7, r7, #4
 8001344:	455f      	cmp	r7, fp
 8001346:	ee02 1aa1 	vmla.f32	s2, s5, s3
 800134a:	d21d      	bcs.n	8001388 <ai_conv2d_stripe_f32+0x538>
 800134c:	ed91 3a00 	vldr	s6, [r1]
 8001350:	ed97 2a00 	vldr	s4, [r7]
 8001354:	1d09      	adds	r1, r1, #4
 8001356:	1d3f      	adds	r7, r7, #4
 8001358:	455f      	cmp	r7, fp
 800135a:	ee03 1a02 	vmla.f32	s2, s6, s4
 800135e:	d213      	bcs.n	8001388 <ai_conv2d_stripe_f32+0x538>
 8001360:	edd1 2a00 	vldr	s5, [r1]
 8001364:	edd7 1a00 	vldr	s3, [r7]
 8001368:	1d09      	adds	r1, r1, #4
 800136a:	1d3f      	adds	r7, r7, #4
 800136c:	455f      	cmp	r7, fp
 800136e:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001372:	d209      	bcs.n	8001388 <ai_conv2d_stripe_f32+0x538>
 8001374:	ed91 2a00 	vldr	s4, [r1]
 8001378:	ed97 3a00 	vldr	s6, [r7]
 800137c:	1d09      	adds	r1, r1, #4
 800137e:	1d3f      	adds	r7, r7, #4
 8001380:	455f      	cmp	r7, fp
 8001382:	ee02 1a03 	vmla.f32	s2, s4, s6
 8001386:	d3d7      	bcc.n	8001338 <ai_conv2d_stripe_f32+0x4e8>
 8001388:	f1bc 0c01 	subs.w	ip, ip, #1
 800138c:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 8001390:	d1ce      	bne.n	8001330 <ai_conv2d_stripe_f32+0x4e0>
 8001392:	f1be 0e01 	subs.w	lr, lr, #1
 8001396:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 800139a:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800139e:	d1c3      	bne.n	8001328 <ai_conv2d_stripe_f32+0x4d8>
 80013a0:	9f08      	ldr	r7, [sp, #32]
 80013a2:	1c6d      	adds	r5, r5, #1
 80013a4:	1d36      	adds	r6, r6, #4
 80013a6:	ed8a 1a00 	vstr	s2, [sl]
 80013aa:	1e52      	subs	r2, r2, #1
 80013ac:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 80013b0:	f10a 0a04 	add.w	sl, sl, #4
 80013b4:	d1ae      	bne.n	8001314 <ai_conv2d_stripe_f32+0x4c4>
 80013b6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80013ba:	f8dd e020 	ldr.w	lr, [sp, #32]
 80013be:	9f07      	ldr	r7, [sp, #28]
 80013c0:	9a02      	ldr	r2, [sp, #8]
 80013c2:	1e52      	subs	r2, r2, #1
 80013c4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80013c8:	9202      	str	r2, [sp, #8]
 80013ca:	d193      	bne.n	80012f4 <ai_conv2d_stripe_f32+0x4a4>
 80013cc:	9800      	ldr	r0, [sp, #0]
 80013ce:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80013d0:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80013d4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80013d6:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 80013da:	9200      	str	r2, [sp, #0]
 80013dc:	1841      	adds	r1, r0, r1
 80013de:	912c      	str	r1, [sp, #176]	; 0xb0
 80013e0:	9805      	ldr	r0, [sp, #20]
 80013e2:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 80013e6:	1841      	adds	r1, r0, r1
 80013e8:	9804      	ldr	r0, [sp, #16]
 80013ea:	9105      	str	r1, [sp, #20]
 80013ec:	1e40      	subs	r0, r0, #1
 80013ee:	9004      	str	r0, [sp, #16]
 80013f0:	f47f ad86 	bne.w	8000f00 <ai_conv2d_stripe_f32+0xb0>
 80013f4:	b018      	add	sp, #96	; 0x60
 80013f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080013fa <func_dummy>:
 80013fa:	4770      	bx	lr

080013fc <ai_dict8_dot_array_f32>:
 80013fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001400:	b081      	sub	sp, #4
 8001402:	4682      	mov	sl, r0
 8001404:	ed2d 8b02 	vpush	{d8}
 8001408:	4615      	mov	r5, r2
 800140a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800140c:	08e0      	lsrs	r0, r4, #3
 800140e:	460f      	mov	r7, r1
 8001410:	461a      	mov	r2, r3
 8001412:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001558 <.text_5>
 8001416:	d052      	beq.n	80014be <ai_dict8_dot_array_f32+0xc2>
 8001418:	4629      	mov	r1, r5
 800141a:	783b      	ldrb	r3, [r7, #0]
 800141c:	787d      	ldrb	r5, [r7, #1]
 800141e:	78be      	ldrb	r6, [r7, #2]
 8001420:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001424:	ed92 8a00 	vldr	s16, [r2]
 8001428:	ed92 7a01 	vldr	s14, [r2, #4]
 800142c:	f817 cf04 	ldrb.w	ip, [r7, #4]!
 8001430:	ed92 6a02 	vldr	s12, [r2, #8]
 8001434:	ed92 5a03 	vldr	s10, [r2, #12]
 8001438:	f897 e001 	ldrb.w	lr, [r7, #1]
 800143c:	f897 8002 	ldrb.w	r8, [r7, #2]
 8001440:	f897 9003 	ldrb.w	r9, [r7, #3]
 8001444:	ed92 4a04 	vldr	s8, [r2, #16]
 8001448:	ed92 3a05 	vldr	s6, [r2, #20]
 800144c:	ed92 2a06 	vldr	s4, [r2, #24]
 8001450:	ed92 1a07 	vldr	s2, [r2, #28]
 8001454:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001458:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800145c:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	edd5 6a00 	vldr	s13, [r5]
 8001468:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 800146c:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001470:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8001474:	edd6 5a00 	vldr	s11, [r6]
 8001478:	eddb 4a00 	vldr	s9, [fp]
 800147c:	eddc 3a00 	vldr	s7, [ip]
 8001480:	ee06 0a87 	vmla.f32	s0, s13, s14
 8001484:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8001488:	ee05 0a86 	vmla.f32	s0, s11, s12
 800148c:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 8001490:	ee04 0a85 	vmla.f32	s0, s9, s10
 8001494:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 8001498:	edde 2a00 	vldr	s5, [lr]
 800149c:	edd8 1a00 	vldr	s3, [r8]
 80014a0:	edd9 0a00 	vldr	s1, [r9]
 80014a4:	ee03 0a84 	vmla.f32	s0, s7, s8
 80014a8:	1d3f      	adds	r7, r7, #4
 80014aa:	ee02 0a83 	vmla.f32	s0, s5, s6
 80014ae:	3220      	adds	r2, #32
 80014b0:	ee01 0a82 	vmla.f32	s0, s3, s4
 80014b4:	1e40      	subs	r0, r0, #1
 80014b6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014ba:	d1ae      	bne.n	800141a <ai_dict8_dot_array_f32+0x1e>
 80014bc:	460d      	mov	r5, r1
 80014be:	f014 0007 	ands.w	r0, r4, #7
 80014c2:	d03e      	beq.n	8001542 <ai_dict8_dot_array_f32+0x146>
 80014c4:	f010 0103 	ands.w	r1, r0, #3
 80014c8:	f000 800d 	beq.w	80014e6 <ai_dict8_dot_array_f32+0xea>
 80014cc:	f817 3b01 	ldrb.w	r3, [r7], #1
 80014d0:	ed92 1a00 	vldr	s2, [r2]
 80014d4:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 80014d8:	1d12      	adds	r2, r2, #4
 80014da:	edd6 0a00 	vldr	s1, [r6]
 80014de:	1e49      	subs	r1, r1, #1
 80014e0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014e4:	d1f2      	bne.n	80014cc <ai_dict8_dot_array_f32+0xd0>
 80014e6:	0880      	lsrs	r0, r0, #2
 80014e8:	f000 802b 	beq.w	8001542 <ai_dict8_dot_array_f32+0x146>
 80014ec:	f817 3b01 	ldrb.w	r3, [r7], #1
 80014f0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80014f4:	ed92 1a00 	vldr	s2, [r2]
 80014f8:	edd2 0a01 	vldr	s1, [r2, #4]
 80014fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001500:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001504:	ed93 2a00 	vldr	s4, [r3]
 8001508:	edd1 1a00 	vldr	s3, [r1]
 800150c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001510:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001514:	ee02 0a01 	vmla.f32	s0, s4, s2
 8001518:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800151c:	ee01 0aa0 	vmla.f32	s0, s3, s1
 8001520:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001524:	edd2 0a02 	vldr	s1, [r2, #8]
 8001528:	ed91 2a00 	vldr	s4, [r1]
 800152c:	ed92 1a03 	vldr	s2, [r2, #12]
 8001530:	edd3 1a00 	vldr	s3, [r3]
 8001534:	3210      	adds	r2, #16
 8001536:	ee02 0a20 	vmla.f32	s0, s4, s1
 800153a:	1e40      	subs	r0, r0, #1
 800153c:	ee01 0a81 	vmla.f32	s0, s3, s2
 8001540:	d1d4      	bne.n	80014ec <ai_dict8_dot_array_f32+0xf0>
 8001542:	edda 0a00 	vldr	s1, [sl]
 8001546:	ee30 0a80 	vadd.f32	s0, s1, s0
 800154a:	ed8a 0a00 	vstr	s0, [sl]
 800154e:	ecbd 8b02 	vpop	{d8}
 8001552:	b001      	add	sp, #4
 8001554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001558 <.text_5>:
 8001558:	00000000 	.word	0x00000000

0800155c <ai_dict4_dot_array_f32>:
 800155c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001560:	ed2d 8b02 	vpush	{d8}
 8001564:	4680      	mov	r8, r0
 8001566:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800156a:	ea4f 005c 	mov.w	r0, ip, lsr #1
 800156e:	461e      	mov	r6, r3
 8001570:	0040      	lsls	r0, r0, #1
 8001572:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 8001576:	460c      	mov	r4, r1
 8001578:	4615      	mov	r5, r2
 800157a:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800157e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80016c0 <.text_7>
 8001582:	d053      	beq.n	800162c <ai_dict4_dot_array_f32+0xd0>
 8001584:	ed96 8a00 	vldr	s16, [r6]
 8001588:	ed96 7a01 	vldr	s14, [r6, #4]
 800158c:	ed96 6a02 	vldr	s12, [r6, #8]
 8001590:	ed96 5a03 	vldr	s10, [r6, #12]
 8001594:	7820      	ldrb	r0, [r4, #0]
 8001596:	7861      	ldrb	r1, [r4, #1]
 8001598:	78a2      	ldrb	r2, [r4, #2]
 800159a:	78e7      	ldrb	r7, [r4, #3]
 800159c:	ed96 4a04 	vldr	s8, [r6, #16]
 80015a0:	ed96 3a05 	vldr	s6, [r6, #20]
 80015a4:	ed96 2a06 	vldr	s4, [r6, #24]
 80015a8:	ed96 1a07 	vldr	s2, [r6, #28]
 80015ac:	f007 090f 	and.w	r9, r7, #15
 80015b0:	093f      	lsrs	r7, r7, #4
 80015b2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80015b6:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 80015ba:	edd7 1a00 	vldr	s3, [r7]
 80015be:	edda 0a00 	vldr	s1, [sl]
 80015c2:	f002 070f 	and.w	r7, r2, #15
 80015c6:	0912      	lsrs	r2, r2, #4
 80015c8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80015cc:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80015d0:	edd2 3a00 	vldr	s7, [r2]
 80015d4:	edd7 2a00 	vldr	s5, [r7]
 80015d8:	f001 020f 	and.w	r2, r1, #15
 80015dc:	0909      	lsrs	r1, r1, #4
 80015de:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80015e2:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 80015e6:	edd1 5a00 	vldr	s11, [r1]
 80015ea:	edd7 4a00 	vldr	s9, [r7]
 80015ee:	f000 010f 	and.w	r1, r0, #15
 80015f2:	0900      	lsrs	r0, r0, #4
 80015f4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015f8:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015fc:	edd0 7a00 	vldr	s15, [r0]
 8001600:	edd2 6a00 	vldr	s13, [r2]
 8001604:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001608:	ee06 0a87 	vmla.f32	s0, s13, s14
 800160c:	ee05 0a86 	vmla.f32	s0, s11, s12
 8001610:	ee04 0a85 	vmla.f32	s0, s9, s10
 8001614:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001618:	1d24      	adds	r4, r4, #4
 800161a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800161e:	3620      	adds	r6, #32
 8001620:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001624:	1e5b      	subs	r3, r3, #1
 8001626:	ee00 0a81 	vmla.f32	s0, s1, s2
 800162a:	d1ab      	bne.n	8001584 <ai_dict4_dot_array_f32+0x28>
 800162c:	4576      	cmp	r6, lr
 800162e:	d22f      	bcs.n	8001690 <ai_dict4_dot_array_f32+0x134>
 8001630:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001634:	edd6 1a00 	vldr	s3, [r6]
 8001638:	edd6 0a01 	vldr	s1, [r6, #4]
 800163c:	f000 010f 	and.w	r1, r0, #15
 8001640:	0900      	lsrs	r0, r0, #4
 8001642:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001646:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800164a:	ed90 2a00 	vldr	s4, [r0]
 800164e:	ed92 1a00 	vldr	s2, [r2]
 8001652:	3608      	adds	r6, #8
 8001654:	ee02 0a21 	vmla.f32	s0, s4, s3
 8001658:	4576      	cmp	r6, lr
 800165a:	ee01 0a20 	vmla.f32	s0, s2, s1
 800165e:	d217      	bcs.n	8001690 <ai_dict4_dot_array_f32+0x134>
 8001660:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001664:	ed96 1a00 	vldr	s2, [r6]
 8001668:	ed96 2a01 	vldr	s4, [r6, #4]
 800166c:	f000 010f 	and.w	r1, r0, #15
 8001670:	0900      	lsrs	r0, r0, #4
 8001672:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001676:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800167a:	edd0 1a00 	vldr	s3, [r0]
 800167e:	edd2 0a00 	vldr	s1, [r2]
 8001682:	3608      	adds	r6, #8
 8001684:	ee01 0a81 	vmla.f32	s0, s3, s2
 8001688:	4576      	cmp	r6, lr
 800168a:	ee00 0a82 	vmla.f32	s0, s1, s4
 800168e:	d3cf      	bcc.n	8001630 <ai_dict4_dot_array_f32+0xd4>
 8001690:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 8001694:	d509      	bpl.n	80016aa <ai_dict4_dot_array_f32+0x14e>
 8001696:	7821      	ldrb	r1, [r4, #0]
 8001698:	ed96 1a00 	vldr	s2, [r6]
 800169c:	0909      	lsrs	r1, r1, #4
 800169e:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 80016a2:	edd0 0a00 	vldr	s1, [r0]
 80016a6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80016aa:	edd8 1a00 	vldr	s3, [r8]
 80016ae:	ee31 0a80 	vadd.f32	s0, s3, s0
 80016b2:	ed88 0a00 	vstr	s0, [r8]
 80016b6:	ecbd 8b02 	vpop	{d8}
 80016ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080016c0 <.text_7>:
 80016c0:	00000000 	.word	0x00000000

080016c4 <ai_dict_decompress_f32>:
 80016c4:	b4f0      	push	{r4, r5, r6, r7}
 80016c6:	4604      	mov	r4, r0
 80016c8:	9805      	ldr	r0, [sp, #20]
 80016ca:	9e04      	ldr	r6, [sp, #16]
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80016d2:	d003      	beq.n	80016dc <ai_dict_decompress_f32+0x18>
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d03e      	beq.n	8001756 <ai_dict_decompress_f32+0x92>
 80016d8:	bcf0      	pop	{r4, r5, r6, r7}
 80016da:	4770      	bx	lr
 80016dc:	42ac      	cmp	r4, r5
 80016de:	d259      	bcs.n	8001794 <ai_dict_decompress_f32+0xd0>
 80016e0:	0870      	lsrs	r0, r6, #1
 80016e2:	d02e      	beq.n	8001742 <ai_dict_decompress_f32+0x7e>
 80016e4:	07c3      	lsls	r3, r0, #31
 80016e6:	d50c      	bpl.n	8001702 <ai_dict_decompress_f32+0x3e>
 80016e8:	780f      	ldrb	r7, [r1, #0]
 80016ea:	093f      	lsrs	r7, r7, #4
 80016ec:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80016f0:	6023      	str	r3, [r4, #0]
 80016f2:	f811 7b01 	ldrb.w	r7, [r1], #1
 80016f6:	f007 070f 	and.w	r7, r7, #15
 80016fa:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80016fe:	6063      	str	r3, [r4, #4]
 8001700:	3408      	adds	r4, #8
 8001702:	0840      	lsrs	r0, r0, #1
 8001704:	d01d      	beq.n	8001742 <ai_dict_decompress_f32+0x7e>
 8001706:	780b      	ldrb	r3, [r1, #0]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800170e:	6027      	str	r7, [r4, #0]
 8001710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800171c:	6067      	str	r7, [r4, #4]
 800171e:	f104 0308 	add.w	r3, r4, #8
 8001722:	780c      	ldrb	r4, [r1, #0]
 8001724:	0924      	lsrs	r4, r4, #4
 8001726:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800172a:	601f      	str	r7, [r3, #0]
 800172c:	1e40      	subs	r0, r0, #1
 800172e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001732:	f004 040f 	and.w	r4, r4, #15
 8001736:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800173a:	605f      	str	r7, [r3, #4]
 800173c:	f103 0408 	add.w	r4, r3, #8
 8001740:	d1e1      	bne.n	8001706 <ai_dict_decompress_f32+0x42>
 8001742:	07f0      	lsls	r0, r6, #31
 8001744:	d5ca      	bpl.n	80016dc <ai_dict_decompress_f32+0x18>
 8001746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001750:	f844 0b04 	str.w	r0, [r4], #4
 8001754:	e7c2      	b.n	80016dc <ai_dict_decompress_f32+0x18>
 8001756:	42ac      	cmp	r4, r5
 8001758:	d21c      	bcs.n	8001794 <ai_dict_decompress_f32+0xd0>
 800175a:	7808      	ldrb	r0, [r1, #0]
 800175c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001760:	6020      	str	r0, [r4, #0]
 8001762:	1d20      	adds	r0, r4, #4
 8001764:	42a8      	cmp	r0, r5
 8001766:	bf3f      	itttt	cc
 8001768:	784c      	ldrbcc	r4, [r1, #1]
 800176a:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 800176e:	f840 3b04 	strcc.w	r3, [r0], #4
 8001772:	42a8      	cmpcc	r0, r5
 8001774:	d20e      	bcs.n	8001794 <ai_dict_decompress_f32+0xd0>
 8001776:	788b      	ldrb	r3, [r1, #2]
 8001778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177c:	f840 3b04 	str.w	r3, [r0], #4
 8001780:	42a8      	cmp	r0, r5
 8001782:	d207      	bcs.n	8001794 <ai_dict_decompress_f32+0xd0>
 8001784:	78cc      	ldrb	r4, [r1, #3]
 8001786:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800178a:	1d09      	adds	r1, r1, #4
 800178c:	1d04      	adds	r4, r0, #4
 800178e:	42ac      	cmp	r4, r5
 8001790:	6003      	str	r3, [r0, #0]
 8001792:	d3e2      	bcc.n	800175a <ai_dict_decompress_f32+0x96>
 8001794:	bcf0      	pop	{r4, r5, r6, r7}
 8001796:	4770      	bx	lr

08001798 <forward_conv2d>:
 8001798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800179c:	4605      	mov	r5, r0
 800179e:	b0a9      	sub	sp, #164	; 0xa4
 80017a0:	696b      	ldr	r3, [r5, #20]
 80017a2:	8819      	ldrh	r1, [r3, #0]
 80017a4:	2900      	cmp	r1, #0
 80017a6:	bf1a      	itte	ne
 80017a8:	6858      	ldrne	r0, [r3, #4]
 80017aa:	1d00      	addne	r0, r0, #4
 80017ac:	2004      	moveq	r0, #4
 80017ae:	6800      	ldr	r0, [r0, #0]
 80017b0:	2800      	cmp	r0, #0
 80017b2:	bf14      	ite	ne
 80017b4:	6802      	ldrne	r2, [r0, #0]
 80017b6:	2200      	moveq	r2, #0
 80017b8:	2901      	cmp	r1, #1
 80017ba:	bfc6      	itte	gt
 80017bc:	6858      	ldrgt	r0, [r3, #4]
 80017be:	3010      	addgt	r0, #16
 80017c0:	2004      	movle	r0, #4
 80017c2:	6800      	ldr	r0, [r0, #0]
 80017c4:	2800      	cmp	r0, #0
 80017c6:	bf14      	ite	ne
 80017c8:	f8d0 a000 	ldrne.w	sl, [r0]
 80017cc:	f04f 0a00 	moveq.w	sl, #0
 80017d0:	2902      	cmp	r1, #2
 80017d2:	bfc6      	itte	gt
 80017d4:	6858      	ldrgt	r0, [r3, #4]
 80017d6:	f100 041c 	addgt.w	r4, r0, #28
 80017da:	2404      	movle	r4, #4
 80017dc:	6820      	ldr	r0, [r4, #0]
 80017de:	2800      	cmp	r0, #0
 80017e0:	bf14      	ite	ne
 80017e2:	6806      	ldrne	r6, [r0, #0]
 80017e4:	2600      	moveq	r6, #0
 80017e6:	2902      	cmp	r1, #2
 80017e8:	dd0a      	ble.n	8001800 <forward_conv2d+0x68>
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f113 0118 	adds.w	r1, r3, #24
 80017f0:	d006      	beq.n	8001800 <forward_conv2d+0x68>
 80017f2:	8b19      	ldrh	r1, [r3, #24]
 80017f4:	2901      	cmp	r1, #1
 80017f6:	dd03      	ble.n	8001800 <forward_conv2d+0x68>
 80017f8:	69d9      	ldr	r1, [r3, #28]
 80017fa:	b109      	cbz	r1, 8001800 <forward_conv2d+0x68>
 80017fc:	6849      	ldr	r1, [r1, #4]
 80017fe:	e000      	b.n	8001802 <forward_conv2d+0x6a>
 8001800:	2100      	movs	r1, #0
 8001802:	b100      	cbz	r0, 8001806 <forward_conv2d+0x6e>
 8001804:	6880      	ldr	r0, [r0, #8]
 8001806:	68d7      	ldr	r7, [r2, #12]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	931b      	str	r3, [sp, #108]	; 0x6c
 800180c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001810:	685c      	ldr	r4, [r3, #4]
 8001812:	9404      	str	r4, [sp, #16]
 8001814:	68dc      	ldr	r4, [r3, #12]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	9314      	str	r3, [sp, #80]	; 0x50
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	931a      	str	r3, [sp, #104]	; 0x68
 800181e:	68bf      	ldr	r7, [r7, #8]
 8001820:	9720      	str	r7, [sp, #128]	; 0x80
 8001822:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001824:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8001828:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 800182a:	971f      	str	r7, [sp, #124]	; 0x7c
 800182c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800182e:	681f      	ldr	r7, [r3, #0]
 8001830:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001834:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001836:	9319      	str	r3, [sp, #100]	; 0x64
 8001838:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800183a:	9318      	str	r3, [sp, #96]	; 0x60
 800183c:	68f3      	ldr	r3, [r6, #12]
 800183e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001842:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	9312      	str	r3, [sp, #72]	; 0x48
 800184a:	69ab      	ldr	r3, [r5, #24]
 800184c:	931e      	str	r3, [sp, #120]	; 0x78
 800184e:	6992      	ldr	r2, [r2, #24]
 8001850:	6893      	ldr	r3, [r2, #8]
 8001852:	931d      	str	r3, [sp, #116]	; 0x74
 8001854:	69b2      	ldr	r2, [r6, #24]
 8001856:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800185a:	b119      	cbz	r1, 8001864 <forward_conv2d+0xcc>
 800185c:	698a      	ldr	r2, [r1, #24]
 800185e:	6893      	ldr	r3, [r2, #8]
 8001860:	9317      	str	r3, [sp, #92]	; 0x5c
 8001862:	e001      	b.n	8001868 <forward_conv2d+0xd0>
 8001864:	2200      	movs	r2, #0
 8001866:	9217      	str	r2, [sp, #92]	; 0x5c
 8001868:	f8da 1018 	ldr.w	r1, [sl, #24]
 800186c:	688a      	ldr	r2, [r1, #8]
 800186e:	9203      	str	r2, [sp, #12]
 8001870:	69e9      	ldr	r1, [r5, #28]
 8001872:	b118      	cbz	r0, 800187c <forward_conv2d+0xe4>
 8001874:	6981      	ldr	r1, [r0, #24]
 8001876:	688a      	ldr	r2, [r1, #8]
 8001878:	9215      	str	r2, [sp, #84]	; 0x54
 800187a:	e005      	b.n	8001888 <forward_conv2d+0xf0>
 800187c:	b111      	cbz	r1, 8001884 <forward_conv2d+0xec>
 800187e:	688a      	ldr	r2, [r1, #8]
 8001880:	9215      	str	r2, [sp, #84]	; 0x54
 8001882:	e001      	b.n	8001888 <forward_conv2d+0xf0>
 8001884:	2300      	movs	r3, #0
 8001886:	9315      	str	r3, [sp, #84]	; 0x54
 8001888:	9915      	ldr	r1, [sp, #84]	; 0x54
 800188a:	9102      	str	r1, [sp, #8]
 800188c:	b920      	cbnz	r0, 8001898 <forward_conv2d+0x100>
 800188e:	2100      	movs	r1, #0
 8001890:	2201      	movs	r2, #1
 8001892:	9124      	str	r1, [sp, #144]	; 0x90
 8001894:	9223      	str	r2, [sp, #140]	; 0x8c
 8001896:	e008      	b.n	80018aa <forward_conv2d+0x112>
 8001898:	6941      	ldr	r1, [r0, #20]
 800189a:	688a      	ldr	r2, [r1, #8]
 800189c:	9224      	str	r2, [sp, #144]	; 0x90
 800189e:	6980      	ldr	r0, [r0, #24]
 80018a0:	6841      	ldr	r1, [r0, #4]
 80018a2:	6800      	ldr	r0, [r0, #0]
 80018a4:	f004 fb3e 	bl	8005f24 <ai_array_get_byte_size>
 80018a8:	9023      	str	r0, [sp, #140]	; 0x8c
 80018aa:	aa18      	add	r2, sp, #96	; 0x60
 80018ac:	6a28      	ldr	r0, [r5, #32]
 80018ae:	2800      	cmp	r0, #0
 80018b0:	bf12      	itee	ne
 80018b2:	9022      	strne	r0, [sp, #136]	; 0x88
 80018b4:	f8df 1d28 	ldreq.w	r1, [pc, #3368]	; 80025e0 <.text_15>
 80018b8:	9122      	streq	r1, [sp, #136]	; 0x88
 80018ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80018bc:	8813      	ldrh	r3, [r2, #0]
 80018be:	1e48      	subs	r0, r1, #1
 80018c0:	1e5b      	subs	r3, r3, #1
 80018c2:	aa19      	add	r2, sp, #100	; 0x64
 80018c4:	fb03 1100 	mla	r1, r3, r0, r1
 80018c8:	9116      	str	r1, [sp, #88]	; 0x58
 80018ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80018cc:	8813      	ldrh	r3, [r2, #0]
 80018ce:	1e41      	subs	r1, r0, #1
 80018d0:	1e5b      	subs	r3, r3, #1
 80018d2:	fb03 0001 	mla	r0, r3, r1, r0
 80018d6:	901c      	str	r0, [sp, #112]	; 0x70
 80018d8:	2200      	movs	r2, #0
 80018da:	69b6      	ldr	r6, [r6, #24]
 80018dc:	6831      	ldr	r1, [r6, #0]
 80018de:	11cb      	asrs	r3, r1, #7
 80018e0:	ea4f 5c61 	mov.w	ip, r1, asr #21
 80018e4:	1449      	asrs	r1, r1, #17
 80018e6:	f001 010f 	and.w	r1, r1, #15
 80018ea:	2000      	movs	r0, #0
 80018ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018f0:	f00c 0c03 	and.w	ip, ip, #3
 80018f4:	2904      	cmp	r1, #4
 80018f6:	4683      	mov	fp, r0
 80018f8:	fa23 f30c 	lsr.w	r3, r3, ip
 80018fc:	bf14      	ite	ne
 80018fe:	2908      	cmpne	r1, #8
 8001900:	68f2      	ldreq	r2, [r6, #12]
 8001902:	b1da      	cbz	r2, 800193c <forward_conv2d+0x1a4>
 8001904:	6969      	ldr	r1, [r5, #20]
 8001906:	880d      	ldrh	r5, [r1, #0]
 8001908:	2d04      	cmp	r5, #4
 800190a:	bfa6      	itte	ge
 800190c:	6849      	ldrge	r1, [r1, #4]
 800190e:	3128      	addge	r1, #40	; 0x28
 8001910:	2104      	movlt	r1, #4
 8001912:	6809      	ldr	r1, [r1, #0]
 8001914:	2900      	cmp	r1, #0
 8001916:	bf1f      	itttt	ne
 8001918:	6808      	ldrne	r0, [r1, #0]
 800191a:	2800      	cmpne	r0, #0
 800191c:	6981      	ldrne	r1, [r0, #24]
 800191e:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001922:	6980      	ldr	r0, [r0, #24]
 8001924:	6841      	ldr	r1, [r0, #4]
 8001926:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001928:	9101      	str	r1, [sp, #4]
 800192a:	9000      	str	r0, [sp, #0]
 800192c:	4658      	mov	r0, fp
 800192e:	68b1      	ldr	r1, [r6, #8]
 8001930:	f7ff fec8 	bl	80016c4 <ai_dict_decompress_f32>
 8001934:	f1bb 0f00 	cmp.w	fp, #0
 8001938:	bf18      	it	ne
 800193a:	46d9      	movne	r9, fp
 800193c:	b2bf      	uxth	r7, r7
 800193e:	427f      	negs	r7, r7
 8001940:	2c00      	cmp	r4, #0
 8001942:	d073      	beq.n	8001a2c <forward_conv2d+0x294>
 8001944:	4622      	mov	r2, r4
 8001946:	f1c8 0800 	rsb	r8, r8, #0
 800194a:	9c04      	ldr	r4, [sp, #16]
 800194c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001950:	9e02      	ldr	r6, [sp, #8]
 8001952:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 8001956:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 800195a:	9711      	str	r7, [sp, #68]	; 0x44
 800195c:	9221      	str	r2, [sp, #132]	; 0x84
 800195e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001960:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001962:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001964:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001966:	9025      	str	r0, [sp, #148]	; 0x94
 8001968:	9811      	ldr	r0, [sp, #68]	; 0x44
 800196a:	4240      	negs	r0, r0
 800196c:	bfd8      	it	le
 800196e:	2000      	movle	r0, #0
 8001970:	1a89      	subs	r1, r1, r2
 8001972:	4299      	cmp	r1, r3
 8001974:	bf3d      	ittte	cc
 8001976:	9a1a      	ldrcc	r2, [sp, #104]	; 0x68
 8001978:	9911      	ldrcc	r1, [sp, #68]	; 0x44
 800197a:	1a51      	subcc	r1, r2, r1
 800197c:	4619      	movcs	r1, r3
 800197e:	910a      	str	r1, [sp, #40]	; 0x28
 8001980:	9009      	str	r0, [sp, #36]	; 0x24
 8001982:	9402      	str	r4, [sp, #8]
 8001984:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001986:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800198a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800198c:	9008      	str	r0, [sp, #32]
 800198e:	9107      	str	r1, [sp, #28]
 8001990:	b212      	sxth	r2, r2
 8001992:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001994:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001996:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001998:	920f      	str	r2, [sp, #60]	; 0x3c
 800199a:	9006      	str	r0, [sp, #24]
 800199c:	9105      	str	r1, [sp, #20]
 800199e:	b21b      	sxth	r3, r3
 80019a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80019a2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80019a4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80019a6:	930e      	str	r3, [sp, #56]	; 0x38
 80019a8:	920d      	str	r2, [sp, #52]	; 0x34
 80019aa:	9004      	str	r0, [sp, #16]
 80019ac:	9103      	str	r1, [sp, #12]
 80019ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80019b0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80019b2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80019b4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80019b6:	930c      	str	r3, [sp, #48]	; 0x30
 80019b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80019ba:	9001      	str	r0, [sp, #4]
 80019bc:	9100      	str	r1, [sp, #0]
 80019be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80019c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80019c2:	4659      	mov	r1, fp
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff fa43 	bl	8000e50 <ai_conv2d_stripe_f32>
 80019ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 80019cc:	b310      	cbz	r0, 8001a14 <forward_conv2d+0x27c>
 80019ce:	f8cd a000 	str.w	sl, [sp]
 80019d2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80019d4:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80019d6:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 80019da:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 80019de:	4682      	mov	sl, r0
 80019e0:	9800      	ldr	r0, [sp, #0]
 80019e2:	6981      	ldr	r1, [r0, #24]
 80019e4:	f8c1 b008 	str.w	fp, [r1, #8]
 80019e8:	462b      	mov	r3, r5
 80019ea:	4622      	mov	r2, r4
 80019ec:	4608      	mov	r0, r1
 80019ee:	47c8      	blx	r9
 80019f0:	443d      	add	r5, r7
 80019f2:	1ba8      	subs	r0, r5, r6
 80019f4:	4540      	cmp	r0, r8
 80019f6:	bfa8      	it	ge
 80019f8:	4635      	movge	r5, r6
 80019fa:	f1ba 0a01 	subs.w	sl, sl, #1
 80019fe:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8001a02:	d1ed      	bne.n	80019e0 <forward_conv2d+0x248>
 8001a04:	f8dd a000 	ldr.w	sl, [sp]
 8001a08:	9515      	str	r5, [sp, #84]	; 0x54
 8001a0a:	9724      	str	r7, [sp, #144]	; 0x90
 8001a0c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001a10:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8001a14:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001a18:	68c1      	ldr	r1, [r0, #12]
 8001a1a:	6081      	str	r1, [r0, #8]
 8001a1c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001a1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001a20:	1808      	adds	r0, r1, r0
 8001a22:	9011      	str	r0, [sp, #68]	; 0x44
 8001a24:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001a26:	1e40      	subs	r0, r0, #1
 8001a28:	9021      	str	r0, [sp, #132]	; 0x84
 8001a2a:	d198      	bne.n	800195e <forward_conv2d+0x1c6>
 8001a2c:	b029      	add	sp, #164	; 0xa4
 8001a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001a34 <forward_conv2d_nl_pool>:
 8001a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a38:	4604      	mov	r4, r0
 8001a3a:	b0b9      	sub	sp, #228	; 0xe4
 8001a3c:	6963      	ldr	r3, [r4, #20]
 8001a3e:	8819      	ldrh	r1, [r3, #0]
 8001a40:	2900      	cmp	r1, #0
 8001a42:	bf1a      	itte	ne
 8001a44:	6858      	ldrne	r0, [r3, #4]
 8001a46:	1d00      	addne	r0, r0, #4
 8001a48:	2004      	moveq	r0, #4
 8001a4a:	6800      	ldr	r0, [r0, #0]
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	bf14      	ite	ne
 8001a50:	6802      	ldrne	r2, [r0, #0]
 8001a52:	2200      	moveq	r2, #0
 8001a54:	2901      	cmp	r1, #1
 8001a56:	bfc6      	itte	gt
 8001a58:	6858      	ldrgt	r0, [r3, #4]
 8001a5a:	3010      	addgt	r0, #16
 8001a5c:	2004      	movle	r0, #4
 8001a5e:	6800      	ldr	r0, [r0, #0]
 8001a60:	2800      	cmp	r0, #0
 8001a62:	bf14      	ite	ne
 8001a64:	f8d0 9000 	ldrne.w	r9, [r0]
 8001a68:	f04f 0900 	moveq.w	r9, #0
 8001a6c:	2902      	cmp	r1, #2
 8001a6e:	bfc6      	itte	gt
 8001a70:	6858      	ldrgt	r0, [r3, #4]
 8001a72:	f100 071c 	addgt.w	r7, r0, #28
 8001a76:	2704      	movle	r7, #4
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	bf14      	ite	ne
 8001a7e:	6806      	ldrne	r6, [r0, #0]
 8001a80:	2600      	moveq	r6, #0
 8001a82:	2902      	cmp	r1, #2
 8001a84:	dd0a      	ble.n	8001a9c <forward_conv2d_nl_pool+0x68>
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f113 0118 	adds.w	r1, r3, #24
 8001a8c:	d006      	beq.n	8001a9c <forward_conv2d_nl_pool+0x68>
 8001a8e:	8b19      	ldrh	r1, [r3, #24]
 8001a90:	2901      	cmp	r1, #1
 8001a92:	dd03      	ble.n	8001a9c <forward_conv2d_nl_pool+0x68>
 8001a94:	69d9      	ldr	r1, [r3, #28]
 8001a96:	b109      	cbz	r1, 8001a9c <forward_conv2d_nl_pool+0x68>
 8001a98:	6849      	ldr	r1, [r1, #4]
 8001a9a:	e000      	b.n	8001a9e <forward_conv2d_nl_pool+0x6a>
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	b100      	cbz	r0, 8001aa2 <forward_conv2d_nl_pool+0x6e>
 8001aa0:	6880      	ldr	r0, [r0, #8]
 8001aa2:	68d7      	ldr	r7, [r2, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	9323      	str	r3, [sp, #140]	; 0x8c
 8001aa8:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8001aac:	686b      	ldr	r3, [r5, #4]
 8001aae:	9310      	str	r3, [sp, #64]	; 0x40
 8001ab0:	68eb      	ldr	r3, [r5, #12]
 8001ab2:	9322      	str	r3, [sp, #136]	; 0x88
 8001ab4:	68ab      	ldr	r3, [r5, #8]
 8001ab6:	9321      	str	r3, [sp, #132]	; 0x84
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	931b      	str	r3, [sp, #108]	; 0x6c
 8001abc:	68bf      	ldr	r7, [r7, #8]
 8001abe:	972d      	str	r7, [sp, #180]	; 0xb4
 8001ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ac2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8001ac6:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8001ac8:	9720      	str	r7, [sp, #128]	; 0x80
 8001aca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001acc:	881f      	ldrh	r7, [r3, #0]
 8001ace:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001ad2:	689d      	ldr	r5, [r3, #8]
 8001ad4:	69a3      	ldr	r3, [r4, #24]
 8001ad6:	932c      	str	r3, [sp, #176]	; 0xb0
 8001ad8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ada:	931f      	str	r3, [sp, #124]	; 0x7c
 8001adc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ade:	931e      	str	r3, [sp, #120]	; 0x78
 8001ae0:	68f3      	ldr	r3, [r6, #12]
 8001ae2:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001ae6:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	9319      	str	r3, [sp, #100]	; 0x64
 8001aee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001af0:	932b      	str	r3, [sp, #172]	; 0xac
 8001af2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001af4:	932a      	str	r3, [sp, #168]	; 0xa8
 8001af6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001af8:	9311      	str	r3, [sp, #68]	; 0x44
 8001afa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001afc:	f8d3 a000 	ldr.w	sl, [r3]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b04:	6992      	ldr	r2, [r2, #24]
 8001b06:	6893      	ldr	r3, [r2, #8]
 8001b08:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b0a:	69b2      	ldr	r2, [r6, #24]
 8001b0c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001b10:	b119      	cbz	r1, 8001b1a <forward_conv2d_nl_pool+0xe6>
 8001b12:	698a      	ldr	r2, [r1, #24]
 8001b14:	6893      	ldr	r3, [r2, #8]
 8001b16:	931d      	str	r3, [sp, #116]	; 0x74
 8001b18:	e001      	b.n	8001b1e <forward_conv2d_nl_pool+0xea>
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	921d      	str	r2, [sp, #116]	; 0x74
 8001b1e:	69e1      	ldr	r1, [r4, #28]
 8001b20:	b118      	cbz	r0, 8001b2a <forward_conv2d_nl_pool+0xf6>
 8001b22:	6981      	ldr	r1, [r0, #24]
 8001b24:	688a      	ldr	r2, [r1, #8]
 8001b26:	921c      	str	r2, [sp, #112]	; 0x70
 8001b28:	e005      	b.n	8001b36 <forward_conv2d_nl_pool+0x102>
 8001b2a:	b111      	cbz	r1, 8001b32 <forward_conv2d_nl_pool+0xfe>
 8001b2c:	688a      	ldr	r2, [r1, #8]
 8001b2e:	921c      	str	r2, [sp, #112]	; 0x70
 8001b30:	e001      	b.n	8001b36 <forward_conv2d_nl_pool+0x102>
 8001b32:	2300      	movs	r3, #0
 8001b34:	931c      	str	r3, [sp, #112]	; 0x70
 8001b36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001b38:	9102      	str	r1, [sp, #8]
 8001b3a:	b920      	cbnz	r0, 8001b46 <forward_conv2d_nl_pool+0x112>
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2201      	movs	r2, #1
 8001b40:	9116      	str	r1, [sp, #88]	; 0x58
 8001b42:	9215      	str	r2, [sp, #84]	; 0x54
 8001b44:	e008      	b.n	8001b58 <forward_conv2d_nl_pool+0x124>
 8001b46:	6941      	ldr	r1, [r0, #20]
 8001b48:	688a      	ldr	r2, [r1, #8]
 8001b4a:	9216      	str	r2, [sp, #88]	; 0x58
 8001b4c:	6980      	ldr	r0, [r0, #24]
 8001b4e:	6841      	ldr	r1, [r0, #4]
 8001b50:	6800      	ldr	r0, [r0, #0]
 8001b52:	f004 f9e7 	bl	8005f24 <ai_array_get_byte_size>
 8001b56:	9015      	str	r0, [sp, #84]	; 0x54
 8001b58:	aa1e      	add	r2, sp, #120	; 0x78
 8001b5a:	6a20      	ldr	r0, [r4, #32]
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	bf12      	itee	ne
 8001b60:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001b62:	f8df 1a7c 	ldreq.w	r1, [pc, #2684]	; 80025e0 <.text_15>
 8001b66:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001b68:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001b6a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001b6c:	8813      	ldrh	r3, [r2, #0]
 8001b6e:	9127      	str	r1, [sp, #156]	; 0x9c
 8001b70:	1e5b      	subs	r3, r3, #1
 8001b72:	1e41      	subs	r1, r0, #1
 8001b74:	aa1f      	add	r2, sp, #124	; 0x7c
 8001b76:	fb03 0001 	mla	r0, r3, r1, r0
 8001b7a:	9018      	str	r0, [sp, #96]	; 0x60
 8001b7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001b7e:	8813      	ldrh	r3, [r2, #0]
 8001b80:	1e48      	subs	r0, r1, #1
 8001b82:	1e5b      	subs	r3, r3, #1
 8001b84:	fb03 1100 	mla	r1, r3, r0, r1
 8001b88:	9126      	str	r1, [sp, #152]	; 0x98
 8001b8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001b8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001b8e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001b90:	9112      	str	r1, [sp, #72]	; 0x48
 8001b92:	1a12      	subs	r2, r2, r0
 8001b94:	18ba      	adds	r2, r7, r2
 8001b96:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001b98:	fa12 f085 	uxtah	r0, r2, r5
 8001b9c:	fbb0 f1f1 	udiv	r1, r0, r1
 8001ba0:	1c49      	adds	r1, r1, #1
 8001ba2:	9114      	str	r1, [sp, #80]	; 0x50
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	69b6      	ldr	r6, [r6, #24]
 8001ba8:	6831      	ldr	r1, [r6, #0]
 8001baa:	2500      	movs	r5, #0
 8001bac:	2200      	movs	r2, #0
 8001bae:	11cb      	asrs	r3, r1, #7
 8001bb0:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001bb4:	1449      	asrs	r1, r1, #17
 8001bb6:	f001 010f 	and.w	r1, r1, #15
 8001bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bbe:	f00c 0c03 	and.w	ip, ip, #3
 8001bc2:	2904      	cmp	r1, #4
 8001bc4:	fa23 f30c 	lsr.w	r3, r3, ip
 8001bc8:	bf14      	ite	ne
 8001bca:	2908      	cmpne	r1, #8
 8001bcc:	68f2      	ldreq	r2, [r6, #12]
 8001bce:	b1da      	cbz	r2, 8001c08 <forward_conv2d_nl_pool+0x1d4>
 8001bd0:	6961      	ldr	r1, [r4, #20]
 8001bd2:	f8b1 c000 	ldrh.w	ip, [r1]
 8001bd6:	f1bc 0f04 	cmp.w	ip, #4
 8001bda:	bfa6      	itte	ge
 8001bdc:	6849      	ldrge	r1, [r1, #4]
 8001bde:	3128      	addge	r1, #40	; 0x28
 8001be0:	2104      	movlt	r1, #4
 8001be2:	6809      	ldr	r1, [r1, #0]
 8001be4:	2900      	cmp	r1, #0
 8001be6:	bf1f      	itttt	ne
 8001be8:	6848      	ldrne	r0, [r1, #4]
 8001bea:	2800      	cmpne	r0, #0
 8001bec:	6981      	ldrne	r1, [r0, #24]
 8001bee:	688d      	ldrne	r5, [r1, #8]
 8001bf0:	6980      	ldr	r0, [r0, #24]
 8001bf2:	6841      	ldr	r1, [r0, #4]
 8001bf4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001bf6:	9101      	str	r1, [sp, #4]
 8001bf8:	9000      	str	r0, [sp, #0]
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	68b1      	ldr	r1, [r6, #8]
 8001bfe:	f7ff fd61 	bl	80016c4 <ai_dict_decompress_f32>
 8001c02:	b10d      	cbz	r5, 8001c08 <forward_conv2d_nl_pool+0x1d4>
 8001c04:	4628      	mov	r0, r5
 8001c06:	e000      	b.n	8001c0a <forward_conv2d_nl_pool+0x1d6>
 8001c08:	4658      	mov	r0, fp
 8001c0a:	6963      	ldr	r3, [r4, #20]
 8001c0c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001c10:	881c      	ldrh	r4, [r3, #0]
 8001c12:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001c16:	2600      	movs	r6, #0
 8001c18:	2c04      	cmp	r4, #4
 8001c1a:	bfa6      	itte	ge
 8001c1c:	685b      	ldrge	r3, [r3, #4]
 8001c1e:	3328      	addge	r3, #40	; 0x28
 8001c20:	2304      	movlt	r3, #4
 8001c22:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	681d      	ldrne	r5, [r3, #0]
 8001c2e:	2500      	moveq	r5, #0
 8001c30:	427f      	negs	r7, r7
 8001c32:	69ac      	ldr	r4, [r5, #24]
 8001c34:	68eb      	ldr	r3, [r5, #12]
 8001c36:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001c3e:	435c      	muls	r4, r3
 8001c40:	fb0c f404 	mul.w	r4, ip, r4
 8001c44:	9437      	str	r4, [sp, #220]	; 0xdc
 8001c46:	fa0f f28a 	sxth.w	r2, sl
 8001c4a:	f9be 4000 	ldrsh.w	r4, [lr]
 8001c4e:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8001c52:	9436      	str	r4, [sp, #216]	; 0xd8
 8001c54:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001c58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001c5a:	fb0c f404 	mul.w	r4, ip, r4
 8001c5e:	9435      	str	r4, [sp, #212]	; 0xd4
 8001c60:	f1c8 0800 	rsb	r8, r8, #0
 8001c64:	f9be 4000 	ldrsh.w	r4, [lr]
 8001c68:	9434      	str	r4, [sp, #208]	; 0xd0
 8001c6a:	4691      	mov	r9, r2
 8001c6c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001c6e:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8001c72:	435c      	muls	r4, r3
 8001c74:	9433      	str	r4, [sp, #204]	; 0xcc
 8001c76:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001c78:	2c00      	cmp	r4, #0
 8001c7a:	f000 812e 	beq.w	8001eda <forward_conv2d_nl_pool+0x4a6>
 8001c7e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001c82:	9038      	str	r0, [sp, #224]	; 0xe0
 8001c84:	9125      	str	r1, [sp, #148]	; 0x94
 8001c86:	4614      	mov	r4, r2
 8001c88:	962f      	str	r6, [sp, #188]	; 0xbc
 8001c8a:	962e      	str	r6, [sp, #184]	; 0xb8
 8001c8c:	9324      	str	r3, [sp, #144]	; 0x90
 8001c8e:	9717      	str	r7, [sp, #92]	; 0x5c
 8001c90:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001c92:	2800      	cmp	r0, #0
 8001c94:	dd6a      	ble.n	8001d6c <forward_conv2d_nl_pool+0x338>
 8001c96:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001c98:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001c9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001c9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001c9e:	9031      	str	r0, [sp, #196]	; 0xc4
 8001ca0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001ca2:	4240      	negs	r0, r0
 8001ca4:	bfd8      	it	le
 8001ca6:	2000      	movle	r0, #0
 8001ca8:	1a89      	subs	r1, r1, r2
 8001caa:	4299      	cmp	r1, r3
 8001cac:	bf3d      	ittte	cc
 8001cae:	9a1b      	ldrcc	r2, [sp, #108]	; 0x6c
 8001cb0:	9917      	ldrcc	r1, [sp, #92]	; 0x5c
 8001cb2:	1a51      	subcc	r1, r2, r1
 8001cb4:	4619      	movcs	r1, r3
 8001cb6:	9009      	str	r0, [sp, #36]	; 0x24
 8001cb8:	910a      	str	r1, [sp, #40]	; 0x28
 8001cba:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001cbc:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001cc0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001cc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001cc4:	9008      	str	r0, [sp, #32]
 8001cc6:	9107      	str	r1, [sp, #28]
 8001cc8:	b212      	sxth	r2, r2
 8001cca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001ccc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001cce:	9006      	str	r0, [sp, #24]
 8001cd0:	920f      	str	r2, [sp, #60]	; 0x3c
 8001cd2:	9105      	str	r1, [sp, #20]
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001cd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001cda:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001cdc:	9004      	str	r0, [sp, #16]
 8001cde:	930e      	str	r3, [sp, #56]	; 0x38
 8001ce0:	920d      	str	r2, [sp, #52]	; 0x34
 8001ce2:	9103      	str	r1, [sp, #12]
 8001ce4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001ce6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001ce8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001cea:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001cec:	9002      	str	r0, [sp, #8]
 8001cee:	930c      	str	r3, [sp, #48]	; 0x30
 8001cf0:	920b      	str	r2, [sp, #44]	; 0x2c
 8001cf2:	9101      	str	r1, [sp, #4]
 8001cf4:	4659      	mov	r1, fp
 8001cf6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001cf8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001cfa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001cfc:	9000      	str	r0, [sp, #0]
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff f8a6 	bl	8000e50 <ai_conv2d_stripe_f32>
 8001d04:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001d06:	b350      	cbz	r0, 8001d5e <forward_conv2d_nl_pool+0x32a>
 8001d08:	f8cd a008 	str.w	sl, [sp, #8]
 8001d0c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001d0e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001d10:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8001d14:	4682      	mov	sl, r0
 8001d16:	69a9      	ldr	r1, [r5, #24]
 8001d18:	463b      	mov	r3, r7
 8001d1a:	f8c1 b008 	str.w	fp, [r1, #8]
 8001d1e:	4632      	mov	r2, r6
 8001d20:	4608      	mov	r0, r1
 8001d22:	47c0      	blx	r8
 8001d24:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001d26:	9902      	ldr	r1, [sp, #8]
 8001d28:	4407      	add	r7, r0
 8001d2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001d2c:	1a79      	subs	r1, r7, r1
 8001d2e:	4281      	cmp	r1, r0
 8001d30:	69a8      	ldr	r0, [r5, #24]
 8001d32:	6841      	ldr	r1, [r0, #4]
 8001d34:	68c0      	ldr	r0, [r0, #12]
 8001d36:	bfa8      	it	ge
 8001d38:	9f02      	ldrge	r7, [sp, #8]
 8001d3a:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8001d3e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001d42:	4593      	cmp	fp, r2
 8001d44:	d302      	bcc.n	8001d4c <forward_conv2d_nl_pool+0x318>
 8001d46:	0089      	lsls	r1, r1, #2
 8001d48:	4249      	negs	r1, r1
 8001d4a:	448b      	add	fp, r1
 8001d4c:	f1ba 0a01 	subs.w	sl, sl, #1
 8001d50:	d1e1      	bne.n	8001d16 <forward_conv2d_nl_pool+0x2e2>
 8001d52:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001d56:	9610      	str	r6, [sp, #64]	; 0x40
 8001d58:	971c      	str	r7, [sp, #112]	; 0x70
 8001d5a:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8001d5e:	69a8      	ldr	r0, [r5, #24]
 8001d60:	68c1      	ldr	r1, [r0, #12]
 8001d62:	6081      	str	r1, [r0, #8]
 8001d64:	f109 0001 	add.w	r0, r9, #1
 8001d68:	fa0f f980 	sxth.w	r9, r0
 8001d6c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001d6e:	1e40      	subs	r0, r0, #1
 8001d70:	9014      	str	r0, [sp, #80]	; 0x50
 8001d72:	d56b      	bpl.n	8001e4c <forward_conv2d_nl_pool+0x418>
 8001d74:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001d76:	fb00 f009 	mul.w	r0, r0, r9
 8001d7a:	0080      	lsls	r0, r0, #2
 8001d7c:	4240      	negs	r0, r0
 8001d7e:	eb0b 0200 	add.w	r2, fp, r0
 8001d82:	69a8      	ldr	r0, [r5, #24]
 8001d84:	68c3      	ldr	r3, [r0, #12]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	bf3c      	itt	cc
 8001d8a:	6847      	ldrcc	r7, [r0, #4]
 8001d8c:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8001d90:	4293      	cmp	r3, r2
 8001d92:	4659      	mov	r1, fp
 8001d94:	d236      	bcs.n	8001e04 <forward_conv2d_nl_pool+0x3d0>
 8001d96:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8001d98:	45b1      	cmp	r9, r6
 8001d9a:	d033      	beq.n	8001e04 <forward_conv2d_nl_pool+0x3d0>
 8001d9c:	6846      	ldr	r6, [r0, #4]
 8001d9e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001da2:	429a      	cmp	r2, r3
 8001da4:	f080 802e 	bcs.w	8001e04 <forward_conv2d_nl_pool+0x3d0>
 8001da8:	ed92 0a00 	vldr	s0, [r2]
 8001dac:	ed8b 0a00 	vstr	s0, [fp]
 8001db0:	68c3      	ldr	r3, [r0, #12]
 8001db2:	6846      	ldr	r6, [r0, #4]
 8001db4:	1d12      	adds	r2, r2, #4
 8001db6:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001dba:	42ba      	cmp	r2, r7
 8001dbc:	d222      	bcs.n	8001e04 <forward_conv2d_nl_pool+0x3d0>
 8001dbe:	edd2 0a00 	vldr	s1, [r2]
 8001dc2:	edcb 0a01 	vstr	s1, [fp, #4]
 8001dc6:	68c3      	ldr	r3, [r0, #12]
 8001dc8:	6846      	ldr	r6, [r0, #4]
 8001dca:	1d12      	adds	r2, r2, #4
 8001dcc:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001dd0:	42ba      	cmp	r2, r7
 8001dd2:	d217      	bcs.n	8001e04 <forward_conv2d_nl_pool+0x3d0>
 8001dd4:	ed92 0a00 	vldr	s0, [r2]
 8001dd8:	ed8b 0a02 	vstr	s0, [fp, #8]
 8001ddc:	68c3      	ldr	r3, [r0, #12]
 8001dde:	6846      	ldr	r6, [r0, #4]
 8001de0:	1d12      	adds	r2, r2, #4
 8001de2:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001de6:	42ba      	cmp	r2, r7
 8001de8:	d20c      	bcs.n	8001e04 <forward_conv2d_nl_pool+0x3d0>
 8001dea:	edd2 0a00 	vldr	s1, [r2]
 8001dee:	edcb 0a03 	vstr	s1, [fp, #12]
 8001df2:	68c3      	ldr	r3, [r0, #12]
 8001df4:	6846      	ldr	r6, [r0, #4]
 8001df6:	1d12      	adds	r2, r2, #4
 8001df8:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001dfc:	42ba      	cmp	r2, r7
 8001dfe:	f10b 0b10 	add.w	fp, fp, #16
 8001e02:	d3d1      	bcc.n	8001da8 <forward_conv2d_nl_pool+0x374>
 8001e04:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8001e06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001e08:	189a      	adds	r2, r3, r2
 8001e0a:	eba2 0209 	sub.w	r2, r2, r9
 8001e0e:	922f      	str	r2, [sp, #188]	; 0xbc
 8001e10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001e12:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001e14:	444a      	add	r2, r9
 8001e16:	fa0f f982 	sxth.w	r9, r2
 8001e1a:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
 8001e1e:	68c1      	ldr	r1, [r0, #12]
 8001e20:	6842      	ldr	r2, [r0, #4]
 8001e22:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001e26:	459b      	cmp	fp, r3
 8001e28:	460b      	mov	r3, r1
 8001e2a:	d30f      	bcc.n	8001e4c <forward_conv2d_nl_pool+0x418>
 8001e2c:	6841      	ldr	r1, [r0, #4]
 8001e2e:	008a      	lsls	r2, r1, #2
 8001e30:	4252      	negs	r2, r2
 8001e32:	4493      	add	fp, r2
 8001e34:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001e38:	458b      	cmp	fp, r1
 8001e3a:	bf24      	itt	cs
 8001e3c:	4493      	addcs	fp, r2
 8001e3e:	458b      	cmpcs	fp, r1
 8001e40:	bf21      	itttt	cs
 8001e42:	4493      	addcs	fp, r2
 8001e44:	458b      	cmpcs	fp, r1
 8001e46:	4493      	addcs	fp, r2
 8001e48:	458b      	cmpcs	fp, r1
 8001e4a:	d2ef      	bcs.n	8001e2c <forward_conv2d_nl_pool+0x3f8>
 8001e4c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001e4e:	4581      	cmp	r9, r0
 8001e50:	d339      	bcc.n	8001ec6 <forward_conv2d_nl_pool+0x492>
 8001e52:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001e54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001e56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001e58:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001e5a:	eba9 0001 	sub.w	r0, r9, r1
 8001e5e:	fa0f f980 	sxth.w	r9, r0
 8001e62:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001e64:	1c40      	adds	r0, r0, #1
 8001e66:	902e      	str	r0, [sp, #184]	; 0xb8
 8001e68:	2101      	movs	r1, #1
 8001e6a:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001e6c:	9008      	str	r0, [sp, #32]
 8001e6e:	9107      	str	r1, [sp, #28]
 8001e70:	b292      	uxth	r2, r2
 8001e72:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001e74:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001e76:	9206      	str	r2, [sp, #24]
 8001e78:	b280      	uxth	r0, r0
 8001e7a:	9005      	str	r0, [sp, #20]
 8001e7c:	b289      	uxth	r1, r1
 8001e7e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001e80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001e82:	9104      	str	r1, [sp, #16]
 8001e84:	b280      	uxth	r0, r0
 8001e86:	b2a1      	uxth	r1, r4
 8001e88:	9002      	str	r0, [sp, #8]
 8001e8a:	9103      	str	r1, [sp, #12]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001e90:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001e92:	b280      	uxth	r0, r0
 8001e94:	b289      	uxth	r1, r1
 8001e96:	9000      	str	r0, [sp, #0]
 8001e98:	9101      	str	r1, [sp, #4]
 8001e9a:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001e9c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001e9e:	1a12      	subs	r2, r2, r0
 8001ea0:	69a8      	ldr	r0, [r5, #24]
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	b289      	uxth	r1, r1
 8001ea6:	47b0      	blx	r6
 8001ea8:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001eaa:	6881      	ldr	r1, [r0, #8]
 8001eac:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001eae:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001eb2:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001eb4:	608a      	str	r2, [r1, #8]
 8001eb6:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8001eb8:	1a20      	subs	r0, r4, r0
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	bfc3      	ittte	gt
 8001ebe:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8001ec0:	1a24      	subgt	r4, r4, r0
 8001ec2:	b224      	sxthgt	r4, r4
 8001ec4:	2400      	movle	r4, #0
 8001ec6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001ec8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001eca:	1808      	adds	r0, r1, r0
 8001ecc:	9017      	str	r0, [sp, #92]	; 0x5c
 8001ece:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001ed0:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001ed2:	4288      	cmp	r0, r1
 8001ed4:	f4ff aedc 	bcc.w	8001c90 <forward_conv2d_nl_pool+0x25c>
 8001ed8:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001eda:	69a8      	ldr	r0, [r5, #24]
 8001edc:	68c2      	ldr	r2, [r0, #12]
 8001ede:	6082      	str	r2, [r0, #8]
 8001ee0:	68c8      	ldr	r0, [r1, #12]
 8001ee2:	6088      	str	r0, [r1, #8]
 8001ee4:	b039      	add	sp, #228	; 0xe4
 8001ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001eec <forward_dense>:
 8001eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef0:	b081      	sub	sp, #4
 8001ef2:	ed2d 8b02 	vpush	{d8}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	6944      	ldr	r4, [r0, #20]
 8001efa:	8820      	ldrh	r0, [r4, #0]
 8001efc:	2800      	cmp	r0, #0
 8001efe:	bf1a      	itte	ne
 8001f00:	6861      	ldrne	r1, [r4, #4]
 8001f02:	1d09      	addne	r1, r1, #4
 8001f04:	2104      	moveq	r1, #4
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	2900      	cmp	r1, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	680a      	ldrne	r2, [r1, #0]
 8001f0e:	2200      	moveq	r2, #0
 8001f10:	2802      	cmp	r0, #2
 8001f12:	bfa6      	itte	ge
 8001f14:	6861      	ldrge	r1, [r4, #4]
 8001f16:	3110      	addge	r1, #16
 8001f18:	2104      	movlt	r1, #4
 8001f1a:	6809      	ldr	r1, [r1, #0]
 8001f1c:	2900      	cmp	r1, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	680f      	ldrne	r7, [r1, #0]
 8001f22:	2700      	moveq	r7, #0
 8001f24:	2802      	cmp	r0, #2
 8001f26:	bfc6      	itte	gt
 8001f28:	6861      	ldrgt	r1, [r4, #4]
 8001f2a:	311c      	addgt	r1, #28
 8001f2c:	2104      	movle	r1, #4
 8001f2e:	6809      	ldr	r1, [r1, #0]
 8001f30:	2900      	cmp	r1, #0
 8001f32:	bf14      	ite	ne
 8001f34:	680b      	ldrne	r3, [r1, #0]
 8001f36:	2300      	moveq	r3, #0
 8001f38:	2802      	cmp	r0, #2
 8001f3a:	dd0b      	ble.n	8001f54 <forward_dense+0x68>
 8001f3c:	6861      	ldr	r1, [r4, #4]
 8001f3e:	f111 0018 	adds.w	r0, r1, #24
 8001f42:	d007      	beq.n	8001f54 <forward_dense+0x68>
 8001f44:	8b08      	ldrh	r0, [r1, #24]
 8001f46:	2802      	cmp	r0, #2
 8001f48:	db04      	blt.n	8001f54 <forward_dense+0x68>
 8001f4a:	69c8      	ldr	r0, [r1, #28]
 8001f4c:	b110      	cbz	r0, 8001f54 <forward_dense+0x68>
 8001f4e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8001f52:	e001      	b.n	8001f58 <forward_dense+0x6c>
 8001f54:	f04f 0a00 	mov.w	sl, #0
 8001f58:	68d0      	ldr	r0, [r2, #12]
 8001f5a:	6844      	ldr	r4, [r0, #4]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	6845      	ldr	r5, [r0, #4]
 8001f60:	6881      	ldr	r1, [r0, #8]
 8001f62:	68c0      	ldr	r0, [r0, #12]
 8001f64:	699e      	ldr	r6, [r3, #24]
 8001f66:	69bf      	ldr	r7, [r7, #24]
 8001f68:	f8d6 e000 	ldr.w	lr, [r6]
 8001f6c:	6992      	ldr	r2, [r2, #24]
 8001f6e:	68bf      	ldr	r7, [r7, #8]
 8001f70:	4341      	muls	r1, r0
 8001f72:	2000      	movs	r0, #0
 8001f74:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8001f78:	ea4f 586e 	mov.w	r8, lr, asr #21
 8001f7c:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8001f80:	f00e 0e0f 	and.w	lr, lr, #15
 8001f84:	f1be 0f04 	cmp.w	lr, #4
 8001f88:	bf14      	ite	ne
 8001f8a:	f1be 0f08 	cmpne.w	lr, #8
 8001f8e:	68f0      	ldreq	r0, [r6, #12]
 8001f90:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8001f94:	f008 0803 	and.w	r8, r8, #3
 8001f98:	695e      	ldr	r6, [r3, #20]
 8001f9a:	6876      	ldr	r6, [r6, #4]
 8001f9c:	fa29 f908 	lsr.w	r9, r9, r8
 8001fa0:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8001faa:	f000 80ea 	beq.w	8002182 <forward_dense+0x296>
 8001fae:	9307      	str	r3, [sp, #28]
 8001fb0:	f8cd a014 	str.w	sl, [sp, #20]
 8001fb4:	9506      	str	r5, [sp, #24]
 8001fb6:	9201      	str	r2, [sp, #4]
 8001fb8:	9104      	str	r1, [sp, #16]
 8001fba:	9907      	ldr	r1, [sp, #28]
 8001fbc:	698a      	ldr	r2, [r1, #24]
 8001fbe:	9905      	ldr	r1, [sp, #20]
 8001fc0:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001fc4:	9b01      	ldr	r3, [sp, #4]
 8001fc6:	2900      	cmp	r1, #0
 8001fc8:	bf1a      	itte	ne
 8001fca:	698a      	ldrne	r2, [r1, #24]
 8001fcc:	6892      	ldrne	r2, [r2, #8]
 8001fce:	2200      	moveq	r2, #0
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	f040 80ab 	bne.w	800212c <forward_dense+0x240>
 8001fd6:	429f      	cmp	r7, r3
 8001fd8:	f080 80c7 	bcs.w	800216a <forward_dense+0x27e>
 8001fdc:	9003      	str	r0, [sp, #12]
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	bf0e      	itee	eq
 8001fe2:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 8002190 <.text_12>
 8001fe6:	ed92 0a00 	vldrne	s0, [r2]
 8001fea:	1d12      	addne	r2, r2, #4
 8001fec:	2c04      	cmp	r4, #4
 8001fee:	4620      	mov	r0, r4
 8001ff0:	46c6      	mov	lr, r8
 8001ff2:	46dc      	mov	ip, fp
 8001ff4:	eddf 0a66 	vldr	s1, [pc, #408]	; 8002190 <.text_12>
 8001ff8:	d35d      	bcc.n	80020b6 <forward_dense+0x1ca>
 8001ffa:	08a1      	lsrs	r1, r4, #2
 8001ffc:	07cd      	lsls	r5, r1, #31
 8001ffe:	d51c      	bpl.n	800203a <forward_dense+0x14e>
 8002000:	ed9c 4a00 	vldr	s8, [ip]
 8002004:	edde 4a00 	vldr	s9, [lr]
 8002008:	ed9c 3a01 	vldr	s6, [ip, #4]
 800200c:	edde 3a01 	vldr	s7, [lr, #4]
 8002010:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002014:	edde 2a02 	vldr	s5, [lr, #8]
 8002018:	ed9c 1a03 	vldr	s2, [ip, #12]
 800201c:	edde 1a03 	vldr	s3, [lr, #12]
 8002020:	ee44 0a24 	vmla.f32	s1, s8, s9
 8002024:	ee43 0a23 	vmla.f32	s1, s6, s7
 8002028:	ee42 0a22 	vmla.f32	s1, s4, s5
 800202c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002030:	f10e 0e10 	add.w	lr, lr, #16
 8002034:	f10c 0c10 	add.w	ip, ip, #16
 8002038:	1f00      	subs	r0, r0, #4
 800203a:	0849      	lsrs	r1, r1, #1
 800203c:	f000 803b 	beq.w	80020b6 <forward_dense+0x1ca>
 8002040:	edde 4a00 	vldr	s9, [lr]
 8002044:	edde 3a01 	vldr	s7, [lr, #4]
 8002048:	edde 2a02 	vldr	s5, [lr, #8]
 800204c:	edde 1a03 	vldr	s3, [lr, #12]
 8002050:	ed9c 1a03 	vldr	s2, [ip, #12]
 8002054:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002058:	ed9c 3a01 	vldr	s6, [ip, #4]
 800205c:	ed9c 4a00 	vldr	s8, [ip]
 8002060:	ee44 0a24 	vmla.f32	s1, s8, s9
 8002064:	ee43 0a23 	vmla.f32	s1, s6, s7
 8002068:	ee42 0a22 	vmla.f32	s1, s4, s5
 800206c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002070:	f10e 0510 	add.w	r5, lr, #16
 8002074:	f10c 0c10 	add.w	ip, ip, #16
 8002078:	edd5 8a00 	vldr	s17, [r5]
 800207c:	ed9c 8a00 	vldr	s16, [ip]
 8002080:	ed9c 7a01 	vldr	s14, [ip, #4]
 8002084:	edd5 7a01 	vldr	s15, [r5, #4]
 8002088:	ed9c 6a02 	vldr	s12, [ip, #8]
 800208c:	edd5 6a02 	vldr	s13, [r5, #8]
 8002090:	ed9c 5a03 	vldr	s10, [ip, #12]
 8002094:	edd5 5a03 	vldr	s11, [r5, #12]
 8002098:	ee48 0a28 	vmla.f32	s1, s16, s17
 800209c:	ee47 0a27 	vmla.f32	s1, s14, s15
 80020a0:	3808      	subs	r0, #8
 80020a2:	ee46 0a26 	vmla.f32	s1, s12, s13
 80020a6:	1e49      	subs	r1, r1, #1
 80020a8:	ee45 0a25 	vmla.f32	s1, s10, s11
 80020ac:	f105 0e10 	add.w	lr, r5, #16
 80020b0:	f10c 0c10 	add.w	ip, ip, #16
 80020b4:	d1c4      	bne.n	8002040 <forward_dense+0x154>
 80020b6:	b378      	cbz	r0, 8002118 <forward_dense+0x22c>
 80020b8:	f010 0103 	ands.w	r1, r0, #3
 80020bc:	f000 800c 	beq.w	80020d8 <forward_dense+0x1ec>
 80020c0:	ed9c 1a00 	vldr	s2, [ip]
 80020c4:	edde 1a00 	vldr	s3, [lr]
 80020c8:	1e49      	subs	r1, r1, #1
 80020ca:	ee41 0a21 	vmla.f32	s1, s2, s3
 80020ce:	f10e 0e04 	add.w	lr, lr, #4
 80020d2:	f10c 0c04 	add.w	ip, ip, #4
 80020d6:	d1f3      	bne.n	80020c0 <forward_dense+0x1d4>
 80020d8:	0880      	lsrs	r0, r0, #2
 80020da:	d01d      	beq.n	8002118 <forward_dense+0x22c>
 80020dc:	ed9c 2a00 	vldr	s4, [ip]
 80020e0:	ed9e 1a00 	vldr	s2, [lr]
 80020e4:	eddc 1a01 	vldr	s3, [ip, #4]
 80020e8:	edde 2a01 	vldr	s5, [lr, #4]
 80020ec:	ee42 0a01 	vmla.f32	s1, s4, s2
 80020f0:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80020f4:	ed9c 2a02 	vldr	s4, [ip, #8]
 80020f8:	ed9e 1a02 	vldr	s2, [lr, #8]
 80020fc:	eddc 1a03 	vldr	s3, [ip, #12]
 8002100:	edde 2a03 	vldr	s5, [lr, #12]
 8002104:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002108:	1e40      	subs	r0, r0, #1
 800210a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800210e:	f10e 0e10 	add.w	lr, lr, #16
 8002112:	f10c 0c10 	add.w	ip, ip, #16
 8002116:	d1e1      	bne.n	80020dc <forward_dense+0x1f0>
 8002118:	ee30 0a20 	vadd.f32	s0, s0, s1
 800211c:	ed87 0a00 	vstr	s0, [r7]
 8002120:	1d3f      	adds	r7, r7, #4
 8002122:	429f      	cmp	r7, r3
 8002124:	44b3      	add	fp, r6
 8002126:	f4ff af5a 	bcc.w	8001fde <forward_dense+0xf2>
 800212a:	e01d      	b.n	8002168 <forward_dense+0x27c>
 800212c:	429f      	cmp	r7, r3
 800212e:	d21c      	bcs.n	800216a <forward_dense+0x27e>
 8002130:	469a      	mov	sl, r3
 8002132:	9003      	str	r0, [sp, #12]
 8002134:	4615      	mov	r5, r2
 8002136:	2d00      	cmp	r5, #0
 8002138:	bf14      	ite	ne
 800213a:	f855 0b04 	ldrne.w	r0, [r5], #4
 800213e:	2000      	moveq	r0, #0
 8002140:	9002      	str	r0, [sp, #8]
 8002142:	f1b9 0f04 	cmp.w	r9, #4
 8002146:	9a03      	ldr	r2, [sp, #12]
 8002148:	9400      	str	r4, [sp, #0]
 800214a:	4643      	mov	r3, r8
 800214c:	4659      	mov	r1, fp
 800214e:	a802      	add	r0, sp, #8
 8002150:	d102      	bne.n	8002158 <forward_dense+0x26c>
 8002152:	f7ff fa03 	bl	800155c <ai_dict4_dot_array_f32>
 8002156:	e001      	b.n	800215c <forward_dense+0x270>
 8002158:	f7ff f950 	bl	80013fc <ai_dict8_dot_array_f32>
 800215c:	9802      	ldr	r0, [sp, #8]
 800215e:	f847 0b04 	str.w	r0, [r7], #4
 8002162:	4557      	cmp	r7, sl
 8002164:	44b3      	add	fp, r6
 8002166:	d3e6      	bcc.n	8002136 <forward_dense+0x24a>
 8002168:	9803      	ldr	r0, [sp, #12]
 800216a:	9901      	ldr	r1, [sp, #4]
 800216c:	9a06      	ldr	r2, [sp, #24]
 800216e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002172:	9904      	ldr	r1, [sp, #16]
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	1e49      	subs	r1, r1, #1
 8002178:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800217c:	9104      	str	r1, [sp, #16]
 800217e:	f47f af1c 	bne.w	8001fba <forward_dense+0xce>
 8002182:	b008      	add	sp, #32
 8002184:	ecbd 8b02 	vpop	{d8}
 8002188:	b001      	add	sp, #4
 800218a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002190 <.text_12>:
 8002190:	00000000 	.word	0x00000000

08002194 <forward_gemm>:
 8002194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002198:	4604      	mov	r4, r0
 800219a:	b091      	sub	sp, #68	; 0x44
 800219c:	6961      	ldr	r1, [r4, #20]
 800219e:	8808      	ldrh	r0, [r1, #0]
 80021a0:	2800      	cmp	r0, #0
 80021a2:	bf1a      	itte	ne
 80021a4:	6848      	ldrne	r0, [r1, #4]
 80021a6:	1d02      	addne	r2, r0, #4
 80021a8:	2204      	moveq	r2, #4
 80021aa:	460b      	mov	r3, r1
 80021ac:	6810      	ldr	r0, [r2, #0]
 80021ae:	8819      	ldrh	r1, [r3, #0]
 80021b0:	2800      	cmp	r0, #0
 80021b2:	bf14      	ite	ne
 80021b4:	6805      	ldrne	r5, [r0, #0]
 80021b6:	2500      	moveq	r5, #0
 80021b8:	2900      	cmp	r1, #0
 80021ba:	bf1d      	ittte	ne
 80021bc:	6858      	ldrne	r0, [r3, #4]
 80021be:	2800      	cmpne	r0, #0
 80021c0:	f8b0 c000 	ldrhne.w	ip, [r0]
 80021c4:	f04f 0c00 	moveq.w	ip, #0
 80021c8:	2902      	cmp	r1, #2
 80021ca:	bfa6      	itte	ge
 80021cc:	6858      	ldrge	r0, [r3, #4]
 80021ce:	3010      	addge	r0, #16
 80021d0:	2004      	movlt	r0, #4
 80021d2:	6800      	ldr	r0, [r0, #0]
 80021d4:	2800      	cmp	r0, #0
 80021d6:	bf14      	ite	ne
 80021d8:	6801      	ldrne	r1, [r0, #0]
 80021da:	2100      	moveq	r1, #0
 80021dc:	2600      	movs	r6, #0
 80021de:	f1bc 0f03 	cmp.w	ip, #3
 80021e2:	46b2      	mov	sl, r6
 80021e4:	d107      	bne.n	80021f6 <forward_gemm+0x62>
 80021e6:	6810      	ldr	r0, [r2, #0]
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d026      	beq.n	800223a <forward_gemm+0xa6>
 80021ec:	6846      	ldr	r6, [r0, #4]
 80021ee:	d024      	beq.n	800223a <forward_gemm+0xa6>
 80021f0:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80021f4:	e021      	b.n	800223a <forward_gemm+0xa6>
 80021f6:	f1bc 0f02 	cmp.w	ip, #2
 80021fa:	d10d      	bne.n	8002218 <forward_gemm+0x84>
 80021fc:	6810      	ldr	r0, [r2, #0]
 80021fe:	b100      	cbz	r0, 8002202 <forward_gemm+0x6e>
 8002200:	6846      	ldr	r6, [r0, #4]
 8002202:	881a      	ldrh	r2, [r3, #0]
 8002204:	2a02      	cmp	r2, #2
 8002206:	bfc6      	itte	gt
 8002208:	6858      	ldrgt	r0, [r3, #4]
 800220a:	301c      	addgt	r0, #28
 800220c:	2004      	movle	r0, #4
 800220e:	6800      	ldr	r0, [r0, #0]
 8002210:	b198      	cbz	r0, 800223a <forward_gemm+0xa6>
 8002212:	f8d0 a000 	ldr.w	sl, [r0]
 8002216:	e010      	b.n	800223a <forward_gemm+0xa6>
 8002218:	f1bc 0f01 	cmp.w	ip, #1
 800221c:	d10d      	bne.n	800223a <forward_gemm+0xa6>
 800221e:	881a      	ldrh	r2, [r3, #0]
 8002220:	2a02      	cmp	r2, #2
 8002222:	bfc6      	itte	gt
 8002224:	6858      	ldrgt	r0, [r3, #4]
 8002226:	f100 021c 	addgt.w	r2, r0, #28
 800222a:	2204      	movle	r2, #4
 800222c:	6810      	ldr	r0, [r2, #0]
 800222e:	2800      	cmp	r0, #0
 8002230:	d003      	beq.n	800223a <forward_gemm+0xa6>
 8002232:	6806      	ldr	r6, [r0, #0]
 8002234:	bf18      	it	ne
 8002236:	f8d0 a004 	ldrne.w	sl, [r0, #4]
 800223a:	68c8      	ldr	r0, [r1, #12]
 800223c:	6989      	ldr	r1, [r1, #24]
 800223e:	688b      	ldr	r3, [r1, #8]
 8002240:	6842      	ldr	r2, [r0, #4]
 8002242:	68c1      	ldr	r1, [r0, #12]
 8002244:	b292      	uxth	r2, r2
 8002246:	b289      	uxth	r1, r1
 8002248:	a806      	add	r0, sp, #24
 800224a:	f00a fea8 	bl	800cf9e <arm_mat_init_f32>
 800224e:	69a9      	ldr	r1, [r5, #24]
 8002250:	68e8      	ldr	r0, [r5, #12]
 8002252:	688b      	ldr	r3, [r1, #8]
 8002254:	6842      	ldr	r2, [r0, #4]
 8002256:	68c1      	ldr	r1, [r0, #12]
 8002258:	b292      	uxth	r2, r2
 800225a:	b289      	uxth	r1, r1
 800225c:	a804      	add	r0, sp, #16
 800225e:	f00a fe9e 	bl	800cf9e <arm_mat_init_f32>
 8002262:	69b1      	ldr	r1, [r6, #24]
 8002264:	68f0      	ldr	r0, [r6, #12]
 8002266:	688b      	ldr	r3, [r1, #8]
 8002268:	6842      	ldr	r2, [r0, #4]
 800226a:	68c1      	ldr	r1, [r0, #12]
 800226c:	b292      	uxth	r2, r2
 800226e:	b289      	uxth	r1, r1
 8002270:	a802      	add	r0, sp, #8
 8002272:	f00a fe94 	bl	800cf9e <arm_mat_init_f32>
 8002276:	f8da 1018 	ldr.w	r1, [sl, #24]
 800227a:	f8da 000c 	ldr.w	r0, [sl, #12]
 800227e:	688b      	ldr	r3, [r1, #8]
 8002280:	6842      	ldr	r2, [r0, #4]
 8002282:	68c1      	ldr	r1, [r0, #12]
 8002284:	b292      	uxth	r2, r2
 8002286:	b289      	uxth	r1, r1
 8002288:	4668      	mov	r0, sp
 800228a:	f00a fe88 	bl	800cf9e <arm_mat_init_f32>
 800228e:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 8002292:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8002296:	9905      	ldr	r1, [sp, #20]
 8002298:	9a03      	ldr	r2, [sp, #12]
 800229a:	ed94 0a07 	vldr	s0, [r4, #28]
 800229e:	edd4 0a06 	vldr	s1, [r4, #24]
 80022a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80022a4:	920e      	str	r2, [sp, #56]	; 0x38
 80022a6:	920d      	str	r2, [sp, #52]	; 0x34
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8bd e010 	ldrh.w	lr, [sp, #16]
 80022ae:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 80022b2:	9901      	ldr	r1, [sp, #4]
 80022b4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80022b8:	f8bd c000 	ldrh.w	ip, [sp]
 80022bc:	9c07      	ldr	r4, [sp, #28]
 80022be:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80022c2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 80022c6:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80022ca:	9108      	str	r1, [sp, #32]
 80022cc:	0002      	movs	r2, r0
 80022ce:	bf0c      	ite	eq
 80022d0:	4672      	moveq	r2, lr
 80022d2:	4642      	movne	r2, r8
 80022d4:	2f01      	cmp	r7, #1
 80022d6:	bf0c      	ite	eq
 80022d8:	4699      	moveq	r9, r3
 80022da:	f04f 0904 	movne.w	r9, #4
 80022de:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80022e2:	f1bc 0f01 	cmp.w	ip, #1
 80022e6:	d104      	bne.n	80022f2 <forward_gemm+0x15e>
 80022e8:	2f01      	cmp	r7, #1
 80022ea:	d004      	beq.n	80022f6 <forward_gemm+0x162>
 80022ec:	f1cb 0700 	rsb	r7, fp, #0
 80022f0:	e002      	b.n	80022f8 <forward_gemm+0x164>
 80022f2:	2f01      	cmp	r7, #1
 80022f4:	d000      	beq.n	80022f8 <forward_gemm+0x164>
 80022f6:	2700      	movs	r7, #0
 80022f8:	2800      	cmp	r0, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	46f4      	moveq	ip, lr
 80022fe:	46c4      	movne	ip, r8
 8002300:	b23f      	sxth	r7, r7
 8002302:	45b4      	cmp	ip, r6
 8002304:	970c      	str	r7, [sp, #48]	; 0x30
 8002306:	f040 808b 	bne.w	8002420 <forward_gemm+0x28c>
 800230a:	2d00      	cmp	r5, #0
 800230c:	bf0c      	ite	eq
 800230e:	9109      	streq	r1, [sp, #36]	; 0x24
 8002310:	f8cd a024 	strne.w	sl, [sp, #36]	; 0x24
 8002314:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002316:	455f      	cmp	r7, fp
 8002318:	f040 8082 	bne.w	8002420 <forward_gemm+0x28c>
 800231c:	2800      	cmp	r0, #0
 800231e:	bf0c      	ite	eq
 8002320:	46c4      	moveq	ip, r8
 8002322:	46f4      	movne	ip, lr
 8002324:	2d00      	cmp	r5, #0
 8002326:	bf0c      	ite	eq
 8002328:	4657      	moveq	r7, sl
 800232a:	460f      	movne	r7, r1
 800232c:	45bc      	cmp	ip, r7
 800232e:	d177      	bne.n	8002420 <forward_gemm+0x28c>
 8002330:	9e08      	ldr	r6, [sp, #32]
 8002332:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002336:	9410      	str	r4, [sp, #64]	; 0x40
 8002338:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800233c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8002340:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002342:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8002346:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800234a:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800234e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002352:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8002356:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800235a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800235e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8002362:	2800      	cmp	r0, #0
 8002364:	bf0c      	ite	eq
 8002366:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 800236a:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 800236e:	fa1f fb88 	uxth.w	fp, r8
 8002372:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8002376:	f1bb 0f00 	cmp.w	fp, #0
 800237a:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 80025e4 <.text_16>
 800237e:	d019      	beq.n	80023b4 <forward_gemm+0x220>
 8002380:	2800      	cmp	r0, #0
 8002382:	bf0c      	ite	eq
 8002384:	f04f 0b04 	moveq.w	fp, #4
 8002388:	46a3      	movne	fp, r4
 800238a:	2d00      	cmp	r5, #0
 800238c:	f1a8 0801 	sub.w	r8, r8, #1
 8002390:	edde 1a00 	vldr	s3, [lr]
 8002394:	ed93 2a00 	vldr	s4, [r3]
 8002398:	44de      	add	lr, fp
 800239a:	bf0c      	ite	eq
 800239c:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 80023a0:	f04f 0b04 	movne.w	fp, #4
 80023a4:	445b      	add	r3, fp
 80023a6:	fa1f fb88 	uxth.w	fp, r8
 80023aa:	f1bb 0f00 	cmp.w	fp, #0
 80023ae:	ee01 1a82 	vmla.f32	s2, s3, s4
 80023b2:	d1e5      	bne.n	8002380 <forward_gemm+0x1ec>
 80023b4:	ee20 1a81 	vmul.f32	s2, s1, s2
 80023b8:	edd6 1a00 	vldr	s3, [r6]
 80023bc:	ee00 1a21 	vmla.f32	s2, s0, s3
 80023c0:	ed87 1a00 	vstr	s2, [r7]
 80023c4:	1d3f      	adds	r7, r7, #4
 80023c6:	1e52      	subs	r2, r2, #1
 80023c8:	b292      	uxth	r2, r2
 80023ca:	002b      	movs	r3, r5
 80023cc:	bf0e      	itee	eq
 80023ce:	1a8b      	subeq	r3, r1, r2
 80023d0:	ebaa 0302 	subne.w	r3, sl, r2
 80023d4:	434b      	mulne	r3, r1
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	444e      	add	r6, r9
 80023da:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80023de:	d1c0      	bne.n	8002362 <forward_gemm+0x1ce>
 80023e0:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 80023e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80023e8:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 80023ec:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80023f0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80023f4:	19df      	adds	r7, r3, r7
 80023f6:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80023fa:	b100      	cbz	r0, 80023fe <forward_gemm+0x26a>
 80023fc:	2404      	movs	r4, #4
 80023fe:	eb02 0c04 	add.w	ip, r2, r4
 8002402:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002408:	1e67      	subs	r7, r4, #1
 800240a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800240e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8002412:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002416:	2a00      	cmp	r2, #0
 8002418:	d192      	bne.n	8002340 <forward_gemm+0x1ac>
 800241a:	b011      	add	sp, #68	; 0x44
 800241c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002420:	fb0b f606 	mul.w	r6, fp, r6
 8002424:	2e00      	cmp	r6, #0
 8002426:	ddf8      	ble.n	800241a <forward_gemm+0x286>
 8002428:	f016 0003 	ands.w	r0, r6, #3
 800242c:	d003      	beq.n	8002436 <forward_gemm+0x2a2>
 800242e:	1e40      	subs	r0, r0, #1
 8002430:	f844 3b04 	str.w	r3, [r4], #4
 8002434:	d1fb      	bne.n	800242e <forward_gemm+0x29a>
 8002436:	08b1      	lsrs	r1, r6, #2
 8002438:	d0ef      	beq.n	800241a <forward_gemm+0x286>
 800243a:	6023      	str	r3, [r4, #0]
 800243c:	6063      	str	r3, [r4, #4]
 800243e:	60a3      	str	r3, [r4, #8]
 8002440:	60e3      	str	r3, [r4, #12]
 8002442:	3410      	adds	r4, #16
 8002444:	1e49      	subs	r1, r1, #1
 8002446:	d1f8      	bne.n	800243a <forward_gemm+0x2a6>
 8002448:	b011      	add	sp, #68	; 0x44
 800244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002450 <forward_matmul>:
 8002450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002454:	b08b      	sub	sp, #44	; 0x2c
 8002456:	6944      	ldr	r4, [r0, #20]
 8002458:	8822      	ldrh	r2, [r4, #0]
 800245a:	2a00      	cmp	r2, #0
 800245c:	bf1a      	itte	ne
 800245e:	6860      	ldrne	r0, [r4, #4]
 8002460:	1d03      	addne	r3, r0, #4
 8002462:	2304      	moveq	r3, #4
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	2900      	cmp	r1, #0
 8002468:	bf14      	ite	ne
 800246a:	6808      	ldrne	r0, [r1, #0]
 800246c:	2000      	moveq	r0, #0
 800246e:	2900      	cmp	r1, #0
 8002470:	bf14      	ite	ne
 8002472:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 8002476:	f04f 0b00 	moveq.w	fp, #0
 800247a:	2a02      	cmp	r2, #2
 800247c:	bfa6      	itte	ge
 800247e:	6861      	ldrge	r1, [r4, #4]
 8002480:	3110      	addge	r1, #16
 8002482:	2104      	movlt	r1, #4
 8002484:	6809      	ldr	r1, [r1, #0]
 8002486:	2900      	cmp	r1, #0
 8002488:	bf14      	ite	ne
 800248a:	680b      	ldrne	r3, [r1, #0]
 800248c:	2300      	moveq	r3, #0
 800248e:	f1bb 0f00 	cmp.w	fp, #0
 8002492:	d108      	bne.n	80024a6 <forward_matmul+0x56>
 8002494:	2a02      	cmp	r2, #2
 8002496:	bfc6      	itte	gt
 8002498:	6861      	ldrgt	r1, [r4, #4]
 800249a:	311c      	addgt	r1, #28
 800249c:	2104      	movle	r1, #4
 800249e:	6809      	ldr	r1, [r1, #0]
 80024a0:	b109      	cbz	r1, 80024a6 <forward_matmul+0x56>
 80024a2:	f8d1 b000 	ldr.w	fp, [r1]
 80024a6:	68dd      	ldr	r5, [r3, #12]
 80024a8:	68c4      	ldr	r4, [r0, #12]
 80024aa:	f8db 900c 	ldr.w	r9, [fp, #12]
 80024ae:	686e      	ldr	r6, [r5, #4]
 80024b0:	f8d4 e000 	ldr.w	lr, [r4]
 80024b4:	f8d9 2000 	ldr.w	r2, [r9]
 80024b8:	f8d5 a000 	ldr.w	sl, [r5]
 80024bc:	68a1      	ldr	r1, [r4, #8]
 80024be:	f8d9 8008 	ldr.w	r8, [r9, #8]
 80024c2:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80024c6:	68ef      	ldr	r7, [r5, #12]
 80024c8:	9706      	str	r7, [sp, #24]
 80024ca:	fb01 f50e 	mul.w	r5, r1, lr
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	68e7      	ldr	r7, [r4, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	434f      	muls	r7, r1
 80024d6:	fb0e f707 	mul.w	r7, lr, r7
 80024da:	970a      	str	r7, [sp, #40]	; 0x28
 80024dc:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80024e0:	fb08 f404 	mul.w	r4, r8, r4
 80024e4:	4354      	muls	r4, r2
 80024e6:	2e00      	cmp	r6, #0
 80024e8:	9409      	str	r4, [sp, #36]	; 0x24
 80024ea:	fb08 f802 	mul.w	r8, r8, r2
 80024ee:	d074      	beq.n	80025da <forward_matmul+0x18a>
 80024f0:	2400      	movs	r4, #0
 80024f2:	46a1      	mov	r9, r4
 80024f4:	9602      	str	r6, [sp, #8]
 80024f6:	9e06      	ldr	r6, [sp, #24]
 80024f8:	2e00      	cmp	r6, #0
 80024fa:	d064      	beq.n	80025c6 <forward_matmul+0x176>
 80024fc:	9f06      	ldr	r7, [sp, #24]
 80024fe:	9701      	str	r7, [sp, #4]
 8002500:	f8cd c00c 	str.w	ip, [sp, #12]
 8002504:	2600      	movs	r6, #0
 8002506:	9505      	str	r5, [sp, #20]
 8002508:	9d03      	ldr	r5, [sp, #12]
 800250a:	2d00      	cmp	r5, #0
 800250c:	d051      	beq.n	80025b2 <forward_matmul+0x162>
 800250e:	9500      	str	r5, [sp, #0]
 8002510:	f8cd a010 	str.w	sl, [sp, #16]
 8002514:	9207      	str	r2, [sp, #28]
 8002516:	f04f 0a00 	mov.w	sl, #0
 800251a:	9a04      	ldr	r2, [sp, #16]
 800251c:	2a00      	cmp	r2, #0
 800251e:	d03f      	beq.n	80025a0 <forward_matmul+0x150>
 8002520:	f04f 0c00 	mov.w	ip, #0
 8002524:	9008      	str	r0, [sp, #32]
 8002526:	9808      	ldr	r0, [sp, #32]
 8002528:	6985      	ldr	r5, [r0, #24]
 800252a:	68a8      	ldr	r0, [r5, #8]
 800252c:	f8db 7018 	ldr.w	r7, [fp, #24]
 8002530:	4420      	add	r0, r4
 8002532:	4430      	add	r0, r6
 8002534:	eb00 050c 	add.w	r5, r0, ip
 8002538:	68b8      	ldr	r0, [r7, #8]
 800253a:	4448      	add	r0, r9
 800253c:	4450      	add	r0, sl
 800253e:	eb00 070c 	add.w	r7, r0, ip
 8002542:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80025e4 <.text_16>
 8002546:	b319      	cbz	r1, 8002590 <forward_matmul+0x140>
 8002548:	07c8      	lsls	r0, r1, #31
 800254a:	d509      	bpl.n	8002560 <forward_matmul+0x110>
 800254c:	edd5 0a00 	vldr	s1, [r5]
 8002550:	ed97 1a00 	vldr	s2, [r7]
 8002554:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002558:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800255c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002560:	0848      	lsrs	r0, r1, #1
 8002562:	d015      	beq.n	8002590 <forward_matmul+0x140>
 8002564:	edd5 0a00 	vldr	s1, [r5]
 8002568:	ed97 1a00 	vldr	s2, [r7]
 800256c:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002570:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002574:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002578:	edd5 0a00 	vldr	s1, [r5]
 800257c:	ed97 1a00 	vldr	s2, [r7]
 8002580:	1e40      	subs	r0, r0, #1
 8002582:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002586:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800258a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 800258e:	d1e9      	bne.n	8002564 <forward_matmul+0x114>
 8002590:	ed83 0a00 	vstr	s0, [r3]
 8002594:	1d1b      	adds	r3, r3, #4
 8002596:	1e52      	subs	r2, r2, #1
 8002598:	f10c 0c04 	add.w	ip, ip, #4
 800259c:	d1c3      	bne.n	8002526 <forward_matmul+0xd6>
 800259e:	9808      	ldr	r0, [sp, #32]
 80025a0:	9d00      	ldr	r5, [sp, #0]
 80025a2:	9a07      	ldr	r2, [sp, #28]
 80025a4:	1e6d      	subs	r5, r5, #1
 80025a6:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 80025aa:	9500      	str	r5, [sp, #0]
 80025ac:	d1b5      	bne.n	800251a <forward_matmul+0xca>
 80025ae:	f8dd a010 	ldr.w	sl, [sp, #16]
 80025b2:	9f01      	ldr	r7, [sp, #4]
 80025b4:	9d05      	ldr	r5, [sp, #20]
 80025b6:	1e7f      	subs	r7, r7, #1
 80025b8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80025bc:	9701      	str	r7, [sp, #4]
 80025be:	d1a3      	bne.n	8002508 <forward_matmul+0xb8>
 80025c0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80025c4:	9d05      	ldr	r5, [sp, #20]
 80025c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80025c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80025ca:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 80025ce:	9e02      	ldr	r6, [sp, #8]
 80025d0:	1e76      	subs	r6, r6, #1
 80025d2:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 80025d6:	9602      	str	r6, [sp, #8]
 80025d8:	d18d      	bne.n	80024f6 <forward_matmul+0xa6>
 80025da:	b00b      	add	sp, #44	; 0x2c
 80025dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080025e0 <.text_15>:
 80025e0:	080013fb 	.word	0x080013fb

080025e4 <.text_16>:
 80025e4:	00000000 	.word	0x00000000

080025e8 <ai_shape_get_size>:
 80025e8:	b470      	push	{r4, r5, r6}
 80025ea:	4601      	mov	r1, r0
 80025ec:	f04f 0201 	mov.w	r2, #1
 80025f0:	680b      	ldr	r3, [r1, #0]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	d01e      	beq.n	8002634 <ai_shape_get_size+0x4c>
 80025f6:	684c      	ldr	r4, [r1, #4]
 80025f8:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	1f0d      	subs	r5, r1, #4
 8002600:	f010 0103 	ands.w	r1, r0, #3
 8002604:	f000 8006 	beq.w	8002614 <ai_shape_get_size+0x2c>
 8002608:	f855 6904 	ldr.w	r6, [r5], #-4
 800260c:	1e5b      	subs	r3, r3, #1
 800260e:	4372      	muls	r2, r6
 8002610:	1e49      	subs	r1, r1, #1
 8002612:	d1f9      	bne.n	8002608 <ai_shape_get_size+0x20>
 8002614:	0880      	lsrs	r0, r0, #2
 8002616:	d00d      	beq.n	8002634 <ai_shape_get_size+0x4c>
 8002618:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800261c:	3910      	subs	r1, #16
 800261e:	68cb      	ldr	r3, [r1, #12]
 8002620:	688c      	ldr	r4, [r1, #8]
 8002622:	684d      	ldr	r5, [r1, #4]
 8002624:	f851 6910 	ldr.w	r6, [r1], #-16
 8002628:	4363      	muls	r3, r4
 800262a:	436b      	muls	r3, r5
 800262c:	4373      	muls	r3, r6
 800262e:	435a      	muls	r2, r3
 8002630:	1e40      	subs	r0, r0, #1
 8002632:	d1f4      	bne.n	800261e <ai_shape_get_size+0x36>
 8002634:	bc70      	pop	{r4, r5, r6}
 8002636:	4610      	mov	r0, r2
 8002638:	4770      	bx	lr
	...

0800263c <nl_func_acos_array_f32>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	688c      	ldr	r4, [r1, #8]
 8002640:	6880      	ldr	r0, [r0, #8]
 8002642:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002646:	1f0d      	subs	r5, r1, #4
 8002648:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800264c:	1f0e      	subs	r6, r1, #4
 800264e:	42a5      	cmp	r5, r4
 8002650:	f0c0 800a 	bcc.w	8002668 <nl_func_acos_array_f32+0x2c>
 8002654:	ed95 0a00 	vldr	s0, [r5]
 8002658:	f010 f95c 	bl	8012914 <acosf>
 800265c:	ed86 0a00 	vstr	s0, [r6]
 8002660:	1f2d      	subs	r5, r5, #4
 8002662:	1f36      	subs	r6, r6, #4
 8002664:	42a5      	cmp	r5, r4
 8002666:	d2f5      	bcs.n	8002654 <nl_func_acos_array_f32+0x18>
 8002668:	bd70      	pop	{r4, r5, r6, pc}
	...

0800266c <forward_acos>:
 800266c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266e:	b081      	sub	sp, #4
 8002670:	6942      	ldr	r2, [r0, #20]
 8002672:	8811      	ldrh	r1, [r2, #0]
 8002674:	2900      	cmp	r1, #0
 8002676:	bf1a      	itte	ne
 8002678:	6850      	ldrne	r0, [r2, #4]
 800267a:	1d00      	addne	r0, r0, #4
 800267c:	2004      	moveq	r0, #4
 800267e:	f04f 0501 	mov.w	r5, #1
 8002682:	6800      	ldr	r0, [r0, #0]
 8002684:	2800      	cmp	r0, #0
 8002686:	bf14      	ite	ne
 8002688:	6803      	ldrne	r3, [r0, #0]
 800268a:	2300      	moveq	r3, #0
 800268c:	2902      	cmp	r1, #2
 800268e:	bfa6      	itte	ge
 8002690:	6850      	ldrge	r0, [r2, #4]
 8002692:	3010      	addge	r0, #16
 8002694:	2004      	movlt	r0, #4
 8002696:	6800      	ldr	r0, [r0, #0]
 8002698:	2800      	cmp	r0, #0
 800269a:	bf19      	ittee	ne
 800269c:	6800      	ldrne	r0, [r0, #0]
 800269e:	f100 0418 	addne.w	r4, r0, #24
 80026a2:	2100      	moveq	r1, #0
 80026a4:	f101 0418 	addeq.w	r4, r1, #24
 80026a8:	f103 0108 	add.w	r1, r3, #8
 80026ac:	680a      	ldr	r2, [r1, #0]
 80026ae:	0a12      	lsrs	r2, r2, #8
 80026b0:	d01e      	beq.n	80026f0 <forward_acos+0x84>
 80026b2:	684e      	ldr	r6, [r1, #4]
 80026b4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026b8:	4610      	mov	r0, r2
 80026ba:	1f0f      	subs	r7, r1, #4
 80026bc:	f010 0103 	ands.w	r1, r0, #3
 80026c0:	d006      	beq.n	80026d0 <forward_acos+0x64>
 80026c2:	1e52      	subs	r2, r2, #1
 80026c4:	f857 c904 	ldr.w	ip, [r7], #-4
 80026c8:	1e49      	subs	r1, r1, #1
 80026ca:	fb0c f505 	mul.w	r5, ip, r5
 80026ce:	d1f8      	bne.n	80026c2 <forward_acos+0x56>
 80026d0:	0880      	lsrs	r0, r0, #2
 80026d2:	d00d      	beq.n	80026f0 <forward_acos+0x84>
 80026d4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026d8:	3910      	subs	r1, #16
 80026da:	68ca      	ldr	r2, [r1, #12]
 80026dc:	688e      	ldr	r6, [r1, #8]
 80026de:	684f      	ldr	r7, [r1, #4]
 80026e0:	4372      	muls	r2, r6
 80026e2:	f851 6910 	ldr.w	r6, [r1], #-16
 80026e6:	437a      	muls	r2, r7
 80026e8:	4372      	muls	r2, r6
 80026ea:	4355      	muls	r5, r2
 80026ec:	1e40      	subs	r0, r0, #1
 80026ee:	d1f4      	bne.n	80026da <forward_acos+0x6e>
 80026f0:	6998      	ldr	r0, [r3, #24]
 80026f2:	6886      	ldr	r6, [r0, #8]
 80026f4:	6821      	ldr	r1, [r4, #0]
 80026f6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80026fa:	1f07      	subs	r7, r0, #4
 80026fc:	6888      	ldr	r0, [r1, #8]
 80026fe:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002702:	1f14      	subs	r4, r2, #4
 8002704:	42b7      	cmp	r7, r6
 8002706:	d309      	bcc.n	800271c <forward_acos+0xb0>
 8002708:	ed97 0a00 	vldr	s0, [r7]
 800270c:	f010 f902 	bl	8012914 <acosf>
 8002710:	ed84 0a00 	vstr	s0, [r4]
 8002714:	1f3f      	subs	r7, r7, #4
 8002716:	1f24      	subs	r4, r4, #4
 8002718:	42b7      	cmp	r7, r6
 800271a:	d2f5      	bcs.n	8002708 <forward_acos+0x9c>
 800271c:	b001      	add	sp, #4
 800271e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002720 <nl_func_acosh_array_f32>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	688c      	ldr	r4, [r1, #8]
 8002724:	6880      	ldr	r0, [r0, #8]
 8002726:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800272a:	1f0d      	subs	r5, r1, #4
 800272c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002730:	1f0e      	subs	r6, r1, #4
 8002732:	42a5      	cmp	r5, r4
 8002734:	f0c0 800a 	bcc.w	800274c <nl_func_acosh_array_f32+0x2c>
 8002738:	ed95 0a00 	vldr	s0, [r5]
 800273c:	f010 f942 	bl	80129c4 <acoshf>
 8002740:	ed86 0a00 	vstr	s0, [r6]
 8002744:	1f2d      	subs	r5, r5, #4
 8002746:	1f36      	subs	r6, r6, #4
 8002748:	42a5      	cmp	r5, r4
 800274a:	d2f5      	bcs.n	8002738 <nl_func_acosh_array_f32+0x18>
 800274c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002750 <forward_acosh>:
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	b081      	sub	sp, #4
 8002754:	6942      	ldr	r2, [r0, #20]
 8002756:	8811      	ldrh	r1, [r2, #0]
 8002758:	2900      	cmp	r1, #0
 800275a:	bf1a      	itte	ne
 800275c:	6850      	ldrne	r0, [r2, #4]
 800275e:	1d00      	addne	r0, r0, #4
 8002760:	2004      	moveq	r0, #4
 8002762:	f04f 0501 	mov.w	r5, #1
 8002766:	6800      	ldr	r0, [r0, #0]
 8002768:	2800      	cmp	r0, #0
 800276a:	bf14      	ite	ne
 800276c:	6803      	ldrne	r3, [r0, #0]
 800276e:	2300      	moveq	r3, #0
 8002770:	2902      	cmp	r1, #2
 8002772:	bfa6      	itte	ge
 8002774:	6850      	ldrge	r0, [r2, #4]
 8002776:	3010      	addge	r0, #16
 8002778:	2004      	movlt	r0, #4
 800277a:	6800      	ldr	r0, [r0, #0]
 800277c:	2800      	cmp	r0, #0
 800277e:	bf19      	ittee	ne
 8002780:	6800      	ldrne	r0, [r0, #0]
 8002782:	f100 0418 	addne.w	r4, r0, #24
 8002786:	2100      	moveq	r1, #0
 8002788:	f101 0418 	addeq.w	r4, r1, #24
 800278c:	f103 0108 	add.w	r1, r3, #8
 8002790:	680a      	ldr	r2, [r1, #0]
 8002792:	0a12      	lsrs	r2, r2, #8
 8002794:	d01e      	beq.n	80027d4 <forward_acosh+0x84>
 8002796:	684e      	ldr	r6, [r1, #4]
 8002798:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800279c:	4610      	mov	r0, r2
 800279e:	1f0f      	subs	r7, r1, #4
 80027a0:	f010 0103 	ands.w	r1, r0, #3
 80027a4:	d006      	beq.n	80027b4 <forward_acosh+0x64>
 80027a6:	1e52      	subs	r2, r2, #1
 80027a8:	f857 c904 	ldr.w	ip, [r7], #-4
 80027ac:	1e49      	subs	r1, r1, #1
 80027ae:	fb0c f505 	mul.w	r5, ip, r5
 80027b2:	d1f8      	bne.n	80027a6 <forward_acosh+0x56>
 80027b4:	0880      	lsrs	r0, r0, #2
 80027b6:	d00d      	beq.n	80027d4 <forward_acosh+0x84>
 80027b8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027bc:	3910      	subs	r1, #16
 80027be:	68ca      	ldr	r2, [r1, #12]
 80027c0:	688e      	ldr	r6, [r1, #8]
 80027c2:	684f      	ldr	r7, [r1, #4]
 80027c4:	4372      	muls	r2, r6
 80027c6:	f851 6910 	ldr.w	r6, [r1], #-16
 80027ca:	437a      	muls	r2, r7
 80027cc:	4372      	muls	r2, r6
 80027ce:	4355      	muls	r5, r2
 80027d0:	1e40      	subs	r0, r0, #1
 80027d2:	d1f4      	bne.n	80027be <forward_acosh+0x6e>
 80027d4:	6998      	ldr	r0, [r3, #24]
 80027d6:	6886      	ldr	r6, [r0, #8]
 80027d8:	6821      	ldr	r1, [r4, #0]
 80027da:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80027de:	1f07      	subs	r7, r0, #4
 80027e0:	6888      	ldr	r0, [r1, #8]
 80027e2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80027e6:	1f14      	subs	r4, r2, #4
 80027e8:	42b7      	cmp	r7, r6
 80027ea:	d309      	bcc.n	8002800 <forward_acosh+0xb0>
 80027ec:	ed97 0a00 	vldr	s0, [r7]
 80027f0:	f010 f8e8 	bl	80129c4 <acoshf>
 80027f4:	ed84 0a00 	vstr	s0, [r4]
 80027f8:	1f3f      	subs	r7, r7, #4
 80027fa:	1f24      	subs	r4, r4, #4
 80027fc:	42b7      	cmp	r7, r6
 80027fe:	d2f5      	bcs.n	80027ec <forward_acosh+0x9c>
 8002800:	b001      	add	sp, #4
 8002802:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002804 <nl_func_asin_array_f32>:
 8002804:	b570      	push	{r4, r5, r6, lr}
 8002806:	688c      	ldr	r4, [r1, #8]
 8002808:	6880      	ldr	r0, [r0, #8]
 800280a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800280e:	1f0d      	subs	r5, r1, #4
 8002810:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002814:	1f0e      	subs	r6, r1, #4
 8002816:	42a5      	cmp	r5, r4
 8002818:	f0c0 800a 	bcc.w	8002830 <nl_func_asin_array_f32+0x2c>
 800281c:	ed95 0a00 	vldr	s0, [r5]
 8002820:	f010 f920 	bl	8012a64 <asinf>
 8002824:	ed86 0a00 	vstr	s0, [r6]
 8002828:	1f2d      	subs	r5, r5, #4
 800282a:	1f36      	subs	r6, r6, #4
 800282c:	42a5      	cmp	r5, r4
 800282e:	d2f5      	bcs.n	800281c <nl_func_asin_array_f32+0x18>
 8002830:	bd70      	pop	{r4, r5, r6, pc}
	...

08002834 <forward_asin>:
 8002834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002836:	b081      	sub	sp, #4
 8002838:	6942      	ldr	r2, [r0, #20]
 800283a:	8811      	ldrh	r1, [r2, #0]
 800283c:	2900      	cmp	r1, #0
 800283e:	bf1a      	itte	ne
 8002840:	6850      	ldrne	r0, [r2, #4]
 8002842:	1d00      	addne	r0, r0, #4
 8002844:	2004      	moveq	r0, #4
 8002846:	f04f 0501 	mov.w	r5, #1
 800284a:	6800      	ldr	r0, [r0, #0]
 800284c:	2800      	cmp	r0, #0
 800284e:	bf14      	ite	ne
 8002850:	6803      	ldrne	r3, [r0, #0]
 8002852:	2300      	moveq	r3, #0
 8002854:	2902      	cmp	r1, #2
 8002856:	bfa6      	itte	ge
 8002858:	6850      	ldrge	r0, [r2, #4]
 800285a:	3010      	addge	r0, #16
 800285c:	2004      	movlt	r0, #4
 800285e:	6800      	ldr	r0, [r0, #0]
 8002860:	2800      	cmp	r0, #0
 8002862:	bf19      	ittee	ne
 8002864:	6800      	ldrne	r0, [r0, #0]
 8002866:	f100 0418 	addne.w	r4, r0, #24
 800286a:	2100      	moveq	r1, #0
 800286c:	f101 0418 	addeq.w	r4, r1, #24
 8002870:	f103 0108 	add.w	r1, r3, #8
 8002874:	680a      	ldr	r2, [r1, #0]
 8002876:	0a12      	lsrs	r2, r2, #8
 8002878:	d01e      	beq.n	80028b8 <forward_asin+0x84>
 800287a:	684e      	ldr	r6, [r1, #4]
 800287c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002880:	4610      	mov	r0, r2
 8002882:	1f0f      	subs	r7, r1, #4
 8002884:	f010 0103 	ands.w	r1, r0, #3
 8002888:	d006      	beq.n	8002898 <forward_asin+0x64>
 800288a:	1e52      	subs	r2, r2, #1
 800288c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002890:	1e49      	subs	r1, r1, #1
 8002892:	fb0c f505 	mul.w	r5, ip, r5
 8002896:	d1f8      	bne.n	800288a <forward_asin+0x56>
 8002898:	0880      	lsrs	r0, r0, #2
 800289a:	d00d      	beq.n	80028b8 <forward_asin+0x84>
 800289c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028a0:	3910      	subs	r1, #16
 80028a2:	68ca      	ldr	r2, [r1, #12]
 80028a4:	688e      	ldr	r6, [r1, #8]
 80028a6:	684f      	ldr	r7, [r1, #4]
 80028a8:	4372      	muls	r2, r6
 80028aa:	f851 6910 	ldr.w	r6, [r1], #-16
 80028ae:	437a      	muls	r2, r7
 80028b0:	4372      	muls	r2, r6
 80028b2:	4355      	muls	r5, r2
 80028b4:	1e40      	subs	r0, r0, #1
 80028b6:	d1f4      	bne.n	80028a2 <forward_asin+0x6e>
 80028b8:	6998      	ldr	r0, [r3, #24]
 80028ba:	6886      	ldr	r6, [r0, #8]
 80028bc:	6821      	ldr	r1, [r4, #0]
 80028be:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80028c2:	1f07      	subs	r7, r0, #4
 80028c4:	6888      	ldr	r0, [r1, #8]
 80028c6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80028ca:	1f14      	subs	r4, r2, #4
 80028cc:	42b7      	cmp	r7, r6
 80028ce:	d309      	bcc.n	80028e4 <forward_asin+0xb0>
 80028d0:	ed97 0a00 	vldr	s0, [r7]
 80028d4:	f010 f8c6 	bl	8012a64 <asinf>
 80028d8:	ed84 0a00 	vstr	s0, [r4]
 80028dc:	1f3f      	subs	r7, r7, #4
 80028de:	1f24      	subs	r4, r4, #4
 80028e0:	42b7      	cmp	r7, r6
 80028e2:	d2f5      	bcs.n	80028d0 <forward_asin+0x9c>
 80028e4:	b001      	add	sp, #4
 80028e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028e8 <nl_func_asinh_array_f32>:
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	688c      	ldr	r4, [r1, #8]
 80028ec:	6880      	ldr	r0, [r0, #8]
 80028ee:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80028f2:	1f0d      	subs	r5, r1, #4
 80028f4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80028f8:	1f0e      	subs	r6, r1, #4
 80028fa:	42a5      	cmp	r5, r4
 80028fc:	f0c0 800a 	bcc.w	8002914 <nl_func_asinh_array_f32+0x2c>
 8002900:	ed95 0a00 	vldr	s0, [r5]
 8002904:	f00f fa36 	bl	8011d74 <asinhf>
 8002908:	ed86 0a00 	vstr	s0, [r6]
 800290c:	1f2d      	subs	r5, r5, #4
 800290e:	1f36      	subs	r6, r6, #4
 8002910:	42a5      	cmp	r5, r4
 8002912:	d2f5      	bcs.n	8002900 <nl_func_asinh_array_f32+0x18>
 8002914:	bd70      	pop	{r4, r5, r6, pc}
	...

08002918 <forward_asinh>:
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291a:	b081      	sub	sp, #4
 800291c:	6942      	ldr	r2, [r0, #20]
 800291e:	8811      	ldrh	r1, [r2, #0]
 8002920:	2900      	cmp	r1, #0
 8002922:	bf1a      	itte	ne
 8002924:	6850      	ldrne	r0, [r2, #4]
 8002926:	1d00      	addne	r0, r0, #4
 8002928:	2004      	moveq	r0, #4
 800292a:	f04f 0501 	mov.w	r5, #1
 800292e:	6800      	ldr	r0, [r0, #0]
 8002930:	2800      	cmp	r0, #0
 8002932:	bf14      	ite	ne
 8002934:	6803      	ldrne	r3, [r0, #0]
 8002936:	2300      	moveq	r3, #0
 8002938:	2902      	cmp	r1, #2
 800293a:	bfa6      	itte	ge
 800293c:	6850      	ldrge	r0, [r2, #4]
 800293e:	3010      	addge	r0, #16
 8002940:	2004      	movlt	r0, #4
 8002942:	6800      	ldr	r0, [r0, #0]
 8002944:	2800      	cmp	r0, #0
 8002946:	bf19      	ittee	ne
 8002948:	6800      	ldrne	r0, [r0, #0]
 800294a:	f100 0418 	addne.w	r4, r0, #24
 800294e:	2100      	moveq	r1, #0
 8002950:	f101 0418 	addeq.w	r4, r1, #24
 8002954:	f103 0108 	add.w	r1, r3, #8
 8002958:	680a      	ldr	r2, [r1, #0]
 800295a:	0a12      	lsrs	r2, r2, #8
 800295c:	d01e      	beq.n	800299c <forward_asinh+0x84>
 800295e:	684e      	ldr	r6, [r1, #4]
 8002960:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002964:	4610      	mov	r0, r2
 8002966:	1f0f      	subs	r7, r1, #4
 8002968:	f010 0103 	ands.w	r1, r0, #3
 800296c:	d006      	beq.n	800297c <forward_asinh+0x64>
 800296e:	1e52      	subs	r2, r2, #1
 8002970:	f857 c904 	ldr.w	ip, [r7], #-4
 8002974:	1e49      	subs	r1, r1, #1
 8002976:	fb0c f505 	mul.w	r5, ip, r5
 800297a:	d1f8      	bne.n	800296e <forward_asinh+0x56>
 800297c:	0880      	lsrs	r0, r0, #2
 800297e:	d00d      	beq.n	800299c <forward_asinh+0x84>
 8002980:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002984:	3910      	subs	r1, #16
 8002986:	68ca      	ldr	r2, [r1, #12]
 8002988:	688e      	ldr	r6, [r1, #8]
 800298a:	684f      	ldr	r7, [r1, #4]
 800298c:	4372      	muls	r2, r6
 800298e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002992:	437a      	muls	r2, r7
 8002994:	4372      	muls	r2, r6
 8002996:	4355      	muls	r5, r2
 8002998:	1e40      	subs	r0, r0, #1
 800299a:	d1f4      	bne.n	8002986 <forward_asinh+0x6e>
 800299c:	6998      	ldr	r0, [r3, #24]
 800299e:	6886      	ldr	r6, [r0, #8]
 80029a0:	6821      	ldr	r1, [r4, #0]
 80029a2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80029a6:	1f07      	subs	r7, r0, #4
 80029a8:	6888      	ldr	r0, [r1, #8]
 80029aa:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80029ae:	1f14      	subs	r4, r2, #4
 80029b0:	42b7      	cmp	r7, r6
 80029b2:	d309      	bcc.n	80029c8 <forward_asinh+0xb0>
 80029b4:	ed97 0a00 	vldr	s0, [r7]
 80029b8:	f00f f9dc 	bl	8011d74 <asinhf>
 80029bc:	ed84 0a00 	vstr	s0, [r4]
 80029c0:	1f3f      	subs	r7, r7, #4
 80029c2:	1f24      	subs	r4, r4, #4
 80029c4:	42b7      	cmp	r7, r6
 80029c6:	d2f5      	bcs.n	80029b4 <forward_asinh+0x9c>
 80029c8:	b001      	add	sp, #4
 80029ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029cc <nl_func_atan_array_f32>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	688c      	ldr	r4, [r1, #8]
 80029d0:	6880      	ldr	r0, [r0, #8]
 80029d2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80029d6:	1f0d      	subs	r5, r1, #4
 80029d8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80029dc:	1f0e      	subs	r6, r1, #4
 80029de:	42a5      	cmp	r5, r4
 80029e0:	f0c0 800a 	bcc.w	80029f8 <nl_func_atan_array_f32+0x2c>
 80029e4:	ed95 0a00 	vldr	s0, [r5]
 80029e8:	f00f fa2c 	bl	8011e44 <atanf>
 80029ec:	ed86 0a00 	vstr	s0, [r6]
 80029f0:	1f2d      	subs	r5, r5, #4
 80029f2:	1f36      	subs	r6, r6, #4
 80029f4:	42a5      	cmp	r5, r4
 80029f6:	d2f5      	bcs.n	80029e4 <nl_func_atan_array_f32+0x18>
 80029f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080029fc <forward_atan>:
 80029fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fe:	b081      	sub	sp, #4
 8002a00:	6942      	ldr	r2, [r0, #20]
 8002a02:	8811      	ldrh	r1, [r2, #0]
 8002a04:	2900      	cmp	r1, #0
 8002a06:	bf1a      	itte	ne
 8002a08:	6850      	ldrne	r0, [r2, #4]
 8002a0a:	1d00      	addne	r0, r0, #4
 8002a0c:	2004      	moveq	r0, #4
 8002a0e:	f04f 0501 	mov.w	r5, #1
 8002a12:	6800      	ldr	r0, [r0, #0]
 8002a14:	2800      	cmp	r0, #0
 8002a16:	bf14      	ite	ne
 8002a18:	6803      	ldrne	r3, [r0, #0]
 8002a1a:	2300      	moveq	r3, #0
 8002a1c:	2902      	cmp	r1, #2
 8002a1e:	bfa6      	itte	ge
 8002a20:	6850      	ldrge	r0, [r2, #4]
 8002a22:	3010      	addge	r0, #16
 8002a24:	2004      	movlt	r0, #4
 8002a26:	6800      	ldr	r0, [r0, #0]
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	bf19      	ittee	ne
 8002a2c:	6800      	ldrne	r0, [r0, #0]
 8002a2e:	f100 0418 	addne.w	r4, r0, #24
 8002a32:	2100      	moveq	r1, #0
 8002a34:	f101 0418 	addeq.w	r4, r1, #24
 8002a38:	f103 0108 	add.w	r1, r3, #8
 8002a3c:	680a      	ldr	r2, [r1, #0]
 8002a3e:	0a12      	lsrs	r2, r2, #8
 8002a40:	d01e      	beq.n	8002a80 <forward_atan+0x84>
 8002a42:	684e      	ldr	r6, [r1, #4]
 8002a44:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a48:	4610      	mov	r0, r2
 8002a4a:	1f0f      	subs	r7, r1, #4
 8002a4c:	f010 0103 	ands.w	r1, r0, #3
 8002a50:	d006      	beq.n	8002a60 <forward_atan+0x64>
 8002a52:	1e52      	subs	r2, r2, #1
 8002a54:	f857 c904 	ldr.w	ip, [r7], #-4
 8002a58:	1e49      	subs	r1, r1, #1
 8002a5a:	fb0c f505 	mul.w	r5, ip, r5
 8002a5e:	d1f8      	bne.n	8002a52 <forward_atan+0x56>
 8002a60:	0880      	lsrs	r0, r0, #2
 8002a62:	d00d      	beq.n	8002a80 <forward_atan+0x84>
 8002a64:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a68:	3910      	subs	r1, #16
 8002a6a:	68ca      	ldr	r2, [r1, #12]
 8002a6c:	688e      	ldr	r6, [r1, #8]
 8002a6e:	684f      	ldr	r7, [r1, #4]
 8002a70:	4372      	muls	r2, r6
 8002a72:	f851 6910 	ldr.w	r6, [r1], #-16
 8002a76:	437a      	muls	r2, r7
 8002a78:	4372      	muls	r2, r6
 8002a7a:	4355      	muls	r5, r2
 8002a7c:	1e40      	subs	r0, r0, #1
 8002a7e:	d1f4      	bne.n	8002a6a <forward_atan+0x6e>
 8002a80:	6998      	ldr	r0, [r3, #24]
 8002a82:	6886      	ldr	r6, [r0, #8]
 8002a84:	6821      	ldr	r1, [r4, #0]
 8002a86:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002a8a:	1f07      	subs	r7, r0, #4
 8002a8c:	6888      	ldr	r0, [r1, #8]
 8002a8e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002a92:	1f14      	subs	r4, r2, #4
 8002a94:	42b7      	cmp	r7, r6
 8002a96:	d309      	bcc.n	8002aac <forward_atan+0xb0>
 8002a98:	ed97 0a00 	vldr	s0, [r7]
 8002a9c:	f00f f9d2 	bl	8011e44 <atanf>
 8002aa0:	ed84 0a00 	vstr	s0, [r4]
 8002aa4:	1f3f      	subs	r7, r7, #4
 8002aa6:	1f24      	subs	r4, r4, #4
 8002aa8:	42b7      	cmp	r7, r6
 8002aaa:	d2f5      	bcs.n	8002a98 <forward_atan+0x9c>
 8002aac:	b001      	add	sp, #4
 8002aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ab0 <nl_func_atanh_array_f32>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	688c      	ldr	r4, [r1, #8]
 8002ab4:	6880      	ldr	r0, [r0, #8]
 8002ab6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002aba:	1f0d      	subs	r5, r1, #4
 8002abc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002ac0:	1f0e      	subs	r6, r1, #4
 8002ac2:	42a5      	cmp	r5, r4
 8002ac4:	f0c0 800a 	bcc.w	8002adc <nl_func_atanh_array_f32+0x2c>
 8002ac8:	ed95 0a00 	vldr	s0, [r5]
 8002acc:	f010 f822 	bl	8012b14 <atanhf>
 8002ad0:	ed86 0a00 	vstr	s0, [r6]
 8002ad4:	1f2d      	subs	r5, r5, #4
 8002ad6:	1f36      	subs	r6, r6, #4
 8002ad8:	42a5      	cmp	r5, r4
 8002ada:	d2f5      	bcs.n	8002ac8 <nl_func_atanh_array_f32+0x18>
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ae0 <forward_atanh>:
 8002ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae2:	b081      	sub	sp, #4
 8002ae4:	6942      	ldr	r2, [r0, #20]
 8002ae6:	8811      	ldrh	r1, [r2, #0]
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	bf1a      	itte	ne
 8002aec:	6850      	ldrne	r0, [r2, #4]
 8002aee:	1d00      	addne	r0, r0, #4
 8002af0:	2004      	moveq	r0, #4
 8002af2:	f04f 0501 	mov.w	r5, #1
 8002af6:	6800      	ldr	r0, [r0, #0]
 8002af8:	2800      	cmp	r0, #0
 8002afa:	bf14      	ite	ne
 8002afc:	6803      	ldrne	r3, [r0, #0]
 8002afe:	2300      	moveq	r3, #0
 8002b00:	2902      	cmp	r1, #2
 8002b02:	bfa6      	itte	ge
 8002b04:	6850      	ldrge	r0, [r2, #4]
 8002b06:	3010      	addge	r0, #16
 8002b08:	2004      	movlt	r0, #4
 8002b0a:	6800      	ldr	r0, [r0, #0]
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	bf19      	ittee	ne
 8002b10:	6800      	ldrne	r0, [r0, #0]
 8002b12:	f100 0418 	addne.w	r4, r0, #24
 8002b16:	2100      	moveq	r1, #0
 8002b18:	f101 0418 	addeq.w	r4, r1, #24
 8002b1c:	f103 0108 	add.w	r1, r3, #8
 8002b20:	680a      	ldr	r2, [r1, #0]
 8002b22:	0a12      	lsrs	r2, r2, #8
 8002b24:	d01e      	beq.n	8002b64 <forward_atanh+0x84>
 8002b26:	684e      	ldr	r6, [r1, #4]
 8002b28:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	1f0f      	subs	r7, r1, #4
 8002b30:	f010 0103 	ands.w	r1, r0, #3
 8002b34:	d006      	beq.n	8002b44 <forward_atanh+0x64>
 8002b36:	1e52      	subs	r2, r2, #1
 8002b38:	f857 c904 	ldr.w	ip, [r7], #-4
 8002b3c:	1e49      	subs	r1, r1, #1
 8002b3e:	fb0c f505 	mul.w	r5, ip, r5
 8002b42:	d1f8      	bne.n	8002b36 <forward_atanh+0x56>
 8002b44:	0880      	lsrs	r0, r0, #2
 8002b46:	d00d      	beq.n	8002b64 <forward_atanh+0x84>
 8002b48:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b4c:	3910      	subs	r1, #16
 8002b4e:	68ca      	ldr	r2, [r1, #12]
 8002b50:	688e      	ldr	r6, [r1, #8]
 8002b52:	684f      	ldr	r7, [r1, #4]
 8002b54:	4372      	muls	r2, r6
 8002b56:	f851 6910 	ldr.w	r6, [r1], #-16
 8002b5a:	437a      	muls	r2, r7
 8002b5c:	4372      	muls	r2, r6
 8002b5e:	4355      	muls	r5, r2
 8002b60:	1e40      	subs	r0, r0, #1
 8002b62:	d1f4      	bne.n	8002b4e <forward_atanh+0x6e>
 8002b64:	6998      	ldr	r0, [r3, #24]
 8002b66:	6886      	ldr	r6, [r0, #8]
 8002b68:	6821      	ldr	r1, [r4, #0]
 8002b6a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002b6e:	1f07      	subs	r7, r0, #4
 8002b70:	6888      	ldr	r0, [r1, #8]
 8002b72:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002b76:	1f14      	subs	r4, r2, #4
 8002b78:	42b7      	cmp	r7, r6
 8002b7a:	d309      	bcc.n	8002b90 <forward_atanh+0xb0>
 8002b7c:	ed97 0a00 	vldr	s0, [r7]
 8002b80:	f00f ffc8 	bl	8012b14 <atanhf>
 8002b84:	ed84 0a00 	vstr	s0, [r4]
 8002b88:	1f3f      	subs	r7, r7, #4
 8002b8a:	1f24      	subs	r4, r4, #4
 8002b8c:	42b7      	cmp	r7, r6
 8002b8e:	d2f5      	bcs.n	8002b7c <forward_atanh+0x9c>
 8002b90:	b001      	add	sp, #4
 8002b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b94 <nl_func_cos_array_f32>:
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	688c      	ldr	r4, [r1, #8]
 8002b98:	6880      	ldr	r0, [r0, #8]
 8002b9a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002b9e:	1f0d      	subs	r5, r1, #4
 8002ba0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002ba4:	1f0e      	subs	r6, r1, #4
 8002ba6:	42a5      	cmp	r5, r4
 8002ba8:	f0c0 800a 	bcc.w	8002bc0 <nl_func_cos_array_f32+0x2c>
 8002bac:	ed95 0a00 	vldr	s0, [r5]
 8002bb0:	f00f fa5c 	bl	801206c <cosf>
 8002bb4:	ed86 0a00 	vstr	s0, [r6]
 8002bb8:	1f2d      	subs	r5, r5, #4
 8002bba:	1f36      	subs	r6, r6, #4
 8002bbc:	42a5      	cmp	r5, r4
 8002bbe:	d2f5      	bcs.n	8002bac <nl_func_cos_array_f32+0x18>
 8002bc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002bc4 <forward_cos>:
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc6:	b081      	sub	sp, #4
 8002bc8:	6942      	ldr	r2, [r0, #20]
 8002bca:	8811      	ldrh	r1, [r2, #0]
 8002bcc:	2900      	cmp	r1, #0
 8002bce:	bf1a      	itte	ne
 8002bd0:	6850      	ldrne	r0, [r2, #4]
 8002bd2:	1d00      	addne	r0, r0, #4
 8002bd4:	2004      	moveq	r0, #4
 8002bd6:	f04f 0501 	mov.w	r5, #1
 8002bda:	6800      	ldr	r0, [r0, #0]
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	bf14      	ite	ne
 8002be0:	6803      	ldrne	r3, [r0, #0]
 8002be2:	2300      	moveq	r3, #0
 8002be4:	2902      	cmp	r1, #2
 8002be6:	bfa6      	itte	ge
 8002be8:	6850      	ldrge	r0, [r2, #4]
 8002bea:	3010      	addge	r0, #16
 8002bec:	2004      	movlt	r0, #4
 8002bee:	6800      	ldr	r0, [r0, #0]
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	bf19      	ittee	ne
 8002bf4:	6800      	ldrne	r0, [r0, #0]
 8002bf6:	f100 0418 	addne.w	r4, r0, #24
 8002bfa:	2100      	moveq	r1, #0
 8002bfc:	f101 0418 	addeq.w	r4, r1, #24
 8002c00:	f103 0108 	add.w	r1, r3, #8
 8002c04:	680a      	ldr	r2, [r1, #0]
 8002c06:	0a12      	lsrs	r2, r2, #8
 8002c08:	d01e      	beq.n	8002c48 <forward_cos+0x84>
 8002c0a:	684e      	ldr	r6, [r1, #4]
 8002c0c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c10:	4610      	mov	r0, r2
 8002c12:	1f0f      	subs	r7, r1, #4
 8002c14:	f010 0103 	ands.w	r1, r0, #3
 8002c18:	d006      	beq.n	8002c28 <forward_cos+0x64>
 8002c1a:	1e52      	subs	r2, r2, #1
 8002c1c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002c20:	1e49      	subs	r1, r1, #1
 8002c22:	fb0c f505 	mul.w	r5, ip, r5
 8002c26:	d1f8      	bne.n	8002c1a <forward_cos+0x56>
 8002c28:	0880      	lsrs	r0, r0, #2
 8002c2a:	d00d      	beq.n	8002c48 <forward_cos+0x84>
 8002c2c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c30:	3910      	subs	r1, #16
 8002c32:	68ca      	ldr	r2, [r1, #12]
 8002c34:	688e      	ldr	r6, [r1, #8]
 8002c36:	684f      	ldr	r7, [r1, #4]
 8002c38:	4372      	muls	r2, r6
 8002c3a:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c3e:	437a      	muls	r2, r7
 8002c40:	4372      	muls	r2, r6
 8002c42:	4355      	muls	r5, r2
 8002c44:	1e40      	subs	r0, r0, #1
 8002c46:	d1f4      	bne.n	8002c32 <forward_cos+0x6e>
 8002c48:	6998      	ldr	r0, [r3, #24]
 8002c4a:	6886      	ldr	r6, [r0, #8]
 8002c4c:	6821      	ldr	r1, [r4, #0]
 8002c4e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002c52:	1f07      	subs	r7, r0, #4
 8002c54:	6888      	ldr	r0, [r1, #8]
 8002c56:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002c5a:	1f14      	subs	r4, r2, #4
 8002c5c:	42b7      	cmp	r7, r6
 8002c5e:	d309      	bcc.n	8002c74 <forward_cos+0xb0>
 8002c60:	ed97 0a00 	vldr	s0, [r7]
 8002c64:	f00f fa02 	bl	801206c <cosf>
 8002c68:	ed84 0a00 	vstr	s0, [r4]
 8002c6c:	1f3f      	subs	r7, r7, #4
 8002c6e:	1f24      	subs	r4, r4, #4
 8002c70:	42b7      	cmp	r7, r6
 8002c72:	d2f5      	bcs.n	8002c60 <forward_cos+0x9c>
 8002c74:	b001      	add	sp, #4
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c78 <nl_func_cosh_array_f32>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	688c      	ldr	r4, [r1, #8]
 8002c7c:	6880      	ldr	r0, [r0, #8]
 8002c7e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002c82:	1f0d      	subs	r5, r1, #4
 8002c84:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002c88:	1f0e      	subs	r6, r1, #4
 8002c8a:	42a5      	cmp	r5, r4
 8002c8c:	f0c0 800a 	bcc.w	8002ca4 <nl_func_cosh_array_f32+0x2c>
 8002c90:	ed95 0a00 	vldr	s0, [r5]
 8002c94:	f00f ffb2 	bl	8012bfc <coshf>
 8002c98:	ed86 0a00 	vstr	s0, [r6]
 8002c9c:	1f2d      	subs	r5, r5, #4
 8002c9e:	1f36      	subs	r6, r6, #4
 8002ca0:	42a5      	cmp	r5, r4
 8002ca2:	d2f5      	bcs.n	8002c90 <nl_func_cosh_array_f32+0x18>
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ca8 <forward_cosh>:
 8002ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002caa:	b081      	sub	sp, #4
 8002cac:	6942      	ldr	r2, [r0, #20]
 8002cae:	8811      	ldrh	r1, [r2, #0]
 8002cb0:	2900      	cmp	r1, #0
 8002cb2:	bf1a      	itte	ne
 8002cb4:	6850      	ldrne	r0, [r2, #4]
 8002cb6:	1d00      	addne	r0, r0, #4
 8002cb8:	2004      	moveq	r0, #4
 8002cba:	f04f 0501 	mov.w	r5, #1
 8002cbe:	6800      	ldr	r0, [r0, #0]
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	6803      	ldrne	r3, [r0, #0]
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	2902      	cmp	r1, #2
 8002cca:	bfa6      	itte	ge
 8002ccc:	6850      	ldrge	r0, [r2, #4]
 8002cce:	3010      	addge	r0, #16
 8002cd0:	2004      	movlt	r0, #4
 8002cd2:	6800      	ldr	r0, [r0, #0]
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	bf19      	ittee	ne
 8002cd8:	6800      	ldrne	r0, [r0, #0]
 8002cda:	f100 0418 	addne.w	r4, r0, #24
 8002cde:	2100      	moveq	r1, #0
 8002ce0:	f101 0418 	addeq.w	r4, r1, #24
 8002ce4:	f103 0108 	add.w	r1, r3, #8
 8002ce8:	680a      	ldr	r2, [r1, #0]
 8002cea:	0a12      	lsrs	r2, r2, #8
 8002cec:	d01e      	beq.n	8002d2c <forward_cosh+0x84>
 8002cee:	684e      	ldr	r6, [r1, #4]
 8002cf0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	1f0f      	subs	r7, r1, #4
 8002cf8:	f010 0103 	ands.w	r1, r0, #3
 8002cfc:	d006      	beq.n	8002d0c <forward_cosh+0x64>
 8002cfe:	1e52      	subs	r2, r2, #1
 8002d00:	f857 c904 	ldr.w	ip, [r7], #-4
 8002d04:	1e49      	subs	r1, r1, #1
 8002d06:	fb0c f505 	mul.w	r5, ip, r5
 8002d0a:	d1f8      	bne.n	8002cfe <forward_cosh+0x56>
 8002d0c:	0880      	lsrs	r0, r0, #2
 8002d0e:	d00d      	beq.n	8002d2c <forward_cosh+0x84>
 8002d10:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d14:	3910      	subs	r1, #16
 8002d16:	68ca      	ldr	r2, [r1, #12]
 8002d18:	688e      	ldr	r6, [r1, #8]
 8002d1a:	684f      	ldr	r7, [r1, #4]
 8002d1c:	4372      	muls	r2, r6
 8002d1e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002d22:	437a      	muls	r2, r7
 8002d24:	4372      	muls	r2, r6
 8002d26:	4355      	muls	r5, r2
 8002d28:	1e40      	subs	r0, r0, #1
 8002d2a:	d1f4      	bne.n	8002d16 <forward_cosh+0x6e>
 8002d2c:	6998      	ldr	r0, [r3, #24]
 8002d2e:	6886      	ldr	r6, [r0, #8]
 8002d30:	6821      	ldr	r1, [r4, #0]
 8002d32:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d36:	1f07      	subs	r7, r0, #4
 8002d38:	6888      	ldr	r0, [r1, #8]
 8002d3a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002d3e:	1f14      	subs	r4, r2, #4
 8002d40:	42b7      	cmp	r7, r6
 8002d42:	d309      	bcc.n	8002d58 <forward_cosh+0xb0>
 8002d44:	ed97 0a00 	vldr	s0, [r7]
 8002d48:	f00f ff58 	bl	8012bfc <coshf>
 8002d4c:	ed84 0a00 	vstr	s0, [r4]
 8002d50:	1f3f      	subs	r7, r7, #4
 8002d52:	1f24      	subs	r4, r4, #4
 8002d54:	42b7      	cmp	r7, r6
 8002d56:	d2f5      	bcs.n	8002d44 <forward_cosh+0x9c>
 8002d58:	b001      	add	sp, #4
 8002d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d5c <nl_func_erf_array_f32>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	688c      	ldr	r4, [r1, #8]
 8002d60:	6880      	ldr	r0, [r0, #8]
 8002d62:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002d66:	1f0d      	subs	r5, r1, #4
 8002d68:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002d6c:	1f0e      	subs	r6, r1, #4
 8002d6e:	42a5      	cmp	r5, r4
 8002d70:	f0c0 800a 	bcc.w	8002d88 <nl_func_erf_array_f32+0x2c>
 8002d74:	ed95 0a00 	vldr	s0, [r5]
 8002d78:	f00f f9b8 	bl	80120ec <erff>
 8002d7c:	ed86 0a00 	vstr	s0, [r6]
 8002d80:	1f2d      	subs	r5, r5, #4
 8002d82:	1f36      	subs	r6, r6, #4
 8002d84:	42a5      	cmp	r5, r4
 8002d86:	d2f5      	bcs.n	8002d74 <nl_func_erf_array_f32+0x18>
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d8c <forward_erf>:
 8002d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8e:	b081      	sub	sp, #4
 8002d90:	6942      	ldr	r2, [r0, #20]
 8002d92:	8811      	ldrh	r1, [r2, #0]
 8002d94:	2900      	cmp	r1, #0
 8002d96:	bf1a      	itte	ne
 8002d98:	6850      	ldrne	r0, [r2, #4]
 8002d9a:	1d00      	addne	r0, r0, #4
 8002d9c:	2004      	moveq	r0, #4
 8002d9e:	f04f 0501 	mov.w	r5, #1
 8002da2:	6800      	ldr	r0, [r0, #0]
 8002da4:	2800      	cmp	r0, #0
 8002da6:	bf14      	ite	ne
 8002da8:	6803      	ldrne	r3, [r0, #0]
 8002daa:	2300      	moveq	r3, #0
 8002dac:	2902      	cmp	r1, #2
 8002dae:	bfa6      	itte	ge
 8002db0:	6850      	ldrge	r0, [r2, #4]
 8002db2:	3010      	addge	r0, #16
 8002db4:	2004      	movlt	r0, #4
 8002db6:	6800      	ldr	r0, [r0, #0]
 8002db8:	2800      	cmp	r0, #0
 8002dba:	bf19      	ittee	ne
 8002dbc:	6800      	ldrne	r0, [r0, #0]
 8002dbe:	f100 0418 	addne.w	r4, r0, #24
 8002dc2:	2100      	moveq	r1, #0
 8002dc4:	f101 0418 	addeq.w	r4, r1, #24
 8002dc8:	f103 0108 	add.w	r1, r3, #8
 8002dcc:	680a      	ldr	r2, [r1, #0]
 8002dce:	0a12      	lsrs	r2, r2, #8
 8002dd0:	d01e      	beq.n	8002e10 <forward_erf+0x84>
 8002dd2:	684e      	ldr	r6, [r1, #4]
 8002dd4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002dd8:	4610      	mov	r0, r2
 8002dda:	1f0f      	subs	r7, r1, #4
 8002ddc:	f010 0103 	ands.w	r1, r0, #3
 8002de0:	d006      	beq.n	8002df0 <forward_erf+0x64>
 8002de2:	1e52      	subs	r2, r2, #1
 8002de4:	f857 c904 	ldr.w	ip, [r7], #-4
 8002de8:	1e49      	subs	r1, r1, #1
 8002dea:	fb0c f505 	mul.w	r5, ip, r5
 8002dee:	d1f8      	bne.n	8002de2 <forward_erf+0x56>
 8002df0:	0880      	lsrs	r0, r0, #2
 8002df2:	d00d      	beq.n	8002e10 <forward_erf+0x84>
 8002df4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002df8:	3910      	subs	r1, #16
 8002dfa:	68ca      	ldr	r2, [r1, #12]
 8002dfc:	688e      	ldr	r6, [r1, #8]
 8002dfe:	684f      	ldr	r7, [r1, #4]
 8002e00:	4372      	muls	r2, r6
 8002e02:	f851 6910 	ldr.w	r6, [r1], #-16
 8002e06:	437a      	muls	r2, r7
 8002e08:	4372      	muls	r2, r6
 8002e0a:	4355      	muls	r5, r2
 8002e0c:	1e40      	subs	r0, r0, #1
 8002e0e:	d1f4      	bne.n	8002dfa <forward_erf+0x6e>
 8002e10:	6998      	ldr	r0, [r3, #24]
 8002e12:	6886      	ldr	r6, [r0, #8]
 8002e14:	6821      	ldr	r1, [r4, #0]
 8002e16:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002e1a:	1f07      	subs	r7, r0, #4
 8002e1c:	6888      	ldr	r0, [r1, #8]
 8002e1e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002e22:	1f14      	subs	r4, r2, #4
 8002e24:	42b7      	cmp	r7, r6
 8002e26:	d309      	bcc.n	8002e3c <forward_erf+0xb0>
 8002e28:	ed97 0a00 	vldr	s0, [r7]
 8002e2c:	f00f f95e 	bl	80120ec <erff>
 8002e30:	ed84 0a00 	vstr	s0, [r4]
 8002e34:	1f3f      	subs	r7, r7, #4
 8002e36:	1f24      	subs	r4, r4, #4
 8002e38:	42b7      	cmp	r7, r6
 8002e3a:	d2f5      	bcs.n	8002e28 <forward_erf+0x9c>
 8002e3c:	b001      	add	sp, #4
 8002e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e40 <nl_func_log_array_f32>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	688c      	ldr	r4, [r1, #8]
 8002e44:	6880      	ldr	r0, [r0, #8]
 8002e46:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002e4a:	1f0d      	subs	r5, r1, #4
 8002e4c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002e50:	1f0e      	subs	r6, r1, #4
 8002e52:	42a5      	cmp	r5, r4
 8002e54:	f0c0 800a 	bcc.w	8002e6c <nl_func_log_array_f32+0x2c>
 8002e58:	ed95 0a00 	vldr	s0, [r5]
 8002e5c:	f010 f804 	bl	8012e68 <logf>
 8002e60:	ed86 0a00 	vstr	s0, [r6]
 8002e64:	1f2d      	subs	r5, r5, #4
 8002e66:	1f36      	subs	r6, r6, #4
 8002e68:	42a5      	cmp	r5, r4
 8002e6a:	d2f5      	bcs.n	8002e58 <nl_func_log_array_f32+0x18>
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e70 <forward_log>:
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e72:	b081      	sub	sp, #4
 8002e74:	6942      	ldr	r2, [r0, #20]
 8002e76:	8811      	ldrh	r1, [r2, #0]
 8002e78:	2900      	cmp	r1, #0
 8002e7a:	bf1a      	itte	ne
 8002e7c:	6850      	ldrne	r0, [r2, #4]
 8002e7e:	1d00      	addne	r0, r0, #4
 8002e80:	2004      	moveq	r0, #4
 8002e82:	f04f 0501 	mov.w	r5, #1
 8002e86:	6800      	ldr	r0, [r0, #0]
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	6803      	ldrne	r3, [r0, #0]
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	2902      	cmp	r1, #2
 8002e92:	bfa6      	itte	ge
 8002e94:	6850      	ldrge	r0, [r2, #4]
 8002e96:	3010      	addge	r0, #16
 8002e98:	2004      	movlt	r0, #4
 8002e9a:	6800      	ldr	r0, [r0, #0]
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	bf19      	ittee	ne
 8002ea0:	6800      	ldrne	r0, [r0, #0]
 8002ea2:	f100 0418 	addne.w	r4, r0, #24
 8002ea6:	2100      	moveq	r1, #0
 8002ea8:	f101 0418 	addeq.w	r4, r1, #24
 8002eac:	f103 0108 	add.w	r1, r3, #8
 8002eb0:	680a      	ldr	r2, [r1, #0]
 8002eb2:	0a12      	lsrs	r2, r2, #8
 8002eb4:	d01e      	beq.n	8002ef4 <forward_log+0x84>
 8002eb6:	684e      	ldr	r6, [r1, #4]
 8002eb8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	1f0f      	subs	r7, r1, #4
 8002ec0:	f010 0103 	ands.w	r1, r0, #3
 8002ec4:	d006      	beq.n	8002ed4 <forward_log+0x64>
 8002ec6:	1e52      	subs	r2, r2, #1
 8002ec8:	f857 c904 	ldr.w	ip, [r7], #-4
 8002ecc:	1e49      	subs	r1, r1, #1
 8002ece:	fb0c f505 	mul.w	r5, ip, r5
 8002ed2:	d1f8      	bne.n	8002ec6 <forward_log+0x56>
 8002ed4:	0880      	lsrs	r0, r0, #2
 8002ed6:	d00d      	beq.n	8002ef4 <forward_log+0x84>
 8002ed8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002edc:	3910      	subs	r1, #16
 8002ede:	68ca      	ldr	r2, [r1, #12]
 8002ee0:	688e      	ldr	r6, [r1, #8]
 8002ee2:	684f      	ldr	r7, [r1, #4]
 8002ee4:	4372      	muls	r2, r6
 8002ee6:	f851 6910 	ldr.w	r6, [r1], #-16
 8002eea:	437a      	muls	r2, r7
 8002eec:	4372      	muls	r2, r6
 8002eee:	4355      	muls	r5, r2
 8002ef0:	1e40      	subs	r0, r0, #1
 8002ef2:	d1f4      	bne.n	8002ede <forward_log+0x6e>
 8002ef4:	6998      	ldr	r0, [r3, #24]
 8002ef6:	6886      	ldr	r6, [r0, #8]
 8002ef8:	6821      	ldr	r1, [r4, #0]
 8002efa:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002efe:	1f07      	subs	r7, r0, #4
 8002f00:	6888      	ldr	r0, [r1, #8]
 8002f02:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002f06:	1f14      	subs	r4, r2, #4
 8002f08:	42b7      	cmp	r7, r6
 8002f0a:	d309      	bcc.n	8002f20 <forward_log+0xb0>
 8002f0c:	ed97 0a00 	vldr	s0, [r7]
 8002f10:	f00f ffaa 	bl	8012e68 <logf>
 8002f14:	ed84 0a00 	vstr	s0, [r4]
 8002f18:	1f3f      	subs	r7, r7, #4
 8002f1a:	1f24      	subs	r4, r4, #4
 8002f1c:	42b7      	cmp	r7, r6
 8002f1e:	d2f5      	bcs.n	8002f0c <forward_log+0x9c>
 8002f20:	b001      	add	sp, #4
 8002f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f24 <nl_func_rsqrt_array_f32>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	460c      	mov	r4, r1
 8002f28:	6880      	ldr	r0, [r0, #8]
 8002f2a:	68a1      	ldr	r1, [r4, #8]
 8002f2c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002f30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f34:	1f1d      	subs	r5, r3, #4
 8002f36:	1f16      	subs	r6, r2, #4
 8002f38:	428d      	cmp	r5, r1
 8002f3a:	d30e      	bcc.n	8002f5a <nl_func_rsqrt_array_f32+0x36>
 8002f3c:	ed95 0a00 	vldr	s0, [r5]
 8002f40:	f003 f930 	bl	80061a4 <ai_math_sqrt>
 8002f44:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f48:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002f4c:	edc6 0a00 	vstr	s1, [r6]
 8002f50:	1f2d      	subs	r5, r5, #4
 8002f52:	68a0      	ldr	r0, [r4, #8]
 8002f54:	1f36      	subs	r6, r6, #4
 8002f56:	4285      	cmp	r5, r0
 8002f58:	d2f0      	bcs.n	8002f3c <nl_func_rsqrt_array_f32+0x18>
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}

08002f5c <forward_rsqrt>:
 8002f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5e:	b081      	sub	sp, #4
 8002f60:	6942      	ldr	r2, [r0, #20]
 8002f62:	8811      	ldrh	r1, [r2, #0]
 8002f64:	2900      	cmp	r1, #0
 8002f66:	bf1a      	itte	ne
 8002f68:	6850      	ldrne	r0, [r2, #4]
 8002f6a:	1d00      	addne	r0, r0, #4
 8002f6c:	2004      	moveq	r0, #4
 8002f6e:	f04f 0501 	mov.w	r5, #1
 8002f72:	6800      	ldr	r0, [r0, #0]
 8002f74:	2800      	cmp	r0, #0
 8002f76:	bf14      	ite	ne
 8002f78:	6803      	ldrne	r3, [r0, #0]
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	2902      	cmp	r1, #2
 8002f7e:	bfa6      	itte	ge
 8002f80:	6850      	ldrge	r0, [r2, #4]
 8002f82:	3010      	addge	r0, #16
 8002f84:	2004      	movlt	r0, #4
 8002f86:	6800      	ldr	r0, [r0, #0]
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	bf19      	ittee	ne
 8002f8c:	6800      	ldrne	r0, [r0, #0]
 8002f8e:	f100 0418 	addne.w	r4, r0, #24
 8002f92:	2100      	moveq	r1, #0
 8002f94:	f101 0418 	addeq.w	r4, r1, #24
 8002f98:	f103 0108 	add.w	r1, r3, #8
 8002f9c:	680a      	ldr	r2, [r1, #0]
 8002f9e:	0a12      	lsrs	r2, r2, #8
 8002fa0:	d01e      	beq.n	8002fe0 <forward_rsqrt+0x84>
 8002fa2:	684e      	ldr	r6, [r1, #4]
 8002fa4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002fa8:	4610      	mov	r0, r2
 8002faa:	1f0f      	subs	r7, r1, #4
 8002fac:	f010 0103 	ands.w	r1, r0, #3
 8002fb0:	d006      	beq.n	8002fc0 <forward_rsqrt+0x64>
 8002fb2:	1e52      	subs	r2, r2, #1
 8002fb4:	f857 c904 	ldr.w	ip, [r7], #-4
 8002fb8:	1e49      	subs	r1, r1, #1
 8002fba:	fb0c f505 	mul.w	r5, ip, r5
 8002fbe:	d1f8      	bne.n	8002fb2 <forward_rsqrt+0x56>
 8002fc0:	0880      	lsrs	r0, r0, #2
 8002fc2:	d00d      	beq.n	8002fe0 <forward_rsqrt+0x84>
 8002fc4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002fc8:	3910      	subs	r1, #16
 8002fca:	68ca      	ldr	r2, [r1, #12]
 8002fcc:	688e      	ldr	r6, [r1, #8]
 8002fce:	684f      	ldr	r7, [r1, #4]
 8002fd0:	4372      	muls	r2, r6
 8002fd2:	f851 6910 	ldr.w	r6, [r1], #-16
 8002fd6:	437a      	muls	r2, r7
 8002fd8:	4372      	muls	r2, r6
 8002fda:	4355      	muls	r5, r2
 8002fdc:	1e40      	subs	r0, r0, #1
 8002fde:	d1f4      	bne.n	8002fca <forward_rsqrt+0x6e>
 8002fe0:	699e      	ldr	r6, [r3, #24]
 8002fe2:	68b0      	ldr	r0, [r6, #8]
 8002fe4:	6822      	ldr	r2, [r4, #0]
 8002fe6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8002fea:	1f0f      	subs	r7, r1, #4
 8002fec:	6891      	ldr	r1, [r2, #8]
 8002fee:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002ff2:	1f1c      	subs	r4, r3, #4
 8002ff4:	4287      	cmp	r7, r0
 8002ff6:	d30e      	bcc.n	8003016 <forward_rsqrt+0xba>
 8002ff8:	ed97 0a00 	vldr	s0, [r7]
 8002ffc:	f003 f8d2 	bl	80061a4 <ai_math_sqrt>
 8003000:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003004:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8003008:	edc4 0a00 	vstr	s1, [r4]
 800300c:	1f3f      	subs	r7, r7, #4
 800300e:	68b0      	ldr	r0, [r6, #8]
 8003010:	1f24      	subs	r4, r4, #4
 8003012:	4287      	cmp	r7, r0
 8003014:	d2f0      	bcs.n	8002ff8 <forward_rsqrt+0x9c>
 8003016:	b001      	add	sp, #4
 8003018:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800301c <nl_func_sin_array_f32>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	688c      	ldr	r4, [r1, #8]
 8003020:	6880      	ldr	r0, [r0, #8]
 8003022:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003026:	1f0d      	subs	r5, r1, #4
 8003028:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800302c:	1f0e      	subs	r6, r1, #4
 800302e:	42a5      	cmp	r5, r4
 8003030:	f0c0 800a 	bcc.w	8003048 <nl_func_sin_array_f32+0x2c>
 8003034:	ed95 0a00 	vldr	s0, [r5]
 8003038:	f00f fbb0 	bl	801279c <sinf>
 800303c:	ed86 0a00 	vstr	s0, [r6]
 8003040:	1f2d      	subs	r5, r5, #4
 8003042:	1f36      	subs	r6, r6, #4
 8003044:	42a5      	cmp	r5, r4
 8003046:	d2f5      	bcs.n	8003034 <nl_func_sin_array_f32+0x18>
 8003048:	bd70      	pop	{r4, r5, r6, pc}
	...

0800304c <forward_sin>:
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304e:	b081      	sub	sp, #4
 8003050:	6942      	ldr	r2, [r0, #20]
 8003052:	8811      	ldrh	r1, [r2, #0]
 8003054:	2900      	cmp	r1, #0
 8003056:	bf1a      	itte	ne
 8003058:	6850      	ldrne	r0, [r2, #4]
 800305a:	1d00      	addne	r0, r0, #4
 800305c:	2004      	moveq	r0, #4
 800305e:	f04f 0501 	mov.w	r5, #1
 8003062:	6800      	ldr	r0, [r0, #0]
 8003064:	2800      	cmp	r0, #0
 8003066:	bf14      	ite	ne
 8003068:	6803      	ldrne	r3, [r0, #0]
 800306a:	2300      	moveq	r3, #0
 800306c:	2902      	cmp	r1, #2
 800306e:	bfa6      	itte	ge
 8003070:	6850      	ldrge	r0, [r2, #4]
 8003072:	3010      	addge	r0, #16
 8003074:	2004      	movlt	r0, #4
 8003076:	6800      	ldr	r0, [r0, #0]
 8003078:	2800      	cmp	r0, #0
 800307a:	bf19      	ittee	ne
 800307c:	6800      	ldrne	r0, [r0, #0]
 800307e:	f100 0418 	addne.w	r4, r0, #24
 8003082:	2100      	moveq	r1, #0
 8003084:	f101 0418 	addeq.w	r4, r1, #24
 8003088:	f103 0108 	add.w	r1, r3, #8
 800308c:	680a      	ldr	r2, [r1, #0]
 800308e:	0a12      	lsrs	r2, r2, #8
 8003090:	d01e      	beq.n	80030d0 <forward_sin+0x84>
 8003092:	684e      	ldr	r6, [r1, #4]
 8003094:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003098:	4610      	mov	r0, r2
 800309a:	1f0f      	subs	r7, r1, #4
 800309c:	f010 0103 	ands.w	r1, r0, #3
 80030a0:	d006      	beq.n	80030b0 <forward_sin+0x64>
 80030a2:	1e52      	subs	r2, r2, #1
 80030a4:	f857 c904 	ldr.w	ip, [r7], #-4
 80030a8:	1e49      	subs	r1, r1, #1
 80030aa:	fb0c f505 	mul.w	r5, ip, r5
 80030ae:	d1f8      	bne.n	80030a2 <forward_sin+0x56>
 80030b0:	0880      	lsrs	r0, r0, #2
 80030b2:	d00d      	beq.n	80030d0 <forward_sin+0x84>
 80030b4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030b8:	3910      	subs	r1, #16
 80030ba:	68ca      	ldr	r2, [r1, #12]
 80030bc:	688e      	ldr	r6, [r1, #8]
 80030be:	684f      	ldr	r7, [r1, #4]
 80030c0:	4372      	muls	r2, r6
 80030c2:	f851 6910 	ldr.w	r6, [r1], #-16
 80030c6:	437a      	muls	r2, r7
 80030c8:	4372      	muls	r2, r6
 80030ca:	4355      	muls	r5, r2
 80030cc:	1e40      	subs	r0, r0, #1
 80030ce:	d1f4      	bne.n	80030ba <forward_sin+0x6e>
 80030d0:	6998      	ldr	r0, [r3, #24]
 80030d2:	6886      	ldr	r6, [r0, #8]
 80030d4:	6821      	ldr	r1, [r4, #0]
 80030d6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80030da:	1f07      	subs	r7, r0, #4
 80030dc:	6888      	ldr	r0, [r1, #8]
 80030de:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80030e2:	1f14      	subs	r4, r2, #4
 80030e4:	42b7      	cmp	r7, r6
 80030e6:	d309      	bcc.n	80030fc <forward_sin+0xb0>
 80030e8:	ed97 0a00 	vldr	s0, [r7]
 80030ec:	f00f fb56 	bl	801279c <sinf>
 80030f0:	ed84 0a00 	vstr	s0, [r4]
 80030f4:	1f3f      	subs	r7, r7, #4
 80030f6:	1f24      	subs	r4, r4, #4
 80030f8:	42b7      	cmp	r7, r6
 80030fa:	d2f5      	bcs.n	80030e8 <forward_sin+0x9c>
 80030fc:	b001      	add	sp, #4
 80030fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003100 <nl_func_sinh_array_f32>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	688c      	ldr	r4, [r1, #8]
 8003104:	6880      	ldr	r0, [r0, #8]
 8003106:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800310a:	1f0d      	subs	r5, r1, #4
 800310c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003110:	1f0e      	subs	r6, r1, #4
 8003112:	42a5      	cmp	r5, r4
 8003114:	f0c0 800a 	bcc.w	800312c <nl_func_sinh_array_f32+0x2c>
 8003118:	ed95 0a00 	vldr	s0, [r5]
 800311c:	f010 f888 	bl	8013230 <sinhf>
 8003120:	ed86 0a00 	vstr	s0, [r6]
 8003124:	1f2d      	subs	r5, r5, #4
 8003126:	1f36      	subs	r6, r6, #4
 8003128:	42a5      	cmp	r5, r4
 800312a:	d2f5      	bcs.n	8003118 <nl_func_sinh_array_f32+0x18>
 800312c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003130 <forward_sinh>:
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003132:	b081      	sub	sp, #4
 8003134:	6942      	ldr	r2, [r0, #20]
 8003136:	8811      	ldrh	r1, [r2, #0]
 8003138:	2900      	cmp	r1, #0
 800313a:	bf1a      	itte	ne
 800313c:	6850      	ldrne	r0, [r2, #4]
 800313e:	1d00      	addne	r0, r0, #4
 8003140:	2004      	moveq	r0, #4
 8003142:	f04f 0501 	mov.w	r5, #1
 8003146:	6800      	ldr	r0, [r0, #0]
 8003148:	2800      	cmp	r0, #0
 800314a:	bf14      	ite	ne
 800314c:	6803      	ldrne	r3, [r0, #0]
 800314e:	2300      	moveq	r3, #0
 8003150:	2902      	cmp	r1, #2
 8003152:	bfa6      	itte	ge
 8003154:	6850      	ldrge	r0, [r2, #4]
 8003156:	3010      	addge	r0, #16
 8003158:	2004      	movlt	r0, #4
 800315a:	6800      	ldr	r0, [r0, #0]
 800315c:	2800      	cmp	r0, #0
 800315e:	bf19      	ittee	ne
 8003160:	6800      	ldrne	r0, [r0, #0]
 8003162:	f100 0418 	addne.w	r4, r0, #24
 8003166:	2100      	moveq	r1, #0
 8003168:	f101 0418 	addeq.w	r4, r1, #24
 800316c:	f103 0108 	add.w	r1, r3, #8
 8003170:	680a      	ldr	r2, [r1, #0]
 8003172:	0a12      	lsrs	r2, r2, #8
 8003174:	d01e      	beq.n	80031b4 <forward_sinh+0x84>
 8003176:	684e      	ldr	r6, [r1, #4]
 8003178:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800317c:	4610      	mov	r0, r2
 800317e:	1f0f      	subs	r7, r1, #4
 8003180:	f010 0103 	ands.w	r1, r0, #3
 8003184:	d006      	beq.n	8003194 <forward_sinh+0x64>
 8003186:	1e52      	subs	r2, r2, #1
 8003188:	f857 c904 	ldr.w	ip, [r7], #-4
 800318c:	1e49      	subs	r1, r1, #1
 800318e:	fb0c f505 	mul.w	r5, ip, r5
 8003192:	d1f8      	bne.n	8003186 <forward_sinh+0x56>
 8003194:	0880      	lsrs	r0, r0, #2
 8003196:	d00d      	beq.n	80031b4 <forward_sinh+0x84>
 8003198:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800319c:	3910      	subs	r1, #16
 800319e:	68ca      	ldr	r2, [r1, #12]
 80031a0:	688e      	ldr	r6, [r1, #8]
 80031a2:	684f      	ldr	r7, [r1, #4]
 80031a4:	4372      	muls	r2, r6
 80031a6:	f851 6910 	ldr.w	r6, [r1], #-16
 80031aa:	437a      	muls	r2, r7
 80031ac:	4372      	muls	r2, r6
 80031ae:	4355      	muls	r5, r2
 80031b0:	1e40      	subs	r0, r0, #1
 80031b2:	d1f4      	bne.n	800319e <forward_sinh+0x6e>
 80031b4:	6998      	ldr	r0, [r3, #24]
 80031b6:	6886      	ldr	r6, [r0, #8]
 80031b8:	6821      	ldr	r1, [r4, #0]
 80031ba:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80031be:	1f07      	subs	r7, r0, #4
 80031c0:	6888      	ldr	r0, [r1, #8]
 80031c2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80031c6:	1f14      	subs	r4, r2, #4
 80031c8:	42b7      	cmp	r7, r6
 80031ca:	d309      	bcc.n	80031e0 <forward_sinh+0xb0>
 80031cc:	ed97 0a00 	vldr	s0, [r7]
 80031d0:	f010 f82e 	bl	8013230 <sinhf>
 80031d4:	ed84 0a00 	vstr	s0, [r4]
 80031d8:	1f3f      	subs	r7, r7, #4
 80031da:	1f24      	subs	r4, r4, #4
 80031dc:	42b7      	cmp	r7, r6
 80031de:	d2f5      	bcs.n	80031cc <forward_sinh+0x9c>
 80031e0:	b001      	add	sp, #4
 80031e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031e4 <nl_func_tan_array_f32>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	688c      	ldr	r4, [r1, #8]
 80031e8:	6880      	ldr	r0, [r0, #8]
 80031ea:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80031ee:	1f0d      	subs	r5, r1, #4
 80031f0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80031f4:	1f0e      	subs	r6, r1, #4
 80031f6:	42a5      	cmp	r5, r4
 80031f8:	f0c0 800a 	bcc.w	8003210 <nl_func_tan_array_f32+0x2c>
 80031fc:	ed95 0a00 	vldr	s0, [r5]
 8003200:	f00f fb0e 	bl	8012820 <tanf>
 8003204:	ed86 0a00 	vstr	s0, [r6]
 8003208:	1f2d      	subs	r5, r5, #4
 800320a:	1f36      	subs	r6, r6, #4
 800320c:	42a5      	cmp	r5, r4
 800320e:	d2f5      	bcs.n	80031fc <nl_func_tan_array_f32+0x18>
 8003210:	bd70      	pop	{r4, r5, r6, pc}
	...

08003214 <forward_tan>:
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	b081      	sub	sp, #4
 8003218:	6942      	ldr	r2, [r0, #20]
 800321a:	8811      	ldrh	r1, [r2, #0]
 800321c:	2900      	cmp	r1, #0
 800321e:	bf1a      	itte	ne
 8003220:	6850      	ldrne	r0, [r2, #4]
 8003222:	1d00      	addne	r0, r0, #4
 8003224:	2004      	moveq	r0, #4
 8003226:	f04f 0501 	mov.w	r5, #1
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	2800      	cmp	r0, #0
 800322e:	bf14      	ite	ne
 8003230:	6803      	ldrne	r3, [r0, #0]
 8003232:	2300      	moveq	r3, #0
 8003234:	2902      	cmp	r1, #2
 8003236:	bfa6      	itte	ge
 8003238:	6850      	ldrge	r0, [r2, #4]
 800323a:	3010      	addge	r0, #16
 800323c:	2004      	movlt	r0, #4
 800323e:	6800      	ldr	r0, [r0, #0]
 8003240:	2800      	cmp	r0, #0
 8003242:	bf19      	ittee	ne
 8003244:	6800      	ldrne	r0, [r0, #0]
 8003246:	f100 0418 	addne.w	r4, r0, #24
 800324a:	2100      	moveq	r1, #0
 800324c:	f101 0418 	addeq.w	r4, r1, #24
 8003250:	f103 0108 	add.w	r1, r3, #8
 8003254:	680a      	ldr	r2, [r1, #0]
 8003256:	0a12      	lsrs	r2, r2, #8
 8003258:	d01e      	beq.n	8003298 <forward_tan+0x84>
 800325a:	684e      	ldr	r6, [r1, #4]
 800325c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003260:	4610      	mov	r0, r2
 8003262:	1f0f      	subs	r7, r1, #4
 8003264:	f010 0103 	ands.w	r1, r0, #3
 8003268:	d006      	beq.n	8003278 <forward_tan+0x64>
 800326a:	1e52      	subs	r2, r2, #1
 800326c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003270:	1e49      	subs	r1, r1, #1
 8003272:	fb0c f505 	mul.w	r5, ip, r5
 8003276:	d1f8      	bne.n	800326a <forward_tan+0x56>
 8003278:	0880      	lsrs	r0, r0, #2
 800327a:	d00d      	beq.n	8003298 <forward_tan+0x84>
 800327c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003280:	3910      	subs	r1, #16
 8003282:	68ca      	ldr	r2, [r1, #12]
 8003284:	688e      	ldr	r6, [r1, #8]
 8003286:	684f      	ldr	r7, [r1, #4]
 8003288:	4372      	muls	r2, r6
 800328a:	f851 6910 	ldr.w	r6, [r1], #-16
 800328e:	437a      	muls	r2, r7
 8003290:	4372      	muls	r2, r6
 8003292:	4355      	muls	r5, r2
 8003294:	1e40      	subs	r0, r0, #1
 8003296:	d1f4      	bne.n	8003282 <forward_tan+0x6e>
 8003298:	6998      	ldr	r0, [r3, #24]
 800329a:	6886      	ldr	r6, [r0, #8]
 800329c:	6821      	ldr	r1, [r4, #0]
 800329e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80032a2:	1f07      	subs	r7, r0, #4
 80032a4:	6888      	ldr	r0, [r1, #8]
 80032a6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80032aa:	1f14      	subs	r4, r2, #4
 80032ac:	42b7      	cmp	r7, r6
 80032ae:	d309      	bcc.n	80032c4 <forward_tan+0xb0>
 80032b0:	ed97 0a00 	vldr	s0, [r7]
 80032b4:	f00f fab4 	bl	8012820 <tanf>
 80032b8:	ed84 0a00 	vstr	s0, [r4]
 80032bc:	1f3f      	subs	r7, r7, #4
 80032be:	1f24      	subs	r4, r4, #4
 80032c0:	42b7      	cmp	r7, r6
 80032c2:	d2f5      	bcs.n	80032b0 <forward_tan+0x9c>
 80032c4:	b001      	add	sp, #4
 80032c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032c8 <nl_func_abs_array_f32>:
 80032c8:	6889      	ldr	r1, [r1, #8]
 80032ca:	6880      	ldr	r0, [r0, #8]
 80032cc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80032d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80032d4:	1f1b      	subs	r3, r3, #4
 80032d6:	1f10      	subs	r0, r2, #4
 80032d8:	428b      	cmp	r3, r1
 80032da:	d307      	bcc.n	80032ec <nl_func_abs_array_f32+0x24>
 80032dc:	f853 c904 	ldr.w	ip, [r3], #-4
 80032e0:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 80032e4:	428b      	cmp	r3, r1
 80032e6:	f840 2904 	str.w	r2, [r0], #-4
 80032ea:	d2f7      	bcs.n	80032dc <nl_func_abs_array_f32+0x14>
 80032ec:	4770      	bx	lr
	...

080032f0 <forward_abs>:
 80032f0:	b4f0      	push	{r4, r5, r6, r7}
 80032f2:	6942      	ldr	r2, [r0, #20]
 80032f4:	8811      	ldrh	r1, [r2, #0]
 80032f6:	2900      	cmp	r1, #0
 80032f8:	bf1a      	itte	ne
 80032fa:	6850      	ldrne	r0, [r2, #4]
 80032fc:	1d00      	addne	r0, r0, #4
 80032fe:	2004      	moveq	r0, #4
 8003300:	f04f 0501 	mov.w	r5, #1
 8003304:	6800      	ldr	r0, [r0, #0]
 8003306:	2800      	cmp	r0, #0
 8003308:	bf14      	ite	ne
 800330a:	6803      	ldrne	r3, [r0, #0]
 800330c:	2300      	moveq	r3, #0
 800330e:	2902      	cmp	r1, #2
 8003310:	bfa6      	itte	ge
 8003312:	6850      	ldrge	r0, [r2, #4]
 8003314:	3010      	addge	r0, #16
 8003316:	2004      	movlt	r0, #4
 8003318:	6800      	ldr	r0, [r0, #0]
 800331a:	2800      	cmp	r0, #0
 800331c:	bf19      	ittee	ne
 800331e:	6800      	ldrne	r0, [r0, #0]
 8003320:	f100 0418 	addne.w	r4, r0, #24
 8003324:	2100      	moveq	r1, #0
 8003326:	f101 0418 	addeq.w	r4, r1, #24
 800332a:	f103 0108 	add.w	r1, r3, #8
 800332e:	680a      	ldr	r2, [r1, #0]
 8003330:	0a12      	lsrs	r2, r2, #8
 8003332:	d01e      	beq.n	8003372 <forward_abs+0x82>
 8003334:	684e      	ldr	r6, [r1, #4]
 8003336:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800333a:	4610      	mov	r0, r2
 800333c:	1f0f      	subs	r7, r1, #4
 800333e:	f010 0103 	ands.w	r1, r0, #3
 8003342:	d006      	beq.n	8003352 <forward_abs+0x62>
 8003344:	1e52      	subs	r2, r2, #1
 8003346:	f857 c904 	ldr.w	ip, [r7], #-4
 800334a:	1e49      	subs	r1, r1, #1
 800334c:	fb0c f505 	mul.w	r5, ip, r5
 8003350:	d1f8      	bne.n	8003344 <forward_abs+0x54>
 8003352:	0880      	lsrs	r0, r0, #2
 8003354:	d00d      	beq.n	8003372 <forward_abs+0x82>
 8003356:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800335a:	3910      	subs	r1, #16
 800335c:	68ca      	ldr	r2, [r1, #12]
 800335e:	688e      	ldr	r6, [r1, #8]
 8003360:	684f      	ldr	r7, [r1, #4]
 8003362:	4372      	muls	r2, r6
 8003364:	f851 6910 	ldr.w	r6, [r1], #-16
 8003368:	437a      	muls	r2, r7
 800336a:	4372      	muls	r2, r6
 800336c:	4355      	muls	r5, r2
 800336e:	1e40      	subs	r0, r0, #1
 8003370:	d1f4      	bne.n	800335c <forward_abs+0x6c>
 8003372:	6998      	ldr	r0, [r3, #24]
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	6880      	ldr	r0, [r0, #8]
 8003378:	6893      	ldr	r3, [r2, #8]
 800337a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800337e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003382:	1f09      	subs	r1, r1, #4
 8003384:	1f22      	subs	r2, r4, #4
 8003386:	4281      	cmp	r1, r0
 8003388:	f0c0 8008 	bcc.w	800339c <forward_abs+0xac>
 800338c:	f851 3904 	ldr.w	r3, [r1], #-4
 8003390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003394:	4281      	cmp	r1, r0
 8003396:	f842 3904 	str.w	r3, [r2], #-4
 800339a:	d2f7      	bcs.n	800338c <forward_abs+0x9c>
 800339c:	bcf0      	pop	{r4, r5, r6, r7}
 800339e:	4770      	bx	lr

080033a0 <nl_func_ceil_array_f32>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	688c      	ldr	r4, [r1, #8]
 80033a4:	6880      	ldr	r0, [r0, #8]
 80033a6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80033aa:	1f0d      	subs	r5, r1, #4
 80033ac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80033b0:	1f0e      	subs	r6, r1, #4
 80033b2:	42a5      	cmp	r5, r4
 80033b4:	f0c0 800a 	bcc.w	80033cc <nl_func_ceil_array_f32+0x2c>
 80033b8:	ed95 0a00 	vldr	s0, [r5]
 80033bc:	f00e fe16 	bl	8011fec <ceilf>
 80033c0:	ed86 0a00 	vstr	s0, [r6]
 80033c4:	1f2d      	subs	r5, r5, #4
 80033c6:	1f36      	subs	r6, r6, #4
 80033c8:	42a5      	cmp	r5, r4
 80033ca:	d2f5      	bcs.n	80033b8 <nl_func_ceil_array_f32+0x18>
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080033d0 <forward_ceil>:
 80033d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d2:	b081      	sub	sp, #4
 80033d4:	6942      	ldr	r2, [r0, #20]
 80033d6:	8811      	ldrh	r1, [r2, #0]
 80033d8:	2900      	cmp	r1, #0
 80033da:	bf1a      	itte	ne
 80033dc:	6850      	ldrne	r0, [r2, #4]
 80033de:	1d00      	addne	r0, r0, #4
 80033e0:	2004      	moveq	r0, #4
 80033e2:	f04f 0501 	mov.w	r5, #1
 80033e6:	6800      	ldr	r0, [r0, #0]
 80033e8:	2800      	cmp	r0, #0
 80033ea:	bf14      	ite	ne
 80033ec:	6803      	ldrne	r3, [r0, #0]
 80033ee:	2300      	moveq	r3, #0
 80033f0:	2902      	cmp	r1, #2
 80033f2:	bfa6      	itte	ge
 80033f4:	6850      	ldrge	r0, [r2, #4]
 80033f6:	3010      	addge	r0, #16
 80033f8:	2004      	movlt	r0, #4
 80033fa:	6800      	ldr	r0, [r0, #0]
 80033fc:	2800      	cmp	r0, #0
 80033fe:	bf19      	ittee	ne
 8003400:	6800      	ldrne	r0, [r0, #0]
 8003402:	f100 0418 	addne.w	r4, r0, #24
 8003406:	2100      	moveq	r1, #0
 8003408:	f101 0418 	addeq.w	r4, r1, #24
 800340c:	f103 0108 	add.w	r1, r3, #8
 8003410:	680a      	ldr	r2, [r1, #0]
 8003412:	0a12      	lsrs	r2, r2, #8
 8003414:	d01e      	beq.n	8003454 <forward_ceil+0x84>
 8003416:	684e      	ldr	r6, [r1, #4]
 8003418:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800341c:	4610      	mov	r0, r2
 800341e:	1f0f      	subs	r7, r1, #4
 8003420:	f010 0103 	ands.w	r1, r0, #3
 8003424:	d006      	beq.n	8003434 <forward_ceil+0x64>
 8003426:	1e52      	subs	r2, r2, #1
 8003428:	f857 c904 	ldr.w	ip, [r7], #-4
 800342c:	1e49      	subs	r1, r1, #1
 800342e:	fb0c f505 	mul.w	r5, ip, r5
 8003432:	d1f8      	bne.n	8003426 <forward_ceil+0x56>
 8003434:	0880      	lsrs	r0, r0, #2
 8003436:	d00d      	beq.n	8003454 <forward_ceil+0x84>
 8003438:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800343c:	3910      	subs	r1, #16
 800343e:	68ca      	ldr	r2, [r1, #12]
 8003440:	688e      	ldr	r6, [r1, #8]
 8003442:	684f      	ldr	r7, [r1, #4]
 8003444:	4372      	muls	r2, r6
 8003446:	f851 6910 	ldr.w	r6, [r1], #-16
 800344a:	437a      	muls	r2, r7
 800344c:	4372      	muls	r2, r6
 800344e:	4355      	muls	r5, r2
 8003450:	1e40      	subs	r0, r0, #1
 8003452:	d1f4      	bne.n	800343e <forward_ceil+0x6e>
 8003454:	6998      	ldr	r0, [r3, #24]
 8003456:	6886      	ldr	r6, [r0, #8]
 8003458:	6821      	ldr	r1, [r4, #0]
 800345a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800345e:	1f07      	subs	r7, r0, #4
 8003460:	6888      	ldr	r0, [r1, #8]
 8003462:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003466:	1f14      	subs	r4, r2, #4
 8003468:	42b7      	cmp	r7, r6
 800346a:	d309      	bcc.n	8003480 <forward_ceil+0xb0>
 800346c:	ed97 0a00 	vldr	s0, [r7]
 8003470:	f00e fdbc 	bl	8011fec <ceilf>
 8003474:	ed84 0a00 	vstr	s0, [r4]
 8003478:	1f3f      	subs	r7, r7, #4
 800347a:	1f24      	subs	r4, r4, #4
 800347c:	42b7      	cmp	r7, r6
 800347e:	d2f5      	bcs.n	800346c <forward_ceil+0x9c>
 8003480:	b001      	add	sp, #4
 8003482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003484 <nl_func_floor_array_f32>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	688c      	ldr	r4, [r1, #8]
 8003488:	6880      	ldr	r0, [r0, #8]
 800348a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800348e:	1f0d      	subs	r5, r1, #4
 8003490:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003494:	1f0e      	subs	r6, r1, #4
 8003496:	42a5      	cmp	r5, r4
 8003498:	f0c0 800a 	bcc.w	80034b0 <nl_func_floor_array_f32+0x2c>
 800349c:	ed95 0a00 	vldr	s0, [r5]
 80034a0:	f00f f80c 	bl	80124bc <floorf>
 80034a4:	ed86 0a00 	vstr	s0, [r6]
 80034a8:	1f2d      	subs	r5, r5, #4
 80034aa:	1f36      	subs	r6, r6, #4
 80034ac:	42a5      	cmp	r5, r4
 80034ae:	d2f5      	bcs.n	800349c <nl_func_floor_array_f32+0x18>
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080034b4 <forward_floor>:
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	b081      	sub	sp, #4
 80034b8:	6942      	ldr	r2, [r0, #20]
 80034ba:	8811      	ldrh	r1, [r2, #0]
 80034bc:	2900      	cmp	r1, #0
 80034be:	bf1a      	itte	ne
 80034c0:	6850      	ldrne	r0, [r2, #4]
 80034c2:	1d00      	addne	r0, r0, #4
 80034c4:	2004      	moveq	r0, #4
 80034c6:	f04f 0501 	mov.w	r5, #1
 80034ca:	6800      	ldr	r0, [r0, #0]
 80034cc:	2800      	cmp	r0, #0
 80034ce:	bf14      	ite	ne
 80034d0:	6803      	ldrne	r3, [r0, #0]
 80034d2:	2300      	moveq	r3, #0
 80034d4:	2902      	cmp	r1, #2
 80034d6:	bfa6      	itte	ge
 80034d8:	6850      	ldrge	r0, [r2, #4]
 80034da:	3010      	addge	r0, #16
 80034dc:	2004      	movlt	r0, #4
 80034de:	6800      	ldr	r0, [r0, #0]
 80034e0:	2800      	cmp	r0, #0
 80034e2:	bf19      	ittee	ne
 80034e4:	6800      	ldrne	r0, [r0, #0]
 80034e6:	f100 0418 	addne.w	r4, r0, #24
 80034ea:	2100      	moveq	r1, #0
 80034ec:	f101 0418 	addeq.w	r4, r1, #24
 80034f0:	f103 0108 	add.w	r1, r3, #8
 80034f4:	680a      	ldr	r2, [r1, #0]
 80034f6:	0a12      	lsrs	r2, r2, #8
 80034f8:	d01e      	beq.n	8003538 <forward_floor+0x84>
 80034fa:	684e      	ldr	r6, [r1, #4]
 80034fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003500:	4610      	mov	r0, r2
 8003502:	1f0f      	subs	r7, r1, #4
 8003504:	f010 0103 	ands.w	r1, r0, #3
 8003508:	d006      	beq.n	8003518 <forward_floor+0x64>
 800350a:	1e52      	subs	r2, r2, #1
 800350c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003510:	1e49      	subs	r1, r1, #1
 8003512:	fb0c f505 	mul.w	r5, ip, r5
 8003516:	d1f8      	bne.n	800350a <forward_floor+0x56>
 8003518:	0880      	lsrs	r0, r0, #2
 800351a:	d00d      	beq.n	8003538 <forward_floor+0x84>
 800351c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003520:	3910      	subs	r1, #16
 8003522:	68ca      	ldr	r2, [r1, #12]
 8003524:	688e      	ldr	r6, [r1, #8]
 8003526:	684f      	ldr	r7, [r1, #4]
 8003528:	4372      	muls	r2, r6
 800352a:	f851 6910 	ldr.w	r6, [r1], #-16
 800352e:	437a      	muls	r2, r7
 8003530:	4372      	muls	r2, r6
 8003532:	4355      	muls	r5, r2
 8003534:	1e40      	subs	r0, r0, #1
 8003536:	d1f4      	bne.n	8003522 <forward_floor+0x6e>
 8003538:	6998      	ldr	r0, [r3, #24]
 800353a:	6886      	ldr	r6, [r0, #8]
 800353c:	6821      	ldr	r1, [r4, #0]
 800353e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003542:	1f07      	subs	r7, r0, #4
 8003544:	6888      	ldr	r0, [r1, #8]
 8003546:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800354a:	1f14      	subs	r4, r2, #4
 800354c:	42b7      	cmp	r7, r6
 800354e:	d309      	bcc.n	8003564 <forward_floor+0xb0>
 8003550:	ed97 0a00 	vldr	s0, [r7]
 8003554:	f00e ffb2 	bl	80124bc <floorf>
 8003558:	ed84 0a00 	vstr	s0, [r4]
 800355c:	1f3f      	subs	r7, r7, #4
 800355e:	1f24      	subs	r4, r4, #4
 8003560:	42b7      	cmp	r7, r6
 8003562:	d2f5      	bcs.n	8003550 <forward_floor+0x9c>
 8003564:	b001      	add	sp, #4
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003568 <nl_func_round_array_f32>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	688c      	ldr	r4, [r1, #8]
 800356c:	6880      	ldr	r0, [r0, #8]
 800356e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003572:	1f0d      	subs	r5, r1, #4
 8003574:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003578:	1f0e      	subs	r6, r1, #4
 800357a:	42a5      	cmp	r5, r4
 800357c:	f0c0 800a 	bcc.w	8003594 <nl_func_round_array_f32+0x2c>
 8003580:	ed95 0a00 	vldr	s0, [r5]
 8003584:	f00f f8e4 	bl	8012750 <roundf>
 8003588:	ed86 0a00 	vstr	s0, [r6]
 800358c:	1f2d      	subs	r5, r5, #4
 800358e:	1f36      	subs	r6, r6, #4
 8003590:	42a5      	cmp	r5, r4
 8003592:	d2f5      	bcs.n	8003580 <nl_func_round_array_f32+0x18>
 8003594:	bd70      	pop	{r4, r5, r6, pc}
	...

08003598 <forward_round>:
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	b081      	sub	sp, #4
 800359c:	6942      	ldr	r2, [r0, #20]
 800359e:	8811      	ldrh	r1, [r2, #0]
 80035a0:	2900      	cmp	r1, #0
 80035a2:	bf1a      	itte	ne
 80035a4:	6850      	ldrne	r0, [r2, #4]
 80035a6:	1d00      	addne	r0, r0, #4
 80035a8:	2004      	moveq	r0, #4
 80035aa:	f04f 0501 	mov.w	r5, #1
 80035ae:	6800      	ldr	r0, [r0, #0]
 80035b0:	2800      	cmp	r0, #0
 80035b2:	bf14      	ite	ne
 80035b4:	6803      	ldrne	r3, [r0, #0]
 80035b6:	2300      	moveq	r3, #0
 80035b8:	2902      	cmp	r1, #2
 80035ba:	bfa6      	itte	ge
 80035bc:	6850      	ldrge	r0, [r2, #4]
 80035be:	3010      	addge	r0, #16
 80035c0:	2004      	movlt	r0, #4
 80035c2:	6800      	ldr	r0, [r0, #0]
 80035c4:	2800      	cmp	r0, #0
 80035c6:	bf19      	ittee	ne
 80035c8:	6800      	ldrne	r0, [r0, #0]
 80035ca:	f100 0418 	addne.w	r4, r0, #24
 80035ce:	2100      	moveq	r1, #0
 80035d0:	f101 0418 	addeq.w	r4, r1, #24
 80035d4:	f103 0108 	add.w	r1, r3, #8
 80035d8:	680a      	ldr	r2, [r1, #0]
 80035da:	0a12      	lsrs	r2, r2, #8
 80035dc:	d01e      	beq.n	800361c <forward_round+0x84>
 80035de:	684e      	ldr	r6, [r1, #4]
 80035e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80035e4:	4610      	mov	r0, r2
 80035e6:	1f0f      	subs	r7, r1, #4
 80035e8:	f010 0103 	ands.w	r1, r0, #3
 80035ec:	d006      	beq.n	80035fc <forward_round+0x64>
 80035ee:	1e52      	subs	r2, r2, #1
 80035f0:	f857 c904 	ldr.w	ip, [r7], #-4
 80035f4:	1e49      	subs	r1, r1, #1
 80035f6:	fb0c f505 	mul.w	r5, ip, r5
 80035fa:	d1f8      	bne.n	80035ee <forward_round+0x56>
 80035fc:	0880      	lsrs	r0, r0, #2
 80035fe:	d00d      	beq.n	800361c <forward_round+0x84>
 8003600:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003604:	3910      	subs	r1, #16
 8003606:	68ca      	ldr	r2, [r1, #12]
 8003608:	688e      	ldr	r6, [r1, #8]
 800360a:	684f      	ldr	r7, [r1, #4]
 800360c:	4372      	muls	r2, r6
 800360e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003612:	437a      	muls	r2, r7
 8003614:	4372      	muls	r2, r6
 8003616:	4355      	muls	r5, r2
 8003618:	1e40      	subs	r0, r0, #1
 800361a:	d1f4      	bne.n	8003606 <forward_round+0x6e>
 800361c:	6998      	ldr	r0, [r3, #24]
 800361e:	6886      	ldr	r6, [r0, #8]
 8003620:	6821      	ldr	r1, [r4, #0]
 8003622:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003626:	1f07      	subs	r7, r0, #4
 8003628:	6888      	ldr	r0, [r1, #8]
 800362a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800362e:	1f14      	subs	r4, r2, #4
 8003630:	42b7      	cmp	r7, r6
 8003632:	d309      	bcc.n	8003648 <forward_round+0xb0>
 8003634:	ed97 0a00 	vldr	s0, [r7]
 8003638:	f00f f88a 	bl	8012750 <roundf>
 800363c:	ed84 0a00 	vstr	s0, [r4]
 8003640:	1f3f      	subs	r7, r7, #4
 8003642:	1f24      	subs	r4, r4, #4
 8003644:	42b7      	cmp	r7, r6
 8003646:	d2f5      	bcs.n	8003634 <forward_round+0x9c>
 8003648:	b001      	add	sp, #4
 800364a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800364c <nl_func_neg_array_f32>:
 800364c:	6889      	ldr	r1, [r1, #8]
 800364e:	6880      	ldr	r0, [r0, #8]
 8003650:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003654:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003658:	1f1b      	subs	r3, r3, #4
 800365a:	1f12      	subs	r2, r2, #4
 800365c:	428b      	cmp	r3, r1
 800365e:	d32b      	bcc.n	80036b8 <nl_func_neg_array_f32+0x6c>
 8003660:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003664:	edd3 0a00 	vldr	s1, [r3]
 8003668:	1f18      	subs	r0, r3, #4
 800366a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800366e:	4288      	cmp	r0, r1
 8003670:	edc2 0a00 	vstr	s1, [r2]
 8003674:	d320      	bcc.n	80036b8 <nl_func_neg_array_f32+0x6c>
 8003676:	ed90 1a00 	vldr	s2, [r0]
 800367a:	1f13      	subs	r3, r2, #4
 800367c:	1f00      	subs	r0, r0, #4
 800367e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003682:	4288      	cmp	r0, r1
 8003684:	ed83 1a00 	vstr	s2, [r3]
 8003688:	d316      	bcc.n	80036b8 <nl_func_neg_array_f32+0x6c>
 800368a:	edd0 0a00 	vldr	s1, [r0]
 800368e:	f1a2 0308 	sub.w	r3, r2, #8
 8003692:	1f00      	subs	r0, r0, #4
 8003694:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003698:	4288      	cmp	r0, r1
 800369a:	edc3 0a00 	vstr	s1, [r3]
 800369e:	d30b      	bcc.n	80036b8 <nl_func_neg_array_f32+0x6c>
 80036a0:	ed90 1a00 	vldr	s2, [r0]
 80036a4:	f1a2 030c 	sub.w	r3, r2, #12
 80036a8:	ee61 0a00 	vmul.f32	s1, s2, s0
 80036ac:	edc3 0a00 	vstr	s1, [r3]
 80036b0:	1f03      	subs	r3, r0, #4
 80036b2:	3a10      	subs	r2, #16
 80036b4:	428b      	cmp	r3, r1
 80036b6:	d2d5      	bcs.n	8003664 <nl_func_neg_array_f32+0x18>
 80036b8:	4770      	bx	lr
	...

080036bc <forward_neg>:
 80036bc:	b4f0      	push	{r4, r5, r6, r7}
 80036be:	6942      	ldr	r2, [r0, #20]
 80036c0:	8811      	ldrh	r1, [r2, #0]
 80036c2:	2900      	cmp	r1, #0
 80036c4:	bf1a      	itte	ne
 80036c6:	6850      	ldrne	r0, [r2, #4]
 80036c8:	1d00      	addne	r0, r0, #4
 80036ca:	2004      	moveq	r0, #4
 80036cc:	f04f 0501 	mov.w	r5, #1
 80036d0:	6800      	ldr	r0, [r0, #0]
 80036d2:	2800      	cmp	r0, #0
 80036d4:	bf14      	ite	ne
 80036d6:	6803      	ldrne	r3, [r0, #0]
 80036d8:	2300      	moveq	r3, #0
 80036da:	2902      	cmp	r1, #2
 80036dc:	bfa6      	itte	ge
 80036de:	6850      	ldrge	r0, [r2, #4]
 80036e0:	3010      	addge	r0, #16
 80036e2:	2004      	movlt	r0, #4
 80036e4:	6800      	ldr	r0, [r0, #0]
 80036e6:	2800      	cmp	r0, #0
 80036e8:	bf19      	ittee	ne
 80036ea:	6800      	ldrne	r0, [r0, #0]
 80036ec:	f100 0418 	addne.w	r4, r0, #24
 80036f0:	2100      	moveq	r1, #0
 80036f2:	f101 0418 	addeq.w	r4, r1, #24
 80036f6:	f103 0108 	add.w	r1, r3, #8
 80036fa:	680a      	ldr	r2, [r1, #0]
 80036fc:	0a12      	lsrs	r2, r2, #8
 80036fe:	d01e      	beq.n	800373e <forward_neg+0x82>
 8003700:	684e      	ldr	r6, [r1, #4]
 8003702:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003706:	4610      	mov	r0, r2
 8003708:	1f0f      	subs	r7, r1, #4
 800370a:	f010 0103 	ands.w	r1, r0, #3
 800370e:	d006      	beq.n	800371e <forward_neg+0x62>
 8003710:	1e52      	subs	r2, r2, #1
 8003712:	f857 c904 	ldr.w	ip, [r7], #-4
 8003716:	1e49      	subs	r1, r1, #1
 8003718:	fb0c f505 	mul.w	r5, ip, r5
 800371c:	d1f8      	bne.n	8003710 <forward_neg+0x54>
 800371e:	0880      	lsrs	r0, r0, #2
 8003720:	d00d      	beq.n	800373e <forward_neg+0x82>
 8003722:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003726:	3910      	subs	r1, #16
 8003728:	68ca      	ldr	r2, [r1, #12]
 800372a:	688e      	ldr	r6, [r1, #8]
 800372c:	684f      	ldr	r7, [r1, #4]
 800372e:	4372      	muls	r2, r6
 8003730:	f851 6910 	ldr.w	r6, [r1], #-16
 8003734:	437a      	muls	r2, r7
 8003736:	4372      	muls	r2, r6
 8003738:	4355      	muls	r5, r2
 800373a:	1e40      	subs	r0, r0, #1
 800373c:	d1f4      	bne.n	8003728 <forward_neg+0x6c>
 800373e:	6998      	ldr	r0, [r3, #24]
 8003740:	6822      	ldr	r2, [r4, #0]
 8003742:	6880      	ldr	r0, [r0, #8]
 8003744:	6893      	ldr	r3, [r2, #8]
 8003746:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800374a:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 800374e:	1f09      	subs	r1, r1, #4
 8003750:	1f22      	subs	r2, r4, #4
 8003752:	4281      	cmp	r1, r0
 8003754:	f0c0 802c 	bcc.w	80037b0 <forward_neg+0xf4>
 8003758:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800375c:	edd1 0a00 	vldr	s1, [r1]
 8003760:	1f09      	subs	r1, r1, #4
 8003762:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003766:	4281      	cmp	r1, r0
 8003768:	edc2 0a00 	vstr	s1, [r2]
 800376c:	d320      	bcc.n	80037b0 <forward_neg+0xf4>
 800376e:	ed91 1a00 	vldr	s2, [r1]
 8003772:	1f13      	subs	r3, r2, #4
 8003774:	1f09      	subs	r1, r1, #4
 8003776:	ee21 1a00 	vmul.f32	s2, s2, s0
 800377a:	4281      	cmp	r1, r0
 800377c:	ed83 1a00 	vstr	s2, [r3]
 8003780:	d316      	bcc.n	80037b0 <forward_neg+0xf4>
 8003782:	edd1 0a00 	vldr	s1, [r1]
 8003786:	f1a2 0308 	sub.w	r3, r2, #8
 800378a:	1f09      	subs	r1, r1, #4
 800378c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003790:	4281      	cmp	r1, r0
 8003792:	edc3 0a00 	vstr	s1, [r3]
 8003796:	d30b      	bcc.n	80037b0 <forward_neg+0xf4>
 8003798:	ed91 1a00 	vldr	s2, [r1]
 800379c:	f1a2 030c 	sub.w	r3, r2, #12
 80037a0:	1f09      	subs	r1, r1, #4
 80037a2:	3a10      	subs	r2, #16
 80037a4:	ee61 0a00 	vmul.f32	s1, s2, s0
 80037a8:	4281      	cmp	r1, r0
 80037aa:	edc3 0a00 	vstr	s1, [r3]
 80037ae:	d2d5      	bcs.n	800375c <forward_neg+0xa0>
 80037b0:	bcf0      	pop	{r4, r5, r6, r7}
 80037b2:	4770      	bx	lr

080037b4 <nl_func_reciprocal_array_f32>:
 80037b4:	6889      	ldr	r1, [r1, #8]
 80037b6:	6880      	ldr	r0, [r0, #8]
 80037b8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80037bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80037c0:	1f1b      	subs	r3, r3, #4
 80037c2:	1f12      	subs	r2, r2, #4
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d331      	bcc.n	800382c <nl_func_reciprocal_array_f32+0x78>
 80037c8:	ed93 0a00 	vldr	s0, [r3]
 80037cc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80037d0:	1f18      	subs	r0, r3, #4
 80037d2:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80037d6:	4288      	cmp	r0, r1
 80037d8:	ed82 0a00 	vstr	s0, [r2]
 80037dc:	d326      	bcc.n	800382c <nl_func_reciprocal_array_f32+0x78>
 80037de:	edd0 0a00 	vldr	s1, [r0]
 80037e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80037e6:	1f13      	subs	r3, r2, #4
 80037e8:	1f00      	subs	r0, r0, #4
 80037ea:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80037ee:	4288      	cmp	r0, r1
 80037f0:	ed83 0a00 	vstr	s0, [r3]
 80037f4:	d31a      	bcc.n	800382c <nl_func_reciprocal_array_f32+0x78>
 80037f6:	ed90 0a00 	vldr	s0, [r0]
 80037fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80037fe:	f1a2 0308 	sub.w	r3, r2, #8
 8003802:	1f00      	subs	r0, r0, #4
 8003804:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003808:	4288      	cmp	r0, r1
 800380a:	ed83 0a00 	vstr	s0, [r3]
 800380e:	d30d      	bcc.n	800382c <nl_func_reciprocal_array_f32+0x78>
 8003810:	edd0 0a00 	vldr	s1, [r0]
 8003814:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003818:	f1a2 030c 	sub.w	r3, r2, #12
 800381c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003820:	ed83 0a00 	vstr	s0, [r3]
 8003824:	1f03      	subs	r3, r0, #4
 8003826:	3a10      	subs	r2, #16
 8003828:	428b      	cmp	r3, r1
 800382a:	d2cd      	bcs.n	80037c8 <nl_func_reciprocal_array_f32+0x14>
 800382c:	4770      	bx	lr
	...

08003830 <forward_reciprocal>:
 8003830:	b4f0      	push	{r4, r5, r6, r7}
 8003832:	6942      	ldr	r2, [r0, #20]
 8003834:	8811      	ldrh	r1, [r2, #0]
 8003836:	2900      	cmp	r1, #0
 8003838:	bf1a      	itte	ne
 800383a:	6850      	ldrne	r0, [r2, #4]
 800383c:	1d00      	addne	r0, r0, #4
 800383e:	2004      	moveq	r0, #4
 8003840:	f04f 0501 	mov.w	r5, #1
 8003844:	6800      	ldr	r0, [r0, #0]
 8003846:	2800      	cmp	r0, #0
 8003848:	bf14      	ite	ne
 800384a:	6803      	ldrne	r3, [r0, #0]
 800384c:	2300      	moveq	r3, #0
 800384e:	2902      	cmp	r1, #2
 8003850:	bfa6      	itte	ge
 8003852:	6850      	ldrge	r0, [r2, #4]
 8003854:	3010      	addge	r0, #16
 8003856:	2004      	movlt	r0, #4
 8003858:	6800      	ldr	r0, [r0, #0]
 800385a:	2800      	cmp	r0, #0
 800385c:	bf19      	ittee	ne
 800385e:	6800      	ldrne	r0, [r0, #0]
 8003860:	f100 0418 	addne.w	r4, r0, #24
 8003864:	2100      	moveq	r1, #0
 8003866:	f101 0418 	addeq.w	r4, r1, #24
 800386a:	f103 0108 	add.w	r1, r3, #8
 800386e:	680a      	ldr	r2, [r1, #0]
 8003870:	0a12      	lsrs	r2, r2, #8
 8003872:	d01e      	beq.n	80038b2 <forward_reciprocal+0x82>
 8003874:	684e      	ldr	r6, [r1, #4]
 8003876:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800387a:	4610      	mov	r0, r2
 800387c:	1f0f      	subs	r7, r1, #4
 800387e:	f010 0103 	ands.w	r1, r0, #3
 8003882:	d006      	beq.n	8003892 <forward_reciprocal+0x62>
 8003884:	1e52      	subs	r2, r2, #1
 8003886:	f857 c904 	ldr.w	ip, [r7], #-4
 800388a:	1e49      	subs	r1, r1, #1
 800388c:	fb0c f505 	mul.w	r5, ip, r5
 8003890:	d1f8      	bne.n	8003884 <forward_reciprocal+0x54>
 8003892:	0880      	lsrs	r0, r0, #2
 8003894:	d00d      	beq.n	80038b2 <forward_reciprocal+0x82>
 8003896:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800389a:	3910      	subs	r1, #16
 800389c:	68ca      	ldr	r2, [r1, #12]
 800389e:	688e      	ldr	r6, [r1, #8]
 80038a0:	684f      	ldr	r7, [r1, #4]
 80038a2:	4372      	muls	r2, r6
 80038a4:	f851 6910 	ldr.w	r6, [r1], #-16
 80038a8:	437a      	muls	r2, r7
 80038aa:	4372      	muls	r2, r6
 80038ac:	4355      	muls	r5, r2
 80038ae:	1e40      	subs	r0, r0, #1
 80038b0:	d1f4      	bne.n	800389c <forward_reciprocal+0x6c>
 80038b2:	6998      	ldr	r0, [r3, #24]
 80038b4:	6822      	ldr	r2, [r4, #0]
 80038b6:	6880      	ldr	r0, [r0, #8]
 80038b8:	6893      	ldr	r3, [r2, #8]
 80038ba:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80038be:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80038c2:	1f09      	subs	r1, r1, #4
 80038c4:	1f22      	subs	r2, r4, #4
 80038c6:	4281      	cmp	r1, r0
 80038c8:	f0c0 8032 	bcc.w	8003930 <forward_reciprocal+0x100>
 80038cc:	ed91 0a00 	vldr	s0, [r1]
 80038d0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80038d4:	1f09      	subs	r1, r1, #4
 80038d6:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80038da:	4281      	cmp	r1, r0
 80038dc:	ed82 0a00 	vstr	s0, [r2]
 80038e0:	d326      	bcc.n	8003930 <forward_reciprocal+0x100>
 80038e2:	edd1 0a00 	vldr	s1, [r1]
 80038e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80038ea:	1f13      	subs	r3, r2, #4
 80038ec:	1f09      	subs	r1, r1, #4
 80038ee:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80038f2:	4281      	cmp	r1, r0
 80038f4:	ed83 0a00 	vstr	s0, [r3]
 80038f8:	d31a      	bcc.n	8003930 <forward_reciprocal+0x100>
 80038fa:	ed91 0a00 	vldr	s0, [r1]
 80038fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003902:	f1a2 0308 	sub.w	r3, r2, #8
 8003906:	1f09      	subs	r1, r1, #4
 8003908:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800390c:	4281      	cmp	r1, r0
 800390e:	ed83 0a00 	vstr	s0, [r3]
 8003912:	d30d      	bcc.n	8003930 <forward_reciprocal+0x100>
 8003914:	edd1 0a00 	vldr	s1, [r1]
 8003918:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800391c:	f1a2 030c 	sub.w	r3, r2, #12
 8003920:	1f09      	subs	r1, r1, #4
 8003922:	3a10      	subs	r2, #16
 8003924:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003928:	4281      	cmp	r1, r0
 800392a:	ed83 0a00 	vstr	s0, [r3]
 800392e:	d2cd      	bcs.n	80038cc <forward_reciprocal+0x9c>
 8003930:	bcf0      	pop	{r4, r5, r6, r7}
 8003932:	4770      	bx	lr

08003934 <nl_func_exp_array_f32>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	688c      	ldr	r4, [r1, #8]
 8003938:	6880      	ldr	r0, [r0, #8]
 800393a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800393e:	1f0d      	subs	r5, r1, #4
 8003940:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003944:	1f0e      	subs	r6, r1, #4
 8003946:	42a5      	cmp	r5, r4
 8003948:	f0c0 800a 	bcc.w	8003960 <nl_func_exp_array_f32+0x2c>
 800394c:	ed95 0a00 	vldr	s0, [r5]
 8003950:	f00f f9b4 	bl	8012cbc <expf>
 8003954:	ed86 0a00 	vstr	s0, [r6]
 8003958:	1f2d      	subs	r5, r5, #4
 800395a:	1f36      	subs	r6, r6, #4
 800395c:	42a5      	cmp	r5, r4
 800395e:	d2f5      	bcs.n	800394c <nl_func_exp_array_f32+0x18>
 8003960:	bd70      	pop	{r4, r5, r6, pc}
	...

08003964 <forward_exp>:
 8003964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003966:	b081      	sub	sp, #4
 8003968:	6942      	ldr	r2, [r0, #20]
 800396a:	8811      	ldrh	r1, [r2, #0]
 800396c:	2900      	cmp	r1, #0
 800396e:	bf1a      	itte	ne
 8003970:	6850      	ldrne	r0, [r2, #4]
 8003972:	1d00      	addne	r0, r0, #4
 8003974:	2004      	moveq	r0, #4
 8003976:	f04f 0501 	mov.w	r5, #1
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	2800      	cmp	r0, #0
 800397e:	bf14      	ite	ne
 8003980:	6803      	ldrne	r3, [r0, #0]
 8003982:	2300      	moveq	r3, #0
 8003984:	2902      	cmp	r1, #2
 8003986:	bfa6      	itte	ge
 8003988:	6850      	ldrge	r0, [r2, #4]
 800398a:	3010      	addge	r0, #16
 800398c:	2004      	movlt	r0, #4
 800398e:	6800      	ldr	r0, [r0, #0]
 8003990:	2800      	cmp	r0, #0
 8003992:	bf19      	ittee	ne
 8003994:	6800      	ldrne	r0, [r0, #0]
 8003996:	f100 0418 	addne.w	r4, r0, #24
 800399a:	2100      	moveq	r1, #0
 800399c:	f101 0418 	addeq.w	r4, r1, #24
 80039a0:	f103 0108 	add.w	r1, r3, #8
 80039a4:	680a      	ldr	r2, [r1, #0]
 80039a6:	0a12      	lsrs	r2, r2, #8
 80039a8:	d01e      	beq.n	80039e8 <forward_exp+0x84>
 80039aa:	684e      	ldr	r6, [r1, #4]
 80039ac:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80039b0:	4610      	mov	r0, r2
 80039b2:	1f0f      	subs	r7, r1, #4
 80039b4:	f010 0103 	ands.w	r1, r0, #3
 80039b8:	d006      	beq.n	80039c8 <forward_exp+0x64>
 80039ba:	1e52      	subs	r2, r2, #1
 80039bc:	f857 c904 	ldr.w	ip, [r7], #-4
 80039c0:	1e49      	subs	r1, r1, #1
 80039c2:	fb0c f505 	mul.w	r5, ip, r5
 80039c6:	d1f8      	bne.n	80039ba <forward_exp+0x56>
 80039c8:	0880      	lsrs	r0, r0, #2
 80039ca:	d00d      	beq.n	80039e8 <forward_exp+0x84>
 80039cc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80039d0:	3910      	subs	r1, #16
 80039d2:	68ca      	ldr	r2, [r1, #12]
 80039d4:	688e      	ldr	r6, [r1, #8]
 80039d6:	684f      	ldr	r7, [r1, #4]
 80039d8:	4372      	muls	r2, r6
 80039da:	f851 6910 	ldr.w	r6, [r1], #-16
 80039de:	437a      	muls	r2, r7
 80039e0:	4372      	muls	r2, r6
 80039e2:	4355      	muls	r5, r2
 80039e4:	1e40      	subs	r0, r0, #1
 80039e6:	d1f4      	bne.n	80039d2 <forward_exp+0x6e>
 80039e8:	6998      	ldr	r0, [r3, #24]
 80039ea:	6886      	ldr	r6, [r0, #8]
 80039ec:	6821      	ldr	r1, [r4, #0]
 80039ee:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80039f2:	1f07      	subs	r7, r0, #4
 80039f4:	6888      	ldr	r0, [r1, #8]
 80039f6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80039fa:	1f14      	subs	r4, r2, #4
 80039fc:	42b7      	cmp	r7, r6
 80039fe:	d309      	bcc.n	8003a14 <forward_exp+0xb0>
 8003a00:	ed97 0a00 	vldr	s0, [r7]
 8003a04:	f00f f95a 	bl	8012cbc <expf>
 8003a08:	ed84 0a00 	vstr	s0, [r4]
 8003a0c:	1f3f      	subs	r7, r7, #4
 8003a0e:	1f24      	subs	r4, r4, #4
 8003a10:	42b7      	cmp	r7, r6
 8003a12:	d2f5      	bcs.n	8003a00 <forward_exp+0x9c>
 8003a14:	b001      	add	sp, #4
 8003a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a18 <nl_func_sigmoid_array_f32>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	688c      	ldr	r4, [r1, #8]
 8003a1c:	6880      	ldr	r0, [r0, #8]
 8003a1e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003a22:	1f0d      	subs	r5, r1, #4
 8003a24:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003a28:	1f0e      	subs	r6, r1, #4
 8003a2a:	42a5      	cmp	r5, r4
 8003a2c:	f0c0 8014 	bcc.w	8003a58 <nl_func_sigmoid_array_f32+0x40>
 8003a30:	ed95 0a00 	vldr	s0, [r5]
 8003a34:	eeb1 0a40 	vneg.f32	s0, s0
 8003a38:	f00f f940 	bl	8012cbc <expf>
 8003a3c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a40:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003a44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a48:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a4c:	ed86 0a00 	vstr	s0, [r6]
 8003a50:	1f2d      	subs	r5, r5, #4
 8003a52:	1f36      	subs	r6, r6, #4
 8003a54:	42a5      	cmp	r5, r4
 8003a56:	d2eb      	bcs.n	8003a30 <nl_func_sigmoid_array_f32+0x18>
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a5c <forward_sigmoid>:
 8003a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5e:	b081      	sub	sp, #4
 8003a60:	6942      	ldr	r2, [r0, #20]
 8003a62:	8811      	ldrh	r1, [r2, #0]
 8003a64:	2900      	cmp	r1, #0
 8003a66:	bf1a      	itte	ne
 8003a68:	6850      	ldrne	r0, [r2, #4]
 8003a6a:	1d00      	addne	r0, r0, #4
 8003a6c:	2004      	moveq	r0, #4
 8003a6e:	f04f 0501 	mov.w	r5, #1
 8003a72:	6800      	ldr	r0, [r0, #0]
 8003a74:	2800      	cmp	r0, #0
 8003a76:	bf14      	ite	ne
 8003a78:	6803      	ldrne	r3, [r0, #0]
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	2902      	cmp	r1, #2
 8003a7e:	bfa6      	itte	ge
 8003a80:	6850      	ldrge	r0, [r2, #4]
 8003a82:	3010      	addge	r0, #16
 8003a84:	2004      	movlt	r0, #4
 8003a86:	6800      	ldr	r0, [r0, #0]
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	bf19      	ittee	ne
 8003a8c:	6800      	ldrne	r0, [r0, #0]
 8003a8e:	f100 0418 	addne.w	r4, r0, #24
 8003a92:	2100      	moveq	r1, #0
 8003a94:	f101 0418 	addeq.w	r4, r1, #24
 8003a98:	f103 0108 	add.w	r1, r3, #8
 8003a9c:	680a      	ldr	r2, [r1, #0]
 8003a9e:	0a12      	lsrs	r2, r2, #8
 8003aa0:	d01e      	beq.n	8003ae0 <forward_sigmoid+0x84>
 8003aa2:	684e      	ldr	r6, [r1, #4]
 8003aa4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	1f0f      	subs	r7, r1, #4
 8003aac:	f010 0103 	ands.w	r1, r0, #3
 8003ab0:	d006      	beq.n	8003ac0 <forward_sigmoid+0x64>
 8003ab2:	1e52      	subs	r2, r2, #1
 8003ab4:	f857 c904 	ldr.w	ip, [r7], #-4
 8003ab8:	1e49      	subs	r1, r1, #1
 8003aba:	fb0c f505 	mul.w	r5, ip, r5
 8003abe:	d1f8      	bne.n	8003ab2 <forward_sigmoid+0x56>
 8003ac0:	0880      	lsrs	r0, r0, #2
 8003ac2:	d00d      	beq.n	8003ae0 <forward_sigmoid+0x84>
 8003ac4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ac8:	3910      	subs	r1, #16
 8003aca:	68ca      	ldr	r2, [r1, #12]
 8003acc:	688e      	ldr	r6, [r1, #8]
 8003ace:	684f      	ldr	r7, [r1, #4]
 8003ad0:	4372      	muls	r2, r6
 8003ad2:	f851 6910 	ldr.w	r6, [r1], #-16
 8003ad6:	437a      	muls	r2, r7
 8003ad8:	4372      	muls	r2, r6
 8003ada:	4355      	muls	r5, r2
 8003adc:	1e40      	subs	r0, r0, #1
 8003ade:	d1f4      	bne.n	8003aca <forward_sigmoid+0x6e>
 8003ae0:	6998      	ldr	r0, [r3, #24]
 8003ae2:	6886      	ldr	r6, [r0, #8]
 8003ae4:	6821      	ldr	r1, [r4, #0]
 8003ae6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003aea:	1f07      	subs	r7, r0, #4
 8003aec:	6888      	ldr	r0, [r1, #8]
 8003aee:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003af2:	1f14      	subs	r4, r2, #4
 8003af4:	42b7      	cmp	r7, r6
 8003af6:	d313      	bcc.n	8003b20 <forward_sigmoid+0xc4>
 8003af8:	ed97 0a00 	vldr	s0, [r7]
 8003afc:	eeb1 0a40 	vneg.f32	s0, s0
 8003b00:	f00f f8dc 	bl	8012cbc <expf>
 8003b04:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003b08:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003b0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003b10:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003b14:	ed84 0a00 	vstr	s0, [r4]
 8003b18:	1f3f      	subs	r7, r7, #4
 8003b1a:	1f24      	subs	r4, r4, #4
 8003b1c:	42b7      	cmp	r7, r6
 8003b1e:	d2eb      	bcs.n	8003af8 <forward_sigmoid+0x9c>
 8003b20:	b001      	add	sp, #4
 8003b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b24 <nl_func_sign_array_f32>:
 8003b24:	6889      	ldr	r1, [r1, #8]
 8003b26:	6880      	ldr	r0, [r0, #8]
 8003b28:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003b2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003b30:	1f1b      	subs	r3, r3, #4
 8003b32:	1f10      	subs	r0, r2, #4
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d314      	bcc.n	8003b62 <nl_func_sign_array_f32+0x3e>
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	ed93 0a00 	vldr	s0, [r3]
 8003b40:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b48:	bfcc      	ite	gt
 8003b4a:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8003c30 <.text_49>
 8003b4e:	ee00 2a10 	vmovle	s0, r2
 8003b52:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003b56:	ed80 0a00 	vstr	s0, [r0]
 8003b5a:	1f1b      	subs	r3, r3, #4
 8003b5c:	1f00      	subs	r0, r0, #4
 8003b5e:	428b      	cmp	r3, r1
 8003b60:	d2ec      	bcs.n	8003b3c <nl_func_sign_array_f32+0x18>
 8003b62:	4770      	bx	lr

08003b64 <forward_sign>:
 8003b64:	b4f0      	push	{r4, r5, r6, r7}
 8003b66:	6942      	ldr	r2, [r0, #20]
 8003b68:	8811      	ldrh	r1, [r2, #0]
 8003b6a:	2900      	cmp	r1, #0
 8003b6c:	bf1a      	itte	ne
 8003b6e:	6850      	ldrne	r0, [r2, #4]
 8003b70:	1d00      	addne	r0, r0, #4
 8003b72:	2004      	moveq	r0, #4
 8003b74:	f04f 0501 	mov.w	r5, #1
 8003b78:	6800      	ldr	r0, [r0, #0]
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	bf14      	ite	ne
 8003b7e:	6803      	ldrne	r3, [r0, #0]
 8003b80:	2300      	moveq	r3, #0
 8003b82:	2901      	cmp	r1, #1
 8003b84:	bfc6      	itte	gt
 8003b86:	6850      	ldrgt	r0, [r2, #4]
 8003b88:	3010      	addgt	r0, #16
 8003b8a:	2004      	movle	r0, #4
 8003b8c:	6800      	ldr	r0, [r0, #0]
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	bf19      	ittee	ne
 8003b92:	6800      	ldrne	r0, [r0, #0]
 8003b94:	f100 0418 	addne.w	r4, r0, #24
 8003b98:	2100      	moveq	r1, #0
 8003b9a:	f101 0418 	addeq.w	r4, r1, #24
 8003b9e:	f103 0108 	add.w	r1, r3, #8
 8003ba2:	680a      	ldr	r2, [r1, #0]
 8003ba4:	0a12      	lsrs	r2, r2, #8
 8003ba6:	d01e      	beq.n	8003be6 <forward_sign+0x82>
 8003ba8:	684e      	ldr	r6, [r1, #4]
 8003baa:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003bae:	4610      	mov	r0, r2
 8003bb0:	1f0f      	subs	r7, r1, #4
 8003bb2:	f010 0103 	ands.w	r1, r0, #3
 8003bb6:	d006      	beq.n	8003bc6 <forward_sign+0x62>
 8003bb8:	1e52      	subs	r2, r2, #1
 8003bba:	f857 c904 	ldr.w	ip, [r7], #-4
 8003bbe:	1e49      	subs	r1, r1, #1
 8003bc0:	fb0c f505 	mul.w	r5, ip, r5
 8003bc4:	d1f8      	bne.n	8003bb8 <forward_sign+0x54>
 8003bc6:	0880      	lsrs	r0, r0, #2
 8003bc8:	d00d      	beq.n	8003be6 <forward_sign+0x82>
 8003bca:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003bce:	3910      	subs	r1, #16
 8003bd0:	68ca      	ldr	r2, [r1, #12]
 8003bd2:	688e      	ldr	r6, [r1, #8]
 8003bd4:	684f      	ldr	r7, [r1, #4]
 8003bd6:	4372      	muls	r2, r6
 8003bd8:	f851 6910 	ldr.w	r6, [r1], #-16
 8003bdc:	437a      	muls	r2, r7
 8003bde:	4372      	muls	r2, r6
 8003be0:	4355      	muls	r5, r2
 8003be2:	1e40      	subs	r0, r0, #1
 8003be4:	d1f4      	bne.n	8003bd0 <forward_sign+0x6c>
 8003be6:	6998      	ldr	r0, [r3, #24]
 8003be8:	6822      	ldr	r2, [r4, #0]
 8003bea:	6880      	ldr	r0, [r0, #8]
 8003bec:	6893      	ldr	r3, [r2, #8]
 8003bee:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003bf2:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003bf6:	1f09      	subs	r1, r1, #4
 8003bf8:	1f22      	subs	r2, r4, #4
 8003bfa:	4281      	cmp	r1, r0
 8003bfc:	f0c0 8015 	bcc.w	8003c2a <forward_sign+0xc6>
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295
 8003c04:	ed91 0a00 	vldr	s0, [r1]
 8003c08:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	bfcc      	ite	gt
 8003c12:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8003c30 <.text_49>
 8003c16:	ee00 3a10 	vmovle	s0, r3
 8003c1a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003c1e:	ed82 0a00 	vstr	s0, [r2]
 8003c22:	1f09      	subs	r1, r1, #4
 8003c24:	1f12      	subs	r2, r2, #4
 8003c26:	4281      	cmp	r1, r0
 8003c28:	d2ec      	bcs.n	8003c04 <forward_sign+0xa0>
 8003c2a:	bcf0      	pop	{r4, r5, r6, r7}
 8003c2c:	4770      	bx	lr
	...

08003c30 <.text_49>:
 8003c30:	00000001 	.word	0x00000001

08003c34 <nl_func_sqrt_array_f32>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	460c      	mov	r4, r1
 8003c38:	6880      	ldr	r0, [r0, #8]
 8003c3a:	68a1      	ldr	r1, [r4, #8]
 8003c3c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003c40:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003c44:	1f1d      	subs	r5, r3, #4
 8003c46:	1f16      	subs	r6, r2, #4
 8003c48:	428d      	cmp	r5, r1
 8003c4a:	d30a      	bcc.n	8003c62 <nl_func_sqrt_array_f32+0x2e>
 8003c4c:	ed95 0a00 	vldr	s0, [r5]
 8003c50:	f002 faa8 	bl	80061a4 <ai_math_sqrt>
 8003c54:	ed86 0a00 	vstr	s0, [r6]
 8003c58:	1f2d      	subs	r5, r5, #4
 8003c5a:	68a0      	ldr	r0, [r4, #8]
 8003c5c:	1f36      	subs	r6, r6, #4
 8003c5e:	4285      	cmp	r5, r0
 8003c60:	d2f4      	bcs.n	8003c4c <nl_func_sqrt_array_f32+0x18>
 8003c62:	bd70      	pop	{r4, r5, r6, pc}

08003c64 <forward_sqrt>:
 8003c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c66:	b081      	sub	sp, #4
 8003c68:	6942      	ldr	r2, [r0, #20]
 8003c6a:	8811      	ldrh	r1, [r2, #0]
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	bf1a      	itte	ne
 8003c70:	6850      	ldrne	r0, [r2, #4]
 8003c72:	1d00      	addne	r0, r0, #4
 8003c74:	2004      	moveq	r0, #4
 8003c76:	f04f 0501 	mov.w	r5, #1
 8003c7a:	6800      	ldr	r0, [r0, #0]
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	bf14      	ite	ne
 8003c80:	6803      	ldrne	r3, [r0, #0]
 8003c82:	2300      	moveq	r3, #0
 8003c84:	2902      	cmp	r1, #2
 8003c86:	bfa6      	itte	ge
 8003c88:	6850      	ldrge	r0, [r2, #4]
 8003c8a:	3010      	addge	r0, #16
 8003c8c:	2004      	movlt	r0, #4
 8003c8e:	6800      	ldr	r0, [r0, #0]
 8003c90:	2800      	cmp	r0, #0
 8003c92:	bf19      	ittee	ne
 8003c94:	6800      	ldrne	r0, [r0, #0]
 8003c96:	f100 0418 	addne.w	r4, r0, #24
 8003c9a:	2100      	moveq	r1, #0
 8003c9c:	f101 0418 	addeq.w	r4, r1, #24
 8003ca0:	f103 0108 	add.w	r1, r3, #8
 8003ca4:	680a      	ldr	r2, [r1, #0]
 8003ca6:	0a12      	lsrs	r2, r2, #8
 8003ca8:	d01e      	beq.n	8003ce8 <forward_sqrt+0x84>
 8003caa:	684e      	ldr	r6, [r1, #4]
 8003cac:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	1f0f      	subs	r7, r1, #4
 8003cb4:	f010 0103 	ands.w	r1, r0, #3
 8003cb8:	d006      	beq.n	8003cc8 <forward_sqrt+0x64>
 8003cba:	1e52      	subs	r2, r2, #1
 8003cbc:	f857 c904 	ldr.w	ip, [r7], #-4
 8003cc0:	1e49      	subs	r1, r1, #1
 8003cc2:	fb0c f505 	mul.w	r5, ip, r5
 8003cc6:	d1f8      	bne.n	8003cba <forward_sqrt+0x56>
 8003cc8:	0880      	lsrs	r0, r0, #2
 8003cca:	d00d      	beq.n	8003ce8 <forward_sqrt+0x84>
 8003ccc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003cd0:	3910      	subs	r1, #16
 8003cd2:	68ca      	ldr	r2, [r1, #12]
 8003cd4:	688e      	ldr	r6, [r1, #8]
 8003cd6:	684f      	ldr	r7, [r1, #4]
 8003cd8:	4372      	muls	r2, r6
 8003cda:	f851 6910 	ldr.w	r6, [r1], #-16
 8003cde:	437a      	muls	r2, r7
 8003ce0:	4372      	muls	r2, r6
 8003ce2:	4355      	muls	r5, r2
 8003ce4:	1e40      	subs	r0, r0, #1
 8003ce6:	d1f4      	bne.n	8003cd2 <forward_sqrt+0x6e>
 8003ce8:	699e      	ldr	r6, [r3, #24]
 8003cea:	68b0      	ldr	r0, [r6, #8]
 8003cec:	6822      	ldr	r2, [r4, #0]
 8003cee:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003cf2:	1f0f      	subs	r7, r1, #4
 8003cf4:	6891      	ldr	r1, [r2, #8]
 8003cf6:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8003cfa:	1f1c      	subs	r4, r3, #4
 8003cfc:	4287      	cmp	r7, r0
 8003cfe:	d30a      	bcc.n	8003d16 <forward_sqrt+0xb2>
 8003d00:	ed97 0a00 	vldr	s0, [r7]
 8003d04:	f002 fa4e 	bl	80061a4 <ai_math_sqrt>
 8003d08:	ed84 0a00 	vstr	s0, [r4]
 8003d0c:	1f3f      	subs	r7, r7, #4
 8003d0e:	68b0      	ldr	r0, [r6, #8]
 8003d10:	1f24      	subs	r4, r4, #4
 8003d12:	4287      	cmp	r7, r0
 8003d14:	d2f4      	bcs.n	8003d00 <forward_sqrt+0x9c>
 8003d16:	b001      	add	sp, #4
 8003d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d1c <nl_func_soft_plus_array_f32>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	688c      	ldr	r4, [r1, #8]
 8003d20:	6880      	ldr	r0, [r0, #8]
 8003d22:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003d26:	1f0d      	subs	r5, r1, #4
 8003d28:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003d2c:	1f0e      	subs	r6, r1, #4
 8003d2e:	42a5      	cmp	r5, r4
 8003d30:	f0c0 8010 	bcc.w	8003d54 <nl_func_soft_plus_array_f32+0x38>
 8003d34:	ed95 0a00 	vldr	s0, [r5]
 8003d38:	f00e ffc0 	bl	8012cbc <expf>
 8003d3c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d40:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d44:	f00f f890 	bl	8012e68 <logf>
 8003d48:	ed86 0a00 	vstr	s0, [r6]
 8003d4c:	1f2d      	subs	r5, r5, #4
 8003d4e:	1f36      	subs	r6, r6, #4
 8003d50:	42a5      	cmp	r5, r4
 8003d52:	d2ef      	bcs.n	8003d34 <nl_func_soft_plus_array_f32+0x18>
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d58 <forward_soft_plus>:
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5a:	b081      	sub	sp, #4
 8003d5c:	6942      	ldr	r2, [r0, #20]
 8003d5e:	8811      	ldrh	r1, [r2, #0]
 8003d60:	2900      	cmp	r1, #0
 8003d62:	bf1a      	itte	ne
 8003d64:	6850      	ldrne	r0, [r2, #4]
 8003d66:	1d00      	addne	r0, r0, #4
 8003d68:	2004      	moveq	r0, #4
 8003d6a:	f04f 0501 	mov.w	r5, #1
 8003d6e:	6800      	ldr	r0, [r0, #0]
 8003d70:	2800      	cmp	r0, #0
 8003d72:	bf14      	ite	ne
 8003d74:	6803      	ldrne	r3, [r0, #0]
 8003d76:	2300      	moveq	r3, #0
 8003d78:	2902      	cmp	r1, #2
 8003d7a:	bfa6      	itte	ge
 8003d7c:	6850      	ldrge	r0, [r2, #4]
 8003d7e:	3010      	addge	r0, #16
 8003d80:	2004      	movlt	r0, #4
 8003d82:	6800      	ldr	r0, [r0, #0]
 8003d84:	2800      	cmp	r0, #0
 8003d86:	bf19      	ittee	ne
 8003d88:	6800      	ldrne	r0, [r0, #0]
 8003d8a:	f100 0418 	addne.w	r4, r0, #24
 8003d8e:	2100      	moveq	r1, #0
 8003d90:	f101 0418 	addeq.w	r4, r1, #24
 8003d94:	f103 0108 	add.w	r1, r3, #8
 8003d98:	680a      	ldr	r2, [r1, #0]
 8003d9a:	0a12      	lsrs	r2, r2, #8
 8003d9c:	d01e      	beq.n	8003ddc <forward_soft_plus+0x84>
 8003d9e:	684e      	ldr	r6, [r1, #4]
 8003da0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003da4:	4610      	mov	r0, r2
 8003da6:	1f0f      	subs	r7, r1, #4
 8003da8:	f010 0103 	ands.w	r1, r0, #3
 8003dac:	d006      	beq.n	8003dbc <forward_soft_plus+0x64>
 8003dae:	1e52      	subs	r2, r2, #1
 8003db0:	f857 c904 	ldr.w	ip, [r7], #-4
 8003db4:	1e49      	subs	r1, r1, #1
 8003db6:	fb0c f505 	mul.w	r5, ip, r5
 8003dba:	d1f8      	bne.n	8003dae <forward_soft_plus+0x56>
 8003dbc:	0880      	lsrs	r0, r0, #2
 8003dbe:	d00d      	beq.n	8003ddc <forward_soft_plus+0x84>
 8003dc0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dc4:	3910      	subs	r1, #16
 8003dc6:	68ca      	ldr	r2, [r1, #12]
 8003dc8:	688e      	ldr	r6, [r1, #8]
 8003dca:	684f      	ldr	r7, [r1, #4]
 8003dcc:	4372      	muls	r2, r6
 8003dce:	f851 6910 	ldr.w	r6, [r1], #-16
 8003dd2:	437a      	muls	r2, r7
 8003dd4:	4372      	muls	r2, r6
 8003dd6:	4355      	muls	r5, r2
 8003dd8:	1e40      	subs	r0, r0, #1
 8003dda:	d1f4      	bne.n	8003dc6 <forward_soft_plus+0x6e>
 8003ddc:	6998      	ldr	r0, [r3, #24]
 8003dde:	6886      	ldr	r6, [r0, #8]
 8003de0:	6821      	ldr	r1, [r4, #0]
 8003de2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003de6:	1f07      	subs	r7, r0, #4
 8003de8:	6888      	ldr	r0, [r1, #8]
 8003dea:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003dee:	1f14      	subs	r4, r2, #4
 8003df0:	42b7      	cmp	r7, r6
 8003df2:	d30f      	bcc.n	8003e14 <forward_soft_plus+0xbc>
 8003df4:	ed97 0a00 	vldr	s0, [r7]
 8003df8:	f00e ff60 	bl	8012cbc <expf>
 8003dfc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003e00:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003e04:	f00f f830 	bl	8012e68 <logf>
 8003e08:	ed84 0a00 	vstr	s0, [r4]
 8003e0c:	1f3f      	subs	r7, r7, #4
 8003e0e:	1f24      	subs	r4, r4, #4
 8003e10:	42b7      	cmp	r7, r6
 8003e12:	d2ef      	bcs.n	8003df4 <forward_soft_plus+0x9c>
 8003e14:	b001      	add	sp, #4
 8003e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e18 <nl_func_soft_sign_array_f32>:
 8003e18:	6889      	ldr	r1, [r1, #8]
 8003e1a:	6880      	ldr	r0, [r0, #8]
 8003e1c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003e20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003e24:	1f1b      	subs	r3, r3, #4
 8003e26:	1f10      	subs	r0, r2, #4
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	d30f      	bcc.n	8003e4c <nl_func_soft_sign_array_f32+0x34>
 8003e2c:	ed93 0a00 	vldr	s0, [r3]
 8003e30:	eef0 0ac0 	vabs.f32	s1, s0
 8003e34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e38:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003e3c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003e40:	ed80 0a00 	vstr	s0, [r0]
 8003e44:	1f1b      	subs	r3, r3, #4
 8003e46:	1f00      	subs	r0, r0, #4
 8003e48:	428b      	cmp	r3, r1
 8003e4a:	d2ef      	bcs.n	8003e2c <nl_func_soft_sign_array_f32+0x14>
 8003e4c:	4770      	bx	lr
	...

08003e50 <forward_soft_sign>:
 8003e50:	b4f0      	push	{r4, r5, r6, r7}
 8003e52:	6942      	ldr	r2, [r0, #20]
 8003e54:	8811      	ldrh	r1, [r2, #0]
 8003e56:	2900      	cmp	r1, #0
 8003e58:	bf1a      	itte	ne
 8003e5a:	6850      	ldrne	r0, [r2, #4]
 8003e5c:	1d00      	addne	r0, r0, #4
 8003e5e:	2004      	moveq	r0, #4
 8003e60:	f04f 0501 	mov.w	r5, #1
 8003e64:	6800      	ldr	r0, [r0, #0]
 8003e66:	2800      	cmp	r0, #0
 8003e68:	bf14      	ite	ne
 8003e6a:	6803      	ldrne	r3, [r0, #0]
 8003e6c:	2300      	moveq	r3, #0
 8003e6e:	2902      	cmp	r1, #2
 8003e70:	bfa6      	itte	ge
 8003e72:	6850      	ldrge	r0, [r2, #4]
 8003e74:	3010      	addge	r0, #16
 8003e76:	2004      	movlt	r0, #4
 8003e78:	6800      	ldr	r0, [r0, #0]
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	bf19      	ittee	ne
 8003e7e:	6800      	ldrne	r0, [r0, #0]
 8003e80:	f100 0418 	addne.w	r4, r0, #24
 8003e84:	2100      	moveq	r1, #0
 8003e86:	f101 0418 	addeq.w	r4, r1, #24
 8003e8a:	f103 0108 	add.w	r1, r3, #8
 8003e8e:	680a      	ldr	r2, [r1, #0]
 8003e90:	0a12      	lsrs	r2, r2, #8
 8003e92:	d01e      	beq.n	8003ed2 <forward_soft_sign+0x82>
 8003e94:	684e      	ldr	r6, [r1, #4]
 8003e96:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	1f0f      	subs	r7, r1, #4
 8003e9e:	f010 0103 	ands.w	r1, r0, #3
 8003ea2:	d006      	beq.n	8003eb2 <forward_soft_sign+0x62>
 8003ea4:	1e52      	subs	r2, r2, #1
 8003ea6:	f857 c904 	ldr.w	ip, [r7], #-4
 8003eaa:	1e49      	subs	r1, r1, #1
 8003eac:	fb0c f505 	mul.w	r5, ip, r5
 8003eb0:	d1f8      	bne.n	8003ea4 <forward_soft_sign+0x54>
 8003eb2:	0880      	lsrs	r0, r0, #2
 8003eb4:	d00d      	beq.n	8003ed2 <forward_soft_sign+0x82>
 8003eb6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003eba:	3910      	subs	r1, #16
 8003ebc:	68ca      	ldr	r2, [r1, #12]
 8003ebe:	688e      	ldr	r6, [r1, #8]
 8003ec0:	684f      	ldr	r7, [r1, #4]
 8003ec2:	4372      	muls	r2, r6
 8003ec4:	f851 6910 	ldr.w	r6, [r1], #-16
 8003ec8:	437a      	muls	r2, r7
 8003eca:	4372      	muls	r2, r6
 8003ecc:	4355      	muls	r5, r2
 8003ece:	1e40      	subs	r0, r0, #1
 8003ed0:	d1f4      	bne.n	8003ebc <forward_soft_sign+0x6c>
 8003ed2:	6998      	ldr	r0, [r3, #24]
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	6880      	ldr	r0, [r0, #8]
 8003ed8:	6893      	ldr	r3, [r2, #8]
 8003eda:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003ede:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003ee2:	1f09      	subs	r1, r1, #4
 8003ee4:	1f22      	subs	r2, r4, #4
 8003ee6:	4281      	cmp	r1, r0
 8003ee8:	f0c0 8010 	bcc.w	8003f0c <forward_soft_sign+0xbc>
 8003eec:	ed91 0a00 	vldr	s0, [r1]
 8003ef0:	eef0 0ac0 	vabs.f32	s1, s0
 8003ef4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003ef8:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003efc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003f00:	ed82 0a00 	vstr	s0, [r2]
 8003f04:	1f09      	subs	r1, r1, #4
 8003f06:	1f12      	subs	r2, r2, #4
 8003f08:	4281      	cmp	r1, r0
 8003f0a:	d2ef      	bcs.n	8003eec <forward_soft_sign+0x9c>
 8003f0c:	bcf0      	pop	{r4, r5, r6, r7}
 8003f0e:	4770      	bx	lr

08003f10 <nl_func_tanh_array_f32>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	688c      	ldr	r4, [r1, #8]
 8003f14:	6880      	ldr	r0, [r0, #8]
 8003f16:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003f1a:	1f0d      	subs	r5, r1, #4
 8003f1c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003f20:	1f0e      	subs	r6, r1, #4
 8003f22:	42a5      	cmp	r5, r4
 8003f24:	f0c0 800a 	bcc.w	8003f3c <nl_func_tanh_array_f32+0x2c>
 8003f28:	ed95 0a00 	vldr	s0, [r5]
 8003f2c:	f00e fca0 	bl	8012870 <tanhf>
 8003f30:	ed86 0a00 	vstr	s0, [r6]
 8003f34:	1f2d      	subs	r5, r5, #4
 8003f36:	1f36      	subs	r6, r6, #4
 8003f38:	42a5      	cmp	r5, r4
 8003f3a:	d2f5      	bcs.n	8003f28 <nl_func_tanh_array_f32+0x18>
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f40 <forward_tanh>:
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	b081      	sub	sp, #4
 8003f44:	6942      	ldr	r2, [r0, #20]
 8003f46:	8811      	ldrh	r1, [r2, #0]
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	bf1a      	itte	ne
 8003f4c:	6850      	ldrne	r0, [r2, #4]
 8003f4e:	1d00      	addne	r0, r0, #4
 8003f50:	2004      	moveq	r0, #4
 8003f52:	f04f 0501 	mov.w	r5, #1
 8003f56:	6800      	ldr	r0, [r0, #0]
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	bf14      	ite	ne
 8003f5c:	6803      	ldrne	r3, [r0, #0]
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	2902      	cmp	r1, #2
 8003f62:	bfa6      	itte	ge
 8003f64:	6850      	ldrge	r0, [r2, #4]
 8003f66:	3010      	addge	r0, #16
 8003f68:	2004      	movlt	r0, #4
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	bf19      	ittee	ne
 8003f70:	6800      	ldrne	r0, [r0, #0]
 8003f72:	f100 0418 	addne.w	r4, r0, #24
 8003f76:	2100      	moveq	r1, #0
 8003f78:	f101 0418 	addeq.w	r4, r1, #24
 8003f7c:	f103 0108 	add.w	r1, r3, #8
 8003f80:	680a      	ldr	r2, [r1, #0]
 8003f82:	0a12      	lsrs	r2, r2, #8
 8003f84:	d01e      	beq.n	8003fc4 <forward_tanh+0x84>
 8003f86:	684e      	ldr	r6, [r1, #4]
 8003f88:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	1f0f      	subs	r7, r1, #4
 8003f90:	f010 0103 	ands.w	r1, r0, #3
 8003f94:	d006      	beq.n	8003fa4 <forward_tanh+0x64>
 8003f96:	1e52      	subs	r2, r2, #1
 8003f98:	f857 c904 	ldr.w	ip, [r7], #-4
 8003f9c:	1e49      	subs	r1, r1, #1
 8003f9e:	fb0c f505 	mul.w	r5, ip, r5
 8003fa2:	d1f8      	bne.n	8003f96 <forward_tanh+0x56>
 8003fa4:	0880      	lsrs	r0, r0, #2
 8003fa6:	d00d      	beq.n	8003fc4 <forward_tanh+0x84>
 8003fa8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003fac:	3910      	subs	r1, #16
 8003fae:	68ca      	ldr	r2, [r1, #12]
 8003fb0:	688e      	ldr	r6, [r1, #8]
 8003fb2:	684f      	ldr	r7, [r1, #4]
 8003fb4:	4372      	muls	r2, r6
 8003fb6:	f851 6910 	ldr.w	r6, [r1], #-16
 8003fba:	437a      	muls	r2, r7
 8003fbc:	4372      	muls	r2, r6
 8003fbe:	4355      	muls	r5, r2
 8003fc0:	1e40      	subs	r0, r0, #1
 8003fc2:	d1f4      	bne.n	8003fae <forward_tanh+0x6e>
 8003fc4:	6998      	ldr	r0, [r3, #24]
 8003fc6:	6886      	ldr	r6, [r0, #8]
 8003fc8:	6821      	ldr	r1, [r4, #0]
 8003fca:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003fce:	1f07      	subs	r7, r0, #4
 8003fd0:	6888      	ldr	r0, [r1, #8]
 8003fd2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003fd6:	1f14      	subs	r4, r2, #4
 8003fd8:	42b7      	cmp	r7, r6
 8003fda:	d309      	bcc.n	8003ff0 <forward_tanh+0xb0>
 8003fdc:	ed97 0a00 	vldr	s0, [r7]
 8003fe0:	f00e fc46 	bl	8012870 <tanhf>
 8003fe4:	ed84 0a00 	vstr	s0, [r4]
 8003fe8:	1f3f      	subs	r7, r7, #4
 8003fea:	1f24      	subs	r4, r4, #4
 8003fec:	42b7      	cmp	r7, r6
 8003fee:	d2f5      	bcs.n	8003fdc <forward_tanh+0x9c>
 8003ff0:	b001      	add	sp, #4
 8003ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ff4 <nl_func_relu_array_f32>:
 8003ff4:	6889      	ldr	r1, [r1, #8]
 8003ff6:	6880      	ldr	r0, [r0, #8]
 8003ff8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003ffc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004000:	1f1b      	subs	r3, r3, #4
 8004002:	1f10      	subs	r0, r2, #4
 8004004:	428b      	cmp	r3, r1
 8004006:	d30e      	bcc.n	8004026 <nl_func_relu_array_f32+0x32>
 8004008:	ed93 0a00 	vldr	s0, [r3]
 800400c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004014:	bf48      	it	mi
 8004016:	ed9f 0a7b 	vldrmi	s0, [pc, #492]	; 8004204 <.text_62>
 800401a:	ed80 0a00 	vstr	s0, [r0]
 800401e:	1f1b      	subs	r3, r3, #4
 8004020:	1f00      	subs	r0, r0, #4
 8004022:	428b      	cmp	r3, r1
 8004024:	d2f0      	bcs.n	8004008 <nl_func_relu_array_f32+0x14>
 8004026:	4770      	bx	lr

08004028 <nl_func_sm_channel_f32>:
 8004028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800402c:	ed2d 8b02 	vpush	{d8}
 8004030:	688f      	ldr	r7, [r1, #8]
 8004032:	6886      	ldr	r6, [r0, #8]
 8004034:	ed97 8a00 	vldr	s16, [r7]
 8004038:	4614      	mov	r4, r2
 800403a:	2c02      	cmp	r4, #2
 800403c:	eddf 8a71 	vldr	s17, [pc, #452]	; 8004204 <.text_62>
 8004040:	d33d      	bcc.n	80040be <nl_func_sm_channel_f32+0x96>
 8004042:	1e61      	subs	r1, r4, #1
 8004044:	1d3a      	adds	r2, r7, #4
 8004046:	f011 0003 	ands.w	r0, r1, #3
 800404a:	d00c      	beq.n	8004066 <nl_func_sm_channel_f32+0x3e>
 800404c:	ed92 0a00 	vldr	s0, [r2]
 8004050:	eeb4 0a48 	vcmp.f32	s0, s16
 8004054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004058:	bf58      	it	pl
 800405a:	eeb0 8a40 	vmovpl.f32	s16, s0
 800405e:	1e40      	subs	r0, r0, #1
 8004060:	f102 0204 	add.w	r2, r2, #4
 8004064:	d1f2      	bne.n	800404c <nl_func_sm_channel_f32+0x24>
 8004066:	0889      	lsrs	r1, r1, #2
 8004068:	f000 802b 	beq.w	80040c2 <nl_func_sm_channel_f32+0x9a>
 800406c:	ed92 0a00 	vldr	s0, [r2]
 8004070:	eeb4 0a48 	vcmp.f32	s0, s16
 8004074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004078:	bf58      	it	pl
 800407a:	eeb0 8a40 	vmovpl.f32	s16, s0
 800407e:	ed92 0a01 	vldr	s0, [r2, #4]
 8004082:	eeb4 0a48 	vcmp.f32	s0, s16
 8004086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408a:	bf58      	it	pl
 800408c:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004090:	ed92 0a02 	vldr	s0, [r2, #8]
 8004094:	eeb4 0a48 	vcmp.f32	s0, s16
 8004098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409c:	bf58      	it	pl
 800409e:	eeb0 8a40 	vmovpl.f32	s16, s0
 80040a2:	ed92 0a03 	vldr	s0, [r2, #12]
 80040a6:	eeb4 0a48 	vcmp.f32	s0, s16
 80040aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ae:	bf58      	it	pl
 80040b0:	eeb0 8a40 	vmovpl.f32	s16, s0
 80040b4:	1e49      	subs	r1, r1, #1
 80040b6:	f102 0210 	add.w	r2, r2, #16
 80040ba:	d1d7      	bne.n	800406c <nl_func_sm_channel_f32+0x44>
 80040bc:	e001      	b.n	80040c2 <nl_func_sm_channel_f32+0x9a>
 80040be:	2c00      	cmp	r4, #0
 80040c0:	d040      	beq.n	8004144 <nl_func_sm_channel_f32+0x11c>
 80040c2:	46b0      	mov	r8, r6
 80040c4:	ea4f 0504 	mov.w	r5, r4
 80040c8:	ed97 0a00 	vldr	s0, [r7]
 80040cc:	ee30 0a48 	vsub.f32	s0, s0, s16
 80040d0:	f00e fdf4 	bl	8012cbc <expf>
 80040d4:	1d3f      	adds	r7, r7, #4
 80040d6:	ed88 0a00 	vstr	s0, [r8]
 80040da:	1e6d      	subs	r5, r5, #1
 80040dc:	ee78 8a80 	vadd.f32	s17, s17, s0
 80040e0:	f108 0804 	add.w	r8, r8, #4
 80040e4:	d1f0      	bne.n	80040c8 <nl_func_sm_channel_f32+0xa0>
 80040e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80040ea:	f014 0003 	ands.w	r0, r4, #3
 80040ee:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80040f2:	d009      	beq.n	8004108 <nl_func_sm_channel_f32+0xe0>
 80040f4:	edd6 0a00 	vldr	s1, [r6]
 80040f8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80040fc:	edc6 0a00 	vstr	s1, [r6]
 8004100:	1e40      	subs	r0, r0, #1
 8004102:	f106 0604 	add.w	r6, r6, #4
 8004106:	d1f5      	bne.n	80040f4 <nl_func_sm_channel_f32+0xcc>
 8004108:	08a4      	lsrs	r4, r4, #2
 800410a:	d01b      	beq.n	8004144 <nl_func_sm_channel_f32+0x11c>
 800410c:	edd6 0a00 	vldr	s1, [r6]
 8004110:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004114:	edc6 0a00 	vstr	s1, [r6]
 8004118:	1e64      	subs	r4, r4, #1
 800411a:	ed96 1a01 	vldr	s2, [r6, #4]
 800411e:	edd6 0a02 	vldr	s1, [r6, #8]
 8004122:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004126:	ed86 1a01 	vstr	s2, [r6, #4]
 800412a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800412e:	ed96 1a03 	vldr	s2, [r6, #12]
 8004132:	edc6 0a02 	vstr	s1, [r6, #8]
 8004136:	ee21 1a00 	vmul.f32	s2, s2, s0
 800413a:	ed86 1a03 	vstr	s2, [r6, #12]
 800413e:	f106 0610 	add.w	r6, r6, #16
 8004142:	d1e3      	bne.n	800410c <nl_func_sm_channel_f32+0xe4>
 8004144:	ecbd 8b02 	vpop	{d8}
 8004148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800414c <nl_func_sm_array_f32>:
 800414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	460d      	mov	r5, r1
 8004152:	4604      	mov	r4, r0
 8004154:	9f08      	ldr	r7, [sp, #32]
 8004156:	68a8      	ldr	r0, [r5, #8]
 8004158:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800415a:	00bf      	lsls	r7, r7, #2
 800415c:	427f      	negs	r7, r7
 800415e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004162:	68a0      	ldr	r0, [r4, #8]
 8004164:	eb01 0a07 	add.w	sl, r1, r7
 8004168:	00b6      	lsls	r6, r6, #2
 800416a:	4276      	negs	r6, r6
 800416c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004170:	68ea      	ldr	r2, [r5, #12]
 8004172:	4592      	cmp	sl, r2
 8004174:	eb01 0906 	add.w	r9, r1, r6
 8004178:	d30f      	bcc.n	800419a <nl_func_sm_array_f32+0x4e>
 800417a:	4698      	mov	r8, r3
 800417c:	f8c5 a008 	str.w	sl, [r5, #8]
 8004180:	f8c4 9008 	str.w	r9, [r4, #8]
 8004184:	2300      	movs	r3, #0
 8004186:	4642      	mov	r2, r8
 8004188:	4629      	mov	r1, r5
 800418a:	4620      	mov	r0, r4
 800418c:	f7ff ff4c 	bl	8004028 <nl_func_sm_channel_f32>
 8004190:	68e8      	ldr	r0, [r5, #12]
 8004192:	44ba      	add	sl, r7
 8004194:	4582      	cmp	sl, r0
 8004196:	44b1      	add	r9, r6
 8004198:	d2f0      	bcs.n	800417c <nl_func_sm_array_f32+0x30>
 800419a:	68e9      	ldr	r1, [r5, #12]
 800419c:	60a9      	str	r1, [r5, #8]
 800419e:	68e0      	ldr	r0, [r4, #12]
 80041a0:	60a0      	str	r0, [r4, #8]
 80041a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080041a8 <nl_func_hard_sigmoid_array_f32>:
 80041a8:	6889      	ldr	r1, [r1, #8]
 80041aa:	6880      	ldr	r0, [r0, #8]
 80041ac:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80041b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80041b4:	1f1b      	subs	r3, r3, #4
 80041b6:	1f10      	subs	r0, r2, #4
 80041b8:	428b      	cmp	r3, r1
 80041ba:	d321      	bcc.n	8004200 <nl_func_hard_sigmoid_array_f32+0x58>
 80041bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041c0:	eddf 0ab8 	vldr	s1, [pc, #736]	; 80044a4 <.text_68>
 80041c4:	edd3 1a00 	vldr	s3, [r3]
 80041c8:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 80044a8 <.text_69>
 80041cc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80041d0:	ee01 1a82 	vmla.f32	s2, s3, s4
 80041d4:	eeb4 1a60 	vcmp.f32	s2, s1
 80041d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041dc:	da08      	bge.n	80041f0 <nl_func_hard_sigmoid_array_f32+0x48>
 80041de:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80041e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e6:	d505      	bpl.n	80041f4 <nl_func_hard_sigmoid_array_f32+0x4c>
 80041e8:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004204 <.text_62>
 80041ec:	e002      	b.n	80041f4 <nl_func_hard_sigmoid_array_f32+0x4c>
 80041ee:	bf00      	nop
 80041f0:	eeb0 1a40 	vmov.f32	s2, s0
 80041f4:	ed80 1a00 	vstr	s2, [r0]
 80041f8:	1f1b      	subs	r3, r3, #4
 80041fa:	1f00      	subs	r0, r0, #4
 80041fc:	428b      	cmp	r3, r1
 80041fe:	d2e1      	bcs.n	80041c4 <nl_func_hard_sigmoid_array_f32+0x1c>
 8004200:	4770      	bx	lr
	...

08004204 <.text_62>:
 8004204:	00000000 	.word	0x00000000

08004208 <nl_func_clip_array_f32>:
 8004208:	6889      	ldr	r1, [r1, #8]
 800420a:	6880      	ldr	r0, [r0, #8]
 800420c:	ed93 0a00 	vldr	s0, [r3]
 8004210:	edd3 0a01 	vldr	s1, [r3, #4]
 8004214:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004218:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800421c:	1f1b      	subs	r3, r3, #4
 800421e:	1f10      	subs	r0, r2, #4
 8004220:	428b      	cmp	r3, r1
 8004222:	d315      	bcc.n	8004250 <nl_func_clip_array_f32+0x48>
 8004224:	ed93 1a00 	vldr	s2, [r3]
 8004228:	eeb4 0a41 	vcmp.f32	s0, s2
 800422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004230:	bf58      	it	pl
 8004232:	eeb0 1a40 	vmovpl.f32	s2, s0
 8004236:	eeb4 1a60 	vcmp.f32	s2, s1
 800423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423e:	bf58      	it	pl
 8004240:	eeb0 1a60 	vmovpl.f32	s2, s1
 8004244:	ed80 1a00 	vstr	s2, [r0]
 8004248:	1f1b      	subs	r3, r3, #4
 800424a:	1f00      	subs	r0, r0, #4
 800424c:	428b      	cmp	r3, r1
 800424e:	d2e9      	bcs.n	8004224 <nl_func_clip_array_f32+0x1c>
 8004250:	4770      	bx	lr
	...

08004254 <nl_func_hardmax_array_f32>:
 8004254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004258:	6852      	ldr	r2, [r2, #4]
 800425a:	6855      	ldr	r5, [r2, #4]
 800425c:	68d4      	ldr	r4, [r2, #12]
 800425e:	688e      	ldr	r6, [r1, #8]
 8004260:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8004264:	436c      	muls	r4, r5
 8004266:	00a1      	lsls	r1, r4, #2
 8004268:	4640      	mov	r0, r8
 800426a:	f00b fcff 	bl	800fc6c <__aeabi_memclr>
 800426e:	2200      	movs	r2, #0
 8004270:	2c00      	cmp	r4, #0
 8004272:	4633      	mov	r3, r6
 8004274:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004278:	f000 805b 	beq.w	8004332 <nl_func_hardmax_array_f32+0xde>
 800427c:	f102 0c01 	add.w	ip, r2, #1
 8004280:	eb05 0e02 	add.w	lr, r5, r2
 8004284:	45f4      	cmp	ip, lr
 8004286:	edd3 0a00 	vldr	s1, [r3]
 800428a:	d249      	bcs.n	8004320 <nl_func_hardmax_array_f32+0xcc>
 800428c:	1e69      	subs	r1, r5, #1
 800428e:	f011 0003 	ands.w	r0, r1, #3
 8004292:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 8004296:	d00f      	beq.n	80042b8 <nl_func_hardmax_array_f32+0x64>
 8004298:	ed97 1a00 	vldr	s2, [r7]
 800429c:	eef4 0a41 	vcmp.f32	s1, s2
 80042a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a4:	bf44      	itt	mi
 80042a6:	eef0 0a41 	vmovmi.f32	s1, s2
 80042aa:	4662      	movmi	r2, ip
 80042ac:	1e40      	subs	r0, r0, #1
 80042ae:	f10c 0c01 	add.w	ip, ip, #1
 80042b2:	f107 0704 	add.w	r7, r7, #4
 80042b6:	d1ef      	bne.n	8004298 <nl_func_hardmax_array_f32+0x44>
 80042b8:	0889      	lsrs	r1, r1, #2
 80042ba:	d031      	beq.n	8004320 <nl_func_hardmax_array_f32+0xcc>
 80042bc:	ed97 1a00 	vldr	s2, [r7]
 80042c0:	eef4 0a41 	vcmp.f32	s1, s2
 80042c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c8:	bf44      	itt	mi
 80042ca:	eef0 0a41 	vmovmi.f32	s1, s2
 80042ce:	4662      	movmi	r2, ip
 80042d0:	ed97 1a01 	vldr	s2, [r7, #4]
 80042d4:	eef4 0a41 	vcmp.f32	s1, s2
 80042d8:	f10c 0001 	add.w	r0, ip, #1
 80042dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e0:	bf44      	itt	mi
 80042e2:	eef0 0a41 	vmovmi.f32	s1, s2
 80042e6:	4602      	movmi	r2, r0
 80042e8:	ed97 1a02 	vldr	s2, [r7, #8]
 80042ec:	1c40      	adds	r0, r0, #1
 80042ee:	eef4 0a41 	vcmp.f32	s1, s2
 80042f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f6:	bf44      	itt	mi
 80042f8:	eef0 0a41 	vmovmi.f32	s1, s2
 80042fc:	4602      	movmi	r2, r0
 80042fe:	ed97 1a03 	vldr	s2, [r7, #12]
 8004302:	1c40      	adds	r0, r0, #1
 8004304:	eef4 0a41 	vcmp.f32	s1, s2
 8004308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430c:	bf44      	itt	mi
 800430e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004312:	4602      	movmi	r2, r0
 8004314:	1e49      	subs	r1, r1, #1
 8004316:	f100 0c01 	add.w	ip, r0, #1
 800431a:	f107 0710 	add.w	r7, r7, #16
 800431e:	d1cd      	bne.n	80042bc <nl_func_hardmax_array_f32+0x68>
 8004320:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8004324:	4672      	mov	r2, lr
 8004326:	42a2      	cmp	r2, r4
 8004328:	ed80 0a00 	vstr	s0, [r0]
 800432c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004330:	d3a4      	bcc.n	800427c <nl_func_hardmax_array_f32+0x28>
 8004332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004338 <nl_func_relu_generic_array_f32>:
 8004338:	6880      	ldr	r0, [r0, #8]
 800433a:	ed93 0a00 	vldr	s0, [r3]
 800433e:	edd3 0a01 	vldr	s1, [r3, #4]
 8004342:	ed93 1a02 	vldr	s2, [r3, #8]
 8004346:	6889      	ldr	r1, [r1, #8]
 8004348:	1f03      	subs	r3, r0, #4
 800434a:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800434e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004352:	1f0b      	subs	r3, r1, #4
 8004354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004358:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800435c:	d52a      	bpl.n	80043b4 <nl_func_relu_generic_array_f32+0x7c>
 800435e:	eef5 0a40 	vcmp.f32	s1, #0.0
 8004362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004366:	d013      	beq.n	8004390 <nl_func_relu_generic_array_f32+0x58>
 8004368:	428a      	cmp	r2, r1
 800436a:	d310      	bcc.n	800438e <nl_func_relu_generic_array_f32+0x56>
 800436c:	ed92 1a00 	vldr	s2, [r2]
 8004370:	eeb4 1a40 	vcmp.f32	s2, s0
 8004374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004378:	bf44      	itt	mi
 800437a:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 800437e:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 8004382:	ed80 1a00 	vstr	s2, [r0]
 8004386:	1f12      	subs	r2, r2, #4
 8004388:	1f00      	subs	r0, r0, #4
 800438a:	428a      	cmp	r2, r1
 800438c:	d2ee      	bcs.n	800436c <nl_func_relu_generic_array_f32+0x34>
 800438e:	4770      	bx	lr
 8004390:	428a      	cmp	r2, r1
 8004392:	d3fc      	bcc.n	800438e <nl_func_relu_generic_array_f32+0x56>
 8004394:	edd2 0a00 	vldr	s1, [r2]
 8004398:	eef4 0a40 	vcmp.f32	s1, s0
 800439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a0:	bf48      	it	mi
 80043a2:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 8004640 <.text_73>
 80043a6:	edc0 0a00 	vstr	s1, [r0]
 80043aa:	1f12      	subs	r2, r2, #4
 80043ac:	1f00      	subs	r0, r0, #4
 80043ae:	428a      	cmp	r2, r1
 80043b0:	d2f0      	bcs.n	8004394 <nl_func_relu_generic_array_f32+0x5c>
 80043b2:	4770      	bx	lr
 80043b4:	428a      	cmp	r2, r1
 80043b6:	d3ea      	bcc.n	800438e <nl_func_relu_generic_array_f32+0x56>
 80043b8:	edd2 1a00 	vldr	s3, [r2]
 80043bc:	eef4 1a41 	vcmp.f32	s3, s2
 80043c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c4:	d50a      	bpl.n	80043dc <nl_func_relu_generic_array_f32+0xa4>
 80043c6:	eef4 1a40 	vcmp.f32	s3, s0
 80043ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ce:	d507      	bpl.n	80043e0 <nl_func_relu_generic_array_f32+0xa8>
 80043d0:	ee71 1ac0 	vsub.f32	s3, s3, s0
 80043d4:	ee61 1aa0 	vmul.f32	s3, s3, s1
 80043d8:	e002      	b.n	80043e0 <nl_func_relu_generic_array_f32+0xa8>
 80043da:	bf00      	nop
 80043dc:	eef0 1a41 	vmov.f32	s3, s2
 80043e0:	edc0 1a00 	vstr	s3, [r0]
 80043e4:	1f12      	subs	r2, r2, #4
 80043e6:	1f00      	subs	r0, r0, #4
 80043e8:	428a      	cmp	r2, r1
 80043ea:	d2e5      	bcs.n	80043b8 <nl_func_relu_generic_array_f32+0x80>
 80043ec:	4770      	bx	lr
	...

080043f0 <nl_func_relu_thresholded_array_f32>:
 80043f0:	6889      	ldr	r1, [r1, #8]
 80043f2:	6880      	ldr	r0, [r0, #8]
 80043f4:	ed93 0a00 	vldr	s0, [r3]
 80043f8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80043fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004400:	1f1b      	subs	r3, r3, #4
 8004402:	1f10      	subs	r0, r2, #4
 8004404:	428b      	cmp	r3, r1
 8004406:	d30e      	bcc.n	8004426 <nl_func_relu_thresholded_array_f32+0x36>
 8004408:	edd3 0a00 	vldr	s1, [r3]
 800440c:	eef4 0a40 	vcmp.f32	s1, s0
 8004410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004414:	bf48      	it	mi
 8004416:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 8004640 <.text_73>
 800441a:	edc0 0a00 	vstr	s1, [r0]
 800441e:	1f1b      	subs	r3, r3, #4
 8004420:	1f00      	subs	r0, r0, #4
 8004422:	428b      	cmp	r3, r1
 8004424:	d2f0      	bcs.n	8004408 <nl_func_relu_thresholded_array_f32+0x18>
 8004426:	4770      	bx	lr

08004428 <nl_func_elu_array_f32>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	ed2d 8b04 	vpush	{d8-d9}
 800442e:	688c      	ldr	r4, [r1, #8]
 8004430:	6880      	ldr	r0, [r0, #8]
 8004432:	ed93 8a00 	vldr	s16, [r3]
 8004436:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800443a:	1f0d      	subs	r5, r1, #4
 800443c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004440:	1f0e      	subs	r6, r1, #4
 8004442:	42a5      	cmp	r5, r4
 8004444:	f0c0 802a 	bcc.w	800449c <nl_func_elu_array_f32+0x74>
 8004448:	edd5 8a00 	vldr	s17, [r5]
 800444c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004454:	bf4c      	ite	mi
 8004456:	ed9f 9a7a 	vldrmi	s18, [pc, #488]	; 8004640 <.text_73>
 800445a:	eeb0 9a68 	vmovpl.f32	s18, s17
 800445e:	eeb0 0a68 	vmov.f32	s0, s17
 8004462:	f00e fc2b 	bl	8012cbc <expf>
 8004466:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800446a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800446e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004472:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447a:	dc09      	bgt.n	8004490 <nl_func_elu_array_f32+0x68>
 800447c:	eeb0 0a68 	vmov.f32	s0, s17
 8004480:	f00e fc1c 	bl	8012cbc <expf>
 8004484:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004488:	ee30 0a20 	vadd.f32	s0, s0, s1
 800448c:	ee00 9a08 	vmla.f32	s18, s0, s16
 8004490:	ed86 9a00 	vstr	s18, [r6]
 8004494:	1f2d      	subs	r5, r5, #4
 8004496:	1f36      	subs	r6, r6, #4
 8004498:	42a5      	cmp	r5, r4
 800449a:	d2d5      	bcs.n	8004448 <nl_func_elu_array_f32+0x20>
 800449c:	ecbd 8b04 	vpop	{d8-d9}
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080044a4 <.text_68>:
 80044a4:	3f800001 	.word	0x3f800001

080044a8 <.text_69>:
 80044a8:	3e4ccccd 	.word	0x3e4ccccd

080044ac <nl_func_selu_array_f32>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	ed2d 8b04 	vpush	{d8-d9}
 80044b2:	688c      	ldr	r4, [r1, #8]
 80044b4:	6880      	ldr	r0, [r0, #8]
 80044b6:	ed93 8a00 	vldr	s16, [r3]
 80044ba:	edd3 8a01 	vldr	s17, [r3, #4]
 80044be:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80044c2:	1f0d      	subs	r5, r1, #4
 80044c4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80044c8:	1f0e      	subs	r6, r1, #4
 80044ca:	42a5      	cmp	r5, r4
 80044cc:	f0c0 802c 	bcc.w	8004528 <nl_func_selu_array_f32+0x7c>
 80044d0:	ed95 9a00 	vldr	s18, [r5]
 80044d4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80044d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044dc:	bf4c      	ite	mi
 80044de:	eddf 9a58 	vldrmi	s19, [pc, #352]	; 8004640 <.text_73>
 80044e2:	eef0 9a49 	vmovpl.f32	s19, s18
 80044e6:	eeb0 0a49 	vmov.f32	s0, s18
 80044ea:	f00e fbe7 	bl	8012cbc <expf>
 80044ee:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80044f2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80044f6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80044fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004502:	dc09      	bgt.n	8004518 <nl_func_selu_array_f32+0x6c>
 8004504:	eeb0 0a49 	vmov.f32	s0, s18
 8004508:	f00e fbd8 	bl	8012cbc <expf>
 800450c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004510:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004514:	ee40 9a08 	vmla.f32	s19, s0, s16
 8004518:	ee28 0aa9 	vmul.f32	s0, s17, s19
 800451c:	ed86 0a00 	vstr	s0, [r6]
 8004520:	1f2d      	subs	r5, r5, #4
 8004522:	1f36      	subs	r6, r6, #4
 8004524:	42a5      	cmp	r5, r4
 8004526:	d2d3      	bcs.n	80044d0 <nl_func_selu_array_f32+0x24>
 8004528:	ecbd 8b04 	vpop	{d8-d9}
 800452c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004530 <nl_func_prelu_array_f32>:
 8004530:	6889      	ldr	r1, [r1, #8]
 8004532:	6880      	ldr	r0, [r0, #8]
 8004534:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004538:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800453c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004540:	1f1b      	subs	r3, r3, #4
 8004542:	f1ac 0c04 	sub.w	ip, ip, #4
 8004546:	1f10      	subs	r0, r2, #4
 8004548:	458c      	cmp	ip, r1
 800454a:	d320      	bcc.n	800458e <nl_func_prelu_array_f32+0x5e>
 800454c:	ed9c 0a00 	vldr	s0, [ip]
 8004550:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	bf4c      	ite	mi
 800455a:	eddf 0a39 	vldrmi	s1, [pc, #228]	; 8004640 <.text_73>
 800455e:	eef0 0a40 	vmovpl.f32	s1, s0
 8004562:	461a      	mov	r2, r3
 8004564:	eeb1 0a40 	vneg.f32	s0, s0
 8004568:	1f13      	subs	r3, r2, #4
 800456a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	bf48      	it	mi
 8004574:	ed9f 0a32 	vldrmi	s0, [pc, #200]	; 8004640 <.text_73>
 8004578:	ed92 1a00 	vldr	s2, [r2]
 800457c:	ee41 0a40 	vmls.f32	s1, s2, s0
 8004580:	edc0 0a00 	vstr	s1, [r0]
 8004584:	f1ac 0c04 	sub.w	ip, ip, #4
 8004588:	1f00      	subs	r0, r0, #4
 800458a:	458c      	cmp	ip, r1
 800458c:	d2de      	bcs.n	800454c <nl_func_prelu_array_f32+0x1c>
 800458e:	4770      	bx	lr

08004590 <forward_relu>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4604      	mov	r4, r0
 8004594:	6962      	ldr	r2, [r4, #20]
 8004596:	8811      	ldrh	r1, [r2, #0]
 8004598:	2900      	cmp	r1, #0
 800459a:	bf1a      	itte	ne
 800459c:	6850      	ldrne	r0, [r2, #4]
 800459e:	1d00      	addne	r0, r0, #4
 80045a0:	2004      	moveq	r0, #4
 80045a2:	6800      	ldr	r0, [r0, #0]
 80045a4:	2800      	cmp	r0, #0
 80045a6:	bf14      	ite	ne
 80045a8:	6805      	ldrne	r5, [r0, #0]
 80045aa:	2500      	moveq	r5, #0
 80045ac:	2902      	cmp	r1, #2
 80045ae:	bfa6      	itte	ge
 80045b0:	6850      	ldrge	r0, [r2, #4]
 80045b2:	3010      	addge	r0, #16
 80045b4:	2004      	movlt	r0, #4
 80045b6:	6800      	ldr	r0, [r0, #0]
 80045b8:	2800      	cmp	r0, #0
 80045ba:	bf19      	ittee	ne
 80045bc:	6800      	ldrne	r0, [r0, #0]
 80045be:	f100 0618 	addne.w	r6, r0, #24
 80045c2:	2100      	moveq	r1, #0
 80045c4:	f101 0618 	addeq.w	r6, r1, #24
 80045c8:	69a0      	ldr	r0, [r4, #24]
 80045ca:	b9f8      	cbnz	r0, 800460c <forward_relu+0x7c>
 80045cc:	f105 0008 	add.w	r0, r5, #8
 80045d0:	f7fe f80a 	bl	80025e8 <ai_shape_get_size>
 80045d4:	69a9      	ldr	r1, [r5, #24]
 80045d6:	6833      	ldr	r3, [r6, #0]
 80045d8:	6889      	ldr	r1, [r1, #8]
 80045da:	689c      	ldr	r4, [r3, #8]
 80045dc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80045e0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80045e4:	1f12      	subs	r2, r2, #4
 80045e6:	1f00      	subs	r0, r0, #4
 80045e8:	428a      	cmp	r2, r1
 80045ea:	d328      	bcc.n	800463e <forward_relu+0xae>
 80045ec:	ed92 0a00 	vldr	s0, [r2]
 80045f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80045f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f8:	bf48      	it	mi
 80045fa:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 8004640 <.text_73>
 80045fe:	ed80 0a00 	vstr	s0, [r0]
 8004602:	1f12      	subs	r2, r2, #4
 8004604:	1f00      	subs	r0, r0, #4
 8004606:	428a      	cmp	r2, r1
 8004608:	d2f0      	bcs.n	80045ec <forward_relu+0x5c>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	6840      	ldr	r0, [r0, #4]
 800460e:	2801      	cmp	r0, #1
 8004610:	f105 0008 	add.w	r0, r5, #8
 8004614:	d109      	bne.n	800462a <forward_relu+0x9a>
 8004616:	f7fd ffe7 	bl	80025e8 <ai_shape_get_size>
 800461a:	4602      	mov	r2, r0
 800461c:	69a0      	ldr	r0, [r4, #24]
 800461e:	6883      	ldr	r3, [r0, #8]
 8004620:	69a9      	ldr	r1, [r5, #24]
 8004622:	6830      	ldr	r0, [r6, #0]
 8004624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004628:	e6e2      	b.n	80043f0 <nl_func_relu_thresholded_array_f32>
 800462a:	f7fd ffdd 	bl	80025e8 <ai_shape_get_size>
 800462e:	69a1      	ldr	r1, [r4, #24]
 8004630:	688b      	ldr	r3, [r1, #8]
 8004632:	69a9      	ldr	r1, [r5, #24]
 8004634:	4602      	mov	r2, r0
 8004636:	6830      	ldr	r0, [r6, #0]
 8004638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800463c:	e67c      	b.n	8004338 <nl_func_relu_generic_array_f32>
 800463e:	bd70      	pop	{r4, r5, r6, pc}

08004640 <.text_73>:
 8004640:	00000000 	.word	0x00000000

08004644 <forward_relu_thresholded>:
 8004644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004646:	4602      	mov	r2, r0
 8004648:	f04f 0601 	mov.w	r6, #1
 800464c:	6953      	ldr	r3, [r2, #20]
 800464e:	8819      	ldrh	r1, [r3, #0]
 8004650:	2900      	cmp	r1, #0
 8004652:	bf1a      	itte	ne
 8004654:	6858      	ldrne	r0, [r3, #4]
 8004656:	1d00      	addne	r0, r0, #4
 8004658:	2004      	moveq	r0, #4
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	2800      	cmp	r0, #0
 800465e:	bf14      	ite	ne
 8004660:	6804      	ldrne	r4, [r0, #0]
 8004662:	2400      	moveq	r4, #0
 8004664:	2902      	cmp	r1, #2
 8004666:	bfa6      	itte	ge
 8004668:	6858      	ldrge	r0, [r3, #4]
 800466a:	3010      	addge	r0, #16
 800466c:	2004      	movlt	r0, #4
 800466e:	6800      	ldr	r0, [r0, #0]
 8004670:	2800      	cmp	r0, #0
 8004672:	bf19      	ittee	ne
 8004674:	6800      	ldrne	r0, [r0, #0]
 8004676:	f100 0518 	addne.w	r5, r0, #24
 800467a:	2100      	moveq	r1, #0
 800467c:	f101 0518 	addeq.w	r5, r1, #24
 8004680:	f104 0108 	add.w	r1, r4, #8
 8004684:	680b      	ldr	r3, [r1, #0]
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	d01f      	beq.n	80046ca <forward_relu_thresholded+0x86>
 800468a:	684f      	ldr	r7, [r1, #4]
 800468c:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004690:	4618      	mov	r0, r3
 8004692:	f1a1 0c04 	sub.w	ip, r1, #4
 8004696:	f010 0103 	ands.w	r1, r0, #3
 800469a:	d006      	beq.n	80046aa <forward_relu_thresholded+0x66>
 800469c:	1e5b      	subs	r3, r3, #1
 800469e:	f85c e904 	ldr.w	lr, [ip], #-4
 80046a2:	1e49      	subs	r1, r1, #1
 80046a4:	fb0e f606 	mul.w	r6, lr, r6
 80046a8:	d1f8      	bne.n	800469c <forward_relu_thresholded+0x58>
 80046aa:	0880      	lsrs	r0, r0, #2
 80046ac:	d00d      	beq.n	80046ca <forward_relu_thresholded+0x86>
 80046ae:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80046b2:	3910      	subs	r1, #16
 80046b4:	68cb      	ldr	r3, [r1, #12]
 80046b6:	688f      	ldr	r7, [r1, #8]
 80046b8:	437b      	muls	r3, r7
 80046ba:	684f      	ldr	r7, [r1, #4]
 80046bc:	437b      	muls	r3, r7
 80046be:	f851 7910 	ldr.w	r7, [r1], #-16
 80046c2:	437b      	muls	r3, r7
 80046c4:	435e      	muls	r6, r3
 80046c6:	1e40      	subs	r0, r0, #1
 80046c8:	d1f4      	bne.n	80046b4 <forward_relu_thresholded+0x70>
 80046ca:	6990      	ldr	r0, [r2, #24]
 80046cc:	6881      	ldr	r1, [r0, #8]
 80046ce:	69a0      	ldr	r0, [r4, #24]
 80046d0:	682a      	ldr	r2, [r5, #0]
 80046d2:	6880      	ldr	r0, [r0, #8]
 80046d4:	6893      	ldr	r3, [r2, #8]
 80046d6:	ed91 0a00 	vldr	s0, [r1]
 80046da:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 80046de:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 80046e2:	1f09      	subs	r1, r1, #4
 80046e4:	1f22      	subs	r2, r4, #4
 80046e6:	4281      	cmp	r1, r0
 80046e8:	f0c0 800f 	bcc.w	800470a <forward_relu_thresholded+0xc6>
 80046ec:	edd1 0a00 	vldr	s1, [r1]
 80046f0:	eef4 0a40 	vcmp.f32	s1, s0
 80046f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f8:	bf48      	it	mi
 80046fa:	eddf 0ac2 	vldrmi	s1, [pc, #776]	; 8004a04 <.text_80>
 80046fe:	edc2 0a00 	vstr	s1, [r2]
 8004702:	1f09      	subs	r1, r1, #4
 8004704:	1f12      	subs	r2, r2, #4
 8004706:	4281      	cmp	r1, r0
 8004708:	d2f0      	bcs.n	80046ec <forward_relu_thresholded+0xa8>
 800470a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800470c <forward_elu>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4604      	mov	r4, r0
 8004710:	6962      	ldr	r2, [r4, #20]
 8004712:	8811      	ldrh	r1, [r2, #0]
 8004714:	2900      	cmp	r1, #0
 8004716:	bf1a      	itte	ne
 8004718:	6850      	ldrne	r0, [r2, #4]
 800471a:	1d00      	addne	r0, r0, #4
 800471c:	2004      	moveq	r0, #4
 800471e:	6800      	ldr	r0, [r0, #0]
 8004720:	2800      	cmp	r0, #0
 8004722:	bf14      	ite	ne
 8004724:	6805      	ldrne	r5, [r0, #0]
 8004726:	2500      	moveq	r5, #0
 8004728:	2902      	cmp	r1, #2
 800472a:	bfa6      	itte	ge
 800472c:	6850      	ldrge	r0, [r2, #4]
 800472e:	3010      	addge	r0, #16
 8004730:	2004      	movlt	r0, #4
 8004732:	6800      	ldr	r0, [r0, #0]
 8004734:	2800      	cmp	r0, #0
 8004736:	bf19      	ittee	ne
 8004738:	6800      	ldrne	r0, [r0, #0]
 800473a:	f100 0618 	addne.w	r6, r0, #24
 800473e:	2100      	moveq	r1, #0
 8004740:	f101 0618 	addeq.w	r6, r1, #24
 8004744:	f105 0008 	add.w	r0, r5, #8
 8004748:	f7fd ff4e 	bl	80025e8 <ai_shape_get_size>
 800474c:	4602      	mov	r2, r0
 800474e:	69a0      	ldr	r0, [r4, #24]
 8004750:	6883      	ldr	r3, [r0, #8]
 8004752:	69a9      	ldr	r1, [r5, #24]
 8004754:	6830      	ldr	r0, [r6, #0]
 8004756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800475a:	e665      	b.n	8004428 <nl_func_elu_array_f32>

0800475c <forward_selu>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	4604      	mov	r4, r0
 8004760:	6962      	ldr	r2, [r4, #20]
 8004762:	8811      	ldrh	r1, [r2, #0]
 8004764:	2900      	cmp	r1, #0
 8004766:	bf1a      	itte	ne
 8004768:	6850      	ldrne	r0, [r2, #4]
 800476a:	1d00      	addne	r0, r0, #4
 800476c:	2004      	moveq	r0, #4
 800476e:	6800      	ldr	r0, [r0, #0]
 8004770:	2800      	cmp	r0, #0
 8004772:	bf14      	ite	ne
 8004774:	6805      	ldrne	r5, [r0, #0]
 8004776:	2500      	moveq	r5, #0
 8004778:	2902      	cmp	r1, #2
 800477a:	bfa6      	itte	ge
 800477c:	6850      	ldrge	r0, [r2, #4]
 800477e:	3010      	addge	r0, #16
 8004780:	2004      	movlt	r0, #4
 8004782:	6800      	ldr	r0, [r0, #0]
 8004784:	2800      	cmp	r0, #0
 8004786:	bf19      	ittee	ne
 8004788:	6800      	ldrne	r0, [r0, #0]
 800478a:	f100 0618 	addne.w	r6, r0, #24
 800478e:	2100      	moveq	r1, #0
 8004790:	f101 0618 	addeq.w	r6, r1, #24
 8004794:	f105 0008 	add.w	r0, r5, #8
 8004798:	f7fd ff26 	bl	80025e8 <ai_shape_get_size>
 800479c:	4602      	mov	r2, r0
 800479e:	69a0      	ldr	r0, [r4, #24]
 80047a0:	6883      	ldr	r3, [r0, #8]
 80047a2:	69a9      	ldr	r1, [r5, #24]
 80047a4:	6830      	ldr	r0, [r6, #0]
 80047a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047aa:	e67f      	b.n	80044ac <nl_func_selu_array_f32>

080047ac <forward_prelu>:
 80047ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b0:	b083      	sub	sp, #12
 80047b2:	6942      	ldr	r2, [r0, #20]
 80047b4:	8810      	ldrh	r0, [r2, #0]
 80047b6:	2800      	cmp	r0, #0
 80047b8:	bf1a      	itte	ne
 80047ba:	6851      	ldrne	r1, [r2, #4]
 80047bc:	1d09      	addne	r1, r1, #4
 80047be:	2104      	moveq	r1, #4
 80047c0:	6809      	ldr	r1, [r1, #0]
 80047c2:	2900      	cmp	r1, #0
 80047c4:	bf19      	ittee	ne
 80047c6:	6809      	ldrne	r1, [r1, #0]
 80047c8:	f101 0518 	addne.w	r5, r1, #24
 80047cc:	2300      	moveq	r3, #0
 80047ce:	f103 0518 	addeq.w	r5, r3, #24
 80047d2:	2801      	cmp	r0, #1
 80047d4:	bfc6      	itte	gt
 80047d6:	6851      	ldrgt	r1, [r2, #4]
 80047d8:	3110      	addgt	r1, #16
 80047da:	2104      	movle	r1, #4
 80047dc:	6809      	ldr	r1, [r1, #0]
 80047de:	2900      	cmp	r1, #0
 80047e0:	bf19      	ittee	ne
 80047e2:	6809      	ldrne	r1, [r1, #0]
 80047e4:	f101 0618 	addne.w	r6, r1, #24
 80047e8:	2300      	moveq	r3, #0
 80047ea:	f103 0618 	addeq.w	r6, r3, #24
 80047ee:	2802      	cmp	r0, #2
 80047f0:	bfc6      	itte	gt
 80047f2:	6850      	ldrgt	r0, [r2, #4]
 80047f4:	301c      	addgt	r0, #28
 80047f6:	2004      	movle	r0, #4
 80047f8:	6800      	ldr	r0, [r0, #0]
 80047fa:	2800      	cmp	r0, #0
 80047fc:	bf14      	ite	ne
 80047fe:	6804      	ldrne	r4, [r0, #0]
 8004800:	2400      	moveq	r4, #0
 8004802:	69a0      	ldr	r0, [r4, #24]
 8004804:	6887      	ldr	r7, [r0, #8]
 8004806:	b12c      	cbz	r4, 8004814 <forward_prelu+0x68>
 8004808:	6841      	ldr	r1, [r0, #4]
 800480a:	6800      	ldr	r0, [r0, #0]
 800480c:	f001 fb8a 	bl	8005f24 <ai_array_get_byte_size>
 8004810:	4680      	mov	r8, r0
 8004812:	e001      	b.n	8004818 <forward_prelu+0x6c>
 8004814:	f04f 0801 	mov.w	r8, #1
 8004818:	6828      	ldr	r0, [r5, #0]
 800481a:	6841      	ldr	r1, [r0, #4]
 800481c:	6800      	ldr	r0, [r0, #0]
 800481e:	f001 fb81 	bl	8005f24 <ai_array_get_byte_size>
 8004822:	4601      	mov	r1, r0
 8004824:	6828      	ldr	r0, [r5, #0]
 8004826:	6832      	ldr	r2, [r6, #0]
 8004828:	6880      	ldr	r0, [r0, #8]
 800482a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800482e:	4401      	add	r1, r0
 8004830:	f104 0308 	add.w	r3, r4, #8
 8004834:	4288      	cmp	r0, r1
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	d241      	bcs.n	80048be <forward_prelu+0x112>
 800483a:	9702      	str	r7, [sp, #8]
 800483c:	9101      	str	r1, [sp, #4]
 800483e:	4607      	mov	r7, r0
 8004840:	6829      	ldr	r1, [r5, #0]
 8004842:	608f      	str	r7, [r1, #8]
 8004844:	f04f 0201 	mov.w	r2, #1
 8004848:	6834      	ldr	r4, [r6, #0]
 800484a:	f8c4 9008 	str.w	r9, [r4, #8]
 800484e:	9b00      	ldr	r3, [sp, #0]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	0a00      	lsrs	r0, r0, #8
 8004854:	d02a      	beq.n	80048ac <forward_prelu+0x100>
 8004856:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800485a:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 800485e:	4684      	mov	ip, r0
 8004860:	f1a3 0a04 	sub.w	sl, r3, #4
 8004864:	f01c 0303 	ands.w	r3, ip, #3
 8004868:	d006      	beq.n	8004878 <forward_prelu+0xcc>
 800486a:	1e40      	subs	r0, r0, #1
 800486c:	f85a b904 	ldr.w	fp, [sl], #-4
 8004870:	1e5b      	subs	r3, r3, #1
 8004872:	fb0b f202 	mul.w	r2, fp, r2
 8004876:	d1f8      	bne.n	800486a <forward_prelu+0xbe>
 8004878:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 800487c:	4663      	mov	r3, ip
 800487e:	d015      	beq.n	80048ac <forward_prelu+0x100>
 8004880:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8004884:	f1b0 0010 	subs.w	r0, r0, #16
 8004888:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800488c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8004890:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8004894:	f850 b910 	ldr.w	fp, [r0], #-16
 8004898:	fb0e fc0c 	mul.w	ip, lr, ip
 800489c:	fb0a fc0c 	mul.w	ip, sl, ip
 80048a0:	fb0b fc0c 	mul.w	ip, fp, ip
 80048a4:	1e5b      	subs	r3, r3, #1
 80048a6:	fb0c f202 	mul.w	r2, ip, r2
 80048aa:	d1ed      	bne.n	8004888 <forward_prelu+0xdc>
 80048ac:	9b02      	ldr	r3, [sp, #8]
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7ff fe3e 	bl	8004530 <nl_func_prelu_array_f32>
 80048b4:	9801      	ldr	r0, [sp, #4]
 80048b6:	4447      	add	r7, r8
 80048b8:	4287      	cmp	r7, r0
 80048ba:	44c1      	add	r9, r8
 80048bc:	d3c0      	bcc.n	8004840 <forward_prelu+0x94>
 80048be:	6828      	ldr	r0, [r5, #0]
 80048c0:	68c1      	ldr	r1, [r0, #12]
 80048c2:	6081      	str	r1, [r0, #8]
 80048c4:	6830      	ldr	r0, [r6, #0]
 80048c6:	68c1      	ldr	r1, [r0, #12]
 80048c8:	6081      	str	r1, [r0, #8]
 80048ca:	b003      	add	sp, #12
 80048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080048d0 <forward_clip>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	4604      	mov	r4, r0
 80048d4:	6962      	ldr	r2, [r4, #20]
 80048d6:	8811      	ldrh	r1, [r2, #0]
 80048d8:	2900      	cmp	r1, #0
 80048da:	bf1a      	itte	ne
 80048dc:	6850      	ldrne	r0, [r2, #4]
 80048de:	1d00      	addne	r0, r0, #4
 80048e0:	2004      	moveq	r0, #4
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	2800      	cmp	r0, #0
 80048e6:	bf14      	ite	ne
 80048e8:	6805      	ldrne	r5, [r0, #0]
 80048ea:	2500      	moveq	r5, #0
 80048ec:	2902      	cmp	r1, #2
 80048ee:	bfa6      	itte	ge
 80048f0:	6850      	ldrge	r0, [r2, #4]
 80048f2:	3010      	addge	r0, #16
 80048f4:	2004      	movlt	r0, #4
 80048f6:	6800      	ldr	r0, [r0, #0]
 80048f8:	2800      	cmp	r0, #0
 80048fa:	bf19      	ittee	ne
 80048fc:	6800      	ldrne	r0, [r0, #0]
 80048fe:	f100 0618 	addne.w	r6, r0, #24
 8004902:	2100      	moveq	r1, #0
 8004904:	f101 0618 	addeq.w	r6, r1, #24
 8004908:	f105 0008 	add.w	r0, r5, #8
 800490c:	f7fd fe6c 	bl	80025e8 <ai_shape_get_size>
 8004910:	4602      	mov	r2, r0
 8004912:	69a0      	ldr	r0, [r4, #24]
 8004914:	6883      	ldr	r3, [r0, #8]
 8004916:	69a9      	ldr	r1, [r5, #24]
 8004918:	6830      	ldr	r0, [r6, #0]
 800491a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800491e:	e473      	b.n	8004208 <nl_func_clip_array_f32>

08004920 <forward_hard_sigmoid>:
 8004920:	b4f0      	push	{r4, r5, r6, r7}
 8004922:	6942      	ldr	r2, [r0, #20]
 8004924:	8811      	ldrh	r1, [r2, #0]
 8004926:	2900      	cmp	r1, #0
 8004928:	bf1a      	itte	ne
 800492a:	6850      	ldrne	r0, [r2, #4]
 800492c:	1d00      	addne	r0, r0, #4
 800492e:	2004      	moveq	r0, #4
 8004930:	f04f 0501 	mov.w	r5, #1
 8004934:	6800      	ldr	r0, [r0, #0]
 8004936:	2800      	cmp	r0, #0
 8004938:	bf14      	ite	ne
 800493a:	6803      	ldrne	r3, [r0, #0]
 800493c:	2300      	moveq	r3, #0
 800493e:	2902      	cmp	r1, #2
 8004940:	bfa6      	itte	ge
 8004942:	6850      	ldrge	r0, [r2, #4]
 8004944:	3010      	addge	r0, #16
 8004946:	2004      	movlt	r0, #4
 8004948:	6800      	ldr	r0, [r0, #0]
 800494a:	2800      	cmp	r0, #0
 800494c:	bf19      	ittee	ne
 800494e:	6800      	ldrne	r0, [r0, #0]
 8004950:	f100 0418 	addne.w	r4, r0, #24
 8004954:	2100      	moveq	r1, #0
 8004956:	f101 0418 	addeq.w	r4, r1, #24
 800495a:	f103 0108 	add.w	r1, r3, #8
 800495e:	680a      	ldr	r2, [r1, #0]
 8004960:	0a12      	lsrs	r2, r2, #8
 8004962:	d01e      	beq.n	80049a2 <forward_hard_sigmoid+0x82>
 8004964:	684e      	ldr	r6, [r1, #4]
 8004966:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800496a:	4610      	mov	r0, r2
 800496c:	1f0f      	subs	r7, r1, #4
 800496e:	f010 0103 	ands.w	r1, r0, #3
 8004972:	d006      	beq.n	8004982 <forward_hard_sigmoid+0x62>
 8004974:	1e52      	subs	r2, r2, #1
 8004976:	f857 c904 	ldr.w	ip, [r7], #-4
 800497a:	1e49      	subs	r1, r1, #1
 800497c:	fb0c f505 	mul.w	r5, ip, r5
 8004980:	d1f8      	bne.n	8004974 <forward_hard_sigmoid+0x54>
 8004982:	0880      	lsrs	r0, r0, #2
 8004984:	d00d      	beq.n	80049a2 <forward_hard_sigmoid+0x82>
 8004986:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800498a:	3910      	subs	r1, #16
 800498c:	68ca      	ldr	r2, [r1, #12]
 800498e:	688e      	ldr	r6, [r1, #8]
 8004990:	684f      	ldr	r7, [r1, #4]
 8004992:	4372      	muls	r2, r6
 8004994:	f851 6910 	ldr.w	r6, [r1], #-16
 8004998:	437a      	muls	r2, r7
 800499a:	4372      	muls	r2, r6
 800499c:	4355      	muls	r5, r2
 800499e:	1e40      	subs	r0, r0, #1
 80049a0:	d1f4      	bne.n	800498c <forward_hard_sigmoid+0x6c>
 80049a2:	6998      	ldr	r0, [r3, #24]
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	6880      	ldr	r0, [r0, #8]
 80049a8:	6893      	ldr	r3, [r2, #8]
 80049aa:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80049ae:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80049b2:	1f09      	subs	r1, r1, #4
 80049b4:	1f22      	subs	r2, r4, #4
 80049b6:	4281      	cmp	r1, r0
 80049b8:	f0c0 8022 	bcc.w	8004a00 <forward_hard_sigmoid+0xe0>
 80049bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049c0:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004a08 <.text_81>
 80049c4:	edd1 1a00 	vldr	s3, [r1]
 80049c8:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8004a0c <.text_82>
 80049cc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80049d0:	ee01 1a82 	vmla.f32	s2, s3, s4
 80049d4:	eeb4 1a60 	vcmp.f32	s2, s1
 80049d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049dc:	da08      	bge.n	80049f0 <forward_hard_sigmoid+0xd0>
 80049de:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	d505      	bpl.n	80049f4 <forward_hard_sigmoid+0xd4>
 80049e8:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004a04 <.text_80>
 80049ec:	e002      	b.n	80049f4 <forward_hard_sigmoid+0xd4>
 80049ee:	bf00      	nop
 80049f0:	eeb0 1a40 	vmov.f32	s2, s0
 80049f4:	ed82 1a00 	vstr	s2, [r2]
 80049f8:	1f09      	subs	r1, r1, #4
 80049fa:	1f12      	subs	r2, r2, #4
 80049fc:	4281      	cmp	r1, r0
 80049fe:	d2e1      	bcs.n	80049c4 <forward_hard_sigmoid+0xa4>
 8004a00:	bcf0      	pop	{r4, r5, r6, r7}
 8004a02:	4770      	bx	lr

08004a04 <.text_80>:
 8004a04:	00000000 	.word	0x00000000

08004a08 <.text_81>:
 8004a08:	3f800001 	.word	0x3f800001

08004a0c <.text_82>:
 8004a0c:	3e4ccccd 	.word	0x3e4ccccd

08004a10 <forward_sm>:
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	b083      	sub	sp, #12
 8004a14:	6942      	ldr	r2, [r0, #20]
 8004a16:	8811      	ldrh	r1, [r2, #0]
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	bf1a      	itte	ne
 8004a1c:	6850      	ldrne	r0, [r2, #4]
 8004a1e:	1d00      	addne	r0, r0, #4
 8004a20:	2004      	moveq	r0, #4
 8004a22:	6800      	ldr	r0, [r0, #0]
 8004a24:	2800      	cmp	r0, #0
 8004a26:	bf14      	ite	ne
 8004a28:	6804      	ldrne	r4, [r0, #0]
 8004a2a:	2400      	moveq	r4, #0
 8004a2c:	2902      	cmp	r1, #2
 8004a2e:	bfa6      	itte	ge
 8004a30:	6850      	ldrge	r0, [r2, #4]
 8004a32:	3010      	addge	r0, #16
 8004a34:	2004      	movlt	r0, #4
 8004a36:	6800      	ldr	r0, [r0, #0]
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	bf14      	ite	ne
 8004a3c:	6805      	ldrne	r5, [r0, #0]
 8004a3e:	2500      	moveq	r5, #0
 8004a40:	68e0      	ldr	r0, [r4, #12]
 8004a42:	68e9      	ldr	r1, [r5, #12]
 8004a44:	6846      	ldr	r6, [r0, #4]
 8004a46:	684f      	ldr	r7, [r1, #4]
 8004a48:	f104 0008 	add.w	r0, r4, #8
 8004a4c:	f7fd fdcc 	bl	80025e8 <ai_shape_get_size>
 8004a50:	4602      	mov	r2, r0
 8004a52:	9701      	str	r7, [sp, #4]
 8004a54:	9600      	str	r6, [sp, #0]
 8004a56:	69a1      	ldr	r1, [r4, #24]
 8004a58:	69a8      	ldr	r0, [r5, #24]
 8004a5a:	4633      	mov	r3, r6
 8004a5c:	f7ff fb76 	bl	800414c <nl_func_sm_array_f32>
 8004a60:	b003      	add	sp, #12
 8004a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a64 <forward_hardmax>:
 8004a64:	b430      	push	{r4, r5}
 8004a66:	6943      	ldr	r3, [r0, #20]
 8004a68:	881a      	ldrh	r2, [r3, #0]
 8004a6a:	6980      	ldr	r0, [r0, #24]
 8004a6c:	2a00      	cmp	r2, #0
 8004a6e:	bf1a      	itte	ne
 8004a70:	6859      	ldrne	r1, [r3, #4]
 8004a72:	1d09      	addne	r1, r1, #4
 8004a74:	2104      	moveq	r1, #4
 8004a76:	6809      	ldr	r1, [r1, #0]
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	bf14      	ite	ne
 8004a7c:	680c      	ldrne	r4, [r1, #0]
 8004a7e:	2400      	moveq	r4, #0
 8004a80:	2a02      	cmp	r2, #2
 8004a82:	bfa6      	itte	ge
 8004a84:	6859      	ldrge	r1, [r3, #4]
 8004a86:	3110      	addge	r1, #16
 8004a88:	2104      	movlt	r1, #4
 8004a8a:	6809      	ldr	r1, [r1, #0]
 8004a8c:	6883      	ldr	r3, [r0, #8]
 8004a8e:	2900      	cmp	r1, #0
 8004a90:	bf19      	ittee	ne
 8004a92:	6809      	ldrne	r1, [r1, #0]
 8004a94:	f101 0518 	addne.w	r5, r1, #24
 8004a98:	2200      	moveq	r2, #0
 8004a9a:	f102 0518 	addeq.w	r5, r2, #24
 8004a9e:	69a1      	ldr	r1, [r4, #24]
 8004aa0:	6828      	ldr	r0, [r5, #0]
 8004aa2:	f104 0208 	add.w	r2, r4, #8
 8004aa6:	bc30      	pop	{r4, r5}
 8004aa8:	f7ff bbd4 	b.w	8004254 <nl_func_hardmax_array_f32>

08004aac <pool_func_mp_array_f32>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	4688      	mov	r8, r1
 8004ab2:	b08b      	sub	sp, #44	; 0x2c
 8004ab4:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8004ab8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004aba:	f9bd e064 	ldrsh.w	lr, [sp, #100]	; 0x64
 8004abe:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004ac0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004ac2:	1e48      	subs	r0, r1, #1
 8004ac4:	fb10 fe0e 	smulbb	lr, r0, lr
 8004ac8:	4615      	mov	r5, r2
 8004aca:	ebae 0e07 	sub.w	lr, lr, r7
 8004ace:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004ad0:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8004ad4:	6892      	ldr	r2, [r2, #8]
 8004ad6:	44a6      	add	lr, r4
 8004ad8:	f1ae 0601 	sub.w	r6, lr, #1
 8004adc:	469c      	mov	ip, r3
 8004ade:	1b76      	subs	r6, r6, r5
 8004ae0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004ae2:	4338      	orrs	r0, r7
 8004ae4:	f040 80dd 	bne.w	8004ca2 <pool_func_mp_array_f32+0x1f6>
 8004ae8:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8004aec:	f1a0 0901 	sub.w	r9, r0, #1
 8004af0:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
 8004af4:	fb19 f903 	smulbb	r9, r9, r3
 8004af8:	eba9 0900 	sub.w	r9, r9, r0
 8004afc:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 8004b00:	4448      	add	r0, r9
 8004b02:	1e40      	subs	r0, r0, #1
 8004b04:	eba0 0008 	sub.w	r0, r0, r8
 8004b08:	b200      	sxth	r0, r0
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	bf44      	itt	mi
 8004b0e:	b236      	sxthmi	r6, r6
 8004b10:	2e00      	cmpmi	r6, #0
 8004b12:	f140 80c6 	bpl.w	8004ca2 <pool_func_mp_array_f32+0x1f6>
 8004b16:	2000      	movs	r0, #0
 8004b18:	000d      	movs	r5, r1
 8004b1a:	9008      	str	r0, [sp, #32]
 8004b1c:	f000 8178 	beq.w	8004e10 <pool_func_mp_array_f32+0x364>
 8004b20:	b224      	sxth	r4, r4
 8004b22:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004b26:	9002      	str	r0, [sp, #8]
 8004b28:	9007      	str	r0, [sp, #28]
 8004b2a:	9106      	str	r1, [sp, #24]
 8004b2c:	ea4f 040c 	mov.w	r4, ip
 8004b30:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8004e18 <.text_3>
 8004b34:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004b38:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	f000 8096 	beq.w	8004c6e <pool_func_mp_array_f32+0x1c2>
 8004b42:	9907      	ldr	r1, [sp, #28]
 8004b44:	9808      	ldr	r0, [sp, #32]
 8004b46:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
 8004b4a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004b4e:	9103      	str	r1, [sp, #12]
 8004b50:	f04f 0a00 	mov.w	sl, #0
 8004b54:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8004b58:	f8ad c002 	strh.w	ip, [sp, #2]
 8004b5c:	4348      	muls	r0, r1
 8004b5e:	b200      	sxth	r0, r0
 8004b60:	900a      	str	r0, [sp, #40]	; 0x28
 8004b62:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004b66:	9204      	str	r2, [sp, #16]
 8004b68:	f8ad 6000 	strh.w	r6, [sp]
 8004b6c:	f8cd 5014 	str.w	r5, [sp, #20]
 8004b70:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004b74:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004b78:	f9bd e000 	ldrsh.w	lr, [sp]
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d05d      	beq.n	8004c3e <pool_func_mp_array_f32+0x192>
 8004b82:	9a03      	ldr	r2, [sp, #12]
 8004b84:	9804      	ldr	r0, [sp, #16]
 8004b86:	4362      	muls	r2, r4
 8004b88:	ab02      	add	r3, sp, #8
 8004b8a:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8004b8e:	5e58      	ldrsh	r0, [r3, r1]
 8004b90:	9009      	str	r0, [sp, #36]	; 0x24
 8004b92:	fa0f f58a 	sxth.w	r5, sl
 8004b96:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b9c:	42b8      	cmp	r0, r7
 8004b9e:	eef0 0a40 	vmov.f32	s1, s0
 8004ba2:	da45      	bge.n	8004c30 <pool_func_mp_array_f32+0x184>
 8004ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ba6:	fb08 f900 	mul.w	r9, r8, r0
 8004baa:	1aba      	subs	r2, r7, r2
 8004bac:	4658      	mov	r0, fp
 8004bae:	4575      	cmp	r5, lr
 8004bb0:	462e      	mov	r6, r5
 8004bb2:	da39      	bge.n	8004c28 <pool_func_mp_array_f32+0x17c>
 8004bb4:	ebae 0305 	sub.w	r3, lr, r5
 8004bb8:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8004bbc:	d50f      	bpl.n	8004bde <pool_func_mp_array_f32+0x132>
 8004bbe:	eb09 0b06 	add.w	fp, r9, r6
 8004bc2:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004bc6:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004bca:	ed9b 1a00 	vldr	s2, [fp]
 8004bce:	eeb4 1a60 	vcmp.f32	s2, s1
 8004bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd6:	bf58      	it	pl
 8004bd8:	eef0 0a41 	vmovpl.f32	s1, s2
 8004bdc:	1c76      	adds	r6, r6, #1
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	f000 8022 	beq.w	8004c28 <pool_func_mp_array_f32+0x17c>
 8004be4:	eb09 0b06 	add.w	fp, r9, r6
 8004be8:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004bec:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004bf0:	ed9b 1a00 	vldr	s2, [fp]
 8004bf4:	eeb4 1a60 	vcmp.f32	s2, s1
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	bf58      	it	pl
 8004bfe:	eef0 0a41 	vmovpl.f32	s1, s2
 8004c02:	1c76      	adds	r6, r6, #1
 8004c04:	eb09 0b06 	add.w	fp, r9, r6
 8004c08:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004c0c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004c10:	ed9b 1a00 	vldr	s2, [fp]
 8004c14:	eeb4 1a60 	vcmp.f32	s2, s1
 8004c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1c:	bf58      	it	pl
 8004c1e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004c22:	1c76      	adds	r6, r6, #1
 8004c24:	1e5b      	subs	r3, r3, #1
 8004c26:	d1dd      	bne.n	8004be4 <pool_func_mp_array_f32+0x138>
 8004c28:	1e52      	subs	r2, r2, #1
 8004c2a:	44c1      	add	r9, r8
 8004c2c:	d1bf      	bne.n	8004bae <pool_func_mp_array_f32+0x102>
 8004c2e:	4683      	mov	fp, r0
 8004c30:	1c49      	adds	r1, r1, #1
 8004c32:	edcc 0a00 	vstr	s1, [ip]
 8004c36:	42a1      	cmp	r1, r4
 8004c38:	f10c 0c04 	add.w	ip, ip, #4
 8004c3c:	dbad      	blt.n	8004b9a <pool_func_mp_array_f32+0xee>
 8004c3e:	9803      	ldr	r0, [sp, #12]
 8004c40:	f8bd 1000 	ldrh.w	r1, [sp]
 8004c44:	1c40      	adds	r0, r0, #1
 8004c46:	9003      	str	r0, [sp, #12]
 8004c48:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8004c4c:	4482      	add	sl, r0
 8004c4e:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 8004c52:	1841      	adds	r1, r0, r1
 8004c54:	f8ad 1000 	strh.w	r1, [sp]
 8004c58:	9905      	ldr	r1, [sp, #20]
 8004c5a:	1e49      	subs	r1, r1, #1
 8004c5c:	9105      	str	r1, [sp, #20]
 8004c5e:	d189      	bne.n	8004b74 <pool_func_mp_array_f32+0xc8>
 8004c60:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004c64:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004c68:	9a04      	ldr	r2, [sp, #16]
 8004c6a:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004c6e:	9908      	ldr	r1, [sp, #32]
 8004c70:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004c74:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8004c78:	1c49      	adds	r1, r1, #1
 8004c7a:	9108      	str	r1, [sp, #32]
 8004c7c:	9907      	ldr	r1, [sp, #28]
 8004c7e:	194d      	adds	r5, r1, r5
 8004c80:	9507      	str	r5, [sp, #28]
 8004c82:	9902      	ldr	r1, [sp, #8]
 8004c84:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8004c88:	194d      	adds	r5, r1, r5
 8004c8a:	9502      	str	r5, [sp, #8]
 8004c8c:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004c90:	9d06      	ldr	r5, [sp, #24]
 8004c92:	19cf      	adds	r7, r1, r7
 8004c94:	1e6d      	subs	r5, r5, #1
 8004c96:	f8ad 7006 	strh.w	r7, [sp, #6]
 8004c9a:	9506      	str	r5, [sp, #24]
 8004c9c:	f000 80b8 	beq.w	8004e10 <pool_func_mp_array_f32+0x364>
 8004ca0:	e748      	b.n	8004b34 <pool_func_mp_array_f32+0x88>
 8004ca2:	0008      	movs	r0, r1
 8004ca4:	f000 80b4 	beq.w	8004e10 <pool_func_mp_array_f32+0x364>
 8004ca8:	427f      	negs	r7, r7
 8004caa:	19e4      	adds	r4, r4, r7
 8004cac:	f8ad 7000 	strh.w	r7, [sp]
 8004cb0:	f8ad 400a 	strh.w	r4, [sp, #10]
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	9008      	str	r0, [sp, #32]
 8004cb8:	f8cd 101c 	str.w	r1, [sp, #28]
 8004cbc:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8004e18 <.text_3>
 8004cc0:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004cc4:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	f000 8089 	beq.w	8004de0 <pool_func_mp_array_f32+0x334>
 8004cce:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8004cd2:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8004cd6:	9908      	ldr	r1, [sp, #32]
 8004cd8:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004cdc:	9103      	str	r1, [sp, #12]
 8004cde:	f1ce 0e00 	rsb	lr, lr, #0
 8004ce2:	4477      	add	r7, lr
 8004ce4:	f8ad c002 	strh.w	ip, [sp, #2]
 8004ce8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004cec:	9204      	str	r2, [sp, #16]
 8004cee:	f8ad e006 	strh.w	lr, [sp, #6]
 8004cf2:	f8ad 7008 	strh.w	r7, [sp, #8]
 8004cf6:	9406      	str	r4, [sp, #24]
 8004cf8:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004cfc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004d00:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8004d04:	2600      	movs	r6, #0
 8004d06:	2900      	cmp	r1, #0
 8004d08:	d04e      	beq.n	8004da8 <pool_func_mp_array_f32+0x2fc>
 8004d0a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004d0e:	9b03      	ldr	r3, [sp, #12]
 8004d10:	9904      	ldr	r1, [sp, #16]
 8004d12:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 8004d16:	435a      	muls	r2, r3
 8004d18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004d1c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004d20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004d24:	f8cd 1014 	str.w	r1, [sp, #20]
 8004d28:	f9bd 1000 	ldrsh.w	r1, [sp]
 8004d2c:	4551      	cmp	r1, sl
 8004d2e:	eef0 0a40 	vmov.f32	s1, s0
 8004d32:	da2a      	bge.n	8004d8a <pool_func_mp_array_f32+0x2de>
 8004d34:	fb03 f901 	mul.w	r9, r3, r1
 8004d38:	f8ad 5002 	strh.w	r5, [sp, #2]
 8004d3c:	4284      	cmp	r4, r0
 8004d3e:	4625      	mov	r5, r4
 8004d40:	da1d      	bge.n	8004d7e <pool_func_mp_array_f32+0x2d2>
 8004d42:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8004d46:	46de      	mov	lr, fp
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	bf58      	it	pl
 8004d4c:	2d00      	cmppl	r5, #0
 8004d4e:	d412      	bmi.n	8004d76 <pool_func_mp_array_f32+0x2ca>
 8004d50:	42b9      	cmp	r1, r7
 8004d52:	bfb8      	it	lt
 8004d54:	429d      	cmplt	r5, r3
 8004d56:	da0e      	bge.n	8004d76 <pool_func_mp_array_f32+0x2ca>
 8004d58:	eb09 0b05 	add.w	fp, r9, r5
 8004d5c:	fb0b 6b02 	mla	fp, fp, r2, r6
 8004d60:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8004d64:	ed9b 1a00 	vldr	s2, [fp]
 8004d68:	eeb4 1a60 	vcmp.f32	s2, s1
 8004d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d70:	bf58      	it	pl
 8004d72:	eef0 0a41 	vmovpl.f32	s1, s2
 8004d76:	1c6d      	adds	r5, r5, #1
 8004d78:	4285      	cmp	r5, r0
 8004d7a:	dbe5      	blt.n	8004d48 <pool_func_mp_array_f32+0x29c>
 8004d7c:	46f3      	mov	fp, lr
 8004d7e:	1c49      	adds	r1, r1, #1
 8004d80:	4551      	cmp	r1, sl
 8004d82:	4499      	add	r9, r3
 8004d84:	dbda      	blt.n	8004d3c <pool_func_mp_array_f32+0x290>
 8004d86:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004d8a:	1c76      	adds	r6, r6, #1
 8004d8c:	9905      	ldr	r1, [sp, #20]
 8004d8e:	edc1 0a00 	vstr	s1, [r1]
 8004d92:	9905      	ldr	r1, [sp, #20]
 8004d94:	1d0f      	adds	r7, r1, #4
 8004d96:	4296      	cmp	r6, r2
 8004d98:	9705      	str	r7, [sp, #20]
 8004d9a:	dbc5      	blt.n	8004d28 <pool_func_mp_array_f32+0x27c>
 8004d9c:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004da0:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004da4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004da8:	9803      	ldr	r0, [sp, #12]
 8004daa:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004dae:	1c40      	adds	r0, r0, #1
 8004db0:	9003      	str	r0, [sp, #12]
 8004db2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004db6:	1808      	adds	r0, r1, r0
 8004db8:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004dbc:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004dc0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004dc4:	1808      	adds	r0, r1, r0
 8004dc6:	f8ad 0006 	strh.w	r0, [sp, #6]
 8004dca:	9806      	ldr	r0, [sp, #24]
 8004dcc:	1e40      	subs	r0, r0, #1
 8004dce:	9006      	str	r0, [sp, #24]
 8004dd0:	d194      	bne.n	8004cfc <pool_func_mp_array_f32+0x250>
 8004dd2:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004dd6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004dda:	9a04      	ldr	r2, [sp, #16]
 8004ddc:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004de0:	9908      	ldr	r1, [sp, #32]
 8004de2:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004de6:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8004dea:	190c      	adds	r4, r1, r4
 8004dec:	9408      	str	r4, [sp, #32]
 8004dee:	f8bd 4000 	ldrh.w	r4, [sp]
 8004df2:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004df6:	19cf      	adds	r7, r1, r7
 8004df8:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004dfc:	f8ad 700a 	strh.w	r7, [sp, #10]
 8004e00:	190c      	adds	r4, r1, r4
 8004e02:	f8ad 4000 	strh.w	r4, [sp]
 8004e06:	9c07      	ldr	r4, [sp, #28]
 8004e08:	1e64      	subs	r4, r4, #1
 8004e0a:	9407      	str	r4, [sp, #28]
 8004e0c:	f47f af58 	bne.w	8004cc0 <pool_func_mp_array_f32+0x214>
 8004e10:	b00b      	add	sp, #44	; 0x2c
 8004e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004e18 <.text_3>:
 8004e18:	cf000000 	.word	0xcf000000

08004e1c <pool_func_ap_array_f32>:
 8004e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	468b      	mov	fp, r1
 8004e22:	b08c      	sub	sp, #48	; 0x30
 8004e24:	4699      	mov	r9, r3
 8004e26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e28:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8004e2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004e2e:	4692      	mov	sl, r2
 8004e30:	1e4f      	subs	r7, r1, #1
 8004e32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004e34:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004e36:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8004e3a:	6880      	ldr	r0, [r0, #8]
 8004e3c:	68ad      	ldr	r5, [r5, #8]
 8004e3e:	fb17 fc0c 	smulbb	ip, r7, ip
 8004e42:	ebac 0c03 	sub.w	ip, ip, r3
 8004e46:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
 8004e4a:	4494      	add	ip, r2
 8004e4c:	f1ac 0401 	sub.w	r4, ip, #1
 8004e50:	431f      	orrs	r7, r3
 8004e52:	eba4 060a 	sub.w	r6, r4, sl
 8004e56:	f040 80dc 	bne.w	8005012 <pool_func_ap_array_f32+0x1f6>
 8004e5a:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8004e5e:	1e7c      	subs	r4, r7, #1
 8004e60:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 8004e64:	fb14 f408 	smulbb	r4, r4, r8
 8004e68:	1be4      	subs	r4, r4, r7
 8004e6a:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8004e6e:	193c      	adds	r4, r7, r4
 8004e70:	1e64      	subs	r4, r4, #1
 8004e72:	eba4 040b 	sub.w	r4, r4, fp
 8004e76:	b224      	sxth	r4, r4
 8004e78:	2c00      	cmp	r4, #0
 8004e7a:	bf44      	itt	mi
 8004e7c:	b234      	sxthmi	r4, r6
 8004e7e:	2c00      	cmpmi	r4, #0
 8004e80:	f140 80c7 	bpl.w	8005012 <pool_func_ap_array_f32+0x1f6>
 8004e84:	2400      	movs	r4, #0
 8004e86:	000b      	movs	r3, r1
 8004e88:	9409      	str	r4, [sp, #36]	; 0x24
 8004e8a:	f000 81af 	beq.w	80051ec <pool_func_ap_array_f32+0x3d0>
 8004e8e:	b212      	sxth	r2, r2
 8004e90:	f8ad 2004 	strh.w	r2, [sp, #4]
 8004e94:	9408      	str	r4, [sp, #32]
 8004e96:	9407      	str	r4, [sp, #28]
 8004e98:	f8cd 1018 	str.w	r1, [sp, #24]
 8004e9c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004ea0:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	f000 809a 	beq.w	8004fde <pool_func_ap_array_f32+0x1c2>
 8004eaa:	9907      	ldr	r1, [sp, #28]
 8004eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eae:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004eb2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8004eb6:	9102      	str	r1, [sp, #8]
 8004eb8:	2700      	movs	r7, #0
 8004eba:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8004ebe:	434a      	muls	r2, r1
 8004ec0:	b212      	sxth	r2, r2
 8004ec2:	ae08      	add	r6, sp, #32
 8004ec4:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ec6:	46ca      	mov	sl, r9
 8004ec8:	5ff1      	ldrsh	r1, [r6, r7]
 8004eca:	910a      	str	r1, [sp, #40]	; 0x28
 8004ecc:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004ed0:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004ed4:	9505      	str	r5, [sp, #20]
 8004ed6:	f8ad 4000 	strh.w	r4, [sp]
 8004eda:	9303      	str	r3, [sp, #12]
 8004edc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004ee0:	f9bd c000 	ldrsh.w	ip, [sp]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2900      	cmp	r1, #0
 8004ee8:	d063      	beq.n	8004fb2 <pool_func_ap_array_f32+0x196>
 8004eea:	9d02      	ldr	r5, [sp, #8]
 8004eec:	9905      	ldr	r1, [sp, #20]
 8004eee:	f8cd e010 	str.w	lr, [sp, #16]
 8004ef2:	fb05 f50a 	mul.w	r5, r5, sl
 8004ef6:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8004efa:	f8ad b006 	strh.w	fp, [sp, #6]
 8004efe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f00:	9b04      	ldr	r3, [sp, #16]
 8004f02:	4299      	cmp	r1, r3
 8004f04:	ed9f 0abb 	vldr	s0, [pc, #748]	; 80051f4 <.text_5>
 8004f08:	eddf 0aba 	vldr	s1, [pc, #744]	; 80051f4 <.text_5>
 8004f0c:	da43      	bge.n	8004f96 <pool_func_ap_array_f32+0x17a>
 8004f0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004f10:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004f14:	eba3 0804 	sub.w	r8, r3, r4
 8004f18:	fb01 f10b 	mul.w	r1, r1, fp
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	ee10 ea90 	vmov	lr, s1
 8004f22:	b23c      	sxth	r4, r7
 8004f24:	4564      	cmp	r4, ip
 8004f26:	46b9      	mov	r9, r7
 8004f28:	da2e      	bge.n	8004f88 <pool_func_ap_array_f32+0x16c>
 8004f2a:	ebac 0004 	sub.w	r0, ip, r4
 8004f2e:	44e6      	add	lr, ip
 8004f30:	07c6      	lsls	r6, r0, #31
 8004f32:	ebae 0e04 	sub.w	lr, lr, r4
 8004f36:	d50a      	bpl.n	8004f4e <pool_func_ap_array_f32+0x132>
 8004f38:	190c      	adds	r4, r1, r4
 8004f3a:	fb04 240a 	mla	r4, r4, sl, r2
 8004f3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004f42:	f109 0901 	add.w	r9, r9, #1
 8004f46:	edd4 0a00 	vldr	s1, [r4]
 8004f4a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004f4e:	0840      	lsrs	r0, r0, #1
 8004f50:	f000 801a 	beq.w	8004f88 <pool_func_ap_array_f32+0x16c>
 8004f54:	fa01 f489 	sxtah	r4, r1, r9
 8004f58:	f109 0901 	add.w	r9, r9, #1
 8004f5c:	fb04 240a 	mla	r4, r4, sl, r2
 8004f60:	fa01 f689 	sxtah	r6, r1, r9
 8004f64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004f68:	fb06 260a 	mla	r6, r6, sl, r2
 8004f6c:	edd4 0a00 	vldr	s1, [r4]
 8004f70:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004f74:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004f78:	ed94 1a00 	vldr	s2, [r4]
 8004f7c:	1e40      	subs	r0, r0, #1
 8004f7e:	ee30 0a01 	vadd.f32	s0, s0, s2
 8004f82:	f109 0901 	add.w	r9, r9, #1
 8004f86:	d1e5      	bne.n	8004f54 <pool_func_ap_array_f32+0x138>
 8004f88:	f1b8 0801 	subs.w	r8, r8, #1
 8004f8c:	4459      	add	r1, fp
 8004f8e:	d1c8      	bne.n	8004f22 <pool_func_ap_array_f32+0x106>
 8004f90:	4618      	mov	r0, r3
 8004f92:	ee00 ea90 	vmov	s1, lr
 8004f96:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004f9a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004f9e:	ed85 0a00 	vstr	s0, [r5]
 8004fa2:	1c52      	adds	r2, r2, #1
 8004fa4:	1d2d      	adds	r5, r5, #4
 8004fa6:	4552      	cmp	r2, sl
 8004fa8:	dba9      	blt.n	8004efe <pool_func_ap_array_f32+0xe2>
 8004faa:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004fae:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004fb2:	9902      	ldr	r1, [sp, #8]
 8004fb4:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8004fb8:	1c49      	adds	r1, r1, #1
 8004fba:	9102      	str	r1, [sp, #8]
 8004fbc:	f8bd 1000 	ldrh.w	r1, [sp]
 8004fc0:	1851      	adds	r1, r2, r1
 8004fc2:	f8ad 1000 	strh.w	r1, [sp]
 8004fc6:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004fca:	9a03      	ldr	r2, [sp, #12]
 8004fcc:	19cf      	adds	r7, r1, r7
 8004fce:	1e52      	subs	r2, r2, #1
 8004fd0:	9203      	str	r2, [sp, #12]
 8004fd2:	d183      	bne.n	8004edc <pool_func_ap_array_f32+0xc0>
 8004fd4:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8004fd8:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8004fdc:	9d05      	ldr	r5, [sp, #20]
 8004fde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fe0:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8004fe4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004fe8:	1c49      	adds	r1, r1, #1
 8004fea:	9109      	str	r1, [sp, #36]	; 0x24
 8004fec:	9907      	ldr	r1, [sp, #28]
 8004fee:	188a      	adds	r2, r1, r2
 8004ff0:	9207      	str	r2, [sp, #28]
 8004ff2:	9908      	ldr	r1, [sp, #32]
 8004ff4:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8004ff8:	188a      	adds	r2, r1, r2
 8004ffa:	9208      	str	r2, [sp, #32]
 8004ffc:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005000:	9a06      	ldr	r2, [sp, #24]
 8005002:	18cb      	adds	r3, r1, r3
 8005004:	1e52      	subs	r2, r2, #1
 8005006:	f8ad 3004 	strh.w	r3, [sp, #4]
 800500a:	9206      	str	r2, [sp, #24]
 800500c:	f000 80ee 	beq.w	80051ec <pool_func_ap_array_f32+0x3d0>
 8005010:	e744      	b.n	8004e9c <pool_func_ap_array_f32+0x80>
 8005012:	000f      	movs	r7, r1
 8005014:	f000 80ea 	beq.w	80051ec <pool_func_ap_array_f32+0x3d0>
 8005018:	425b      	negs	r3, r3
 800501a:	18d2      	adds	r2, r2, r3
 800501c:	2700      	movs	r7, #0
 800501e:	f8ad 3000 	strh.w	r3, [sp]
 8005022:	f8ad 200a 	strh.w	r2, [sp, #10]
 8005026:	9709      	str	r7, [sp, #36]	; 0x24
 8005028:	f8cd 1020 	str.w	r1, [sp, #32]
 800502c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8005030:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8005034:	2900      	cmp	r1, #0
 8005036:	f000 80c1 	beq.w	80051bc <pool_func_ap_array_f32+0x3a0>
 800503a:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 800503e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8005042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005044:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8005048:	9204      	str	r2, [sp, #16]
 800504a:	4276      	negs	r6, r6
 800504c:	19a4      	adds	r4, r4, r6
 800504e:	f8ad 9002 	strh.w	r9, [sp, #2]
 8005052:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8005056:	9505      	str	r5, [sp, #20]
 8005058:	f8ad 6004 	strh.w	r6, [sp, #4]
 800505c:	f8ad 4008 	strh.w	r4, [sp, #8]
 8005060:	f8cd 101c 	str.w	r1, [sp, #28]
 8005064:	f8ad b006 	strh.w	fp, [sp, #6]
 8005068:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800506c:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8005070:	2100      	movs	r1, #0
 8005072:	2a00      	cmp	r2, #0
 8005074:	f000 8085 	beq.w	8005182 <pool_func_ap_array_f32+0x366>
 8005078:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 800507c:	9c04      	ldr	r4, [sp, #16]
 800507e:	9a05      	ldr	r2, [sp, #20]
 8005080:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8005084:	f8ad a00c 	strh.w	sl, [sp, #12]
 8005088:	4365      	muls	r5, r4
 800508a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800508e:	9506      	str	r5, [sp, #24]
 8005090:	f9bd 5000 	ldrsh.w	r5, [sp]
 8005094:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8005098:	429d      	cmp	r5, r3
 800509a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80051f4 <.text_5>
 800509e:	eddf 0a55 	vldr	s1, [pc, #340]	; 80051f4 <.text_5>
 80050a2:	da5d      	bge.n	8005160 <pool_func_ap_array_f32+0x344>
 80050a4:	930a      	str	r3, [sp, #40]	; 0x28
 80050a6:	fb09 fe05 	mul.w	lr, r9, r5
 80050aa:	462b      	mov	r3, r5
 80050ac:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 80050b0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80050b4:	ee10 2a90 	vmov	r2, s1
 80050b8:	4545      	cmp	r5, r8
 80050ba:	462f      	mov	r7, r5
 80050bc:	da44      	bge.n	8005148 <pool_func_ap_array_f32+0x32c>
 80050be:	eba8 0405 	sub.w	r4, r8, r5
 80050c2:	07e6      	lsls	r6, r4, #31
 80050c4:	d513      	bpl.n	80050ee <pool_func_ap_array_f32+0x2d2>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bf58      	it	pl
 80050ca:	2f00      	cmppl	r7, #0
 80050cc:	d40e      	bmi.n	80050ec <pool_func_ap_array_f32+0x2d0>
 80050ce:	455b      	cmp	r3, fp
 80050d0:	bfb8      	it	lt
 80050d2:	454f      	cmplt	r7, r9
 80050d4:	da0a      	bge.n	80050ec <pool_func_ap_array_f32+0x2d0>
 80050d6:	eb0e 0607 	add.w	r6, lr, r7
 80050da:	fb06 160a 	mla	r6, r6, sl, r1
 80050de:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80050e2:	1c52      	adds	r2, r2, #1
 80050e4:	edd6 0a00 	vldr	s1, [r6]
 80050e8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80050ec:	1c7f      	adds	r7, r7, #1
 80050ee:	0864      	lsrs	r4, r4, #1
 80050f0:	d02a      	beq.n	8005148 <pool_func_ap_array_f32+0x32c>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d405      	bmi.n	8005102 <pool_func_ap_array_f32+0x2e6>
 80050f6:	2f00      	cmp	r7, #0
 80050f8:	bf48      	it	mi
 80050fa:	1c7e      	addmi	r6, r7, #1
 80050fc:	d410      	bmi.n	8005120 <pool_func_ap_array_f32+0x304>
 80050fe:	455b      	cmp	r3, fp
 8005100:	db01      	blt.n	8005106 <pool_func_ap_array_f32+0x2ea>
 8005102:	1c7e      	adds	r6, r7, #1
 8005104:	e01d      	b.n	8005142 <pool_func_ap_array_f32+0x326>
 8005106:	1c7e      	adds	r6, r7, #1
 8005108:	454f      	cmp	r7, r9
 800510a:	da09      	bge.n	8005120 <pool_func_ap_array_f32+0x304>
 800510c:	4477      	add	r7, lr
 800510e:	fb07 170a 	mla	r7, r7, sl, r1
 8005112:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005116:	1c52      	adds	r2, r2, #1
 8005118:	edd7 0a00 	vldr	s1, [r7]
 800511c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005120:	2e00      	cmp	r6, #0
 8005122:	d40e      	bmi.n	8005142 <pool_func_ap_array_f32+0x326>
 8005124:	455b      	cmp	r3, fp
 8005126:	bfb8      	it	lt
 8005128:	454e      	cmplt	r6, r9
 800512a:	da0a      	bge.n	8005142 <pool_func_ap_array_f32+0x326>
 800512c:	eb0e 0706 	add.w	r7, lr, r6
 8005130:	fb07 170a 	mla	r7, r7, sl, r1
 8005134:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005138:	1c52      	adds	r2, r2, #1
 800513a:	edd7 0a00 	vldr	s1, [r7]
 800513e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005142:	1c77      	adds	r7, r6, #1
 8005144:	1e64      	subs	r4, r4, #1
 8005146:	d1d4      	bne.n	80050f2 <pool_func_ap_array_f32+0x2d6>
 8005148:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800514a:	1c5b      	adds	r3, r3, #1
 800514c:	42bb      	cmp	r3, r7
 800514e:	44ce      	add	lr, r9
 8005150:	dbb2      	blt.n	80050b8 <pool_func_ap_array_f32+0x29c>
 8005152:	463b      	mov	r3, r7
 8005154:	ee00 2a90 	vmov	s1, r2
 8005158:	f8ad 5004 	strh.w	r5, [sp, #4]
 800515c:	f8ad b00c 	strh.w	fp, [sp, #12]
 8005160:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005164:	9d06      	ldr	r5, [sp, #24]
 8005166:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800516a:	ed85 0a00 	vstr	s0, [r5]
 800516e:	1c49      	adds	r1, r1, #1
 8005170:	9a06      	ldr	r2, [sp, #24]
 8005172:	1d15      	adds	r5, r2, #4
 8005174:	4551      	cmp	r1, sl
 8005176:	9506      	str	r5, [sp, #24]
 8005178:	db8a      	blt.n	8005090 <pool_func_ap_array_f32+0x274>
 800517a:	f8ad 9006 	strh.w	r9, [sp, #6]
 800517e:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8005182:	9904      	ldr	r1, [sp, #16]
 8005184:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8005188:	1c49      	adds	r1, r1, #1
 800518a:	9104      	str	r1, [sp, #16]
 800518c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8005190:	1851      	adds	r1, r2, r1
 8005192:	f8ad 1008 	strh.w	r1, [sp, #8]
 8005196:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800519a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800519e:	1851      	adds	r1, r2, r1
 80051a0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80051a4:	9907      	ldr	r1, [sp, #28]
 80051a6:	1e49      	subs	r1, r1, #1
 80051a8:	9107      	str	r1, [sp, #28]
 80051aa:	f47f af5d 	bne.w	8005068 <pool_func_ap_array_f32+0x24c>
 80051ae:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 80051b2:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 80051b6:	9d05      	ldr	r5, [sp, #20]
 80051b8:	f8bd b006 	ldrh.w	fp, [sp, #6]
 80051bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051be:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 80051c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80051c6:	188a      	adds	r2, r1, r2
 80051c8:	9209      	str	r2, [sp, #36]	; 0x24
 80051ca:	f8bd 2000 	ldrh.w	r2, [sp]
 80051ce:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 80051d2:	18cb      	adds	r3, r1, r3
 80051d4:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 80051d8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80051dc:	188a      	adds	r2, r1, r2
 80051de:	f8ad 2000 	strh.w	r2, [sp]
 80051e2:	9a08      	ldr	r2, [sp, #32]
 80051e4:	1e52      	subs	r2, r2, #1
 80051e6:	9208      	str	r2, [sp, #32]
 80051e8:	f47f af20 	bne.w	800502c <pool_func_ap_array_f32+0x210>
 80051ec:	b00c      	add	sp, #48	; 0x30
 80051ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080051f4 <.text_5>:
 80051f4:	00000000 	.word	0x00000000

080051f8 <pool_func_mp_kernel_array_f32>:
 80051f8:	b470      	push	{r4, r5, r6}
 80051fa:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 80051fe:	42a1      	cmp	r1, r4
 8005200:	d257      	bcs.n	80052b2 <pool_func_mp_kernel_array_f32+0xba>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d051      	beq.n	80052aa <pool_func_mp_kernel_array_f32+0xb2>
 8005206:	f013 0203 	ands.w	r2, r3, #3
 800520a:	460d      	mov	r5, r1
 800520c:	4606      	mov	r6, r0
 800520e:	d011      	beq.n	8005234 <pool_func_mp_kernel_array_f32+0x3c>
 8005210:	ed96 0a00 	vldr	s0, [r6]
 8005214:	edd5 0a00 	vldr	s1, [r5]
 8005218:	eef4 0a40 	vcmp.f32	s1, s0
 800521c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005220:	bf58      	it	pl
 8005222:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005226:	ed86 0a00 	vstr	s0, [r6]
 800522a:	1e52      	subs	r2, r2, #1
 800522c:	1d36      	adds	r6, r6, #4
 800522e:	1d2d      	adds	r5, r5, #4
 8005230:	2a00      	cmp	r2, #0
 8005232:	d1ed      	bne.n	8005210 <pool_func_mp_kernel_array_f32+0x18>
 8005234:	089a      	lsrs	r2, r3, #2
 8005236:	d038      	beq.n	80052aa <pool_func_mp_kernel_array_f32+0xb2>
 8005238:	edd5 0a00 	vldr	s1, [r5]
 800523c:	edd6 1a00 	vldr	s3, [r6]
 8005240:	eef4 0a61 	vcmp.f32	s1, s3
 8005244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005248:	bf48      	it	mi
 800524a:	eef0 0a61 	vmovmi.f32	s1, s3
 800524e:	edc6 0a00 	vstr	s1, [r6]
 8005252:	edd5 0a01 	vldr	s1, [r5, #4]
 8005256:	edd6 1a01 	vldr	s3, [r6, #4]
 800525a:	ed96 0a02 	vldr	s0, [r6, #8]
 800525e:	eef4 0a61 	vcmp.f32	s1, s3
 8005262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005266:	bf48      	it	mi
 8005268:	eef0 0a61 	vmovmi.f32	s1, s3
 800526c:	edc6 0a01 	vstr	s1, [r6, #4]
 8005270:	ed95 1a02 	vldr	s2, [r5, #8]
 8005274:	edd6 1a03 	vldr	s3, [r6, #12]
 8005278:	eeb4 1a40 	vcmp.f32	s2, s0
 800527c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005280:	bf48      	it	mi
 8005282:	eeb0 1a40 	vmovmi.f32	s2, s0
 8005286:	ed86 1a02 	vstr	s2, [r6, #8]
 800528a:	edd5 0a03 	vldr	s1, [r5, #12]
 800528e:	eef4 0a61 	vcmp.f32	s1, s3
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	bf58      	it	pl
 8005298:	eef0 1a60 	vmovpl.f32	s3, s1
 800529c:	edc6 1a03 	vstr	s3, [r6, #12]
 80052a0:	1e52      	subs	r2, r2, #1
 80052a2:	3610      	adds	r6, #16
 80052a4:	3510      	adds	r5, #16
 80052a6:	2a00      	cmp	r2, #0
 80052a8:	d1c6      	bne.n	8005238 <pool_func_mp_kernel_array_f32+0x40>
 80052aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80052ae:	42a1      	cmp	r1, r4
 80052b0:	d3a7      	bcc.n	8005202 <pool_func_mp_kernel_array_f32+0xa>
 80052b2:	bc70      	pop	{r4, r5, r6}
 80052b4:	4770      	bx	lr
	...

080052b8 <pool_func_ap_kernel_array_f32>:
 80052b8:	b4f0      	push	{r4, r5, r6, r7}
 80052ba:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80052be:	9c05      	ldr	r4, [sp, #20]
 80052c0:	42a9      	cmp	r1, r5
 80052c2:	d251      	bcs.n	8005368 <pool_func_ap_kernel_array_f32+0xb0>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d04a      	beq.n	800535e <pool_func_ap_kernel_array_f32+0xa6>
 80052c8:	f013 0203 	ands.w	r2, r3, #3
 80052cc:	460e      	mov	r6, r1
 80052ce:	4607      	mov	r7, r0
 80052d0:	f000 800f 	beq.w	80052f2 <pool_func_ap_kernel_array_f32+0x3a>
 80052d4:	ed96 0a00 	vldr	s0, [r6]
 80052d8:	2c01      	cmp	r4, #1
 80052da:	bf1c      	itt	ne
 80052dc:	edd7 0a00 	vldrne	s1, [r7]
 80052e0:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80052e4:	ed87 0a00 	vstr	s0, [r7]
 80052e8:	1e52      	subs	r2, r2, #1
 80052ea:	1d3f      	adds	r7, r7, #4
 80052ec:	1d36      	adds	r6, r6, #4
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	d1f0      	bne.n	80052d4 <pool_func_ap_kernel_array_f32+0x1c>
 80052f2:	089a      	lsrs	r2, r3, #2
 80052f4:	d033      	beq.n	800535e <pool_func_ap_kernel_array_f32+0xa6>
 80052f6:	2c01      	cmp	r4, #1
 80052f8:	edd6 1a00 	vldr	s3, [r6]
 80052fc:	d10c      	bne.n	8005318 <pool_func_ap_kernel_array_f32+0x60>
 80052fe:	edc7 1a00 	vstr	s3, [r7]
 8005302:	ed96 0a01 	vldr	s0, [r6, #4]
 8005306:	ed87 0a01 	vstr	s0, [r7, #4]
 800530a:	edd6 1a02 	vldr	s3, [r6, #8]
 800530e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005312:	edd6 1a03 	vldr	s3, [r6, #12]
 8005316:	e01b      	b.n	8005350 <pool_func_ap_kernel_array_f32+0x98>
 8005318:	edd7 0a00 	vldr	s1, [r7]
 800531c:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005320:	ed87 0a00 	vstr	s0, [r7]
 8005324:	ed97 1a01 	vldr	s2, [r7, #4]
 8005328:	ed96 0a01 	vldr	s0, [r6, #4]
 800532c:	edd7 1a02 	vldr	s3, [r7, #8]
 8005330:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005334:	ed87 0a01 	vstr	s0, [r7, #4]
 8005338:	edd6 0a02 	vldr	s1, [r6, #8]
 800533c:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8005340:	ed87 0a02 	vstr	s0, [r7, #8]
 8005344:	ed97 0a03 	vldr	s0, [r7, #12]
 8005348:	ed96 1a03 	vldr	s2, [r6, #12]
 800534c:	ee70 1a01 	vadd.f32	s3, s0, s2
 8005350:	edc7 1a03 	vstr	s3, [r7, #12]
 8005354:	1e52      	subs	r2, r2, #1
 8005356:	3710      	adds	r7, #16
 8005358:	3610      	adds	r6, #16
 800535a:	2a00      	cmp	r2, #0
 800535c:	d1cb      	bne.n	80052f6 <pool_func_ap_kernel_array_f32+0x3e>
 800535e:	2400      	movs	r4, #0
 8005360:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005364:	42a9      	cmp	r1, r5
 8005366:	d3ad      	bcc.n	80052c4 <pool_func_ap_kernel_array_f32+0xc>
 8005368:	9904      	ldr	r1, [sp, #16]
 800536a:	b399      	cbz	r1, 80053d4 <pool_func_ap_kernel_array_f32+0x11c>
 800536c:	ee00 1a10 	vmov	s0, r1
 8005370:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005374:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005378:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800537c:	b353      	cbz	r3, 80053d4 <pool_func_ap_kernel_array_f32+0x11c>
 800537e:	f013 0103 	ands.w	r1, r3, #3
 8005382:	d009      	beq.n	8005398 <pool_func_ap_kernel_array_f32+0xe0>
 8005384:	edd0 0a00 	vldr	s1, [r0]
 8005388:	ee60 0a80 	vmul.f32	s1, s1, s0
 800538c:	edc0 0a00 	vstr	s1, [r0]
 8005390:	1e49      	subs	r1, r1, #1
 8005392:	f100 0004 	add.w	r0, r0, #4
 8005396:	d1f5      	bne.n	8005384 <pool_func_ap_kernel_array_f32+0xcc>
 8005398:	089b      	lsrs	r3, r3, #2
 800539a:	d01b      	beq.n	80053d4 <pool_func_ap_kernel_array_f32+0x11c>
 800539c:	edd0 0a00 	vldr	s1, [r0]
 80053a0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80053a4:	edc0 0a00 	vstr	s1, [r0]
 80053a8:	1e5b      	subs	r3, r3, #1
 80053aa:	ed90 1a01 	vldr	s2, [r0, #4]
 80053ae:	edd0 0a02 	vldr	s1, [r0, #8]
 80053b2:	ee21 1a00 	vmul.f32	s2, s2, s0
 80053b6:	ed80 1a01 	vstr	s2, [r0, #4]
 80053ba:	ee60 0a80 	vmul.f32	s1, s1, s0
 80053be:	ed90 1a03 	vldr	s2, [r0, #12]
 80053c2:	edc0 0a02 	vstr	s1, [r0, #8]
 80053c6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80053ca:	ed80 1a03 	vstr	s2, [r0, #12]
 80053ce:	f100 0010 	add.w	r0, r0, #16
 80053d2:	d1e3      	bne.n	800539c <pool_func_ap_kernel_array_f32+0xe4>
 80053d4:	bcf0      	pop	{r4, r5, r6, r7}
 80053d6:	4770      	bx	lr

080053d8 <forward_mp>:
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	4604      	mov	r4, r0
 80053de:	b08e      	sub	sp, #56	; 0x38
 80053e0:	6962      	ldr	r2, [r4, #20]
 80053e2:	8811      	ldrh	r1, [r2, #0]
 80053e4:	2900      	cmp	r1, #0
 80053e6:	bf1a      	itte	ne
 80053e8:	6850      	ldrne	r0, [r2, #4]
 80053ea:	1d00      	addne	r0, r0, #4
 80053ec:	2004      	moveq	r0, #4
 80053ee:	6800      	ldr	r0, [r0, #0]
 80053f0:	2800      	cmp	r0, #0
 80053f2:	bf14      	ite	ne
 80053f4:	6805      	ldrne	r5, [r0, #0]
 80053f6:	2500      	moveq	r5, #0
 80053f8:	2901      	cmp	r1, #1
 80053fa:	bfc6      	itte	gt
 80053fc:	6850      	ldrgt	r0, [r2, #4]
 80053fe:	3010      	addgt	r0, #16
 8005400:	2004      	movle	r0, #4
 8005402:	6800      	ldr	r0, [r0, #0]
 8005404:	68ea      	ldr	r2, [r5, #12]
 8005406:	2800      	cmp	r0, #0
 8005408:	bf14      	ite	ne
 800540a:	6807      	ldrne	r7, [r0, #0]
 800540c:	2700      	moveq	r7, #0
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	68d0      	ldr	r0, [r2, #12]
 8005412:	68cb      	ldr	r3, [r1, #12]
 8005414:	9009      	str	r0, [sp, #36]	; 0x24
 8005416:	6889      	ldr	r1, [r1, #8]
 8005418:	9108      	str	r1, [sp, #32]
 800541a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800541e:	6851      	ldr	r1, [r2, #4]
 8005420:	69a2      	ldr	r2, [r4, #24]
 8005422:	69e0      	ldr	r0, [r4, #28]
 8005424:	9007      	str	r0, [sp, #28]
 8005426:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005428:	6a20      	ldr	r0, [r4, #32]
 800542a:	960d      	str	r6, [sp, #52]	; 0x34
 800542c:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 8005430:	69ac      	ldr	r4, [r5, #24]
 8005432:	69bd      	ldr	r5, [r7, #24]
 8005434:	f8dc 7000 	ldr.w	r7, [ip]
 8005438:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800543c:	68a4      	ldr	r4, [r4, #8]
 800543e:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8005442:	427f      	negs	r7, r7
 8005444:	2b00      	cmp	r3, #0
 8005446:	9700      	str	r7, [sp, #0]
 8005448:	f000 80d9 	beq.w	80055fe <forward_mp+0x226>
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	4276      	negs	r6, r6
 8005450:	960c      	str	r6, [sp, #48]	; 0x30
 8005452:	fb01 f508 	mul.w	r5, r1, r8
 8005456:	950b      	str	r5, [sp, #44]	; 0x2c
 8005458:	9d00      	ldr	r5, [sp, #0]
 800545a:	9b00      	ldr	r3, [sp, #0]
 800545c:	9f00      	ldr	r7, [sp, #0]
 800545e:	426d      	negs	r5, r5
 8005460:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005462:	bfcc      	ite	gt
 8005464:	2600      	movgt	r6, #0
 8005466:	9e00      	ldrle	r6, [sp, #0]
 8005468:	1aeb      	subs	r3, r5, r3
 800546a:	9d07      	ldr	r5, [sp, #28]
 800546c:	42ab      	cmp	r3, r5
 800546e:	bf88      	it	hi
 8005470:	462b      	movhi	r3, r5
 8005472:	19df      	adds	r7, r3, r7
 8005474:	9b08      	ldr	r3, [sp, #32]
 8005476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80b7 	beq.w	80055ec <forward_mp+0x214>
 800547e:	fb08 fa06 	mul.w	sl, r8, r6
 8005482:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005486:	f8cd 800c 	str.w	r8, [sp, #12]
 800548a:	9202      	str	r2, [sp, #8]
 800548c:	9006      	str	r0, [sp, #24]
 800548e:	9605      	str	r6, [sp, #20]
 8005490:	9704      	str	r7, [sp, #16]
 8005492:	4268      	negs	r0, r5
 8005494:	9f03      	ldr	r7, [sp, #12]
 8005496:	9a02      	ldr	r2, [sp, #8]
 8005498:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800549c:	bfcc      	ite	gt
 800549e:	2000      	movgt	r0, #0
 80054a0:	4628      	movle	r0, r5
 80054a2:	1b7f      	subs	r7, r7, r5
 80054a4:	4297      	cmp	r7, r2
 80054a6:	bf88      	it	hi
 80054a8:	4617      	movhi	r7, r2
 80054aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ac:	197f      	adds	r7, r7, r5
 80054ae:	1a3f      	subs	r7, r7, r0
 80054b0:	1880      	adds	r0, r0, r2
 80054b2:	4348      	muls	r0, r1
 80054b4:	434f      	muls	r7, r1
 80054b6:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 80054ba:	b311      	cbz	r1, 8005502 <forward_mp+0x12a>
 80054bc:	f011 0003 	ands.w	r0, r1, #3
 80054c0:	4672      	mov	r2, lr
 80054c2:	4666      	mov	r6, ip
 80054c4:	f000 8006 	beq.w	80054d4 <forward_mp+0xfc>
 80054c8:	f856 9b04 	ldr.w	r9, [r6], #4
 80054cc:	f842 9b04 	str.w	r9, [r2], #4
 80054d0:	1e40      	subs	r0, r0, #1
 80054d2:	d1f9      	bne.n	80054c8 <forward_mp+0xf0>
 80054d4:	0888      	lsrs	r0, r1, #2
 80054d6:	d014      	beq.n	8005502 <forward_mp+0x12a>
 80054d8:	ed96 0a00 	vldr	s0, [r6]
 80054dc:	ed82 0a00 	vstr	s0, [r2]
 80054e0:	1e40      	subs	r0, r0, #1
 80054e2:	edd6 0a01 	vldr	s1, [r6, #4]
 80054e6:	edc2 0a01 	vstr	s1, [r2, #4]
 80054ea:	ed96 0a02 	vldr	s0, [r6, #8]
 80054ee:	ed82 0a02 	vstr	s0, [r2, #8]
 80054f2:	edd6 0a03 	vldr	s1, [r6, #12]
 80054f6:	edc2 0a03 	vstr	s1, [r2, #12]
 80054fa:	3210      	adds	r2, #16
 80054fc:	3610      	adds	r6, #16
 80054fe:	2800      	cmp	r0, #0
 8005500:	d1ea      	bne.n	80054d8 <forward_mp+0x100>
 8005502:	9805      	ldr	r0, [sp, #20]
 8005504:	9a04      	ldr	r2, [sp, #16]
 8005506:	4290      	cmp	r0, r2
 8005508:	da66      	bge.n	80055d8 <forward_mp+0x200>
 800550a:	4610      	mov	r0, r2
 800550c:	9a05      	ldr	r2, [sp, #20]
 800550e:	1a82      	subs	r2, r0, r2
 8005510:	46e2      	mov	sl, ip
 8005512:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8005516:	45da      	cmp	sl, fp
 8005518:	d25a      	bcs.n	80055d0 <forward_mp+0x1f8>
 800551a:	2900      	cmp	r1, #0
 800551c:	d054      	beq.n	80055c8 <forward_mp+0x1f0>
 800551e:	f011 0003 	ands.w	r0, r1, #3
 8005522:	4656      	mov	r6, sl
 8005524:	46f1      	mov	r9, lr
 8005526:	d012      	beq.n	800554e <forward_mp+0x176>
 8005528:	ed99 0a00 	vldr	s0, [r9]
 800552c:	edd6 0a00 	vldr	s1, [r6]
 8005530:	eef4 0a40 	vcmp.f32	s1, s0
 8005534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005538:	bf58      	it	pl
 800553a:	eeb0 0a60 	vmovpl.f32	s0, s1
 800553e:	1e40      	subs	r0, r0, #1
 8005540:	1d36      	adds	r6, r6, #4
 8005542:	ed89 0a00 	vstr	s0, [r9]
 8005546:	2800      	cmp	r0, #0
 8005548:	f109 0904 	add.w	r9, r9, #4
 800554c:	d1ec      	bne.n	8005528 <forward_mp+0x150>
 800554e:	0888      	lsrs	r0, r1, #2
 8005550:	f000 803a 	beq.w	80055c8 <forward_mp+0x1f0>
 8005554:	edd6 0a00 	vldr	s1, [r6]
 8005558:	edd9 1a00 	vldr	s3, [r9]
 800555c:	eef4 0a61 	vcmp.f32	s1, s3
 8005560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005564:	bf48      	it	mi
 8005566:	eef0 0a61 	vmovmi.f32	s1, s3
 800556a:	edc9 0a00 	vstr	s1, [r9]
 800556e:	edd6 0a01 	vldr	s1, [r6, #4]
 8005572:	edd9 1a01 	vldr	s3, [r9, #4]
 8005576:	ed99 0a02 	vldr	s0, [r9, #8]
 800557a:	eef4 0a61 	vcmp.f32	s1, s3
 800557e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005582:	bf48      	it	mi
 8005584:	eef0 0a61 	vmovmi.f32	s1, s3
 8005588:	edc9 0a01 	vstr	s1, [r9, #4]
 800558c:	ed96 1a02 	vldr	s2, [r6, #8]
 8005590:	edd9 1a03 	vldr	s3, [r9, #12]
 8005594:	eeb4 1a40 	vcmp.f32	s2, s0
 8005598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559c:	bf48      	it	mi
 800559e:	eeb0 1a40 	vmovmi.f32	s2, s0
 80055a2:	ed89 1a02 	vstr	s2, [r9, #8]
 80055a6:	edd6 0a03 	vldr	s1, [r6, #12]
 80055aa:	eef4 0a61 	vcmp.f32	s1, s3
 80055ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b2:	bf58      	it	pl
 80055b4:	eef0 1a60 	vmovpl.f32	s3, s1
 80055b8:	1e40      	subs	r0, r0, #1
 80055ba:	3610      	adds	r6, #16
 80055bc:	edc9 1a03 	vstr	s3, [r9, #12]
 80055c0:	2800      	cmp	r0, #0
 80055c2:	f109 0910 	add.w	r9, r9, #16
 80055c6:	d1c5      	bne.n	8005554 <forward_mp+0x17c>
 80055c8:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 80055cc:	45da      	cmp	sl, fp
 80055ce:	d3a4      	bcc.n	800551a <forward_mp+0x142>
 80055d0:	1e52      	subs	r2, r2, #1
 80055d2:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 80055d6:	d19b      	bne.n	8005510 <forward_mp+0x138>
 80055d8:	9806      	ldr	r0, [sp, #24]
 80055da:	1945      	adds	r5, r0, r5
 80055dc:	1e5b      	subs	r3, r3, #1
 80055de:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80055e2:	f47f af56 	bne.w	8005492 <forward_mp+0xba>
 80055e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80055ea:	9a02      	ldr	r2, [sp, #8]
 80055ec:	9d00      	ldr	r5, [sp, #0]
 80055ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055f0:	195d      	adds	r5, r3, r5
 80055f2:	9500      	str	r5, [sp, #0]
 80055f4:	9d01      	ldr	r5, [sp, #4]
 80055f6:	1e6d      	subs	r5, r5, #1
 80055f8:	9501      	str	r5, [sp, #4]
 80055fa:	f47f af2d 	bne.w	8005458 <forward_mp+0x80>
 80055fe:	b00e      	add	sp, #56	; 0x38
 8005600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005604 <forward_ap>:
 8005604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005608:	4607      	mov	r7, r0
 800560a:	b097      	sub	sp, #92	; 0x5c
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	8811      	ldrh	r1, [r2, #0]
 8005610:	2900      	cmp	r1, #0
 8005612:	bf1a      	itte	ne
 8005614:	6850      	ldrne	r0, [r2, #4]
 8005616:	1d00      	addne	r0, r0, #4
 8005618:	2004      	moveq	r0, #4
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	2800      	cmp	r0, #0
 800561e:	bf14      	ite	ne
 8005620:	6804      	ldrne	r4, [r0, #0]
 8005622:	2400      	moveq	r4, #0
 8005624:	2901      	cmp	r1, #1
 8005626:	bfc6      	itte	gt
 8005628:	6850      	ldrgt	r0, [r2, #4]
 800562a:	3010      	addgt	r0, #16
 800562c:	2004      	movle	r0, #4
 800562e:	6800      	ldr	r0, [r0, #0]
 8005630:	68e3      	ldr	r3, [r4, #12]
 8005632:	68dd      	ldr	r5, [r3, #12]
 8005634:	2800      	cmp	r0, #0
 8005636:	bf14      	ite	ne
 8005638:	6806      	ldrne	r6, [r0, #0]
 800563a:	2600      	moveq	r6, #0
 800563c:	68f2      	ldr	r2, [r6, #12]
 800563e:	68d0      	ldr	r0, [r2, #12]
 8005640:	950d      	str	r5, [sp, #52]	; 0x34
 8005642:	6892      	ldr	r2, [r2, #8]
 8005644:	920c      	str	r2, [sp, #48]	; 0x30
 8005646:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800564a:	6859      	ldr	r1, [r3, #4]
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	69fd      	ldr	r5, [r7, #28]
 8005650:	9505      	str	r5, [sp, #20]
 8005652:	f8d7 8020 	ldr.w	r8, [r7, #32]
 8005656:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8005658:	9516      	str	r5, [sp, #88]	; 0x58
 800565a:	69a4      	ldr	r4, [r4, #24]
 800565c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800565e:	68a5      	ldr	r5, [r4, #8]
 8005660:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005664:	69b4      	ldr	r4, [r6, #24]
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800566c:	4252      	negs	r2, r2
 800566e:	2800      	cmp	r0, #0
 8005670:	9201      	str	r2, [sp, #4]
 8005672:	f000 811c 	beq.w	80058ae <forward_ap+0x2aa>
 8005676:	9c05      	ldr	r4, [sp, #20]
 8005678:	f1c9 0900 	rsb	r9, r9, #0
 800567c:	435c      	muls	r4, r3
 800567e:	fb01 f20c 	mul.w	r2, r1, ip
 8005682:	9004      	str	r0, [sp, #16]
 8005684:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8005688:	9414      	str	r4, [sp, #80]	; 0x50
 800568a:	9213      	str	r2, [sp, #76]	; 0x4c
 800568c:	9a01      	ldr	r2, [sp, #4]
 800568e:	9801      	ldr	r0, [sp, #4]
 8005690:	9c01      	ldr	r4, [sp, #4]
 8005692:	4252      	negs	r2, r2
 8005694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005696:	bfcc      	ite	gt
 8005698:	2600      	movgt	r6, #0
 800569a:	9e01      	ldrle	r6, [sp, #4]
 800569c:	1a10      	subs	r0, r2, r0
 800569e:	9a05      	ldr	r2, [sp, #20]
 80056a0:	4290      	cmp	r0, r2
 80056a2:	bf88      	it	hi
 80056a4:	4610      	movhi	r0, r2
 80056a6:	1904      	adds	r4, r0, r4
 80056a8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80056aa:	9000      	str	r0, [sp, #0]
 80056ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f000 80f4 	beq.w	800589c <forward_ap+0x298>
 80056b4:	fb0c f006 	mul.w	r0, ip, r6
 80056b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056ba:	9012      	str	r0, [sp, #72]	; 0x48
 80056bc:	9202      	str	r2, [sp, #8]
 80056be:	1b30      	subs	r0, r6, r4
 80056c0:	9011      	str	r0, [sp, #68]	; 0x44
 80056c2:	970e      	str	r7, [sp, #56]	; 0x38
 80056c4:	f8cd c01c 	str.w	ip, [sp, #28]
 80056c8:	9306      	str	r3, [sp, #24]
 80056ca:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80056ce:	950a      	str	r5, [sp, #40]	; 0x28
 80056d0:	9609      	str	r6, [sp, #36]	; 0x24
 80056d2:	9408      	str	r4, [sp, #32]
 80056d4:	9800      	ldr	r0, [sp, #0]
 80056d6:	9a07      	ldr	r2, [sp, #28]
 80056d8:	f8dd a000 	ldr.w	sl, [sp]
 80056dc:	4240      	negs	r0, r0
 80056de:	9800      	ldr	r0, [sp, #0]
 80056e0:	bfcc      	ite	gt
 80056e2:	f04f 0900 	movgt.w	r9, #0
 80056e6:	f8dd 9000 	ldrle.w	r9, [sp]
 80056ea:	1a10      	subs	r0, r2, r0
 80056ec:	9a06      	ldr	r2, [sp, #24]
 80056ee:	4290      	cmp	r0, r2
 80056f0:	bf88      	it	hi
 80056f2:	4610      	movhi	r0, r2
 80056f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056f6:	9203      	str	r2, [sp, #12]
 80056f8:	4482      	add	sl, r0
 80056fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80056fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056fe:	eba9 030a 	sub.w	r3, r9, sl
 8005702:	4343      	muls	r3, r0
 8005704:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005706:	444a      	add	r2, r9
 8005708:	434a      	muls	r2, r1
 800570a:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 800570e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005710:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8005714:	9a08      	ldr	r2, [sp, #32]
 8005716:	ebaa 0409 	sub.w	r4, sl, r9
 800571a:	434c      	muls	r4, r1
 800571c:	2800      	cmp	r0, #0
 800571e:	bf14      	ite	ne
 8005720:	9e14      	ldrne	r6, [sp, #80]	; 0x50
 8005722:	461e      	moveq	r6, r3
 8005724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005726:	2701      	movs	r7, #1
 8005728:	4290      	cmp	r0, r2
 800572a:	f04f 0800 	mov.w	r8, #0
 800572e:	f280 80a4 	bge.w	800587a <forward_ap+0x276>
 8005732:	1a12      	subs	r2, r2, r0
 8005734:	ebaa 0009 	sub.w	r0, sl, r9
 8005738:	900f      	str	r0, [sp, #60]	; 0x3c
 800573a:	9310      	str	r3, [sp, #64]	; 0x40
 800573c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800573e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005740:	4480      	add	r8, r0
 8005742:	4543      	cmp	r3, r8
 8005744:	46a9      	mov	r9, r5
 8005746:	bf0c      	ite	eq
 8005748:	4633      	moveq	r3, r6
 800574a:	2300      	movne	r3, #0
 800574c:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
 8005750:	45e1      	cmp	r9, ip
 8005752:	d254      	bcs.n	80057fe <forward_ap+0x1fa>
 8005754:	2900      	cmp	r1, #0
 8005756:	d04d      	beq.n	80057f4 <forward_ap+0x1f0>
 8005758:	f011 0003 	ands.w	r0, r1, #3
 800575c:	46ca      	mov	sl, r9
 800575e:	46f3      	mov	fp, lr
 8005760:	f000 8010 	beq.w	8005784 <forward_ap+0x180>
 8005764:	ed9a 0a00 	vldr	s0, [sl]
 8005768:	2f01      	cmp	r7, #1
 800576a:	bf1c      	itt	ne
 800576c:	eddb 0a00 	vldrne	s1, [fp]
 8005770:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8005774:	ed8b 0a00 	vstr	s0, [fp]
 8005778:	1e40      	subs	r0, r0, #1
 800577a:	f10b 0b04 	add.w	fp, fp, #4
 800577e:	f10a 0a04 	add.w	sl, sl, #4
 8005782:	d1ef      	bne.n	8005764 <forward_ap+0x160>
 8005784:	0888      	lsrs	r0, r1, #2
 8005786:	d035      	beq.n	80057f4 <forward_ap+0x1f0>
 8005788:	2f01      	cmp	r7, #1
 800578a:	edda 1a00 	vldr	s3, [sl]
 800578e:	d10d      	bne.n	80057ac <forward_ap+0x1a8>
 8005790:	edcb 1a00 	vstr	s3, [fp]
 8005794:	ed9a 0a01 	vldr	s0, [sl, #4]
 8005798:	ed8b 0a01 	vstr	s0, [fp, #4]
 800579c:	edda 1a02 	vldr	s3, [sl, #8]
 80057a0:	edcb 1a02 	vstr	s3, [fp, #8]
 80057a4:	edda 1a03 	vldr	s3, [sl, #12]
 80057a8:	e01c      	b.n	80057e4 <forward_ap+0x1e0>
 80057aa:	bf00      	nop
 80057ac:	eddb 0a00 	vldr	s1, [fp]
 80057b0:	ee30 0aa1 	vadd.f32	s0, s1, s3
 80057b4:	ed8b 0a00 	vstr	s0, [fp]
 80057b8:	ed9b 1a01 	vldr	s2, [fp, #4]
 80057bc:	ed9a 0a01 	vldr	s0, [sl, #4]
 80057c0:	eddb 1a02 	vldr	s3, [fp, #8]
 80057c4:	ee31 0a00 	vadd.f32	s0, s2, s0
 80057c8:	ed8b 0a01 	vstr	s0, [fp, #4]
 80057cc:	edda 0a02 	vldr	s1, [sl, #8]
 80057d0:	ee31 0aa0 	vadd.f32	s0, s3, s1
 80057d4:	ed8b 0a02 	vstr	s0, [fp, #8]
 80057d8:	ed9b 0a03 	vldr	s0, [fp, #12]
 80057dc:	ed9a 1a03 	vldr	s2, [sl, #12]
 80057e0:	ee70 1a01 	vadd.f32	s3, s0, s2
 80057e4:	edcb 1a03 	vstr	s3, [fp, #12]
 80057e8:	1e40      	subs	r0, r0, #1
 80057ea:	f10b 0b10 	add.w	fp, fp, #16
 80057ee:	f10a 0a10 	add.w	sl, sl, #16
 80057f2:	d1c9      	bne.n	8005788 <forward_ap+0x184>
 80057f4:	2700      	movs	r7, #0
 80057f6:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 80057fa:	45e1      	cmp	r9, ip
 80057fc:	d3aa      	bcc.n	8005754 <forward_ap+0x150>
 80057fe:	b3ab      	cbz	r3, 800586c <forward_ap+0x268>
 8005800:	ee00 3a10 	vmov	s0, r3
 8005804:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005808:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800580c:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005810:	b361      	cbz	r1, 800586c <forward_ap+0x268>
 8005812:	f011 0003 	ands.w	r0, r1, #3
 8005816:	4673      	mov	r3, lr
 8005818:	f000 800a 	beq.w	8005830 <forward_ap+0x22c>
 800581c:	edd3 0a00 	vldr	s1, [r3]
 8005820:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005824:	edc3 0a00 	vstr	s1, [r3]
 8005828:	1e40      	subs	r0, r0, #1
 800582a:	f103 0304 	add.w	r3, r3, #4
 800582e:	d1f5      	bne.n	800581c <forward_ap+0x218>
 8005830:	0888      	lsrs	r0, r1, #2
 8005832:	d01b      	beq.n	800586c <forward_ap+0x268>
 8005834:	edd3 0a00 	vldr	s1, [r3]
 8005838:	ee60 0a80 	vmul.f32	s1, s1, s0
 800583c:	edc3 0a00 	vstr	s1, [r3]
 8005840:	1e40      	subs	r0, r0, #1
 8005842:	ed93 1a01 	vldr	s2, [r3, #4]
 8005846:	edd3 0a02 	vldr	s1, [r3, #8]
 800584a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800584e:	ed83 1a01 	vstr	s2, [r3, #4]
 8005852:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005856:	ed93 1a03 	vldr	s2, [r3, #12]
 800585a:	edc3 0a02 	vstr	s1, [r3, #8]
 800585e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005862:	ed83 1a03 	vstr	s2, [r3, #12]
 8005866:	f103 0310 	add.w	r3, r3, #16
 800586a:	d1e3      	bne.n	8005834 <forward_ap+0x230>
 800586c:	9803      	ldr	r0, [sp, #12]
 800586e:	2700      	movs	r7, #0
 8005870:	1e52      	subs	r2, r2, #1
 8005872:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8005876:	f47f af61 	bne.w	800573c <forward_ap+0x138>
 800587a:	9800      	ldr	r0, [sp, #0]
 800587c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800587e:	1810      	adds	r0, r2, r0
 8005880:	9000      	str	r0, [sp, #0]
 8005882:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005886:	9802      	ldr	r0, [sp, #8]
 8005888:	1e40      	subs	r0, r0, #1
 800588a:	9002      	str	r0, [sp, #8]
 800588c:	f47f af22 	bne.w	80056d4 <forward_ap+0xd0>
 8005890:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005892:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005896:	9b06      	ldr	r3, [sp, #24]
 8005898:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800589a:	4690      	mov	r8, r2
 800589c:	9c01      	ldr	r4, [sp, #4]
 800589e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80058a0:	1914      	adds	r4, r2, r4
 80058a2:	9401      	str	r4, [sp, #4]
 80058a4:	9c04      	ldr	r4, [sp, #16]
 80058a6:	1e64      	subs	r4, r4, #1
 80058a8:	9404      	str	r4, [sp, #16]
 80058aa:	f47f aeef 	bne.w	800568c <forward_ap+0x88>
 80058ae:	b017      	add	sp, #92	; 0x5c
 80058b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080058b4 <ai_array_fmt_name>:
 80058b4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80058b8:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80058bc:	d062      	beq.n	8005984 <ai_array_fmt_name+0xd0>
 80058be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80058c2:	1a89      	subs	r1, r1, r2
 80058c4:	f000 8094 	beq.w	80059f0 <ai_array_fmt_name+0x13c>
 80058c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058cc:	1a89      	subs	r1, r1, r2
 80058ce:	d071      	beq.n	80059b4 <ai_array_fmt_name+0x100>
 80058d0:	1a89      	subs	r1, r1, r2
 80058d2:	d063      	beq.n	800599c <ai_array_fmt_name+0xe8>
 80058d4:	1fc9      	subs	r1, r1, #7
 80058d6:	f000 808e 	beq.w	80059f6 <ai_array_fmt_name+0x142>
 80058da:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80058de:	1a89      	subs	r1, r1, r2
 80058e0:	d05f      	beq.n	80059a2 <ai_array_fmt_name+0xee>
 80058e2:	390f      	subs	r1, #15
 80058e4:	f000 808a 	beq.w	80059fc <ai_array_fmt_name+0x148>
 80058e8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80058ec:	1a89      	subs	r1, r1, r2
 80058ee:	d05b      	beq.n	80059a8 <ai_array_fmt_name+0xf4>
 80058f0:	391f      	subs	r1, #31
 80058f2:	f000 8086 	beq.w	8005a02 <ai_array_fmt_name+0x14e>
 80058f6:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80058fa:	1a89      	subs	r1, r1, r2
 80058fc:	d057      	beq.n	80059ae <ai_array_fmt_name+0xfa>
 80058fe:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8005ed4 <.text_15>
 8005902:	1a89      	subs	r1, r1, r2
 8005904:	f000 808f 	beq.w	8005a26 <ai_array_fmt_name+0x172>
 8005908:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800590c:	1a89      	subs	r1, r1, r2
 800590e:	f000 8087 	beq.w	8005a20 <ai_array_fmt_name+0x16c>
 8005912:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8005ed8 <.text_16>
 8005916:	1a89      	subs	r1, r1, r2
 8005918:	d05e      	beq.n	80059d8 <ai_array_fmt_name+0x124>
 800591a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591e:	1a89      	subs	r1, r1, r2
 8005920:	d057      	beq.n	80059d2 <ai_array_fmt_name+0x11e>
 8005922:	1a89      	subs	r1, r1, r2
 8005924:	d049      	beq.n	80059ba <ai_array_fmt_name+0x106>
 8005926:	1fc9      	subs	r1, r1, #7
 8005928:	d059      	beq.n	80059de <ai_array_fmt_name+0x12a>
 800592a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800592e:	1a89      	subs	r1, r1, r2
 8005930:	d046      	beq.n	80059c0 <ai_array_fmt_name+0x10c>
 8005932:	390f      	subs	r1, #15
 8005934:	d056      	beq.n	80059e4 <ai_array_fmt_name+0x130>
 8005936:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800593a:	1a89      	subs	r1, r1, r2
 800593c:	d043      	beq.n	80059c6 <ai_array_fmt_name+0x112>
 800593e:	391f      	subs	r1, #31
 8005940:	d053      	beq.n	80059ea <ai_array_fmt_name+0x136>
 8005942:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005946:	1a89      	subs	r1, r1, r2
 8005948:	d040      	beq.n	80059cc <ai_array_fmt_name+0x118>
 800594a:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8005ed4 <.text_15>
 800594e:	1a89      	subs	r1, r1, r2
 8005950:	d063      	beq.n	8005a1a <ai_array_fmt_name+0x166>
 8005952:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005956:	1a89      	subs	r1, r1, r2
 8005958:	d05c      	beq.n	8005a14 <ai_array_fmt_name+0x160>
 800595a:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8005edc <.text_17>
 800595e:	1a89      	subs	r1, r1, r2
 8005960:	d019      	beq.n	8005996 <ai_array_fmt_name+0xe2>
 8005962:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005966:	1a89      	subs	r1, r1, r2
 8005968:	d00f      	beq.n	800598a <ai_array_fmt_name+0xd6>
 800596a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800596e:	1a89      	subs	r1, r1, r2
 8005970:	d00e      	beq.n	8005990 <ai_array_fmt_name+0xdc>
 8005972:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8005ee0 <.text_18>
 8005976:	1a89      	subs	r1, r1, r2
 8005978:	d049      	beq.n	8005a0e <ai_array_fmt_name+0x15a>
 800597a:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800597e:	1a89      	subs	r1, r1, r2
 8005980:	d042      	beq.n	8005a08 <ai_array_fmt_name+0x154>
 8005982:	e053      	b.n	8005a2c <ai_array_fmt_name+0x178>
 8005984:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8005988:	4770      	bx	lr
 800598a:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 800598e:	4770      	bx	lr
 8005990:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8005994:	4770      	bx	lr
 8005996:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 800599a:	4770      	bx	lr
 800599c:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 80059a0:	4770      	bx	lr
 80059a2:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80059a6:	4770      	bx	lr
 80059a8:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80059ac:	4770      	bx	lr
 80059ae:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80059b2:	4770      	bx	lr
 80059b4:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80059b8:	4770      	bx	lr
 80059ba:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80059be:	4770      	bx	lr
 80059c0:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80059c4:	4770      	bx	lr
 80059c6:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80059ca:	4770      	bx	lr
 80059cc:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80059d0:	4770      	bx	lr
 80059d2:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80059d6:	4770      	bx	lr
 80059d8:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80059dc:	4770      	bx	lr
 80059de:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80059e2:	4770      	bx	lr
 80059e4:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80059e8:	4770      	bx	lr
 80059ea:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80059ee:	4770      	bx	lr
 80059f0:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80059f4:	4770      	bx	lr
 80059f6:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80059fa:	4770      	bx	lr
 80059fc:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8005a00:	4770      	bx	lr
 8005a02:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8005a06:	4770      	bx	lr
 8005a08:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8005a0c:	4770      	bx	lr
 8005a0e:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8005a12:	4770      	bx	lr
 8005a14:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8005a18:	4770      	bx	lr
 8005a1a:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8005a1e:	4770      	bx	lr
 8005a20:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8005a24:	4770      	bx	lr
 8005a26:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8005a2a:	4770      	bx	lr
 8005a2c:	f36f 000d 	bfc	r0, #0, #14
 8005a30:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005a34:	2840      	cmp	r0, #64	; 0x40
 8005a36:	d009      	beq.n	8005a4c <ai_array_fmt_name+0x198>
 8005a38:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8005ee4 <.text_19>
 8005a3c:	4288      	cmp	r0, r1
 8005a3e:	d00b      	beq.n	8005a58 <ai_array_fmt_name+0x1a4>
 8005a40:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8005ee8 <.text_20>
 8005a44:	4288      	cmp	r0, r1
 8005a46:	d004      	beq.n	8005a52 <ai_array_fmt_name+0x19e>
 8005a48:	a07a      	add	r0, pc, #488	; (adr r0, 8005c34 <.text_8>)
 8005a4a:	4770      	bx	lr
 8005a4c:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8005a50:	4770      	bx	lr
 8005a52:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8005a56:	4770      	bx	lr
 8005a58:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8005a5c:	4770      	bx	lr

08005a5e <ai_array_fmt_exported>:
 8005a5e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005a62:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005a66:	d068      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005a68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005a6c:	1a89      	subs	r1, r1, r2
 8005a6e:	d064      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a74:	1a89      	subs	r1, r1, r2
 8005a76:	d062      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005a78:	1a89      	subs	r1, r1, r2
 8005a7a:	d05e      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005a7c:	1fc9      	subs	r1, r1, #7
 8005a7e:	d05c      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005a80:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005a84:	1a89      	subs	r1, r1, r2
 8005a86:	d058      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005a88:	390f      	subs	r1, #15
 8005a8a:	d056      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005a8c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005a90:	1a89      	subs	r1, r1, r2
 8005a92:	d054      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005a94:	391f      	subs	r1, #31
 8005a96:	d052      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005a98:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005a9c:	1a89      	subs	r1, r1, r2
 8005a9e:	d04e      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005aa0:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8005ed4 <.text_15>
 8005aa4:	1a89      	subs	r1, r1, r2
 8005aa6:	d04a      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005aa8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005aac:	1a89      	subs	r1, r1, r2
 8005aae:	d046      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005ab0:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8005ed8 <.text_16>
 8005ab4:	1a89      	subs	r1, r1, r2
 8005ab6:	d040      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005abc:	1a89      	subs	r1, r1, r2
 8005abe:	d03e      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005ac0:	1a89      	subs	r1, r1, r2
 8005ac2:	d03a      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005ac4:	1fc9      	subs	r1, r1, #7
 8005ac6:	d038      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005ac8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005acc:	1a89      	subs	r1, r1, r2
 8005ace:	d034      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005ad0:	390f      	subs	r1, #15
 8005ad2:	d032      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005ad4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005ad8:	1a89      	subs	r1, r1, r2
 8005ada:	d030      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005adc:	391f      	subs	r1, #31
 8005ade:	d02e      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005ae0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005ae4:	1a89      	subs	r1, r1, r2
 8005ae6:	d02a      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005ae8:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8005ed4 <.text_15>
 8005aec:	1a89      	subs	r1, r1, r2
 8005aee:	d026      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005af0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005af4:	1a89      	subs	r1, r1, r2
 8005af6:	d022      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005af8:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8005edc <.text_17>
 8005afc:	1a89      	subs	r1, r1, r2
 8005afe:	d01e      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b04:	1a89      	subs	r1, r1, r2
 8005b06:	d018      	beq.n	8005b3a <ai_array_fmt_exported+0xdc>
 8005b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b0c:	1a89      	subs	r1, r1, r2
 8005b0e:	d016      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005b10:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8005ee0 <.text_18>
 8005b14:	1a89      	subs	r1, r1, r2
 8005b16:	d012      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005b18:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b1c:	1a89      	subs	r1, r1, r2
 8005b1e:	d00e      	beq.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005b20:	f36f 000d 	bfc	r0, #0, #14
 8005b24:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005b28:	2840      	cmp	r0, #64	; 0x40
 8005b2a:	bf1f      	itttt	ne
 8005b2c:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005ee4 <.text_19>
 8005b30:	4298      	cmpne	r0, r3
 8005b32:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005ee8 <.text_20>
 8005b36:	4298      	cmpne	r0, r3
 8005b38:	d101      	bne.n	8005b3e <ai_array_fmt_exported+0xe0>
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	4770      	bx	lr
 8005b3e:	2000      	movs	r0, #0
 8005b40:	4770      	bx	lr

08005b42 <ai_array_fmt_valid>:
 8005b42:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005b46:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005b4a:	d069      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005b50:	1a89      	subs	r1, r1, r2
 8005b52:	d065      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b58:	1a89      	subs	r1, r1, r2
 8005b5a:	d061      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b5c:	1a89      	subs	r1, r1, r2
 8005b5e:	d05f      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b60:	1fc9      	subs	r1, r1, #7
 8005b62:	d05d      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b64:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005b68:	1a89      	subs	r1, r1, r2
 8005b6a:	d059      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b6c:	390f      	subs	r1, #15
 8005b6e:	d057      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b70:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005b74:	1a89      	subs	r1, r1, r2
 8005b76:	d053      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b78:	391f      	subs	r1, #31
 8005b7a:	d051      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b7c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005b80:	1a89      	subs	r1, r1, r2
 8005b82:	d04d      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b84:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8005ed4 <.text_15>
 8005b88:	1a89      	subs	r1, r1, r2
 8005b8a:	d049      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b8c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b90:	1a89      	subs	r1, r1, r2
 8005b92:	d045      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b94:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8005ed8 <.text_16>
 8005b98:	1a89      	subs	r1, r1, r2
 8005b9a:	d041      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba0:	1a89      	subs	r1, r1, r2
 8005ba2:	d03d      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005ba4:	1a89      	subs	r1, r1, r2
 8005ba6:	d03b      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005ba8:	1fc9      	subs	r1, r1, #7
 8005baa:	d039      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bac:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005bb0:	1a89      	subs	r1, r1, r2
 8005bb2:	d035      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bb4:	390f      	subs	r1, #15
 8005bb6:	d033      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bb8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005bbc:	1a89      	subs	r1, r1, r2
 8005bbe:	d02f      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bc0:	391f      	subs	r1, #31
 8005bc2:	d02d      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bc4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005bc8:	1a89      	subs	r1, r1, r2
 8005bca:	d029      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bcc:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8005ed4 <.text_15>
 8005bd0:	1a89      	subs	r1, r1, r2
 8005bd2:	d025      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bd4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005bd8:	1a89      	subs	r1, r1, r2
 8005bda:	d021      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bdc:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8005edc <.text_17>
 8005be0:	1a89      	subs	r1, r1, r2
 8005be2:	d01d      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005be8:	1a89      	subs	r1, r1, r2
 8005bea:	d019      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bf0:	1a89      	subs	r1, r1, r2
 8005bf2:	d015      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bf4:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8005ee0 <.text_18>
 8005bf8:	1a89      	subs	r1, r1, r2
 8005bfa:	d011      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005bfc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005c00:	1a89      	subs	r1, r1, r2
 8005c02:	bf1e      	ittt	ne
 8005c04:	f36f 000d 	bfcne	r0, #0, #14
 8005c08:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005c0c:	2840      	cmpne	r0, #64	; 0x40
 8005c0e:	d007      	beq.n	8005c20 <ai_array_fmt_valid+0xde>
 8005c10:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8005ee4 <.text_19>
 8005c14:	4298      	cmp	r0, r3
 8005c16:	bf1c      	itt	ne
 8005c18:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8005ee8 <.text_20>
 8005c1c:	4298      	cmpne	r0, r3
 8005c1e:	d101      	bne.n	8005c24 <ai_array_fmt_valid+0xe2>
 8005c20:	2001      	movs	r0, #1
 8005c22:	4770      	bx	lr
 8005c24:	2000      	movs	r0, #0
 8005c26:	4770      	bx	lr

08005c28 <ai_array_fmt_get_formats>:
 8005c28:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8005eec <.text_21>
 8005c2c:	6001      	str	r1, [r0, #0]
 8005c2e:	201c      	movs	r0, #28
 8005c30:	4770      	bx	lr
	...

08005c34 <.text_8>:
 8005c34:	00000000 	.word	0x00000000

08005c38 <ai_buffer_fmt_name>:
 8005c38:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005c3c:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005c40:	d022      	beq.n	8005c88 <ai_buffer_fmt_name+0x50>
 8005c42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005c46:	1a89      	subs	r1, r1, r2
 8005c48:	d039      	beq.n	8005cbe <ai_buffer_fmt_name+0x86>
 8005c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c4e:	1a89      	subs	r1, r1, r2
 8005c50:	d020      	beq.n	8005c94 <ai_buffer_fmt_name+0x5c>
 8005c52:	1fc9      	subs	r1, r1, #7
 8005c54:	d036      	beq.n	8005cc4 <ai_buffer_fmt_name+0x8c>
 8005c56:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c5a:	1a89      	subs	r1, r1, r2
 8005c5c:	d01d      	beq.n	8005c9a <ai_buffer_fmt_name+0x62>
 8005c5e:	390f      	subs	r1, #15
 8005c60:	d033      	beq.n	8005cca <ai_buffer_fmt_name+0x92>
 8005c62:	4aa3      	ldr	r2, [pc, #652]	; (8005ef0 <.text_22>)
 8005c64:	1a89      	subs	r1, r1, r2
 8005c66:	d021      	beq.n	8005cac <ai_buffer_fmt_name+0x74>
 8005c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c6c:	1a89      	subs	r1, r1, r2
 8005c6e:	d017      	beq.n	8005ca0 <ai_buffer_fmt_name+0x68>
 8005c70:	1fc9      	subs	r1, r1, #7
 8005c72:	d01e      	beq.n	8005cb2 <ai_buffer_fmt_name+0x7a>
 8005c74:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c78:	1a89      	subs	r1, r1, r2
 8005c7a:	d014      	beq.n	8005ca6 <ai_buffer_fmt_name+0x6e>
 8005c7c:	390f      	subs	r1, #15
 8005c7e:	d01b      	beq.n	8005cb8 <ai_buffer_fmt_name+0x80>
 8005c80:	4a9c      	ldr	r2, [pc, #624]	; (8005ef4 <.text_23>)
 8005c82:	1a89      	subs	r1, r1, r2
 8005c84:	d003      	beq.n	8005c8e <ai_buffer_fmt_name+0x56>
 8005c86:	e023      	b.n	8005cd0 <ai_buffer_fmt_name+0x98>
 8005c88:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8005c8c:	4770      	bx	lr
 8005c8e:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8005c92:	4770      	bx	lr
 8005c94:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8005c98:	4770      	bx	lr
 8005c9a:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8005c9e:	4770      	bx	lr
 8005ca0:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8005ca4:	4770      	bx	lr
 8005ca6:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8005caa:	4770      	bx	lr
 8005cac:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8005cb0:	4770      	bx	lr
 8005cb2:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005cb6:	4770      	bx	lr
 8005cb8:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005cbc:	4770      	bx	lr
 8005cbe:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005cc2:	4770      	bx	lr
 8005cc4:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005cc8:	4770      	bx	lr
 8005cca:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8005cce:	4770      	bx	lr
 8005cd0:	0b80      	lsrs	r0, r0, #14
 8005cd2:	0380      	lsls	r0, r0, #14
 8005cd4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005cd8:	2840      	cmp	r0, #64	; 0x40
 8005cda:	d007      	beq.n	8005cec <ai_buffer_fmt_name+0xb4>
 8005cdc:	4981      	ldr	r1, [pc, #516]	; (8005ee4 <.text_19>)
 8005cde:	4288      	cmp	r0, r1
 8005ce0:	d00a      	beq.n	8005cf8 <ai_buffer_fmt_name+0xc0>
 8005ce2:	4981      	ldr	r1, [pc, #516]	; (8005ee8 <.text_20>)
 8005ce4:	4288      	cmp	r0, r1
 8005ce6:	d004      	beq.n	8005cf2 <ai_buffer_fmt_name+0xba>
 8005ce8:	a079      	add	r0, pc, #484	; (adr r0, 8005ed0 <.text_14>)
 8005cea:	4770      	bx	lr
 8005cec:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8005cf0:	4770      	bx	lr
 8005cf2:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8005cf6:	4770      	bx	lr
 8005cf8:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8005cfc:	4770      	bx	lr

08005cfe <ai_buffer_fmt_valid>:
 8005cfe:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005d02:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005d06:	d02d      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005d0c:	1a89      	subs	r1, r1, r2
 8005d0e:	d029      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d14:	1a89      	subs	r1, r1, r2
 8005d16:	d025      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d18:	1fc9      	subs	r1, r1, #7
 8005d1a:	d023      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d1c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005d20:	1a89      	subs	r1, r1, r2
 8005d22:	d01f      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d24:	390f      	subs	r1, #15
 8005d26:	d01d      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d28:	4a71      	ldr	r2, [pc, #452]	; (8005ef0 <.text_22>)
 8005d2a:	1a89      	subs	r1, r1, r2
 8005d2c:	d01a      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d32:	1a89      	subs	r1, r1, r2
 8005d34:	d016      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d36:	1fc9      	subs	r1, r1, #7
 8005d38:	d014      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d3a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005d3e:	1a89      	subs	r1, r1, r2
 8005d40:	d010      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d42:	390f      	subs	r1, #15
 8005d44:	d00e      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d46:	4a6b      	ldr	r2, [pc, #428]	; (8005ef4 <.text_23>)
 8005d48:	1a89      	subs	r1, r1, r2
 8005d4a:	bf1f      	itttt	ne
 8005d4c:	0b80      	lsrne	r0, r0, #14
 8005d4e:	0380      	lslne	r0, r0, #14
 8005d50:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005d54:	2840      	cmpne	r0, #64	; 0x40
 8005d56:	d005      	beq.n	8005d64 <ai_buffer_fmt_valid+0x66>
 8005d58:	4b62      	ldr	r3, [pc, #392]	; (8005ee4 <.text_19>)
 8005d5a:	4298      	cmp	r0, r3
 8005d5c:	bf1c      	itt	ne
 8005d5e:	4b62      	ldrne	r3, [pc, #392]	; (8005ee8 <.text_20>)
 8005d60:	4298      	cmpne	r0, r3
 8005d62:	d101      	bne.n	8005d68 <ai_buffer_fmt_valid+0x6a>
 8005d64:	2001      	movs	r0, #1
 8005d66:	4770      	bx	lr
 8005d68:	2000      	movs	r0, #0
 8005d6a:	4770      	bx	lr

08005d6c <ai_buffer_fmt_get_formats>:
 8005d6c:	4962      	ldr	r1, [pc, #392]	; (8005ef8 <.text_24>)
 8005d6e:	6001      	str	r1, [r0, #0]
 8005d70:	200c      	movs	r0, #12
 8005d72:	4770      	bx	lr

08005d74 <ai_array_to_buffer_fmt>:
 8005d74:	4601      	mov	r1, r0
 8005d76:	2040      	movs	r0, #64	; 0x40
 8005d78:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8005d7c:	2a02      	cmp	r2, #2
 8005d7e:	d104      	bne.n	8005d8a <ai_array_to_buffer_fmt+0x16>
 8005d80:	485e      	ldr	r0, [pc, #376]	; (8005efc <.text_25>)
 8005d82:	4008      	ands	r0, r1
 8005d84:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8005d88:	e037      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005d8a:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8005d8e:	4b55      	ldr	r3, [pc, #340]	; (8005ee4 <.text_19>)
 8005d90:	1ad2      	subs	r2, r2, r3
 8005d92:	d02d      	beq.n	8005df0 <ai_array_to_buffer_fmt+0x7c>
 8005d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d98:	1ad2      	subs	r2, r2, r3
 8005d9a:	d01b      	beq.n	8005dd4 <ai_array_to_buffer_fmt+0x60>
 8005d9c:	1fd2      	subs	r2, r2, #7
 8005d9e:	d029      	beq.n	8005df4 <ai_array_to_buffer_fmt+0x80>
 8005da0:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005da4:	1ad2      	subs	r2, r2, r3
 8005da6:	d017      	beq.n	8005dd8 <ai_array_to_buffer_fmt+0x64>
 8005da8:	3a0f      	subs	r2, #15
 8005daa:	d025      	beq.n	8005df8 <ai_array_to_buffer_fmt+0x84>
 8005dac:	4b50      	ldr	r3, [pc, #320]	; (8005ef0 <.text_22>)
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	d018      	beq.n	8005de4 <ai_array_to_buffer_fmt+0x70>
 8005db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	d010      	beq.n	8005ddc <ai_array_to_buffer_fmt+0x68>
 8005dba:	1fd2      	subs	r2, r2, #7
 8005dbc:	d014      	beq.n	8005de8 <ai_array_to_buffer_fmt+0x74>
 8005dbe:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005dc2:	1ad2      	subs	r2, r2, r3
 8005dc4:	d00c      	beq.n	8005de0 <ai_array_to_buffer_fmt+0x6c>
 8005dc6:	3a0f      	subs	r2, #15
 8005dc8:	d010      	beq.n	8005dec <ai_array_to_buffer_fmt+0x78>
 8005dca:	4b4a      	ldr	r3, [pc, #296]	; (8005ef4 <.text_23>)
 8005dcc:	1ad2      	subs	r2, r2, r3
 8005dce:	d114      	bne.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005dd0:	484b      	ldr	r0, [pc, #300]	; (8005f00 <.text_26>)
 8005dd2:	e012      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005dd4:	484b      	ldr	r0, [pc, #300]	; (8005f04 <.text_27>)
 8005dd6:	e010      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005dd8:	484b      	ldr	r0, [pc, #300]	; (8005f08 <.text_28>)
 8005dda:	e00e      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005ddc:	484b      	ldr	r0, [pc, #300]	; (8005f0c <.text_29>)
 8005dde:	e00c      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005de0:	484b      	ldr	r0, [pc, #300]	; (8005f10 <.text_30>)
 8005de2:	e00a      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005de4:	4840      	ldr	r0, [pc, #256]	; (8005ee8 <.text_20>)
 8005de6:	e008      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005de8:	484a      	ldr	r0, [pc, #296]	; (8005f14 <.text_31>)
 8005dea:	e006      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005dec:	484a      	ldr	r0, [pc, #296]	; (8005f18 <.text_32>)
 8005dee:	e004      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005df0:	4618      	mov	r0, r3
 8005df2:	e002      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005df4:	4849      	ldr	r0, [pc, #292]	; (8005f1c <.text_33>)
 8005df6:	e000      	b.n	8005dfa <ai_array_to_buffer_fmt+0x86>
 8005df8:	4849      	ldr	r0, [pc, #292]	; (8005f20 <.text_34>)
 8005dfa:	004a      	lsls	r2, r1, #1
 8005dfc:	bf4c      	ite	mi
 8005dfe:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8005e02:	2200      	movpl	r2, #0
 8005e04:	4310      	orrs	r0, r2
 8005e06:	008a      	lsls	r2, r1, #2
 8005e08:	bf4c      	ite	mi
 8005e0a:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8005e0e:	2200      	movpl	r2, #0
 8005e10:	4310      	orrs	r0, r2
 8005e12:	0109      	lsls	r1, r1, #4
 8005e14:	bf4c      	ite	mi
 8005e16:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8005e1a:	2100      	movpl	r1, #0
 8005e1c:	4308      	orrs	r0, r1
 8005e1e:	4770      	bx	lr

08005e20 <ai_buffer_to_array_fmt>:
 8005e20:	4602      	mov	r2, r0
 8005e22:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8005e26:	3840      	subs	r0, #64	; 0x40
 8005e28:	d022      	beq.n	8005e70 <ai_buffer_to_array_fmt+0x50>
 8005e2a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8005e2e:	1a40      	subs	r0, r0, r1
 8005e30:	d030      	beq.n	8005e94 <ai_buffer_to_array_fmt+0x74>
 8005e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e36:	1a40      	subs	r0, r0, r1
 8005e38:	d01e      	beq.n	8005e78 <ai_buffer_to_array_fmt+0x58>
 8005e3a:	1fc0      	subs	r0, r0, #7
 8005e3c:	d02c      	beq.n	8005e98 <ai_buffer_to_array_fmt+0x78>
 8005e3e:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005e42:	1a40      	subs	r0, r0, r1
 8005e44:	d01a      	beq.n	8005e7c <ai_buffer_to_array_fmt+0x5c>
 8005e46:	380f      	subs	r0, #15
 8005e48:	d028      	beq.n	8005e9c <ai_buffer_to_array_fmt+0x7c>
 8005e4a:	4929      	ldr	r1, [pc, #164]	; (8005ef0 <.text_22>)
 8005e4c:	1a40      	subs	r0, r0, r1
 8005e4e:	d01b      	beq.n	8005e88 <ai_buffer_to_array_fmt+0x68>
 8005e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e54:	1a40      	subs	r0, r0, r1
 8005e56:	d013      	beq.n	8005e80 <ai_buffer_to_array_fmt+0x60>
 8005e58:	1fc0      	subs	r0, r0, #7
 8005e5a:	d017      	beq.n	8005e8c <ai_buffer_to_array_fmt+0x6c>
 8005e5c:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005e60:	1a40      	subs	r0, r0, r1
 8005e62:	d00f      	beq.n	8005e84 <ai_buffer_to_array_fmt+0x64>
 8005e64:	380f      	subs	r0, #15
 8005e66:	d013      	beq.n	8005e90 <ai_buffer_to_array_fmt+0x70>
 8005e68:	4922      	ldr	r1, [pc, #136]	; (8005ef4 <.text_23>)
 8005e6a:	1a40      	subs	r0, r0, r1
 8005e6c:	d002      	beq.n	8005e74 <ai_buffer_to_array_fmt+0x54>
 8005e6e:	e017      	b.n	8005ea0 <ai_buffer_to_array_fmt+0x80>
 8005e70:	2040      	movs	r0, #64	; 0x40
 8005e72:	e01f      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e74:	4822      	ldr	r0, [pc, #136]	; (8005f00 <.text_26>)
 8005e76:	e01d      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e78:	4822      	ldr	r0, [pc, #136]	; (8005f04 <.text_27>)
 8005e7a:	e01b      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e7c:	4822      	ldr	r0, [pc, #136]	; (8005f08 <.text_28>)
 8005e7e:	e019      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e80:	4822      	ldr	r0, [pc, #136]	; (8005f0c <.text_29>)
 8005e82:	e017      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e84:	4822      	ldr	r0, [pc, #136]	; (8005f10 <.text_30>)
 8005e86:	e015      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e88:	4817      	ldr	r0, [pc, #92]	; (8005ee8 <.text_20>)
 8005e8a:	e013      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e8c:	4821      	ldr	r0, [pc, #132]	; (8005f14 <.text_31>)
 8005e8e:	e011      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e90:	4821      	ldr	r0, [pc, #132]	; (8005f18 <.text_32>)
 8005e92:	e00f      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e94:	4813      	ldr	r0, [pc, #76]	; (8005ee4 <.text_19>)
 8005e96:	e00d      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e98:	4820      	ldr	r0, [pc, #128]	; (8005f1c <.text_33>)
 8005e9a:	e00b      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005e9c:	4820      	ldr	r0, [pc, #128]	; (8005f20 <.text_34>)
 8005e9e:	e009      	b.n	8005eb4 <ai_buffer_to_array_fmt+0x94>
 8005ea0:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8005ea4:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8005ea8:	2900      	cmp	r1, #0
 8005eaa:	bf14      	ite	ne
 8005eac:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8005eb0:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8005eb4:	0051      	lsls	r1, r2, #1
 8005eb6:	bf48      	it	mi
 8005eb8:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8005ebc:	0091      	lsls	r1, r2, #2
 8005ebe:	bf48      	it	mi
 8005ec0:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8005ec4:	0111      	lsls	r1, r2, #4
 8005ec6:	bf48      	it	mi
 8005ec8:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8005ecc:	4770      	bx	lr
	...

08005ed0 <.text_14>:
 8005ed0:	00000000 	.word	0x00000000

08005ed4 <.text_15>:
 8005ed4:	002be80f 	.word	0x002be80f

08005ed8 <.text_16>:
 8005ed8:	003bf7f1 	.word	0x003bf7f1

08005edc <.text_17>:
 8005edc:	00b9fff1 	.word	0x00b9fff1

08005ee0 <.text_18>:
 8005ee0:	004df000 	.word	0x004df000

08005ee4 <.text_19>:
 8005ee4:	00040040 	.word	0x00040040

08005ee8 <.text_20>:
 8005ee8:	00840040 	.word	0x00840040

08005eec <.text_21>:
 8005eec:	080153b4 	.word	0x080153b4

08005ef0 <.text_22>:
 8005ef0:	007ff7f1 	.word	0x007ff7f1

08005ef4 <.text_23>:
 8005ef4:	00fe07f1 	.word	0x00fe07f1

08005ef8 <.text_24>:
 8005ef8:	08015424 	.word	0x08015424

08005efc <.text_25>:
 8005efc:	00803fff 	.word	0x00803fff

08005f00 <.text_26>:
 8005f00:	01821040 	.word	0x01821040

08005f04 <.text_27>:
 8005f04:	00040440 	.word	0x00040440

08005f08 <.text_28>:
 8005f08:	00040840 	.word	0x00040840

08005f0c <.text_29>:
 8005f0c:	00840440 	.word	0x00840440

08005f10 <.text_30>:
 8005f10:	00840840 	.word	0x00840840

08005f14 <.text_31>:
 8005f14:	00840447 	.word	0x00840447

08005f18 <.text_32>:
 8005f18:	0084084f 	.word	0x0084084f

08005f1c <.text_33>:
 8005f1c:	00040447 	.word	0x00040447

08005f20 <.text_34>:
 8005f20:	0004084f 	.word	0x0004084f

08005f24 <ai_array_get_byte_size>:
 8005f24:	b909      	cbnz	r1, 8005f2a <ai_array_get_byte_size+0x6>
 8005f26:	2000      	movs	r0, #0
 8005f28:	4770      	bx	lr
 8005f2a:	11c2      	asrs	r2, r0, #7
 8005f2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f30:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005f34:	189b      	adds	r3, r3, r2
 8005f36:	4359      	muls	r1, r3
 8005f38:	1dc9      	adds	r1, r1, #7
 8005f3a:	08c9      	lsrs	r1, r1, #3
 8005f3c:	1543      	asrs	r3, r0, #21
 8005f3e:	00c9      	lsls	r1, r1, #3
 8005f40:	f003 0303 	and.w	r3, r3, #3
 8005f44:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8005f48:	40d9      	lsrs	r1, r3
 8005f4a:	f00c 0c0f 	and.w	ip, ip, #15
 8005f4e:	f1bc 0f04 	cmp.w	ip, #4
 8005f52:	d00a      	beq.n	8005f6a <ai_array_get_byte_size+0x46>
 8005f54:	f1bc 0f08 	cmp.w	ip, #8
 8005f58:	bf02      	ittt	eq
 8005f5a:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8005f5e:	1882      	addeq	r2, r0, r2
 8005f60:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8005f64:	1dc9      	adds	r1, r1, #7
 8005f66:	08c8      	lsrs	r0, r1, #3
 8005f68:	4770      	bx	lr
 8005f6a:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005f6e:	1882      	adds	r2, r0, r2
 8005f70:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8005f74:	1dc9      	adds	r1, r1, #7
 8005f76:	08c8      	lsrs	r0, r1, #3
 8005f78:	4770      	bx	lr

08005f7a <ai_array_get_data_byte_size>:
 8005f7a:	b909      	cbnz	r1, 8005f80 <ai_array_get_data_byte_size+0x6>
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	4770      	bx	lr
 8005f80:	11c2      	asrs	r2, r0, #7
 8005f82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f86:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005f8a:	189a      	adds	r2, r3, r2
 8005f8c:	4351      	muls	r1, r2
 8005f8e:	1dc9      	adds	r1, r1, #7
 8005f90:	08c9      	lsrs	r1, r1, #3
 8005f92:	1540      	asrs	r0, r0, #21
 8005f94:	00c9      	lsls	r1, r1, #3
 8005f96:	f000 0003 	and.w	r0, r0, #3
 8005f9a:	40c1      	lsrs	r1, r0
 8005f9c:	1dc9      	adds	r1, r1, #7
 8005f9e:	08c8      	lsrs	r0, r1, #3
 8005fa0:	4770      	bx	lr

08005fa2 <ai_array_get_elems_from_size>:
 8005fa2:	b909      	cbnz	r1, 8005fa8 <ai_array_get_elems_from_size+0x6>
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	4770      	bx	lr
 8005fa8:	1442      	asrs	r2, r0, #17
 8005faa:	00c9      	lsls	r1, r1, #3
 8005fac:	f002 020f 	and.w	r2, r2, #15
 8005fb0:	2a04      	cmp	r2, #4
 8005fb2:	d002      	beq.n	8005fba <ai_array_get_elems_from_size+0x18>
 8005fb4:	2a08      	cmp	r2, #8
 8005fb6:	d009      	beq.n	8005fcc <ai_array_get_elems_from_size+0x2a>
 8005fb8:	e010      	b.n	8005fdc <ai_array_get_elems_from_size+0x3a>
 8005fba:	11c3      	asrs	r3, r0, #7
 8005fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc0:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005fc4:	18d2      	adds	r2, r2, r3
 8005fc6:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8005fca:	e007      	b.n	8005fdc <ai_array_get_elems_from_size+0x3a>
 8005fcc:	11c2      	asrs	r2, r0, #7
 8005fce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fd2:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005fd6:	189a      	adds	r2, r3, r2
 8005fd8:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8005fdc:	1542      	asrs	r2, r0, #21
 8005fde:	f002 0203 	and.w	r2, r2, #3
 8005fe2:	4091      	lsls	r1, r2
 8005fe4:	1dc9      	adds	r1, r1, #7
 8005fe6:	11c2      	asrs	r2, r0, #7
 8005fe8:	08c9      	lsrs	r1, r1, #3
 8005fea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fee:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005ff2:	00c9      	lsls	r1, r1, #3
 8005ff4:	1880      	adds	r0, r0, r2
 8005ff6:	fbb1 f0f0 	udiv	r0, r1, r0
 8005ffa:	4770      	bx	lr

08005ffc <.text_38>:
 8005ffc:	5f544d46 	.word	0x5f544d46
 8006000:	454e4f4e 	.word	0x454e4f4e
 8006004:	00          	.byte	0x00
 8006005:	00          	.byte	0x00
	...

08006008 <.text_39>:
 8006008:	5f544d46 	.word	0x5f544d46
 800600c:	414f4c46 	.word	0x414f4c46
 8006010:	0054      	.short	0x0054
	...

08006014 <.text_40>:
 8006014:	5f544d46 	.word	0x5f544d46
 8006018:	414f4c46 	.word	0x414f4c46
 800601c:	00343654 	.word	0x00343654

08006020 <.text_41>:
 8006020:	5f544d46 	.word	0x5f544d46
 8006024:	414f4c46 	.word	0x414f4c46
 8006028:	00363154 	.word	0x00363154

0800602c <.text_42>:
 800602c:	5f544d46 	.word	0x5f544d46
 8006030:	00003855 	.word	0x00003855

08006034 <.text_43>:
 8006034:	5f544d46 	.word	0x5f544d46
 8006038:	00363155 	.word	0x00363155

0800603c <.text_44>:
 800603c:	5f544d46 	.word	0x5f544d46
 8006040:	00323355 	.word	0x00323355

08006044 <.text_45>:
 8006044:	5f544d46 	.word	0x5f544d46
 8006048:	00343655 	.word	0x00343655

0800604c <.text_46>:
 800604c:	5f544d46 	.word	0x5f544d46
 8006050:	00003455 	.word	0x00003455

08006054 <.text_47>:
 8006054:	5f544d46 	.word	0x5f544d46
 8006058:	00003853 	.word	0x00003853

0800605c <.text_48>:
 800605c:	5f544d46 	.word	0x5f544d46
 8006060:	00363153 	.word	0x00363153

08006064 <.text_49>:
 8006064:	5f544d46 	.word	0x5f544d46
 8006068:	00323353 	.word	0x00323353

0800606c <.text_50>:
 800606c:	5f544d46 	.word	0x5f544d46
 8006070:	00343653 	.word	0x00343653

08006074 <.text_51>:
 8006074:	5f544d46 	.word	0x5f544d46
 8006078:	00003453 	.word	0x00003453

0800607c <.text_52>:
 800607c:	5f544d46 	.word	0x5f544d46
 8006080:	0051      	.short	0x0051
	...

08006084 <.text_53>:
 8006084:	5f544d46 	.word	0x5f544d46
 8006088:	00003751 	.word	0x00003751

0800608c <.text_54>:
 800608c:	5f544d46 	.word	0x5f544d46
 8006090:	00353151 	.word	0x00353151

08006094 <.text_55>:
 8006094:	5f544d46 	.word	0x5f544d46
 8006098:	00313351 	.word	0x00313351

0800609c <.text_56>:
 800609c:	5f544d46 	.word	0x5f544d46
 80060a0:	00005155 	.word	0x00005155

080060a4 <.text_57>:
 80060a4:	5f544d46 	.word	0x5f544d46
 80060a8:	00375155 	.word	0x00375155

080060ac <.text_58>:
 80060ac:	5f544d46 	.word	0x5f544d46
 80060b0:	35315155 	.word	0x35315155
 80060b4:	00          	.byte	0x00
 80060b5:	00          	.byte	0x00
	...

080060b8 <.text_59>:
 80060b8:	5f544d46 	.word	0x5f544d46
 80060bc:	31335155 	.word	0x31335155
 80060c0:	00          	.byte	0x00
 80060c1:	00          	.byte	0x00
	...

080060c4 <.text_60>:
 80060c4:	5f544d46 	.word	0x5f544d46
 80060c8:	3454554c 	.word	0x3454554c
 80060cc:	4f4c465f 	.word	0x4f4c465f
 80060d0:	00005441 	.word	0x00005441

080060d4 <.text_61>:
 80060d4:	5f544d46 	.word	0x5f544d46
 80060d8:	3854554c 	.word	0x3854554c
 80060dc:	4f4c465f 	.word	0x4f4c465f
 80060e0:	00005441 	.word	0x00005441

080060e4 <.text_62>:
 80060e4:	5f544d46 	.word	0x5f544d46
 80060e8:	3454554c 	.word	0x3454554c
 80060ec:	3531515f 	.word	0x3531515f
 80060f0:	00          	.byte	0x00
 80060f1:	00          	.byte	0x00
	...

080060f4 <.text_63>:
 80060f4:	5f544d46 	.word	0x5f544d46
 80060f8:	3854554c 	.word	0x3854554c
 80060fc:	3531515f 	.word	0x3531515f
 8006100:	00          	.byte	0x00
 8006101:	00          	.byte	0x00
	...

08006104 <.text_64>:
 8006104:	5f544d46 	.word	0x5f544d46
 8006108:	3454554c 	.word	0x3454554c
 800610c:	3151555f 	.word	0x3151555f
 8006110:	0035      	.short	0x0035
	...

08006114 <.text_65>:
 8006114:	5f544d46 	.word	0x5f544d46
 8006118:	3854554c 	.word	0x3854554c
 800611c:	3151555f 	.word	0x3151555f
 8006120:	0035      	.short	0x0035
	...

08006124 <.text_66>:
 8006124:	415f4941 	.word	0x415f4941
 8006128:	59415252 	.word	0x59415252
 800612c:	524f465f 	.word	0x524f465f
 8006130:	5f54414d 	.word	0x5f54414d
 8006134:	454e4f4e 	.word	0x454e4f4e
 8006138:	00          	.byte	0x00
 8006139:	00          	.byte	0x00
	...

0800613c <.text_67>:
 800613c:	415f4941 	.word	0x415f4941
 8006140:	59415252 	.word	0x59415252
 8006144:	524f465f 	.word	0x524f465f
 8006148:	5f54414d 	.word	0x5f54414d
 800614c:	0051      	.short	0x0051
	...

08006150 <.text_68>:
 8006150:	415f4941 	.word	0x415f4941
 8006154:	59415252 	.word	0x59415252
 8006158:	524f465f 	.word	0x524f465f
 800615c:	5f54414d 	.word	0x5f54414d
 8006160:	00005155 	.word	0x00005155

08006164 <.text_69>:
 8006164:	425f4941 	.word	0x425f4941
 8006168:	45464655 	.word	0x45464655
 800616c:	4f465f52 	.word	0x4f465f52
 8006170:	54414d52 	.word	0x54414d52
 8006174:	4e4f4e5f 	.word	0x4e4f4e5f
 8006178:	0045      	.short	0x0045
	...

0800617c <.text_70>:
 800617c:	425f4941 	.word	0x425f4941
 8006180:	45464655 	.word	0x45464655
 8006184:	4f465f52 	.word	0x4f465f52
 8006188:	54414d52 	.word	0x54414d52
 800618c:	0000515f 	.word	0x0000515f

08006190 <.text_71>:
 8006190:	425f4941 	.word	0x425f4941
 8006194:	45464655 	.word	0x45464655
 8006198:	4f465f52 	.word	0x4f465f52
 800619c:	54414d52 	.word	0x54414d52
 80061a0:	0051555f 	.word	0x0051555f

080061a4 <ai_math_sqrt>:
 80061a4:	eef0 0a40 	vmov.f32	s1, s0
 80061a8:	eef5 0a40 	vcmp.f32	s1, #0.0
 80061ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b0:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8006258 <.text_12>
 80061b4:	db01      	blt.n	80061ba <ai_math_sqrt+0x16>
 80061b6:	eeb1 0ae0 	vsqrt.f32	s0, s1
 80061ba:	4770      	bx	lr

080061bc <ai_math_exp>:
 80061bc:	f00c bd7e 	b.w	8012cbc <expf>

080061c0 <ai_math_pow>:
 80061c0:	f00c bed2 	b.w	8012f68 <powf>

080061c4 <ai_math_tanh>:
 80061c4:	f00c bb54 	b.w	8012870 <tanhf>

080061c8 <ai_math_cosh>:
 80061c8:	f00c bd18 	b.w	8012bfc <coshf>

080061cc <ai_math_relu>:
 80061cc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80061d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d4:	bf48      	it	mi
 80061d6:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8006258 <.text_12>
 80061da:	4770      	bx	lr

080061dc <ai_math_prelu>:
 80061dc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80061e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e4:	bf48      	it	mi
 80061e6:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 80061ea:	4770      	bx	lr

080061ec <ai_math_sigmoid>:
 80061ec:	b500      	push	{lr}
 80061ee:	b081      	sub	sp, #4
 80061f0:	eeb1 0a40 	vneg.f32	s0, s0
 80061f4:	f00c fd62 	bl	8012cbc <expf>
 80061f8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80061fc:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006200:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006204:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006208:	b001      	add	sp, #4
 800620a:	bd00      	pop	{pc}

0800620c <ai_math_hard_sigmoid>:
 800620c:	eef0 0a40 	vmov.f32	s1, s0
 8006210:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800625c <.text_13>
 8006214:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006218:	ee00 0a81 	vmla.f32	s0, s1, s2
 800621c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006260 <.text_14>
 8006220:	eeb4 0a60 	vcmp.f32	s0, s1
 8006224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006228:	da07      	bge.n	800623a <ai_math_hard_sigmoid+0x2e>
 800622a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800622e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006232:	d504      	bpl.n	800623e <ai_math_hard_sigmoid+0x32>
 8006234:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006258 <.text_12>
 8006238:	4770      	bx	lr
 800623a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800623e:	4770      	bx	lr

08006240 <ai_math_sign>:
 8006240:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006248:	bfcc      	ite	gt
 800624a:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8006264 <.text_15>
 800624e:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8006268 <.text_16>
 8006252:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8006256:	4770      	bx	lr

08006258 <.text_12>:
 8006258:	00000000 	.word	0x00000000

0800625c <.text_13>:
 800625c:	3e4ccccd 	.word	0x3e4ccccd

08006260 <.text_14>:
 8006260:	3f800001 	.word	0x3f800001

08006264 <.text_15>:
 8006264:	00000001 	.word	0x00000001

08006268 <.text_16>:
 8006268:	ffffffff 	.word	0xffffffff

0800626c <ai_div>:
 800626c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8006270:	4770      	bx	lr

08006272 <ai_floor_div>:
 8006272:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8006276:	f00c b921 	b.w	80124bc <floorf>

0800627a <ai_floor_mod>:
 800627a:	f00c bd99 	b.w	8012db0 <fmodf>

0800627e <ai_max>:
 800627e:	eef4 0a40 	vcmp.f32	s1, s0
 8006282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006286:	bf58      	it	pl
 8006288:	eeb0 0a60 	vmovpl.f32	s0, s1
 800628c:	4770      	bx	lr

0800628e <ai_min>:
 800628e:	eeb4 0a60 	vcmp.f32	s0, s1
 8006292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006296:	bf58      	it	pl
 8006298:	eeb0 0a60 	vmovpl.f32	s0, s1
 800629c:	4770      	bx	lr

0800629e <ai_mul>:
 800629e:	ee20 0a20 	vmul.f32	s0, s0, s1
 80062a2:	4770      	bx	lr

080062a4 <ai_sub>:
 80062a4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80062a8:	4770      	bx	lr

080062aa <ai_sum>:
 80062aa:	ee30 0a20 	vadd.f32	s0, s0, s1
 80062ae:	4770      	bx	lr

080062b0 <__aeabi_memset>:
 80062b0:	b470      	push	{r4, r5, r6}
 80062b2:	0784      	lsls	r4, r0, #30
 80062b4:	d046      	beq.n	8006344 <__aeabi_memset+0x94>
 80062b6:	1e4c      	subs	r4, r1, #1
 80062b8:	2900      	cmp	r1, #0
 80062ba:	d041      	beq.n	8006340 <__aeabi_memset+0x90>
 80062bc:	b2d5      	uxtb	r5, r2
 80062be:	4603      	mov	r3, r0
 80062c0:	e002      	b.n	80062c8 <__aeabi_memset+0x18>
 80062c2:	1e61      	subs	r1, r4, #1
 80062c4:	b3e4      	cbz	r4, 8006340 <__aeabi_memset+0x90>
 80062c6:	460c      	mov	r4, r1
 80062c8:	f803 5b01 	strb.w	r5, [r3], #1
 80062cc:	0799      	lsls	r1, r3, #30
 80062ce:	d1f8      	bne.n	80062c2 <__aeabi_memset+0x12>
 80062d0:	2c03      	cmp	r4, #3
 80062d2:	d92e      	bls.n	8006332 <__aeabi_memset+0x82>
 80062d4:	b2d5      	uxtb	r5, r2
 80062d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80062da:	2c0f      	cmp	r4, #15
 80062dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80062e0:	d919      	bls.n	8006316 <__aeabi_memset+0x66>
 80062e2:	4626      	mov	r6, r4
 80062e4:	f103 0110 	add.w	r1, r3, #16
 80062e8:	3e10      	subs	r6, #16
 80062ea:	2e0f      	cmp	r6, #15
 80062ec:	f841 5c10 	str.w	r5, [r1, #-16]
 80062f0:	f841 5c0c 	str.w	r5, [r1, #-12]
 80062f4:	f841 5c08 	str.w	r5, [r1, #-8]
 80062f8:	f841 5c04 	str.w	r5, [r1, #-4]
 80062fc:	f101 0110 	add.w	r1, r1, #16
 8006300:	d8f2      	bhi.n	80062e8 <__aeabi_memset+0x38>
 8006302:	f1a4 0110 	sub.w	r1, r4, #16
 8006306:	f021 010f 	bic.w	r1, r1, #15
 800630a:	f004 040f 	and.w	r4, r4, #15
 800630e:	3110      	adds	r1, #16
 8006310:	2c03      	cmp	r4, #3
 8006312:	440b      	add	r3, r1
 8006314:	d90d      	bls.n	8006332 <__aeabi_memset+0x82>
 8006316:	461e      	mov	r6, r3
 8006318:	4621      	mov	r1, r4
 800631a:	3904      	subs	r1, #4
 800631c:	2903      	cmp	r1, #3
 800631e:	f846 5b04 	str.w	r5, [r6], #4
 8006322:	d8fa      	bhi.n	800631a <__aeabi_memset+0x6a>
 8006324:	1f21      	subs	r1, r4, #4
 8006326:	f021 0103 	bic.w	r1, r1, #3
 800632a:	3104      	adds	r1, #4
 800632c:	440b      	add	r3, r1
 800632e:	f004 0403 	and.w	r4, r4, #3
 8006332:	b12c      	cbz	r4, 8006340 <__aeabi_memset+0x90>
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	441c      	add	r4, r3
 8006338:	f803 2b01 	strb.w	r2, [r3], #1
 800633c:	42a3      	cmp	r3, r4
 800633e:	d1fb      	bne.n	8006338 <__aeabi_memset+0x88>
 8006340:	bc70      	pop	{r4, r5, r6}
 8006342:	4770      	bx	lr
 8006344:	460c      	mov	r4, r1
 8006346:	4603      	mov	r3, r0
 8006348:	e7c2      	b.n	80062d0 <__aeabi_memset+0x20>

0800634a <strlen>:
 800634a:	4603      	mov	r3, r0
 800634c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006350:	2a00      	cmp	r2, #0
 8006352:	d1fb      	bne.n	800634c <strlen+0x2>
 8006354:	1a18      	subs	r0, r3, r0
 8006356:	3801      	subs	r0, #1
 8006358:	4770      	bx	lr
 800635a:	0000      	movs	r0, r0
 800635c:	0000      	movs	r0, r0
	...

08006360 <memchr>:
 8006360:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006364:	2a10      	cmp	r2, #16
 8006366:	db2b      	blt.n	80063c0 <memchr+0x60>
 8006368:	f010 0f07 	tst.w	r0, #7
 800636c:	d008      	beq.n	8006380 <memchr+0x20>
 800636e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006372:	3a01      	subs	r2, #1
 8006374:	428b      	cmp	r3, r1
 8006376:	d02d      	beq.n	80063d4 <memchr+0x74>
 8006378:	f010 0f07 	tst.w	r0, #7
 800637c:	b342      	cbz	r2, 80063d0 <memchr+0x70>
 800637e:	d1f6      	bne.n	800636e <memchr+0xe>
 8006380:	b4f0      	push	{r4, r5, r6, r7}
 8006382:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006386:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800638a:	f022 0407 	bic.w	r4, r2, #7
 800638e:	f07f 0700 	mvns.w	r7, #0
 8006392:	2300      	movs	r3, #0
 8006394:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006398:	3c08      	subs	r4, #8
 800639a:	ea85 0501 	eor.w	r5, r5, r1
 800639e:	ea86 0601 	eor.w	r6, r6, r1
 80063a2:	fa85 f547 	uadd8	r5, r5, r7
 80063a6:	faa3 f587 	sel	r5, r3, r7
 80063aa:	fa86 f647 	uadd8	r6, r6, r7
 80063ae:	faa5 f687 	sel	r6, r5, r7
 80063b2:	b98e      	cbnz	r6, 80063d8 <memchr+0x78>
 80063b4:	d1ee      	bne.n	8006394 <memchr+0x34>
 80063b6:	bcf0      	pop	{r4, r5, r6, r7}
 80063b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80063bc:	f002 0207 	and.w	r2, r2, #7
 80063c0:	b132      	cbz	r2, 80063d0 <memchr+0x70>
 80063c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80063c6:	3a01      	subs	r2, #1
 80063c8:	ea83 0301 	eor.w	r3, r3, r1
 80063cc:	b113      	cbz	r3, 80063d4 <memchr+0x74>
 80063ce:	d1f8      	bne.n	80063c2 <memchr+0x62>
 80063d0:	2000      	movs	r0, #0
 80063d2:	4770      	bx	lr
 80063d4:	3801      	subs	r0, #1
 80063d6:	4770      	bx	lr
 80063d8:	2d00      	cmp	r5, #0
 80063da:	bf06      	itte	eq
 80063dc:	4635      	moveq	r5, r6
 80063de:	3803      	subeq	r0, #3
 80063e0:	3807      	subne	r0, #7
 80063e2:	f015 0f01 	tst.w	r5, #1
 80063e6:	d107      	bne.n	80063f8 <memchr+0x98>
 80063e8:	3001      	adds	r0, #1
 80063ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80063ee:	bf02      	ittt	eq
 80063f0:	3001      	addeq	r0, #1
 80063f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80063f6:	3001      	addeq	r0, #1
 80063f8:	bcf0      	pop	{r4, r5, r6, r7}
 80063fa:	3801      	subs	r0, #1
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop

08006400 <__aeabi_drsub>:
 8006400:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006404:	e002      	b.n	800640c <__adddf3>
 8006406:	bf00      	nop

08006408 <__aeabi_dsub>:
 8006408:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800640c <__adddf3>:
 800640c:	b530      	push	{r4, r5, lr}
 800640e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006412:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006416:	ea94 0f05 	teq	r4, r5
 800641a:	bf08      	it	eq
 800641c:	ea90 0f02 	teqeq	r0, r2
 8006420:	bf1f      	itttt	ne
 8006422:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006426:	ea55 0c02 	orrsne.w	ip, r5, r2
 800642a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800642e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006432:	f000 80e2 	beq.w	80065fa <__adddf3+0x1ee>
 8006436:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800643a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800643e:	bfb8      	it	lt
 8006440:	426d      	neglt	r5, r5
 8006442:	dd0c      	ble.n	800645e <__adddf3+0x52>
 8006444:	442c      	add	r4, r5
 8006446:	ea80 0202 	eor.w	r2, r0, r2
 800644a:	ea81 0303 	eor.w	r3, r1, r3
 800644e:	ea82 0000 	eor.w	r0, r2, r0
 8006452:	ea83 0101 	eor.w	r1, r3, r1
 8006456:	ea80 0202 	eor.w	r2, r0, r2
 800645a:	ea81 0303 	eor.w	r3, r1, r3
 800645e:	2d36      	cmp	r5, #54	; 0x36
 8006460:	bf88      	it	hi
 8006462:	bd30      	pophi	{r4, r5, pc}
 8006464:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006468:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800646c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006470:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006474:	d002      	beq.n	800647c <__adddf3+0x70>
 8006476:	4240      	negs	r0, r0
 8006478:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800647c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006480:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006484:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006488:	d002      	beq.n	8006490 <__adddf3+0x84>
 800648a:	4252      	negs	r2, r2
 800648c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006490:	ea94 0f05 	teq	r4, r5
 8006494:	f000 80a7 	beq.w	80065e6 <__adddf3+0x1da>
 8006498:	f1a4 0401 	sub.w	r4, r4, #1
 800649c:	f1d5 0e20 	rsbs	lr, r5, #32
 80064a0:	db0d      	blt.n	80064be <__adddf3+0xb2>
 80064a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80064a6:	fa22 f205 	lsr.w	r2, r2, r5
 80064aa:	1880      	adds	r0, r0, r2
 80064ac:	f141 0100 	adc.w	r1, r1, #0
 80064b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80064b4:	1880      	adds	r0, r0, r2
 80064b6:	fa43 f305 	asr.w	r3, r3, r5
 80064ba:	4159      	adcs	r1, r3
 80064bc:	e00e      	b.n	80064dc <__adddf3+0xd0>
 80064be:	f1a5 0520 	sub.w	r5, r5, #32
 80064c2:	f10e 0e20 	add.w	lr, lr, #32
 80064c6:	2a01      	cmp	r2, #1
 80064c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80064cc:	bf28      	it	cs
 80064ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80064d2:	fa43 f305 	asr.w	r3, r3, r5
 80064d6:	18c0      	adds	r0, r0, r3
 80064d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80064dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80064e0:	d507      	bpl.n	80064f2 <__adddf3+0xe6>
 80064e2:	f04f 0e00 	mov.w	lr, #0
 80064e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80064ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80064ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80064f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80064f6:	d31b      	bcc.n	8006530 <__adddf3+0x124>
 80064f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80064fc:	d30c      	bcc.n	8006518 <__adddf3+0x10c>
 80064fe:	0849      	lsrs	r1, r1, #1
 8006500:	ea5f 0030 	movs.w	r0, r0, rrx
 8006504:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006508:	f104 0401 	add.w	r4, r4, #1
 800650c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006510:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006514:	f080 809a 	bcs.w	800664c <__adddf3+0x240>
 8006518:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800651c:	bf08      	it	eq
 800651e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006522:	f150 0000 	adcs.w	r0, r0, #0
 8006526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800652a:	ea41 0105 	orr.w	r1, r1, r5
 800652e:	bd30      	pop	{r4, r5, pc}
 8006530:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006534:	4140      	adcs	r0, r0
 8006536:	eb41 0101 	adc.w	r1, r1, r1
 800653a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800653e:	f1a4 0401 	sub.w	r4, r4, #1
 8006542:	d1e9      	bne.n	8006518 <__adddf3+0x10c>
 8006544:	f091 0f00 	teq	r1, #0
 8006548:	bf04      	itt	eq
 800654a:	4601      	moveq	r1, r0
 800654c:	2000      	moveq	r0, #0
 800654e:	fab1 f381 	clz	r3, r1
 8006552:	bf08      	it	eq
 8006554:	3320      	addeq	r3, #32
 8006556:	f1a3 030b 	sub.w	r3, r3, #11
 800655a:	f1b3 0220 	subs.w	r2, r3, #32
 800655e:	da0c      	bge.n	800657a <__adddf3+0x16e>
 8006560:	320c      	adds	r2, #12
 8006562:	dd08      	ble.n	8006576 <__adddf3+0x16a>
 8006564:	f102 0c14 	add.w	ip, r2, #20
 8006568:	f1c2 020c 	rsb	r2, r2, #12
 800656c:	fa01 f00c 	lsl.w	r0, r1, ip
 8006570:	fa21 f102 	lsr.w	r1, r1, r2
 8006574:	e00c      	b.n	8006590 <__adddf3+0x184>
 8006576:	f102 0214 	add.w	r2, r2, #20
 800657a:	bfd8      	it	le
 800657c:	f1c2 0c20 	rsble	ip, r2, #32
 8006580:	fa01 f102 	lsl.w	r1, r1, r2
 8006584:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006588:	bfdc      	itt	le
 800658a:	ea41 010c 	orrle.w	r1, r1, ip
 800658e:	4090      	lslle	r0, r2
 8006590:	1ae4      	subs	r4, r4, r3
 8006592:	bfa2      	ittt	ge
 8006594:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006598:	4329      	orrge	r1, r5
 800659a:	bd30      	popge	{r4, r5, pc}
 800659c:	ea6f 0404 	mvn.w	r4, r4
 80065a0:	3c1f      	subs	r4, #31
 80065a2:	da1c      	bge.n	80065de <__adddf3+0x1d2>
 80065a4:	340c      	adds	r4, #12
 80065a6:	dc0e      	bgt.n	80065c6 <__adddf3+0x1ba>
 80065a8:	f104 0414 	add.w	r4, r4, #20
 80065ac:	f1c4 0220 	rsb	r2, r4, #32
 80065b0:	fa20 f004 	lsr.w	r0, r0, r4
 80065b4:	fa01 f302 	lsl.w	r3, r1, r2
 80065b8:	ea40 0003 	orr.w	r0, r0, r3
 80065bc:	fa21 f304 	lsr.w	r3, r1, r4
 80065c0:	ea45 0103 	orr.w	r1, r5, r3
 80065c4:	bd30      	pop	{r4, r5, pc}
 80065c6:	f1c4 040c 	rsb	r4, r4, #12
 80065ca:	f1c4 0220 	rsb	r2, r4, #32
 80065ce:	fa20 f002 	lsr.w	r0, r0, r2
 80065d2:	fa01 f304 	lsl.w	r3, r1, r4
 80065d6:	ea40 0003 	orr.w	r0, r0, r3
 80065da:	4629      	mov	r1, r5
 80065dc:	bd30      	pop	{r4, r5, pc}
 80065de:	fa21 f004 	lsr.w	r0, r1, r4
 80065e2:	4629      	mov	r1, r5
 80065e4:	bd30      	pop	{r4, r5, pc}
 80065e6:	f094 0f00 	teq	r4, #0
 80065ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80065ee:	bf06      	itte	eq
 80065f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80065f4:	3401      	addeq	r4, #1
 80065f6:	3d01      	subne	r5, #1
 80065f8:	e74e      	b.n	8006498 <__adddf3+0x8c>
 80065fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80065fe:	bf18      	it	ne
 8006600:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006604:	d029      	beq.n	800665a <__adddf3+0x24e>
 8006606:	ea94 0f05 	teq	r4, r5
 800660a:	bf08      	it	eq
 800660c:	ea90 0f02 	teqeq	r0, r2
 8006610:	d005      	beq.n	800661e <__adddf3+0x212>
 8006612:	ea54 0c00 	orrs.w	ip, r4, r0
 8006616:	bf04      	itt	eq
 8006618:	4619      	moveq	r1, r3
 800661a:	4610      	moveq	r0, r2
 800661c:	bd30      	pop	{r4, r5, pc}
 800661e:	ea91 0f03 	teq	r1, r3
 8006622:	bf1e      	ittt	ne
 8006624:	2100      	movne	r1, #0
 8006626:	2000      	movne	r0, #0
 8006628:	bd30      	popne	{r4, r5, pc}
 800662a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800662e:	d105      	bne.n	800663c <__adddf3+0x230>
 8006630:	0040      	lsls	r0, r0, #1
 8006632:	4149      	adcs	r1, r1
 8006634:	bf28      	it	cs
 8006636:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800663a:	bd30      	pop	{r4, r5, pc}
 800663c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006640:	bf3c      	itt	cc
 8006642:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006646:	bd30      	popcc	{r4, r5, pc}
 8006648:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800664c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006650:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006654:	f04f 0000 	mov.w	r0, #0
 8006658:	bd30      	pop	{r4, r5, pc}
 800665a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800665e:	bf1a      	itte	ne
 8006660:	4619      	movne	r1, r3
 8006662:	4610      	movne	r0, r2
 8006664:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006668:	bf1c      	itt	ne
 800666a:	460b      	movne	r3, r1
 800666c:	4602      	movne	r2, r0
 800666e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006672:	bf06      	itte	eq
 8006674:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006678:	ea91 0f03 	teqeq	r1, r3
 800667c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006680:	bd30      	pop	{r4, r5, pc}
 8006682:	bf00      	nop

08006684 <__aeabi_ui2d>:
 8006684:	f090 0f00 	teq	r0, #0
 8006688:	bf04      	itt	eq
 800668a:	2100      	moveq	r1, #0
 800668c:	4770      	bxeq	lr
 800668e:	b530      	push	{r4, r5, lr}
 8006690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006698:	f04f 0500 	mov.w	r5, #0
 800669c:	f04f 0100 	mov.w	r1, #0
 80066a0:	e750      	b.n	8006544 <__adddf3+0x138>
 80066a2:	bf00      	nop

080066a4 <__aeabi_i2d>:
 80066a4:	f090 0f00 	teq	r0, #0
 80066a8:	bf04      	itt	eq
 80066aa:	2100      	moveq	r1, #0
 80066ac:	4770      	bxeq	lr
 80066ae:	b530      	push	{r4, r5, lr}
 80066b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80066b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80066b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80066bc:	bf48      	it	mi
 80066be:	4240      	negmi	r0, r0
 80066c0:	f04f 0100 	mov.w	r1, #0
 80066c4:	e73e      	b.n	8006544 <__adddf3+0x138>
 80066c6:	bf00      	nop

080066c8 <__aeabi_f2d>:
 80066c8:	0042      	lsls	r2, r0, #1
 80066ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80066ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80066d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80066d6:	bf1f      	itttt	ne
 80066d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80066dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80066e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80066e4:	4770      	bxne	lr
 80066e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80066ea:	bf08      	it	eq
 80066ec:	4770      	bxeq	lr
 80066ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80066f2:	bf04      	itt	eq
 80066f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80066f8:	4770      	bxeq	lr
 80066fa:	b530      	push	{r4, r5, lr}
 80066fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006708:	e71c      	b.n	8006544 <__adddf3+0x138>
 800670a:	bf00      	nop

0800670c <__aeabi_ul2d>:
 800670c:	ea50 0201 	orrs.w	r2, r0, r1
 8006710:	bf08      	it	eq
 8006712:	4770      	bxeq	lr
 8006714:	b530      	push	{r4, r5, lr}
 8006716:	f04f 0500 	mov.w	r5, #0
 800671a:	e00a      	b.n	8006732 <__aeabi_l2d+0x16>

0800671c <__aeabi_l2d>:
 800671c:	ea50 0201 	orrs.w	r2, r0, r1
 8006720:	bf08      	it	eq
 8006722:	4770      	bxeq	lr
 8006724:	b530      	push	{r4, r5, lr}
 8006726:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800672a:	d502      	bpl.n	8006732 <__aeabi_l2d+0x16>
 800672c:	4240      	negs	r0, r0
 800672e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006732:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006736:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800673a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800673e:	f43f aed8 	beq.w	80064f2 <__adddf3+0xe6>
 8006742:	f04f 0203 	mov.w	r2, #3
 8006746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800674a:	bf18      	it	ne
 800674c:	3203      	addne	r2, #3
 800674e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006752:	bf18      	it	ne
 8006754:	3203      	addne	r2, #3
 8006756:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800675a:	f1c2 0320 	rsb	r3, r2, #32
 800675e:	fa00 fc03 	lsl.w	ip, r0, r3
 8006762:	fa20 f002 	lsr.w	r0, r0, r2
 8006766:	fa01 fe03 	lsl.w	lr, r1, r3
 800676a:	ea40 000e 	orr.w	r0, r0, lr
 800676e:	fa21 f102 	lsr.w	r1, r1, r2
 8006772:	4414      	add	r4, r2
 8006774:	e6bd      	b.n	80064f2 <__adddf3+0xe6>
 8006776:	bf00      	nop

08006778 <__aeabi_dmul>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800677e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006782:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006786:	bf1d      	ittte	ne
 8006788:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800678c:	ea94 0f0c 	teqne	r4, ip
 8006790:	ea95 0f0c 	teqne	r5, ip
 8006794:	f000 f8de 	bleq	8006954 <__aeabi_dmul+0x1dc>
 8006798:	442c      	add	r4, r5
 800679a:	ea81 0603 	eor.w	r6, r1, r3
 800679e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80067a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80067a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80067aa:	bf18      	it	ne
 80067ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80067b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80067b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067b8:	d038      	beq.n	800682c <__aeabi_dmul+0xb4>
 80067ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80067be:	f04f 0500 	mov.w	r5, #0
 80067c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80067c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80067ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80067ce:	f04f 0600 	mov.w	r6, #0
 80067d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80067d6:	f09c 0f00 	teq	ip, #0
 80067da:	bf18      	it	ne
 80067dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80067e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80067e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80067e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80067ec:	d204      	bcs.n	80067f8 <__aeabi_dmul+0x80>
 80067ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80067f2:	416d      	adcs	r5, r5
 80067f4:	eb46 0606 	adc.w	r6, r6, r6
 80067f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80067fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006800:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006804:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006808:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800680c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006810:	bf88      	it	hi
 8006812:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006816:	d81e      	bhi.n	8006856 <__aeabi_dmul+0xde>
 8006818:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800681c:	bf08      	it	eq
 800681e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006822:	f150 0000 	adcs.w	r0, r0, #0
 8006826:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006830:	ea46 0101 	orr.w	r1, r6, r1
 8006834:	ea40 0002 	orr.w	r0, r0, r2
 8006838:	ea81 0103 	eor.w	r1, r1, r3
 800683c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006840:	bfc2      	ittt	gt
 8006842:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006846:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800684a:	bd70      	popgt	{r4, r5, r6, pc}
 800684c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006850:	f04f 0e00 	mov.w	lr, #0
 8006854:	3c01      	subs	r4, #1
 8006856:	f300 80ab 	bgt.w	80069b0 <__aeabi_dmul+0x238>
 800685a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800685e:	bfde      	ittt	le
 8006860:	2000      	movle	r0, #0
 8006862:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006866:	bd70      	pople	{r4, r5, r6, pc}
 8006868:	f1c4 0400 	rsb	r4, r4, #0
 800686c:	3c20      	subs	r4, #32
 800686e:	da35      	bge.n	80068dc <__aeabi_dmul+0x164>
 8006870:	340c      	adds	r4, #12
 8006872:	dc1b      	bgt.n	80068ac <__aeabi_dmul+0x134>
 8006874:	f104 0414 	add.w	r4, r4, #20
 8006878:	f1c4 0520 	rsb	r5, r4, #32
 800687c:	fa00 f305 	lsl.w	r3, r0, r5
 8006880:	fa20 f004 	lsr.w	r0, r0, r4
 8006884:	fa01 f205 	lsl.w	r2, r1, r5
 8006888:	ea40 0002 	orr.w	r0, r0, r2
 800688c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006894:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006898:	fa21 f604 	lsr.w	r6, r1, r4
 800689c:	eb42 0106 	adc.w	r1, r2, r6
 80068a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80068a4:	bf08      	it	eq
 80068a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	f1c4 040c 	rsb	r4, r4, #12
 80068b0:	f1c4 0520 	rsb	r5, r4, #32
 80068b4:	fa00 f304 	lsl.w	r3, r0, r4
 80068b8:	fa20 f005 	lsr.w	r0, r0, r5
 80068bc:	fa01 f204 	lsl.w	r2, r1, r4
 80068c0:	ea40 0002 	orr.w	r0, r0, r2
 80068c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80068c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80068cc:	f141 0100 	adc.w	r1, r1, #0
 80068d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80068d4:	bf08      	it	eq
 80068d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	f1c4 0520 	rsb	r5, r4, #32
 80068e0:	fa00 f205 	lsl.w	r2, r0, r5
 80068e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80068e8:	fa20 f304 	lsr.w	r3, r0, r4
 80068ec:	fa01 f205 	lsl.w	r2, r1, r5
 80068f0:	ea43 0302 	orr.w	r3, r3, r2
 80068f4:	fa21 f004 	lsr.w	r0, r1, r4
 80068f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80068fc:	fa21 f204 	lsr.w	r2, r1, r4
 8006900:	ea20 0002 	bic.w	r0, r0, r2
 8006904:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006908:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800690c:	bf08      	it	eq
 800690e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	f094 0f00 	teq	r4, #0
 8006918:	d10f      	bne.n	800693a <__aeabi_dmul+0x1c2>
 800691a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800691e:	0040      	lsls	r0, r0, #1
 8006920:	eb41 0101 	adc.w	r1, r1, r1
 8006924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006928:	bf08      	it	eq
 800692a:	3c01      	subeq	r4, #1
 800692c:	d0f7      	beq.n	800691e <__aeabi_dmul+0x1a6>
 800692e:	ea41 0106 	orr.w	r1, r1, r6
 8006932:	f095 0f00 	teq	r5, #0
 8006936:	bf18      	it	ne
 8006938:	4770      	bxne	lr
 800693a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800693e:	0052      	lsls	r2, r2, #1
 8006940:	eb43 0303 	adc.w	r3, r3, r3
 8006944:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006948:	bf08      	it	eq
 800694a:	3d01      	subeq	r5, #1
 800694c:	d0f7      	beq.n	800693e <__aeabi_dmul+0x1c6>
 800694e:	ea43 0306 	orr.w	r3, r3, r6
 8006952:	4770      	bx	lr
 8006954:	ea94 0f0c 	teq	r4, ip
 8006958:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800695c:	bf18      	it	ne
 800695e:	ea95 0f0c 	teqne	r5, ip
 8006962:	d00c      	beq.n	800697e <__aeabi_dmul+0x206>
 8006964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006968:	bf18      	it	ne
 800696a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800696e:	d1d1      	bne.n	8006914 <__aeabi_dmul+0x19c>
 8006970:	ea81 0103 	eor.w	r1, r1, r3
 8006974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006978:	f04f 0000 	mov.w	r0, #0
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006982:	bf06      	itte	eq
 8006984:	4610      	moveq	r0, r2
 8006986:	4619      	moveq	r1, r3
 8006988:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800698c:	d019      	beq.n	80069c2 <__aeabi_dmul+0x24a>
 800698e:	ea94 0f0c 	teq	r4, ip
 8006992:	d102      	bne.n	800699a <__aeabi_dmul+0x222>
 8006994:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006998:	d113      	bne.n	80069c2 <__aeabi_dmul+0x24a>
 800699a:	ea95 0f0c 	teq	r5, ip
 800699e:	d105      	bne.n	80069ac <__aeabi_dmul+0x234>
 80069a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80069a4:	bf1c      	itt	ne
 80069a6:	4610      	movne	r0, r2
 80069a8:	4619      	movne	r1, r3
 80069aa:	d10a      	bne.n	80069c2 <__aeabi_dmul+0x24a>
 80069ac:	ea81 0103 	eor.w	r1, r1, r3
 80069b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80069b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80069b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069bc:	f04f 0000 	mov.w	r0, #0
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
 80069c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80069c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80069ca:	bd70      	pop	{r4, r5, r6, pc}

080069cc <__aeabi_ddiv>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80069d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80069d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80069da:	bf1d      	ittte	ne
 80069dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80069e0:	ea94 0f0c 	teqne	r4, ip
 80069e4:	ea95 0f0c 	teqne	r5, ip
 80069e8:	f000 f8a7 	bleq	8006b3a <__aeabi_ddiv+0x16e>
 80069ec:	eba4 0405 	sub.w	r4, r4, r5
 80069f0:	ea81 0e03 	eor.w	lr, r1, r3
 80069f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80069f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80069fc:	f000 8088 	beq.w	8006b10 <__aeabi_ddiv+0x144>
 8006a00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006a04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006a08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006a0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006a10:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006a14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006a18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006a1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006a20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006a24:	429d      	cmp	r5, r3
 8006a26:	bf08      	it	eq
 8006a28:	4296      	cmpeq	r6, r2
 8006a2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006a2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006a32:	d202      	bcs.n	8006a3a <__aeabi_ddiv+0x6e>
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a3a:	1ab6      	subs	r6, r6, r2
 8006a3c:	eb65 0503 	sbc.w	r5, r5, r3
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006a4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006a4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a56:	bf22      	ittt	cs
 8006a58:	1ab6      	subcs	r6, r6, r2
 8006a5a:	4675      	movcs	r5, lr
 8006a5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a66:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a6e:	bf22      	ittt	cs
 8006a70:	1ab6      	subcs	r6, r6, r2
 8006a72:	4675      	movcs	r5, lr
 8006a74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006a78:	085b      	lsrs	r3, r3, #1
 8006a7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a86:	bf22      	ittt	cs
 8006a88:	1ab6      	subcs	r6, r6, r2
 8006a8a:	4675      	movcs	r5, lr
 8006a8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006a90:	085b      	lsrs	r3, r3, #1
 8006a92:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a96:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a9e:	bf22      	ittt	cs
 8006aa0:	1ab6      	subcs	r6, r6, r2
 8006aa2:	4675      	movcs	r5, lr
 8006aa4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006aa8:	ea55 0e06 	orrs.w	lr, r5, r6
 8006aac:	d018      	beq.n	8006ae0 <__aeabi_ddiv+0x114>
 8006aae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006ab2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006ab6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006aba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006abe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006ac2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006ac6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006aca:	d1c0      	bne.n	8006a4e <__aeabi_ddiv+0x82>
 8006acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ad0:	d10b      	bne.n	8006aea <__aeabi_ddiv+0x11e>
 8006ad2:	ea41 0100 	orr.w	r1, r1, r0
 8006ad6:	f04f 0000 	mov.w	r0, #0
 8006ada:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006ade:	e7b6      	b.n	8006a4e <__aeabi_ddiv+0x82>
 8006ae0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ae4:	bf04      	itt	eq
 8006ae6:	4301      	orreq	r1, r0
 8006ae8:	2000      	moveq	r0, #0
 8006aea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006aee:	bf88      	it	hi
 8006af0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006af4:	f63f aeaf 	bhi.w	8006856 <__aeabi_dmul+0xde>
 8006af8:	ebb5 0c03 	subs.w	ip, r5, r3
 8006afc:	bf04      	itt	eq
 8006afe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006b02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006b06:	f150 0000 	adcs.w	r0, r0, #0
 8006b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006b14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006b18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006b1c:	bfc2      	ittt	gt
 8006b1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006b22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006b26:	bd70      	popgt	{r4, r5, r6, pc}
 8006b28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006b2c:	f04f 0e00 	mov.w	lr, #0
 8006b30:	3c01      	subs	r4, #1
 8006b32:	e690      	b.n	8006856 <__aeabi_dmul+0xde>
 8006b34:	ea45 0e06 	orr.w	lr, r5, r6
 8006b38:	e68d      	b.n	8006856 <__aeabi_dmul+0xde>
 8006b3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006b3e:	ea94 0f0c 	teq	r4, ip
 8006b42:	bf08      	it	eq
 8006b44:	ea95 0f0c 	teqeq	r5, ip
 8006b48:	f43f af3b 	beq.w	80069c2 <__aeabi_dmul+0x24a>
 8006b4c:	ea94 0f0c 	teq	r4, ip
 8006b50:	d10a      	bne.n	8006b68 <__aeabi_ddiv+0x19c>
 8006b52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006b56:	f47f af34 	bne.w	80069c2 <__aeabi_dmul+0x24a>
 8006b5a:	ea95 0f0c 	teq	r5, ip
 8006b5e:	f47f af25 	bne.w	80069ac <__aeabi_dmul+0x234>
 8006b62:	4610      	mov	r0, r2
 8006b64:	4619      	mov	r1, r3
 8006b66:	e72c      	b.n	80069c2 <__aeabi_dmul+0x24a>
 8006b68:	ea95 0f0c 	teq	r5, ip
 8006b6c:	d106      	bne.n	8006b7c <__aeabi_ddiv+0x1b0>
 8006b6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006b72:	f43f aefd 	beq.w	8006970 <__aeabi_dmul+0x1f8>
 8006b76:	4610      	mov	r0, r2
 8006b78:	4619      	mov	r1, r3
 8006b7a:	e722      	b.n	80069c2 <__aeabi_dmul+0x24a>
 8006b7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006b80:	bf18      	it	ne
 8006b82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006b86:	f47f aec5 	bne.w	8006914 <__aeabi_dmul+0x19c>
 8006b8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006b8e:	f47f af0d 	bne.w	80069ac <__aeabi_dmul+0x234>
 8006b92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006b96:	f47f aeeb 	bne.w	8006970 <__aeabi_dmul+0x1f8>
 8006b9a:	e712      	b.n	80069c2 <__aeabi_dmul+0x24a>

08006b9c <__gedf2>:
 8006b9c:	f04f 3cff 	mov.w	ip, #4294967295
 8006ba0:	e006      	b.n	8006bb0 <__cmpdf2+0x4>
 8006ba2:	bf00      	nop

08006ba4 <__ledf2>:
 8006ba4:	f04f 0c01 	mov.w	ip, #1
 8006ba8:	e002      	b.n	8006bb0 <__cmpdf2+0x4>
 8006baa:	bf00      	nop

08006bac <__cmpdf2>:
 8006bac:	f04f 0c01 	mov.w	ip, #1
 8006bb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006bb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006bbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006bc0:	bf18      	it	ne
 8006bc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006bc6:	d01b      	beq.n	8006c00 <__cmpdf2+0x54>
 8006bc8:	b001      	add	sp, #4
 8006bca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006bce:	bf0c      	ite	eq
 8006bd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006bd4:	ea91 0f03 	teqne	r1, r3
 8006bd8:	bf02      	ittt	eq
 8006bda:	ea90 0f02 	teqeq	r0, r2
 8006bde:	2000      	moveq	r0, #0
 8006be0:	4770      	bxeq	lr
 8006be2:	f110 0f00 	cmn.w	r0, #0
 8006be6:	ea91 0f03 	teq	r1, r3
 8006bea:	bf58      	it	pl
 8006bec:	4299      	cmppl	r1, r3
 8006bee:	bf08      	it	eq
 8006bf0:	4290      	cmpeq	r0, r2
 8006bf2:	bf2c      	ite	cs
 8006bf4:	17d8      	asrcs	r0, r3, #31
 8006bf6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006bfa:	f040 0001 	orr.w	r0, r0, #1
 8006bfe:	4770      	bx	lr
 8006c00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006c04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c08:	d102      	bne.n	8006c10 <__cmpdf2+0x64>
 8006c0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006c0e:	d107      	bne.n	8006c20 <__cmpdf2+0x74>
 8006c10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006c14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c18:	d1d6      	bne.n	8006bc8 <__cmpdf2+0x1c>
 8006c1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006c1e:	d0d3      	beq.n	8006bc8 <__cmpdf2+0x1c>
 8006c20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <__aeabi_cdrcmple>:
 8006c28:	4684      	mov	ip, r0
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4662      	mov	r2, ip
 8006c2e:	468c      	mov	ip, r1
 8006c30:	4619      	mov	r1, r3
 8006c32:	4663      	mov	r3, ip
 8006c34:	e000      	b.n	8006c38 <__aeabi_cdcmpeq>
 8006c36:	bf00      	nop

08006c38 <__aeabi_cdcmpeq>:
 8006c38:	b501      	push	{r0, lr}
 8006c3a:	f7ff ffb7 	bl	8006bac <__cmpdf2>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	bf48      	it	mi
 8006c42:	f110 0f00 	cmnmi.w	r0, #0
 8006c46:	bd01      	pop	{r0, pc}

08006c48 <__aeabi_dcmpeq>:
 8006c48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c4c:	f7ff fff4 	bl	8006c38 <__aeabi_cdcmpeq>
 8006c50:	bf0c      	ite	eq
 8006c52:	2001      	moveq	r0, #1
 8006c54:	2000      	movne	r0, #0
 8006c56:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c5a:	bf00      	nop

08006c5c <__aeabi_dcmplt>:
 8006c5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c60:	f7ff ffea 	bl	8006c38 <__aeabi_cdcmpeq>
 8006c64:	bf34      	ite	cc
 8006c66:	2001      	movcc	r0, #1
 8006c68:	2000      	movcs	r0, #0
 8006c6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c6e:	bf00      	nop

08006c70 <__aeabi_dcmple>:
 8006c70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c74:	f7ff ffe0 	bl	8006c38 <__aeabi_cdcmpeq>
 8006c78:	bf94      	ite	ls
 8006c7a:	2001      	movls	r0, #1
 8006c7c:	2000      	movhi	r0, #0
 8006c7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c82:	bf00      	nop

08006c84 <__aeabi_dcmpge>:
 8006c84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c88:	f7ff ffce 	bl	8006c28 <__aeabi_cdrcmple>
 8006c8c:	bf94      	ite	ls
 8006c8e:	2001      	movls	r0, #1
 8006c90:	2000      	movhi	r0, #0
 8006c92:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c96:	bf00      	nop

08006c98 <__aeabi_dcmpgt>:
 8006c98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c9c:	f7ff ffc4 	bl	8006c28 <__aeabi_cdrcmple>
 8006ca0:	bf34      	ite	cc
 8006ca2:	2001      	movcc	r0, #1
 8006ca4:	2000      	movcs	r0, #0
 8006ca6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006caa:	bf00      	nop

08006cac <__aeabi_dcmpun>:
 8006cac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006cb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006cb4:	d102      	bne.n	8006cbc <__aeabi_dcmpun+0x10>
 8006cb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006cba:	d10a      	bne.n	8006cd2 <__aeabi_dcmpun+0x26>
 8006cbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006cc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006cc4:	d102      	bne.n	8006ccc <__aeabi_dcmpun+0x20>
 8006cc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006cca:	d102      	bne.n	8006cd2 <__aeabi_dcmpun+0x26>
 8006ccc:	f04f 0000 	mov.w	r0, #0
 8006cd0:	4770      	bx	lr
 8006cd2:	f04f 0001 	mov.w	r0, #1
 8006cd6:	4770      	bx	lr

08006cd8 <__aeabi_d2iz>:
 8006cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006cdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006ce0:	d215      	bcs.n	8006d0e <__aeabi_d2iz+0x36>
 8006ce2:	d511      	bpl.n	8006d08 <__aeabi_d2iz+0x30>
 8006ce4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006ce8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006cec:	d912      	bls.n	8006d14 <__aeabi_d2iz+0x3c>
 8006cee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006cfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006cfe:	fa23 f002 	lsr.w	r0, r3, r2
 8006d02:	bf18      	it	ne
 8006d04:	4240      	negne	r0, r0
 8006d06:	4770      	bx	lr
 8006d08:	f04f 0000 	mov.w	r0, #0
 8006d0c:	4770      	bx	lr
 8006d0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006d12:	d105      	bne.n	8006d20 <__aeabi_d2iz+0x48>
 8006d14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006d18:	bf08      	it	eq
 8006d1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006d1e:	4770      	bx	lr
 8006d20:	f04f 0000 	mov.w	r0, #0
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop

08006d28 <__aeabi_d2f>:
 8006d28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006d2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006d30:	bf24      	itt	cs
 8006d32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006d36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006d3a:	d90d      	bls.n	8006d58 <__aeabi_d2f+0x30>
 8006d3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006d40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006d44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006d48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006d4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006d50:	bf08      	it	eq
 8006d52:	f020 0001 	biceq.w	r0, r0, #1
 8006d56:	4770      	bx	lr
 8006d58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006d5c:	d121      	bne.n	8006da2 <__aeabi_d2f+0x7a>
 8006d5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006d62:	bfbc      	itt	lt
 8006d64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006d68:	4770      	bxlt	lr
 8006d6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006d72:	f1c2 0218 	rsb	r2, r2, #24
 8006d76:	f1c2 0c20 	rsb	ip, r2, #32
 8006d7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8006d7e:	fa20 f002 	lsr.w	r0, r0, r2
 8006d82:	bf18      	it	ne
 8006d84:	f040 0001 	orrne.w	r0, r0, #1
 8006d88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006d8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006d90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006d94:	ea40 000c 	orr.w	r0, r0, ip
 8006d98:	fa23 f302 	lsr.w	r3, r3, r2
 8006d9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006da0:	e7cc      	b.n	8006d3c <__aeabi_d2f+0x14>
 8006da2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006da6:	d107      	bne.n	8006db8 <__aeabi_d2f+0x90>
 8006da8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006dac:	bf1e      	ittt	ne
 8006dae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006db2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006db6:	4770      	bxne	lr
 8006db8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006dbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006dc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop

08006dc8 <__aeabi_uldivmod>:
 8006dc8:	b953      	cbnz	r3, 8006de0 <__aeabi_uldivmod+0x18>
 8006dca:	b94a      	cbnz	r2, 8006de0 <__aeabi_uldivmod+0x18>
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	bf08      	it	eq
 8006dd0:	2800      	cmpeq	r0, #0
 8006dd2:	bf1c      	itt	ne
 8006dd4:	f04f 31ff 	movne.w	r1, #4294967295
 8006dd8:	f04f 30ff 	movne.w	r0, #4294967295
 8006ddc:	f000 b972 	b.w	80070c4 <__aeabi_idiv0>
 8006de0:	f1ad 0c08 	sub.w	ip, sp, #8
 8006de4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006de8:	f000 f806 	bl	8006df8 <__udivmoddi4>
 8006dec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006df0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006df4:	b004      	add	sp, #16
 8006df6:	4770      	bx	lr

08006df8 <__udivmoddi4>:
 8006df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	9e08      	ldr	r6, [sp, #32]
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4688      	mov	r8, r1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d14b      	bne.n	8006e9e <__udivmoddi4+0xa6>
 8006e06:	428a      	cmp	r2, r1
 8006e08:	4615      	mov	r5, r2
 8006e0a:	d967      	bls.n	8006edc <__udivmoddi4+0xe4>
 8006e0c:	fab2 f282 	clz	r2, r2
 8006e10:	b14a      	cbz	r2, 8006e26 <__udivmoddi4+0x2e>
 8006e12:	f1c2 0720 	rsb	r7, r2, #32
 8006e16:	fa01 f302 	lsl.w	r3, r1, r2
 8006e1a:	fa20 f707 	lsr.w	r7, r0, r7
 8006e1e:	4095      	lsls	r5, r2
 8006e20:	ea47 0803 	orr.w	r8, r7, r3
 8006e24:	4094      	lsls	r4, r2
 8006e26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006e2a:	0c23      	lsrs	r3, r4, #16
 8006e2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8006e30:	fa1f fc85 	uxth.w	ip, r5
 8006e34:	fb0e 8817 	mls	r8, lr, r7, r8
 8006e38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006e3c:	fb07 f10c 	mul.w	r1, r7, ip
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d909      	bls.n	8006e58 <__udivmoddi4+0x60>
 8006e44:	18eb      	adds	r3, r5, r3
 8006e46:	f107 30ff 	add.w	r0, r7, #4294967295
 8006e4a:	f080 811b 	bcs.w	8007084 <__udivmoddi4+0x28c>
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	f240 8118 	bls.w	8007084 <__udivmoddi4+0x28c>
 8006e54:	3f02      	subs	r7, #2
 8006e56:	442b      	add	r3, r5
 8006e58:	1a5b      	subs	r3, r3, r1
 8006e5a:	b2a4      	uxth	r4, r4
 8006e5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8006e60:	fb0e 3310 	mls	r3, lr, r0, r3
 8006e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006e68:	fb00 fc0c 	mul.w	ip, r0, ip
 8006e6c:	45a4      	cmp	ip, r4
 8006e6e:	d909      	bls.n	8006e84 <__udivmoddi4+0x8c>
 8006e70:	192c      	adds	r4, r5, r4
 8006e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e76:	f080 8107 	bcs.w	8007088 <__udivmoddi4+0x290>
 8006e7a:	45a4      	cmp	ip, r4
 8006e7c:	f240 8104 	bls.w	8007088 <__udivmoddi4+0x290>
 8006e80:	3802      	subs	r0, #2
 8006e82:	442c      	add	r4, r5
 8006e84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006e88:	eba4 040c 	sub.w	r4, r4, ip
 8006e8c:	2700      	movs	r7, #0
 8006e8e:	b11e      	cbz	r6, 8006e98 <__udivmoddi4+0xa0>
 8006e90:	40d4      	lsrs	r4, r2
 8006e92:	2300      	movs	r3, #0
 8006e94:	e9c6 4300 	strd	r4, r3, [r6]
 8006e98:	4639      	mov	r1, r7
 8006e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9e:	428b      	cmp	r3, r1
 8006ea0:	d909      	bls.n	8006eb6 <__udivmoddi4+0xbe>
 8006ea2:	2e00      	cmp	r6, #0
 8006ea4:	f000 80eb 	beq.w	800707e <__udivmoddi4+0x286>
 8006ea8:	2700      	movs	r7, #0
 8006eaa:	e9c6 0100 	strd	r0, r1, [r6]
 8006eae:	4638      	mov	r0, r7
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb6:	fab3 f783 	clz	r7, r3
 8006eba:	2f00      	cmp	r7, #0
 8006ebc:	d147      	bne.n	8006f4e <__udivmoddi4+0x156>
 8006ebe:	428b      	cmp	r3, r1
 8006ec0:	d302      	bcc.n	8006ec8 <__udivmoddi4+0xd0>
 8006ec2:	4282      	cmp	r2, r0
 8006ec4:	f200 80fa 	bhi.w	80070bc <__udivmoddi4+0x2c4>
 8006ec8:	1a84      	subs	r4, r0, r2
 8006eca:	eb61 0303 	sbc.w	r3, r1, r3
 8006ece:	2001      	movs	r0, #1
 8006ed0:	4698      	mov	r8, r3
 8006ed2:	2e00      	cmp	r6, #0
 8006ed4:	d0e0      	beq.n	8006e98 <__udivmoddi4+0xa0>
 8006ed6:	e9c6 4800 	strd	r4, r8, [r6]
 8006eda:	e7dd      	b.n	8006e98 <__udivmoddi4+0xa0>
 8006edc:	b902      	cbnz	r2, 8006ee0 <__udivmoddi4+0xe8>
 8006ede:	deff      	udf	#255	; 0xff
 8006ee0:	fab2 f282 	clz	r2, r2
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	f040 808f 	bne.w	8007008 <__udivmoddi4+0x210>
 8006eea:	1b49      	subs	r1, r1, r5
 8006eec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006ef0:	fa1f f885 	uxth.w	r8, r5
 8006ef4:	2701      	movs	r7, #1
 8006ef6:	fbb1 fcfe 	udiv	ip, r1, lr
 8006efa:	0c23      	lsrs	r3, r4, #16
 8006efc:	fb0e 111c 	mls	r1, lr, ip, r1
 8006f00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006f04:	fb08 f10c 	mul.w	r1, r8, ip
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	d907      	bls.n	8006f1c <__udivmoddi4+0x124>
 8006f0c:	18eb      	adds	r3, r5, r3
 8006f0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8006f12:	d202      	bcs.n	8006f1a <__udivmoddi4+0x122>
 8006f14:	4299      	cmp	r1, r3
 8006f16:	f200 80cd 	bhi.w	80070b4 <__udivmoddi4+0x2bc>
 8006f1a:	4684      	mov	ip, r0
 8006f1c:	1a59      	subs	r1, r3, r1
 8006f1e:	b2a3      	uxth	r3, r4
 8006f20:	fbb1 f0fe 	udiv	r0, r1, lr
 8006f24:	fb0e 1410 	mls	r4, lr, r0, r1
 8006f28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006f2c:	fb08 f800 	mul.w	r8, r8, r0
 8006f30:	45a0      	cmp	r8, r4
 8006f32:	d907      	bls.n	8006f44 <__udivmoddi4+0x14c>
 8006f34:	192c      	adds	r4, r5, r4
 8006f36:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f3a:	d202      	bcs.n	8006f42 <__udivmoddi4+0x14a>
 8006f3c:	45a0      	cmp	r8, r4
 8006f3e:	f200 80b6 	bhi.w	80070ae <__udivmoddi4+0x2b6>
 8006f42:	4618      	mov	r0, r3
 8006f44:	eba4 0408 	sub.w	r4, r4, r8
 8006f48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8006f4c:	e79f      	b.n	8006e8e <__udivmoddi4+0x96>
 8006f4e:	f1c7 0c20 	rsb	ip, r7, #32
 8006f52:	40bb      	lsls	r3, r7
 8006f54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8006f58:	ea4e 0e03 	orr.w	lr, lr, r3
 8006f5c:	fa01 f407 	lsl.w	r4, r1, r7
 8006f60:	fa20 f50c 	lsr.w	r5, r0, ip
 8006f64:	fa21 f30c 	lsr.w	r3, r1, ip
 8006f68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8006f6c:	4325      	orrs	r5, r4
 8006f6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8006f72:	0c2c      	lsrs	r4, r5, #16
 8006f74:	fb08 3319 	mls	r3, r8, r9, r3
 8006f78:	fa1f fa8e 	uxth.w	sl, lr
 8006f7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8006f80:	fb09 f40a 	mul.w	r4, r9, sl
 8006f84:	429c      	cmp	r4, r3
 8006f86:	fa02 f207 	lsl.w	r2, r2, r7
 8006f8a:	fa00 f107 	lsl.w	r1, r0, r7
 8006f8e:	d90b      	bls.n	8006fa8 <__udivmoddi4+0x1b0>
 8006f90:	eb1e 0303 	adds.w	r3, lr, r3
 8006f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8006f98:	f080 8087 	bcs.w	80070aa <__udivmoddi4+0x2b2>
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	f240 8084 	bls.w	80070aa <__udivmoddi4+0x2b2>
 8006fa2:	f1a9 0902 	sub.w	r9, r9, #2
 8006fa6:	4473      	add	r3, lr
 8006fa8:	1b1b      	subs	r3, r3, r4
 8006faa:	b2ad      	uxth	r5, r5
 8006fac:	fbb3 f0f8 	udiv	r0, r3, r8
 8006fb0:	fb08 3310 	mls	r3, r8, r0, r3
 8006fb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8006fb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8006fbc:	45a2      	cmp	sl, r4
 8006fbe:	d908      	bls.n	8006fd2 <__udivmoddi4+0x1da>
 8006fc0:	eb1e 0404 	adds.w	r4, lr, r4
 8006fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fc8:	d26b      	bcs.n	80070a2 <__udivmoddi4+0x2aa>
 8006fca:	45a2      	cmp	sl, r4
 8006fcc:	d969      	bls.n	80070a2 <__udivmoddi4+0x2aa>
 8006fce:	3802      	subs	r0, #2
 8006fd0:	4474      	add	r4, lr
 8006fd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8006fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8006fda:	eba4 040a 	sub.w	r4, r4, sl
 8006fde:	454c      	cmp	r4, r9
 8006fe0:	46c2      	mov	sl, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	d354      	bcc.n	8007090 <__udivmoddi4+0x298>
 8006fe6:	d051      	beq.n	800708c <__udivmoddi4+0x294>
 8006fe8:	2e00      	cmp	r6, #0
 8006fea:	d069      	beq.n	80070c0 <__udivmoddi4+0x2c8>
 8006fec:	ebb1 050a 	subs.w	r5, r1, sl
 8006ff0:	eb64 0403 	sbc.w	r4, r4, r3
 8006ff4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8006ff8:	40fd      	lsrs	r5, r7
 8006ffa:	40fc      	lsrs	r4, r7
 8006ffc:	ea4c 0505 	orr.w	r5, ip, r5
 8007000:	e9c6 5400 	strd	r5, r4, [r6]
 8007004:	2700      	movs	r7, #0
 8007006:	e747      	b.n	8006e98 <__udivmoddi4+0xa0>
 8007008:	f1c2 0320 	rsb	r3, r2, #32
 800700c:	fa20 f703 	lsr.w	r7, r0, r3
 8007010:	4095      	lsls	r5, r2
 8007012:	fa01 f002 	lsl.w	r0, r1, r2
 8007016:	fa21 f303 	lsr.w	r3, r1, r3
 800701a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800701e:	4338      	orrs	r0, r7
 8007020:	0c01      	lsrs	r1, r0, #16
 8007022:	fbb3 f7fe 	udiv	r7, r3, lr
 8007026:	fa1f f885 	uxth.w	r8, r5
 800702a:	fb0e 3317 	mls	r3, lr, r7, r3
 800702e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007032:	fb07 f308 	mul.w	r3, r7, r8
 8007036:	428b      	cmp	r3, r1
 8007038:	fa04 f402 	lsl.w	r4, r4, r2
 800703c:	d907      	bls.n	800704e <__udivmoddi4+0x256>
 800703e:	1869      	adds	r1, r5, r1
 8007040:	f107 3cff 	add.w	ip, r7, #4294967295
 8007044:	d22f      	bcs.n	80070a6 <__udivmoddi4+0x2ae>
 8007046:	428b      	cmp	r3, r1
 8007048:	d92d      	bls.n	80070a6 <__udivmoddi4+0x2ae>
 800704a:	3f02      	subs	r7, #2
 800704c:	4429      	add	r1, r5
 800704e:	1acb      	subs	r3, r1, r3
 8007050:	b281      	uxth	r1, r0
 8007052:	fbb3 f0fe 	udiv	r0, r3, lr
 8007056:	fb0e 3310 	mls	r3, lr, r0, r3
 800705a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800705e:	fb00 f308 	mul.w	r3, r0, r8
 8007062:	428b      	cmp	r3, r1
 8007064:	d907      	bls.n	8007076 <__udivmoddi4+0x27e>
 8007066:	1869      	adds	r1, r5, r1
 8007068:	f100 3cff 	add.w	ip, r0, #4294967295
 800706c:	d217      	bcs.n	800709e <__udivmoddi4+0x2a6>
 800706e:	428b      	cmp	r3, r1
 8007070:	d915      	bls.n	800709e <__udivmoddi4+0x2a6>
 8007072:	3802      	subs	r0, #2
 8007074:	4429      	add	r1, r5
 8007076:	1ac9      	subs	r1, r1, r3
 8007078:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800707c:	e73b      	b.n	8006ef6 <__udivmoddi4+0xfe>
 800707e:	4637      	mov	r7, r6
 8007080:	4630      	mov	r0, r6
 8007082:	e709      	b.n	8006e98 <__udivmoddi4+0xa0>
 8007084:	4607      	mov	r7, r0
 8007086:	e6e7      	b.n	8006e58 <__udivmoddi4+0x60>
 8007088:	4618      	mov	r0, r3
 800708a:	e6fb      	b.n	8006e84 <__udivmoddi4+0x8c>
 800708c:	4541      	cmp	r1, r8
 800708e:	d2ab      	bcs.n	8006fe8 <__udivmoddi4+0x1f0>
 8007090:	ebb8 0a02 	subs.w	sl, r8, r2
 8007094:	eb69 020e 	sbc.w	r2, r9, lr
 8007098:	3801      	subs	r0, #1
 800709a:	4613      	mov	r3, r2
 800709c:	e7a4      	b.n	8006fe8 <__udivmoddi4+0x1f0>
 800709e:	4660      	mov	r0, ip
 80070a0:	e7e9      	b.n	8007076 <__udivmoddi4+0x27e>
 80070a2:	4618      	mov	r0, r3
 80070a4:	e795      	b.n	8006fd2 <__udivmoddi4+0x1da>
 80070a6:	4667      	mov	r7, ip
 80070a8:	e7d1      	b.n	800704e <__udivmoddi4+0x256>
 80070aa:	4681      	mov	r9, r0
 80070ac:	e77c      	b.n	8006fa8 <__udivmoddi4+0x1b0>
 80070ae:	3802      	subs	r0, #2
 80070b0:	442c      	add	r4, r5
 80070b2:	e747      	b.n	8006f44 <__udivmoddi4+0x14c>
 80070b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80070b8:	442b      	add	r3, r5
 80070ba:	e72f      	b.n	8006f1c <__udivmoddi4+0x124>
 80070bc:	4638      	mov	r0, r7
 80070be:	e708      	b.n	8006ed2 <__udivmoddi4+0xda>
 80070c0:	4637      	mov	r7, r6
 80070c2:	e6e9      	b.n	8006e98 <__udivmoddi4+0xa0>

080070c4 <__aeabi_idiv0>:
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop

080070c8 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80070c8:	b590      	push	{r4, r7, lr}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	607a      	str	r2, [r7, #4]
 80070d2:	461a      	mov	r2, r3
 80070d4:	460b      	mov	r3, r1
 80070d6:	72fb      	strb	r3, [r7, #11]
 80070d8:	4613      	mov	r3, r2
 80070da:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	685c      	ldr	r4, [r3, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6898      	ldr	r0, [r3, #8]
 80070e4:	893b      	ldrh	r3, [r7, #8]
 80070e6:	7af9      	ldrb	r1, [r7, #11]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	47a0      	blx	r4
 80070ec:	6178      	str	r0, [r7, #20]
  return ret;
 80070ee:	697b      	ldr	r3, [r7, #20]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd90      	pop	{r4, r7, pc}

080070f8 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	461a      	mov	r2, r3
 8007104:	460b      	mov	r3, r1
 8007106:	72fb      	strb	r3, [r7, #11]
 8007108:	4613      	mov	r3, r2
 800710a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681c      	ldr	r4, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6898      	ldr	r0, [r3, #8]
 8007114:	893b      	ldrh	r3, [r7, #8]
 8007116:	7af9      	ldrb	r1, [r7, #11]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	47a0      	blx	r4
 800711c:	6178      	str	r0, [r7, #20]
  return ret;
 800711e:	697b      	ldr	r3, [r7, #20]
}
 8007120:	4618      	mov	r0, r3
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	bd90      	pop	{r4, r7, pc}

08007128 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007134:	f107 0208 	add.w	r2, r7, #8
 8007138:	2301      	movs	r3, #1
 800713a:	2110      	movs	r1, #16
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff ffc3 	bl	80070c8 <lsm6dsl_read_reg>
 8007142:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10f      	bne.n	800716a <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	b2da      	uxtb	r2, r3
 8007152:	7a3b      	ldrb	r3, [r7, #8]
 8007154:	f362 0383 	bfi	r3, r2, #2, #2
 8007158:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800715a:	f107 0208 	add.w	r2, r7, #8
 800715e:	2301      	movs	r3, #1
 8007160:	2110      	movs	r1, #16
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff ffc8 	bl	80070f8 <lsm6dsl_write_reg>
 8007168:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800716a:	68fb      	ldr	r3, [r7, #12]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007180:	f107 0208 	add.w	r2, r7, #8
 8007184:	2301      	movs	r3, #1
 8007186:	2110      	movs	r1, #16
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff ff9d 	bl	80070c8 <lsm6dsl_read_reg>
 800718e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10f      	bne.n	80071b6 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	b2da      	uxtb	r2, r3
 800719e:	7a3b      	ldrb	r3, [r7, #8]
 80071a0:	f362 1307 	bfi	r3, r2, #4, #4
 80071a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80071a6:	f107 0208 	add.w	r2, r7, #8
 80071aa:	2301      	movs	r3, #1
 80071ac:	2110      	movs	r1, #16
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff ffa2 	bl	80070f8 <lsm6dsl_write_reg>
 80071b4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80071b6:	68fb      	ldr	r3, [r7, #12]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80071cc:	f107 0208 	add.w	r2, r7, #8
 80071d0:	2301      	movs	r3, #1
 80071d2:	2112      	movs	r1, #18
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff ff77 	bl	80070c8 <lsm6dsl_read_reg>
 80071da:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10f      	bne.n	8007202 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	7a3b      	ldrb	r3, [r7, #8]
 80071ec:	f362 1386 	bfi	r3, r2, #6, #1
 80071f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80071f2:	f107 0208 	add.w	r2, r7, #8
 80071f6:	2301      	movs	r3, #1
 80071f8:	2112      	movs	r1, #18
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff ff7c 	bl	80070f8 <lsm6dsl_write_reg>
 8007200:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007202:	68fb      	ldr	r3, [r7, #12]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <lsm6dsl_xl_flag_data_ready_get>:
  * @param  val    Change the values of xlda in reg STATUS_REG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*)&status_reg, 1);
 8007216:	f107 0208 	add.w	r2, r7, #8
 800721a:	2301      	movs	r3, #1
 800721c:	211e      	movs	r1, #30
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff ff52 	bl	80070c8 <lsm6dsl_read_reg>
 8007224:	60f8      	str	r0, [r7, #12]
  *val = status_reg.xlda;
 8007226:	7a3b      	ldrb	r3, [r7, #8]
 8007228:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800722c:	b2db      	uxtb	r3, r3
 800722e:	461a      	mov	r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	701a      	strb	r2, [r3, #0]

  return ret;
 8007234:	68fb      	ldr	r3, [r7, #12]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8007248:	2301      	movs	r3, #1
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	210f      	movs	r1, #15
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff ff3a 	bl	80070c8 <lsm6dsl_read_reg>
 8007254:	60f8      	str	r0, [r7, #12]
  return ret;
 8007256:	68fb      	ldr	r3, [r7, #12]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800726c:	f107 0208 	add.w	r2, r7, #8
 8007270:	2301      	movs	r3, #1
 8007272:	2112      	movs	r1, #18
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ff27 	bl	80070c8 <lsm6dsl_read_reg>
 800727a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10f      	bne.n	80072a2 <lsm6dsl_reset_set+0x42>
    ctrl3_c.sw_reset = val;
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	b2da      	uxtb	r2, r3
 800728a:	7a3b      	ldrb	r3, [r7, #8]
 800728c:	f362 0300 	bfi	r3, r2, #0, #1
 8007290:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007292:	f107 0208 	add.w	r2, r7, #8
 8007296:	2301      	movs	r3, #1
 8007298:	2112      	movs	r1, #18
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff ff2c 	bl	80070f8 <lsm6dsl_write_reg>
 80072a0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80072a2:	68fb      	ldr	r3, [r7, #12]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80072b6:	f107 0208 	add.w	r2, r7, #8
 80072ba:	2301      	movs	r3, #1
 80072bc:	2112      	movs	r1, #18
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff ff02 	bl	80070c8 <lsm6dsl_read_reg>
 80072c4:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80072c6:	7a3b      	ldrb	r3, [r7, #8]
 80072c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	701a      	strb	r2, [r3, #0]

  return ret;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b08a      	sub	sp, #40	; 0x28
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 80072e8:	f107 021c 	add.w	r2, r7, #28
 80072ec:	2301      	movs	r3, #1
 80072ee:	210d      	movs	r1, #13
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff fee9 	bl	80070c8 <lsm6dsl_read_reg>
 80072f6:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d147      	bne.n	800738e <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 80072fe:	783b      	ldrb	r3, [r7, #0]
 8007300:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007304:	b2da      	uxtb	r2, r3
 8007306:	7f3b      	ldrb	r3, [r7, #28]
 8007308:	f362 0300 	bfi	r3, r2, #0, #1
 800730c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800730e:	783b      	ldrb	r3, [r7, #0]
 8007310:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007314:	b2da      	uxtb	r2, r3
 8007316:	7f3b      	ldrb	r3, [r7, #28]
 8007318:	f362 0341 	bfi	r3, r2, #1, #1
 800731c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800731e:	783b      	ldrb	r3, [r7, #0]
 8007320:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007324:	b2da      	uxtb	r2, r3
 8007326:	7f3b      	ldrb	r3, [r7, #28]
 8007328:	f362 0382 	bfi	r3, r2, #2, #1
 800732c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800732e:	783b      	ldrb	r3, [r7, #0]
 8007330:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007334:	b2da      	uxtb	r2, r3
 8007336:	7f3b      	ldrb	r3, [r7, #28]
 8007338:	f362 03c3 	bfi	r3, r2, #3, #1
 800733c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 800733e:	783b      	ldrb	r3, [r7, #0]
 8007340:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007344:	b2da      	uxtb	r2, r3
 8007346:	7f3b      	ldrb	r3, [r7, #28]
 8007348:	f362 1304 	bfi	r3, r2, #4, #1
 800734c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 800734e:	783b      	ldrb	r3, [r7, #0]
 8007350:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007354:	b2da      	uxtb	r2, r3
 8007356:	7f3b      	ldrb	r3, [r7, #28]
 8007358:	f362 1345 	bfi	r3, r2, #5, #1
 800735c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 800735e:	783b      	ldrb	r3, [r7, #0]
 8007360:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007364:	b2da      	uxtb	r2, r3
 8007366:	7f3b      	ldrb	r3, [r7, #28]
 8007368:	f362 1386 	bfi	r3, r2, #6, #1
 800736c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 800736e:	783b      	ldrb	r3, [r7, #0]
 8007370:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007374:	b2da      	uxtb	r2, r3
 8007376:	7f3b      	ldrb	r3, [r7, #28]
 8007378:	f362 13c7 	bfi	r3, r2, #7, #1
 800737c:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800737e:	f107 021c 	add.w	r2, r7, #28
 8007382:	2301      	movs	r3, #1
 8007384:	210d      	movs	r1, #13
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff feb6 	bl	80070f8 <lsm6dsl_write_reg>
 800738c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d107      	bne.n	80073a4 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8007394:	f107 0218 	add.w	r2, r7, #24
 8007398:	2301      	movs	r3, #1
 800739a:	215e      	movs	r1, #94	; 0x5e
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff fe93 	bl	80070c8 <lsm6dsl_read_reg>
 80073a2:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d107      	bne.n	80073ba <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 80073aa:	f107 0214 	add.w	r2, r7, #20
 80073ae:	2301      	movs	r3, #1
 80073b0:	215f      	movs	r1, #95	; 0x5f
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff fe88 	bl	80070c8 <lsm6dsl_read_reg>
 80073b8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d147      	bne.n	8007450 <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 80073c0:	787b      	ldrb	r3, [r7, #1]
 80073c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	7e3b      	ldrb	r3, [r7, #24]
 80073ca:	f362 0300 	bfi	r3, r2, #0, #1
 80073ce:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 80073d0:	787b      	ldrb	r3, [r7, #1]
 80073d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	7e3b      	ldrb	r3, [r7, #24]
 80073da:	f362 0341 	bfi	r3, r2, #1, #1
 80073de:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 80073e0:	787b      	ldrb	r3, [r7, #1]
 80073e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	7e3b      	ldrb	r3, [r7, #24]
 80073ea:	f362 0382 	bfi	r3, r2, #2, #1
 80073ee:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 80073f0:	787b      	ldrb	r3, [r7, #1]
 80073f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	7e3b      	ldrb	r3, [r7, #24]
 80073fa:	f362 03c3 	bfi	r3, r2, #3, #1
 80073fe:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 8007400:	787b      	ldrb	r3, [r7, #1]
 8007402:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007406:	b2da      	uxtb	r2, r3
 8007408:	7e3b      	ldrb	r3, [r7, #24]
 800740a:	f362 1304 	bfi	r3, r2, #4, #1
 800740e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 8007410:	787b      	ldrb	r3, [r7, #1]
 8007412:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007416:	b2da      	uxtb	r2, r3
 8007418:	7e3b      	ldrb	r3, [r7, #24]
 800741a:	f362 1345 	bfi	r3, r2, #5, #1
 800741e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 8007420:	787b      	ldrb	r3, [r7, #1]
 8007422:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007426:	b2da      	uxtb	r2, r3
 8007428:	7e3b      	ldrb	r3, [r7, #24]
 800742a:	f362 1386 	bfi	r3, r2, #6, #1
 800742e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 8007430:	787b      	ldrb	r3, [r7, #1]
 8007432:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007436:	b2da      	uxtb	r2, r3
 8007438:	7e3b      	ldrb	r3, [r7, #24]
 800743a:	f362 13c7 	bfi	r3, r2, #7, #1
 800743e:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8007440:	f107 0218 	add.w	r2, r7, #24
 8007444:	2301      	movs	r3, #1
 8007446:	215e      	movs	r1, #94	; 0x5e
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff fe55 	bl	80070f8 <lsm6dsl_write_reg>
 800744e:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	2b00      	cmp	r3, #0
 8007454:	d107      	bne.n	8007466 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8007456:	f107 0210 	add.w	r2, r7, #16
 800745a:	2301      	movs	r3, #1
 800745c:	2113      	movs	r1, #19
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7ff fe32 	bl	80070c8 <lsm6dsl_read_reg>
 8007464:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10f      	bne.n	800748c <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 800746c:	78bb      	ldrb	r3, [r7, #2]
 800746e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007472:	b2da      	uxtb	r2, r3
 8007474:	7c3b      	ldrb	r3, [r7, #16]
 8007476:	f362 1304 	bfi	r3, r2, #4, #1
 800747a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800747c:	f107 0210 	add.w	r2, r7, #16
 8007480:	2301      	movs	r3, #1
 8007482:	2113      	movs	r1, #19
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff fe37 	bl	80070f8 <lsm6dsl_write_reg>
 800748a:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	2b00      	cmp	r3, #0
 8007490:	d107      	bne.n	80074a2 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8007492:	f107 0220 	add.w	r2, r7, #32
 8007496:	2301      	movs	r3, #1
 8007498:	211a      	movs	r1, #26
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff fe14 	bl	80070c8 <lsm6dsl_read_reg>
 80074a0:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d111      	bne.n	80074cc <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 80074a8:	78bb      	ldrb	r3, [r7, #2]
 80074aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80074b4:	f362 13c7 	bfi	r3, r2, #7, #1
 80074b8:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80074bc:	f107 0220 	add.w	r2, r7, #32
 80074c0:	2301      	movs	r3, #1
 80074c2:	211a      	movs	r1, #26
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff fe17 	bl	80070f8 <lsm6dsl_write_reg>
 80074ca:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d158      	bne.n	8007584 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 80074d2:	f107 020c 	add.w	r2, r7, #12
 80074d6:	2301      	movs	r3, #1
 80074d8:	2158      	movs	r1, #88	; 0x58
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff fdf4 	bl	80070c8 <lsm6dsl_read_reg>
 80074e0:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 80074e2:	787b      	ldrb	r3, [r7, #1]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d141      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 80074ee:	787b      	ldrb	r3, [r7, #1]
 80074f0:	f003 0310 	and.w	r3, r3, #16
 80074f4:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d13b      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 80074fa:	787b      	ldrb	r3, [r7, #1]
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8007502:	2b00      	cmp	r3, #0
 8007504:	d135      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8007506:	787b      	ldrb	r3, [r7, #1]
 8007508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750c:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800750e:	2b00      	cmp	r3, #0
 8007510:	d12f      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8007512:	787b      	ldrb	r3, [r7, #1]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 800751a:	2b00      	cmp	r3, #0
 800751c:	d129      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 800751e:	787b      	ldrb	r3, [r7, #1]
 8007520:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007524:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8007526:	2b00      	cmp	r3, #0
 8007528:	d123      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 800752a:	7d3b      	ldrb	r3, [r7, #20]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 8007532:	2b00      	cmp	r3, #0
 8007534:	d11d      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8007536:	7d3b      	ldrb	r3, [r7, #20]
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800753e:	2b00      	cmp	r3, #0
 8007540:	d117      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8007542:	7d3b      	ldrb	r3, [r7, #20]
 8007544:	f003 0320 	and.w	r3, r3, #32
 8007548:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 800754a:	2b00      	cmp	r3, #0
 800754c:	d111      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800754e:	7d3b      	ldrb	r3, [r7, #20]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 800755a:	7d3b      	ldrb	r3, [r7, #20]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8007562:	2b00      	cmp	r3, #0
 8007564:	d105      	bne.n	8007572 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 8007566:	7d3b      	ldrb	r3, [r7, #20]
 8007568:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800756c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8007572:	7b3b      	ldrb	r3, [r7, #12]
 8007574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007578:	733b      	strb	r3, [r7, #12]
 800757a:	e003      	b.n	8007584 <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 800757c:	7b3b      	ldrb	r3, [r7, #12]
 800757e:	f36f 13c7 	bfc	r3, #7, #1
 8007582:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	2b00      	cmp	r3, #0
 8007588:	d107      	bne.n	800759a <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800758a:	f107 020c 	add.w	r2, r7, #12
 800758e:	2301      	movs	r3, #1
 8007590:	2158      	movs	r1, #88	; 0x58
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fdb0 	bl	80070f8 <lsm6dsl_write_reg>
 8007598:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800759c:	4618      	mov	r0, r3
 800759e:	3728      	adds	r7, #40	; 0x28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 80075ae:	f107 0214 	add.w	r2, r7, #20
 80075b2:	2301      	movs	r3, #1
 80075b4:	210d      	movs	r1, #13
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff fd86 	bl	80070c8 <lsm6dsl_read_reg>
 80075bc:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f040 80c0 	bne.w	8007746 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 80075c6:	7d3b      	ldrb	r3, [r7, #20]
 80075c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80075cc:	b2d9      	uxtb	r1, r3
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	7813      	ldrb	r3, [r2, #0]
 80075d2:	f361 0300 	bfi	r3, r1, #0, #1
 80075d6:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 80075d8:	7d3b      	ldrb	r3, [r7, #20]
 80075da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80075de:	b2d9      	uxtb	r1, r3
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	7813      	ldrb	r3, [r2, #0]
 80075e4:	f361 0341 	bfi	r3, r1, #1, #1
 80075e8:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 80075ea:	7d3b      	ldrb	r3, [r7, #20]
 80075ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80075f0:	b2d9      	uxtb	r1, r3
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	7813      	ldrb	r3, [r2, #0]
 80075f6:	f361 0382 	bfi	r3, r1, #2, #1
 80075fa:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 80075fc:	7d3b      	ldrb	r3, [r7, #20]
 80075fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007602:	b2d9      	uxtb	r1, r3
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	7813      	ldrb	r3, [r2, #0]
 8007608:	f361 03c3 	bfi	r3, r1, #3, #1
 800760c:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800760e:	7d3b      	ldrb	r3, [r7, #20]
 8007610:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007614:	b2d9      	uxtb	r1, r3
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	7813      	ldrb	r3, [r2, #0]
 800761a:	f361 1304 	bfi	r3, r1, #4, #1
 800761e:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8007620:	7d3b      	ldrb	r3, [r7, #20]
 8007622:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007626:	b2d9      	uxtb	r1, r3
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	7813      	ldrb	r3, [r2, #0]
 800762c:	f361 1345 	bfi	r3, r1, #5, #1
 8007630:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8007632:	7d3b      	ldrb	r3, [r7, #20]
 8007634:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007638:	b2d9      	uxtb	r1, r3
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	7813      	ldrb	r3, [r2, #0]
 800763e:	f361 1386 	bfi	r3, r1, #6, #1
 8007642:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8007644:	7d3b      	ldrb	r3, [r7, #20]
 8007646:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800764a:	b2d9      	uxtb	r1, r3
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	7813      	ldrb	r3, [r2, #0]
 8007650:	f361 13c7 	bfi	r3, r1, #7, #1
 8007654:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8007656:	f107 0210 	add.w	r2, r7, #16
 800765a:	2301      	movs	r3, #1
 800765c:	215e      	movs	r1, #94	; 0x5e
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff fd32 	bl	80070c8 <lsm6dsl_read_reg>
 8007664:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d16c      	bne.n	8007746 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 800766c:	7c3b      	ldrb	r3, [r7, #16]
 800766e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007672:	b2d9      	uxtb	r1, r3
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	7853      	ldrb	r3, [r2, #1]
 8007678:	f361 0300 	bfi	r3, r1, #0, #1
 800767c:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 800767e:	7c3b      	ldrb	r3, [r7, #16]
 8007680:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007684:	b2d9      	uxtb	r1, r3
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	7853      	ldrb	r3, [r2, #1]
 800768a:	f361 0341 	bfi	r3, r1, #1, #1
 800768e:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 8007690:	7c3b      	ldrb	r3, [r7, #16]
 8007692:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007696:	b2d9      	uxtb	r1, r3
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	7853      	ldrb	r3, [r2, #1]
 800769c:	f361 0382 	bfi	r3, r1, #2, #1
 80076a0:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 80076a2:	7c3b      	ldrb	r3, [r7, #16]
 80076a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80076a8:	b2d9      	uxtb	r1, r3
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	7853      	ldrb	r3, [r2, #1]
 80076ae:	f361 03c3 	bfi	r3, r1, #3, #1
 80076b2:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 80076b4:	7c3b      	ldrb	r3, [r7, #16]
 80076b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80076ba:	b2d9      	uxtb	r1, r3
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	7853      	ldrb	r3, [r2, #1]
 80076c0:	f361 1304 	bfi	r3, r1, #4, #1
 80076c4:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 80076c6:	7c3b      	ldrb	r3, [r7, #16]
 80076c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80076cc:	b2d9      	uxtb	r1, r3
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	7853      	ldrb	r3, [r2, #1]
 80076d2:	f361 1345 	bfi	r3, r1, #5, #1
 80076d6:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 80076d8:	7c3b      	ldrb	r3, [r7, #16]
 80076da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80076de:	b2d9      	uxtb	r1, r3
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	7853      	ldrb	r3, [r2, #1]
 80076e4:	f361 1386 	bfi	r3, r1, #6, #1
 80076e8:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 80076ea:	7c3b      	ldrb	r3, [r7, #16]
 80076ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80076f0:	b2d9      	uxtb	r1, r3
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	7853      	ldrb	r3, [r2, #1]
 80076f6:	f361 13c7 	bfi	r3, r1, #7, #1
 80076fa:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80076fc:	f107 020c 	add.w	r2, r7, #12
 8007700:	2301      	movs	r3, #1
 8007702:	2113      	movs	r1, #19
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff fcdf 	bl	80070c8 <lsm6dsl_read_reg>
 800770a:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d119      	bne.n	8007746 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8007712:	7b3b      	ldrb	r3, [r7, #12]
 8007714:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007718:	b2d9      	uxtb	r1, r3
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	7893      	ldrb	r3, [r2, #2]
 800771e:	f361 0300 	bfi	r3, r1, #0, #1
 8007722:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8007724:	f107 0218 	add.w	r2, r7, #24
 8007728:	2301      	movs	r3, #1
 800772a:	211a      	movs	r1, #26
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7ff fccb 	bl	80070c8 <lsm6dsl_read_reg>
 8007732:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8007734:	7e3b      	ldrb	r3, [r7, #24]
 8007736:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800773a:	b2d9      	uxtb	r1, r3
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	7893      	ldrb	r3, [r2, #2]
 8007740:	f361 0300 	bfi	r3, r1, #0, #1
 8007744:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 8007746:	69fb      	ldr	r3, [r7, #28]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3720      	adds	r7, #32
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007750:	b5b0      	push	{r4, r5, r7, lr}
 8007752:	b096      	sub	sp, #88	; 0x58
 8007754:	af04      	add	r7, sp, #16
	/*
	 * Initialize mems driver interface
	 */
	stmdev_ctx_t dev_ctx;
	lsm6dsl_int1_route_t int_1_reg;
	dev_ctx.write_reg = platform_write;
 8007756:	4bc5      	ldr	r3, [pc, #788]	; (8007a6c <main+0x31c>)
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
	dev_ctx.read_reg = platform_read;
 800775a:	4bc5      	ldr	r3, [pc, #788]	; (8007a70 <main+0x320>)
 800775c:	62fb      	str	r3, [r7, #44]	; 0x2c
	dev_ctx.handle = &hi2c2;
 800775e:	4bc5      	ldr	r3, [pc, #788]	; (8007a74 <main+0x324>)
 8007760:	633b      	str	r3, [r7, #48]	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007762:	f001 f98a 	bl	8008a7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007766:	f000 fa21 	bl	8007bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800776a:	f000 fc4d 	bl	8008008 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800776e:	f000 fae3 	bl	8007d38 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8007772:	f000 fb19 	bl	8007da8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8007776:	f000 fb55 	bl	8007e24 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800777a:	f000 fb79 	bl	8007e70 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800777e:	f000 fbb5 	bl	8007eec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8007782:	f000 fbe3 	bl	8007f4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8007786:	f000 fc11 	bl	8007fac <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 800778a:	f000 fab3 	bl	8007cf4 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 800778e:	f008 f8cb 	bl	800f928 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
	/*
	 * Check device ID
	 */
	lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8007792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007796:	49b8      	ldr	r1, [pc, #736]	; (8007a78 <main+0x328>)
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff fd50 	bl	800723e <lsm6dsl_device_id_get>
	if (whoamI != LSM6DSL_ID)
 800779e:	4bb6      	ldr	r3, [pc, #728]	; (8007a78 <main+0x328>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	2b6a      	cmp	r3, #106	; 0x6a
 80077a4:	d000      	beq.n	80077a8 <main+0x58>
		while (1){
 80077a6:	e7fe      	b.n	80077a6 <main+0x56>
		}

	/*
	 * Restore default configuration
	 */
	lsm6dsl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80077a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077ac:	2101      	movs	r1, #1
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff fd56 	bl	8007260 <lsm6dsl_reset_set>
	do{
		lsm6dsl_reset_get(&dev_ctx, &rst);
 80077b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077b8:	49b0      	ldr	r1, [pc, #704]	; (8007a7c <main+0x32c>)
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff fd76 	bl	80072ac <lsm6dsl_reset_get>
	} while (rst);
 80077c0:	4bae      	ldr	r3, [pc, #696]	; (8007a7c <main+0x32c>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1f5      	bne.n	80077b4 <main+0x64>

	/*
	 * Enable Block Data Update
	 */
	lsm6dsl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80077c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077cc:	2101      	movs	r1, #1
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff fcf6 	bl	80071c0 <lsm6dsl_block_data_update_set>

	/*
	 * Set full scale
	 */
	lsm6dsl_xl_full_scale_set(&dev_ctx, LSM6DSL_16g);
 80077d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077d8:	2101      	movs	r1, #1
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff fca4 	bl	8007128 <lsm6dsl_xl_full_scale_set>

	/*
	 * Set Output Data Rate
	 */
	lsm6dsl_xl_data_rate_set(&dev_ctx, LSM6DSL_XL_ODR_6k66Hz);
 80077e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077e4:	210a      	movs	r1, #10
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff fcc4 	bl	8007174 <lsm6dsl_xl_data_rate_set>

	/*
	 * Enable interrupt generation on DRDY INT1 pin
	 */
	lsm6dsl_pin_int1_route_get(&dev_ctx, &int_1_reg);
 80077ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80077f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fed4 	bl	80075a4 <lsm6dsl_pin_int1_route_get>
	int_1_reg.int1_drdy_xl = PROPERTY_ENABLE;
 80077fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	lsm6dsl_pin_int1_route_set(&dev_ctx, int_1_reg);
 8007808:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800780c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fd65 	bl	80072de <lsm6dsl_pin_int1_route_set>

		/*
		 * Read LSM6DSL INT pin
		 */

		if (platform_read_int_pin())
 8007814:	f000 fe04 	bl	8008420 <platform_read_int_pin>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0fa      	beq.n	8007814 <main+0xc4>
		{
			/*
			 * Read status register
			 */
			lsm6dsl_xl_flag_data_ready_get(&dev_ctx, &reg);
 800781e:	f107 021f 	add.w	r2, r7, #31
 8007822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007826:	4611      	mov	r1, r2
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff fcef 	bl	800720c <lsm6dsl_xl_flag_data_ready_get>
			if (reg)
 800782e:	7ffb      	ldrb	r3, [r7, #31]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d033      	beq.n	800789c <main+0x14c>
			{
				/* used for debug */
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007834:	2201      	movs	r2, #1
 8007836:	2110      	movs	r1, #16
 8007838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800783c:	f001 fe78 	bl	8009530 <HAL_GPIO_WritePin>
				/*
				 * Read accelerometer field data
				 */
				HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_I2C_ADD_L, LSM6DSL_OUTZ_L_XL, I2C_MEMADD_SIZE_8BIT, z_raw, 2, 1000);
 8007840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007844:	9302      	str	r3, [sp, #8]
 8007846:	2302      	movs	r3, #2
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	f107 0320 	add.w	r3, r7, #32
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	2301      	movs	r3, #1
 8007852:	222c      	movs	r2, #44	; 0x2c
 8007854:	21d5      	movs	r1, #213	; 0xd5
 8007856:	4887      	ldr	r0, [pc, #540]	; (8007a74 <main+0x324>)
 8007858:	f002 f848 	bl	80098ec <HAL_I2C_Mem_Read>
				/* convert */
				z[samples] = (((float)((z_raw[1] << 8) + z_raw[0])) *  0.488f);
 800785c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8007866:	4413      	add	r3, r2
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007870:	4b83      	ldr	r3, [pc, #524]	; (8007a80 <main+0x330>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007a84 <main+0x334>
 8007878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800787c:	4a82      	ldr	r2, [pc, #520]	; (8007a88 <main+0x338>)
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	edc3 7a00 	vstr	s15, [r3]
				samples++;
 8007886:	4b7e      	ldr	r3, [pc, #504]	; (8007a80 <main+0x330>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	4a7c      	ldr	r2, [pc, #496]	; (8007a80 <main+0x330>)
 800788e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007890:	2200      	movs	r2, #0
 8007892:	2110      	movs	r1, #16
 8007894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007898:	f001 fe4a 	bl	8009530 <HAL_GPIO_WritePin>
			}
			/* if one second of samples */
			if (samples > ((2048)-1))
 800789c:	4b78      	ldr	r3, [pc, #480]	; (8007a80 <main+0x330>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a4:	d3b6      	bcc.n	8007814 <main+0xc4>
			{
				samples = 0;
 80078a6:	4b76      	ldr	r3, [pc, #472]	; (8007a80 <main+0x330>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
				static arm_rfft_fast_instance_f32 fft_instance;
				static float32_t output[FFT_SIZE*2]; //has to be twice FFT size
				static float32_t output2[FFT_SIZE]; //has to be twice FFT size
				arm_rfft_fast_init_f32(&fft_instance, 2048/*bin count*/);
 80078ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80078b0:	4876      	ldr	r0, [pc, #472]	; (8007a8c <main+0x33c>)
 80078b2:	f007 fec5 	bl	800f640 <arm_rfft_fast_init_f32>

				arm_rfft_fast_f32(&fft_instance, (float32_t*)z, output, 0);
 80078b6:	2300      	movs	r3, #0
 80078b8:	4a75      	ldr	r2, [pc, #468]	; (8007a90 <main+0x340>)
 80078ba:	4973      	ldr	r1, [pc, #460]	; (8007a88 <main+0x338>)
 80078bc:	4873      	ldr	r0, [pc, #460]	; (8007a8c <main+0x33c>)
 80078be:	f007 fe91 	bl	800f5e4 <arm_rfft_fast_f32>
				output[1] = 0;
 80078c2:	4b73      	ldr	r3, [pc, #460]	; (8007a90 <main+0x340>)
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	605a      	str	r2, [r3, #4]
				arm_cmplx_mag_f32(output, output2, FFT_SIZE);
 80078ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078ce:	4971      	ldr	r1, [pc, #452]	; (8007a94 <main+0x344>)
 80078d0:	486f      	ldr	r0, [pc, #444]	; (8007a90 <main+0x340>)
 80078d2:	f005 fa45 	bl	800cd60 <arm_cmplx_mag_f32>
				for(int i = 0; i < 28*28; i++){
 80078d6:	2300      	movs	r3, #0
 80078d8:	647b      	str	r3, [r7, #68]	; 0x44
 80078da:	e018      	b.n	800790e <main+0x1be>
					T[i] = (log2f(output2[i]/(28*28)));
 80078dc:	4a6d      	ldr	r2, [pc, #436]	; (8007a94 <main+0x344>)
 80078de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	edd3 7a00 	vldr	s15, [r3]
 80078e8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8007a98 <main+0x348>
 80078ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80078f0:	eeb0 0a66 	vmov.f32	s0, s13
 80078f4:	f00b fb2e 	bl	8012f54 <log2f>
 80078f8:	eef0 7a40 	vmov.f32	s15, s0
 80078fc:	4a67      	ldr	r2, [pc, #412]	; (8007a9c <main+0x34c>)
 80078fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	edc3 7a00 	vstr	s15, [r3]
				for(int i = 0; i < 28*28; i++){
 8007908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800790a:	3301      	adds	r3, #1
 800790c:	647b      	str	r3, [r7, #68]	; 0x44
 800790e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007910:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8007914:	dbe2      	blt.n	80078dc <main+0x18c>
				}
				arm_abs_f32(T, T, 28*28);
 8007916:	f44f 7244 	mov.w	r2, #784	; 0x310
 800791a:	4960      	ldr	r1, [pc, #384]	; (8007a9c <main+0x34c>)
 800791c:	485f      	ldr	r0, [pc, #380]	; (8007a9c <main+0x34c>)
 800791e:	f005 f9b9 	bl	800cc94 <arm_abs_f32>
				float max = 0;
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	61bb      	str	r3, [r7, #24]
				int index = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	617b      	str	r3, [r7, #20]
				arm_max_f32(T, 28*28, &max, &index);
 800792c:	f107 0314 	add.w	r3, r7, #20
 8007930:	f107 0218 	add.w	r2, r7, #24
 8007934:	f44f 7144 	mov.w	r1, #784	; 0x310
 8007938:	4858      	ldr	r0, [pc, #352]	; (8007a9c <main+0x34c>)
 800793a:	f005 fb48 	bl	800cfce <arm_max_f32>
				for(int i = 0; i < 28*28; i++){
 800793e:	2300      	movs	r3, #0
 8007940:	643b      	str	r3, [r7, #64]	; 0x40
 8007942:	e012      	b.n	800796a <main+0x21a>
					T[i] = T[i]/max;
 8007944:	4a55      	ldr	r2, [pc, #340]	; (8007a9c <main+0x34c>)
 8007946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	edd3 6a00 	vldr	s13, [r3]
 8007950:	ed97 7a06 	vldr	s14, [r7, #24]
 8007954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007958:	4a50      	ldr	r2, [pc, #320]	; (8007a9c <main+0x34c>)
 800795a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	edc3 7a00 	vstr	s15, [r3]
				for(int i = 0; i < 28*28; i++){
 8007964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007966:	3301      	adds	r3, #1
 8007968:	643b      	str	r3, [r7, #64]	; 0x40
 800796a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796c:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8007970:	dbe8      	blt.n	8007944 <main+0x1f4>
				}
				float cnn_result[4];
				aiRun(T, cnn_result);
 8007972:	1d3b      	adds	r3, r7, #4
 8007974:	4619      	mov	r1, r3
 8007976:	4849      	ldr	r0, [pc, #292]	; (8007a9c <main+0x34c>)
 8007978:	f007 ff96 	bl	800f8a8 <aiRun>
				index = 4;
 800797c:	2304      	movs	r3, #4
 800797e:	617b      	str	r3, [r7, #20]
				float confidence = 0;
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int i = 0; i < 4; i++){
 8007986:	2300      	movs	r3, #0
 8007988:	63bb      	str	r3, [r7, #56]	; 0x38
 800798a:	e01b      	b.n	80079c4 <main+0x274>
					if(cnn_result[i] > 0.75){
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007994:	4413      	add	r3, r2
 8007996:	3b44      	subs	r3, #68	; 0x44
 8007998:	edd3 7a00 	vldr	s15, [r3]
 800799c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80079a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a8:	dd09      	ble.n	80079be <main+0x26e>
						index = i;
 80079aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ac:	617b      	str	r3, [r7, #20]
						confidence = cnn_result[i];
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80079b6:	4413      	add	r3, r2
 80079b8:	3b44      	subs	r3, #68	; 0x44
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int i = 0; i < 4; i++){
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	3301      	adds	r3, #1
 80079c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	dde0      	ble.n	800798c <main+0x23c>
					}
				}
				switch (index){
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	f200 80cf 	bhi.w	8007b70 <main+0x420>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <main+0x288>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	080079ed 	.word	0x080079ed
 80079dc:	08007a17 	.word	0x08007a17
 80079e0:	08007a41 	.word	0x08007a41
 80079e4:	08007ab1 	.word	0x08007ab1
 80079e8:	08007adb 	.word	0x08007adb
					case 0:
						sprintf((char *)tx_buffer,
 80079ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80079ee:	f7fe fe6b 	bl	80066c8 <__aeabi_f2d>
 80079f2:	4603      	mov	r3, r0
 80079f4:	460c      	mov	r4, r1
 80079f6:	461a      	mov	r2, r3
 80079f8:	4623      	mov	r3, r4
 80079fa:	4929      	ldr	r1, [pc, #164]	; (8007aa0 <main+0x350>)
 80079fc:	4829      	ldr	r0, [pc, #164]	; (8007aa4 <main+0x354>)
 80079fe:	f008 fde3 	bl	80105c8 <siprintf>
								"Desligado! Confianca - %f\n\r", confidence);
						tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8007a02:	4828      	ldr	r0, [pc, #160]	; (8007aa4 <main+0x354>)
 8007a04:	f7fe fca1 	bl	800634a <strlen>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4825      	ldr	r0, [pc, #148]	; (8007aa4 <main+0x354>)
 8007a10:	f000 fcf2 	bl	80083f8 <tx_com>
						break;
 8007a14:	e0bd      	b.n	8007b92 <main+0x442>
					case 1:
						sprintf((char *)tx_buffer,
 8007a16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a18:	f7fe fe56 	bl	80066c8 <__aeabi_f2d>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	461a      	mov	r2, r3
 8007a22:	4623      	mov	r3, r4
 8007a24:	4920      	ldr	r1, [pc, #128]	; (8007aa8 <main+0x358>)
 8007a26:	481f      	ldr	r0, [pc, #124]	; (8007aa4 <main+0x354>)
 8007a28:	f008 fdce 	bl	80105c8 <siprintf>
								"Velocidade 3. Confianca - %f\n\r", confidence);
						tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8007a2c:	481d      	ldr	r0, [pc, #116]	; (8007aa4 <main+0x354>)
 8007a2e:	f7fe fc8c 	bl	800634a <strlen>
 8007a32:	4603      	mov	r3, r0
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	4619      	mov	r1, r3
 8007a38:	481a      	ldr	r0, [pc, #104]	; (8007aa4 <main+0x354>)
 8007a3a:	f000 fcdd 	bl	80083f8 <tx_com>
						break;
 8007a3e:	e0a8      	b.n	8007b92 <main+0x442>
					case 2:
						sprintf((char *)tx_buffer,
 8007a40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a42:	f7fe fe41 	bl	80066c8 <__aeabi_f2d>
 8007a46:	4603      	mov	r3, r0
 8007a48:	460c      	mov	r4, r1
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	4917      	ldr	r1, [pc, #92]	; (8007aac <main+0x35c>)
 8007a50:	4814      	ldr	r0, [pc, #80]	; (8007aa4 <main+0x354>)
 8007a52:	f008 fdb9 	bl	80105c8 <siprintf>
								"Velocidade 2. Confianca - %f\n\r", confidence);
						tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8007a56:	4813      	ldr	r0, [pc, #76]	; (8007aa4 <main+0x354>)
 8007a58:	f7fe fc77 	bl	800634a <strlen>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4619      	mov	r1, r3
 8007a62:	4810      	ldr	r0, [pc, #64]	; (8007aa4 <main+0x354>)
 8007a64:	f000 fcc8 	bl	80083f8 <tx_com>
						break;
 8007a68:	e093      	b.n	8007b92 <main+0x442>
 8007a6a:	bf00      	nop
 8007a6c:	08008369 	.word	0x08008369
 8007a70:	080083b1 	.word	0x080083b1
 8007a74:	20009ae0 	.word	0x20009ae0
 8007a78:	20000a9c 	.word	0x20000a9c
 8007a7c:	20000a9d 	.word	0x20000a9d
 8007a80:	20000af0 	.word	0x20000af0
 8007a84:	3ef9db23 	.word	0x3ef9db23
 8007a88:	20000af4 	.word	0x20000af4
 8007a8c:	20002af4 	.word	0x20002af4
 8007a90:	20002b0c 	.word	0x20002b0c
 8007a94:	20004b0c 	.word	0x20004b0c
 8007a98:	44440000 	.word	0x44440000
 8007a9c:	20009b2c 	.word	0x20009b2c
 8007aa0:	08015300 	.word	0x08015300
 8007aa4:	20000aa0 	.word	0x20000aa0
 8007aa8:	0801531c 	.word	0x0801531c
 8007aac:	0801533c 	.word	0x0801533c
					case 3:
						sprintf((char *)tx_buffer,
 8007ab0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007ab2:	f7fe fe09 	bl	80066c8 <__aeabi_f2d>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	461a      	mov	r2, r3
 8007abc:	4623      	mov	r3, r4
 8007abe:	4935      	ldr	r1, [pc, #212]	; (8007b94 <main+0x444>)
 8007ac0:	4835      	ldr	r0, [pc, #212]	; (8007b98 <main+0x448>)
 8007ac2:	f008 fd81 	bl	80105c8 <siprintf>
								"Velocidade 1. Confianca - %f\n\r", confidence);
						tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8007ac6:	4834      	ldr	r0, [pc, #208]	; (8007b98 <main+0x448>)
 8007ac8:	f7fe fc3f 	bl	800634a <strlen>
 8007acc:	4603      	mov	r3, r0
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4831      	ldr	r0, [pc, #196]	; (8007b98 <main+0x448>)
 8007ad4:	f000 fc90 	bl	80083f8 <tx_com>
						break;
 8007ad8:	e05b      	b.n	8007b92 <main+0x442>
					case 4:
						sprintf((char *)tx_buffer,
 8007ada:	4a2f      	ldr	r2, [pc, #188]	; (8007b98 <main+0x448>)
 8007adc:	4b2f      	ldr	r3, [pc, #188]	; (8007b9c <main+0x44c>)
 8007ade:	4614      	mov	r4, r2
 8007ae0:	461d      	mov	r5, r3
 8007ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007aee:	e884 0003 	stmia.w	r4, {r0, r1}
								"Nao foi possivel decidir. Confiancas - ");
						tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8007af2:	4829      	ldr	r0, [pc, #164]	; (8007b98 <main+0x448>)
 8007af4:	f7fe fc29 	bl	800634a <strlen>
 8007af8:	4603      	mov	r3, r0
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4619      	mov	r1, r3
 8007afe:	4826      	ldr	r0, [pc, #152]	; (8007b98 <main+0x448>)
 8007b00:	f000 fc7a 	bl	80083f8 <tx_com>
						for(int i = 0; i < 4; i++){
 8007b04:	2300      	movs	r3, #0
 8007b06:	637b      	str	r3, [r7, #52]	; 0x34
 8007b08:	e01d      	b.n	8007b46 <main+0x3f6>
							sprintf((char *)tx_buffer, "%f ", cnn_result[i]);
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007b12:	4413      	add	r3, r2
 8007b14:	3b44      	subs	r3, #68	; 0x44
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fdd5 	bl	80066c8 <__aeabi_f2d>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	460c      	mov	r4, r1
 8007b22:	461a      	mov	r2, r3
 8007b24:	4623      	mov	r3, r4
 8007b26:	491e      	ldr	r1, [pc, #120]	; (8007ba0 <main+0x450>)
 8007b28:	481b      	ldr	r0, [pc, #108]	; (8007b98 <main+0x448>)
 8007b2a:	f008 fd4d 	bl	80105c8 <siprintf>
							tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8007b2e:	481a      	ldr	r0, [pc, #104]	; (8007b98 <main+0x448>)
 8007b30:	f7fe fc0b 	bl	800634a <strlen>
 8007b34:	4603      	mov	r3, r0
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4817      	ldr	r0, [pc, #92]	; (8007b98 <main+0x448>)
 8007b3c:	f000 fc5c 	bl	80083f8 <tx_com>
						for(int i = 0; i < 4; i++){
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	3301      	adds	r3, #1
 8007b44:	637b      	str	r3, [r7, #52]	; 0x34
 8007b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	ddde      	ble.n	8007b0a <main+0x3ba>
						}
						sprintf((char *)tx_buffer, "\n\r");
 8007b4c:	4b12      	ldr	r3, [pc, #72]	; (8007b98 <main+0x448>)
 8007b4e:	4a15      	ldr	r2, [pc, #84]	; (8007ba4 <main+0x454>)
 8007b50:	6812      	ldr	r2, [r2, #0]
 8007b52:	4611      	mov	r1, r2
 8007b54:	8019      	strh	r1, [r3, #0]
 8007b56:	3302      	adds	r3, #2
 8007b58:	0c12      	lsrs	r2, r2, #16
 8007b5a:	701a      	strb	r2, [r3, #0]
						tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8007b5c:	480e      	ldr	r0, [pc, #56]	; (8007b98 <main+0x448>)
 8007b5e:	f7fe fbf4 	bl	800634a <strlen>
 8007b62:	4603      	mov	r3, r0
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	4619      	mov	r1, r3
 8007b68:	480b      	ldr	r0, [pc, #44]	; (8007b98 <main+0x448>)
 8007b6a:	f000 fc45 	bl	80083f8 <tx_com>
						break;
 8007b6e:	e010      	b.n	8007b92 <main+0x442>
					default:
						sprintf((char *)tx_buffer, "???\n\r");
 8007b70:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <main+0x448>)
 8007b72:	4a0d      	ldr	r2, [pc, #52]	; (8007ba8 <main+0x458>)
 8007b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b78:	6018      	str	r0, [r3, #0]
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	8019      	strh	r1, [r3, #0]
						tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8007b7e:	4806      	ldr	r0, [pc, #24]	; (8007b98 <main+0x448>)
 8007b80:	f7fe fbe3 	bl	800634a <strlen>
 8007b84:	4603      	mov	r3, r0
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4803      	ldr	r0, [pc, #12]	; (8007b98 <main+0x448>)
 8007b8c:	f000 fc34 	bl	80083f8 <tx_com>
						break;
 8007b90:	bf00      	nop
	{
 8007b92:	e63f      	b.n	8007814 <main+0xc4>
 8007b94:	0801535c 	.word	0x0801535c
 8007b98:	20000aa0 	.word	0x20000aa0
 8007b9c:	0801537c 	.word	0x0801537c
 8007ba0:	080153a4 	.word	0x080153a4
 8007ba4:	080153a8 	.word	0x080153a8
 8007ba8:	080153ac 	.word	0x080153ac

08007bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b0b8      	sub	sp, #224	; 0xe0
 8007bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007bb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007bb6:	2244      	movs	r2, #68	; 0x44
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f008 f8a0 	bl	800fd00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007bc0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	609a      	str	r2, [r3, #8]
 8007bcc:	60da      	str	r2, [r3, #12]
 8007bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	2288      	movs	r2, #136	; 0x88
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f008 f892 	bl	800fd00 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8007bdc:	f002 fb9c 	bl	800a318 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007be0:	4b42      	ldr	r3, [pc, #264]	; (8007cec <SystemClock_Config+0x140>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be6:	4a41      	ldr	r2, [pc, #260]	; (8007cec <SystemClock_Config+0x140>)
 8007be8:	f023 0318 	bic.w	r3, r3, #24
 8007bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8007bf0:	2314      	movs	r3, #20
 8007bf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007c08:	2360      	movs	r3, #96	; 0x60
 8007c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c0e:	2302      	movs	r3, #2
 8007c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007c14:	2301      	movs	r3, #1
 8007c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8007c20:	2328      	movs	r3, #40	; 0x28
 8007c22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007c26:	2307      	movs	r3, #7
 8007c28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007c32:	2302      	movs	r3, #2
 8007c34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f002 fcb7 	bl	800a5b0 <HAL_RCC_OscConfig>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8007c48:	f000 fbf6 	bl	8008438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007c4c:	230f      	movs	r3, #15
 8007c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c52:	2303      	movs	r3, #3
 8007c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007c64:	2300      	movs	r3, #0
 8007c66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007c6a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007c6e:	2104      	movs	r1, #4
 8007c70:	4618      	mov	r0, r3
 8007c72:	f003 f883 	bl	800ad7c <HAL_RCC_ClockConfig>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007c7c:	f000 fbdc 	bl	8008438 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8007c80:	4b1b      	ldr	r3, [pc, #108]	; (8007cf0 <SystemClock_Config+0x144>)
 8007c82:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007c84:	2300      	movs	r3, #0
 8007c86:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007c96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8007ca4:	2318      	movs	r3, #24
 8007ca6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8007ca8:	2307      	movs	r3, #7
 8007caa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007cac:	2302      	movs	r3, #2
 8007cae:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8007cb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007cb8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007cba:	463b      	mov	r3, r7
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f003 fa61 	bl	800b184 <HAL_RCCEx_PeriphCLKConfig>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <SystemClock_Config+0x120>
  {
    Error_Handler();
 8007cc8:	f000 fbb6 	bl	8008438 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007ccc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007cd0:	f002 fb40 	bl	800a354 <HAL_PWREx_ControlVoltageScaling>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <SystemClock_Config+0x132>
  {
    Error_Handler();
 8007cda:	f000 fbad 	bl	8008438 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8007cde:	f003 fd37 	bl	800b750 <HAL_RCCEx_EnableMSIPLLMode>
}
 8007ce2:	bf00      	nop
 8007ce4:	37e0      	adds	r7, #224	; 0xe0
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	40021000 	.word	0x40021000
 8007cf0:	00012085 	.word	0x00012085

08007cf4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007cf8:	4b0d      	ldr	r3, [pc, #52]	; (8007d30 <MX_CRC_Init+0x3c>)
 8007cfa:	4a0e      	ldr	r2, [pc, #56]	; (8007d34 <MX_CRC_Init+0x40>)
 8007cfc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <MX_CRC_Init+0x3c>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007d04:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <MX_CRC_Init+0x3c>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <MX_CRC_Init+0x3c>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <MX_CRC_Init+0x3c>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007d16:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <MX_CRC_Init+0x3c>)
 8007d18:	2201      	movs	r2, #1
 8007d1a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007d1c:	4804      	ldr	r0, [pc, #16]	; (8007d30 <MX_CRC_Init+0x3c>)
 8007d1e:	f001 f851 	bl	8008dc4 <HAL_CRC_Init>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8007d28:	f000 fb86 	bl	8008438 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007d2c:	bf00      	nop
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	20009abc 	.word	0x20009abc
 8007d34:	40023000 	.word	0x40023000

08007d38 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8007d3c:	4b18      	ldr	r3, [pc, #96]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d3e:	4a19      	ldr	r2, [pc, #100]	; (8007da4 <MX_DFSDM1_Init+0x6c>)
 8007d40:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8007d42:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d44:	2201      	movs	r2, #1
 8007d46:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8007d48:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8007d4e:	4b14      	ldr	r3, [pc, #80]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d50:	2202      	movs	r2, #2
 8007d52:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8007d54:	4b12      	ldr	r3, [pc, #72]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8007d5a:	4b11      	ldr	r3, [pc, #68]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8007d60:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d66:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8007d68:	4b0d      	ldr	r3, [pc, #52]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8007d6e:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d70:	2204      	movs	r2, #4
 8007d72:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8007d74:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8007d7a:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8007d80:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8007d8c:	4804      	ldr	r0, [pc, #16]	; (8007da0 <MX_DFSDM1_Init+0x68>)
 8007d8e:	f001 f903 	bl	8008f98 <HAL_DFSDM_ChannelInit>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8007d98:	f000 fb4e 	bl	8008438 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8007d9c:	bf00      	nop
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	200095fc 	.word	0x200095fc
 8007da4:	40016020 	.word	0x40016020

08007da8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007dac:	4b1b      	ldr	r3, [pc, #108]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007dae:	4a1c      	ldr	r2, [pc, #112]	; (8007e20 <MX_I2C2_Init+0x78>)
 8007db0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8007db2:	4b1a      	ldr	r3, [pc, #104]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007db4:	f640 6214 	movw	r2, #3604	; 0xe14
 8007db8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007dba:	4b18      	ldr	r3, [pc, #96]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007dc0:	4b16      	ldr	r3, [pc, #88]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007dc6:	4b15      	ldr	r3, [pc, #84]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007dcc:	4b13      	ldr	r3, [pc, #76]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007dd2:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007dd8:	4b10      	ldr	r3, [pc, #64]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007de4:	480d      	ldr	r0, [pc, #52]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007de6:	f001 fbde 	bl	80095a6 <HAL_I2C_Init>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8007df0:	f000 fb22 	bl	8008438 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007df4:	2100      	movs	r1, #0
 8007df6:	4809      	ldr	r0, [pc, #36]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007df8:	f002 f8ae 	bl	8009f58 <HAL_I2CEx_ConfigAnalogFilter>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8007e02:	f000 fb19 	bl	8008438 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007e06:	2100      	movs	r1, #0
 8007e08:	4804      	ldr	r0, [pc, #16]	; (8007e1c <MX_I2C2_Init+0x74>)
 8007e0a:	f002 f8f0 	bl	8009fee <HAL_I2CEx_ConfigDigitalFilter>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8007e14:	f000 fb10 	bl	8008438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007e18:	bf00      	nop
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20009ae0 	.word	0x20009ae0
 8007e20:	40005800 	.word	0x40005800

08007e24 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8007e28:	4b0f      	ldr	r3, [pc, #60]	; (8007e68 <MX_QUADSPI_Init+0x44>)
 8007e2a:	4a10      	ldr	r2, [pc, #64]	; (8007e6c <MX_QUADSPI_Init+0x48>)
 8007e2c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8007e2e:	4b0e      	ldr	r3, [pc, #56]	; (8007e68 <MX_QUADSPI_Init+0x44>)
 8007e30:	22ff      	movs	r2, #255	; 0xff
 8007e32:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8007e34:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <MX_QUADSPI_Init+0x44>)
 8007e36:	2201      	movs	r2, #1
 8007e38:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8007e3a:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <MX_QUADSPI_Init+0x44>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8007e40:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <MX_QUADSPI_Init+0x44>)
 8007e42:	2201      	movs	r2, #1
 8007e44:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8007e46:	4b08      	ldr	r3, [pc, #32]	; (8007e68 <MX_QUADSPI_Init+0x44>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <MX_QUADSPI_Init+0x44>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8007e52:	4805      	ldr	r0, [pc, #20]	; (8007e68 <MX_QUADSPI_Init+0x44>)
 8007e54:	f002 fae4 	bl	800a420 <HAL_QSPI_Init>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8007e5e:	f000 faeb 	bl	8008438 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8007e62:	bf00      	nop
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	2000a850 	.word	0x2000a850
 8007e6c:	a0001000 	.word	0xa0001000

08007e70 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007e74:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007e76:	4a1c      	ldr	r2, [pc, #112]	; (8007ee8 <MX_SPI3_Init+0x78>)
 8007e78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007e7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007e7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007e80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007e82:	4b18      	ldr	r3, [pc, #96]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8007e88:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007e8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007e8e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e90:	4b14      	ldr	r3, [pc, #80]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007e96:	4b13      	ldr	r3, [pc, #76]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007e9c:	4b11      	ldr	r3, [pc, #68]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ea2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007eaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007ebc:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007ebe:	2207      	movs	r2, #7
 8007ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007ec2:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007eca:	2208      	movs	r2, #8
 8007ecc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007ece:	4805      	ldr	r0, [pc, #20]	; (8007ee4 <MX_SPI3_Init+0x74>)
 8007ed0:	f003 fe18 	bl	800bb04 <HAL_SPI_Init>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007eda:	f000 faad 	bl	8008438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007ede:	bf00      	nop
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	2000a76c 	.word	0x2000a76c
 8007ee8:	40003c00 	.word	0x40003c00

08007eec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007ef0:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007ef2:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <MX_USART1_UART_Init+0x5c>)
 8007ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007ef6:	4b13      	ldr	r3, [pc, #76]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007f04:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007f0a:	4b0e      	ldr	r3, [pc, #56]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007f10:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007f12:	220c      	movs	r2, #12
 8007f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f16:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f1c:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f22:	4b08      	ldr	r3, [pc, #32]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f28:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f2e:	4805      	ldr	r0, [pc, #20]	; (8007f44 <MX_USART1_UART_Init+0x58>)
 8007f30:	f003 fe72 	bl	800bc18 <HAL_UART_Init>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8007f3a:	f000 fa7d 	bl	8008438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007f3e:	bf00      	nop
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	2000a7d0 	.word	0x2000a7d0
 8007f48:	40013800 	.word	0x40013800

08007f4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007f50:	4b14      	ldr	r3, [pc, #80]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f52:	4a15      	ldr	r2, [pc, #84]	; (8007fa8 <MX_USART3_UART_Init+0x5c>)
 8007f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007f56:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007f5e:	4b11      	ldr	r3, [pc, #68]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007f64:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007f70:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f72:	220c      	movs	r2, #12
 8007f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f76:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f7c:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f82:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f88:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007f8e:	4805      	ldr	r0, [pc, #20]	; (8007fa4 <MX_USART3_UART_Init+0x58>)
 8007f90:	f003 fe42 	bl	800bc18 <HAL_UART_Init>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8007f9a:	f000 fa4d 	bl	8008438 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20009634 	.word	0x20009634
 8007fa8:	40004800 	.word	0x40004800

08007fac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fb0:	4b14      	ldr	r3, [pc, #80]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007fb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007fb8:	4b12      	ldr	r3, [pc, #72]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007fba:	2206      	movs	r2, #6
 8007fbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007fbe:	4b11      	ldr	r3, [pc, #68]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fca:	4b0e      	ldr	r3, [pc, #56]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007fd0:	4b0c      	ldr	r3, [pc, #48]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007fd6:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007fdc:	4b09      	ldr	r3, [pc, #36]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fe2:	4b08      	ldr	r3, [pc, #32]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007fe8:	4b06      	ldr	r3, [pc, #24]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fee:	4805      	ldr	r0, [pc, #20]	; (8008004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007ff0:	f002 f849 	bl	800a086 <HAL_PCD_Init>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8007ffa:	f000 fa1d 	bl	8008438 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8007ffe:	bf00      	nop
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	200096b4 	.word	0x200096b4

08008008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	; 0x28
 800800c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800800e:	f107 0314 	add.w	r3, r7, #20
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	605a      	str	r2, [r3, #4]
 8008018:	609a      	str	r2, [r3, #8]
 800801a:	60da      	str	r2, [r3, #12]
 800801c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800801e:	4bba      	ldr	r3, [pc, #744]	; (8008308 <MX_GPIO_Init+0x300>)
 8008020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008022:	4ab9      	ldr	r2, [pc, #740]	; (8008308 <MX_GPIO_Init+0x300>)
 8008024:	f043 0310 	orr.w	r3, r3, #16
 8008028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800802a:	4bb7      	ldr	r3, [pc, #732]	; (8008308 <MX_GPIO_Init+0x300>)
 800802c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802e:	f003 0310 	and.w	r3, r3, #16
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008036:	4bb4      	ldr	r3, [pc, #720]	; (8008308 <MX_GPIO_Init+0x300>)
 8008038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803a:	4ab3      	ldr	r2, [pc, #716]	; (8008308 <MX_GPIO_Init+0x300>)
 800803c:	f043 0304 	orr.w	r3, r3, #4
 8008040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008042:	4bb1      	ldr	r3, [pc, #708]	; (8008308 <MX_GPIO_Init+0x300>)
 8008044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800804e:	4bae      	ldr	r3, [pc, #696]	; (8008308 <MX_GPIO_Init+0x300>)
 8008050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008052:	4aad      	ldr	r2, [pc, #692]	; (8008308 <MX_GPIO_Init+0x300>)
 8008054:	f043 0301 	orr.w	r3, r3, #1
 8008058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800805a:	4bab      	ldr	r3, [pc, #684]	; (8008308 <MX_GPIO_Init+0x300>)
 800805c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	60bb      	str	r3, [r7, #8]
 8008064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008066:	4ba8      	ldr	r3, [pc, #672]	; (8008308 <MX_GPIO_Init+0x300>)
 8008068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806a:	4aa7      	ldr	r2, [pc, #668]	; (8008308 <MX_GPIO_Init+0x300>)
 800806c:	f043 0302 	orr.w	r3, r3, #2
 8008070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008072:	4ba5      	ldr	r3, [pc, #660]	; (8008308 <MX_GPIO_Init+0x300>)
 8008074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	607b      	str	r3, [r7, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800807e:	4ba2      	ldr	r3, [pc, #648]	; (8008308 <MX_GPIO_Init+0x300>)
 8008080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008082:	4aa1      	ldr	r2, [pc, #644]	; (8008308 <MX_GPIO_Init+0x300>)
 8008084:	f043 0308 	orr.w	r3, r3, #8
 8008088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800808a:	4b9f      	ldr	r3, [pc, #636]	; (8008308 <MX_GPIO_Init+0x300>)
 800808c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808e:	f003 0308 	and.w	r3, r3, #8
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8008096:	2200      	movs	r2, #0
 8008098:	f44f 718a 	mov.w	r1, #276	; 0x114
 800809c:	489b      	ldr	r0, [pc, #620]	; (800830c <MX_GPIO_Init+0x304>)
 800809e:	f001 fa47 	bl	8009530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80080a2:	2200      	movs	r2, #0
 80080a4:	f248 1104 	movw	r1, #33028	; 0x8104
 80080a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080ac:	f001 fa40 	bl	8009530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80080b0:	2200      	movs	r2, #0
 80080b2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80080b6:	4896      	ldr	r0, [pc, #600]	; (8008310 <MX_GPIO_Init+0x308>)
 80080b8:	f001 fa3a 	bl	8009530 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80080bc:	2200      	movs	r2, #0
 80080be:	f241 0181 	movw	r1, #4225	; 0x1081
 80080c2:	4894      	ldr	r0, [pc, #592]	; (8008314 <MX_GPIO_Init+0x30c>)
 80080c4:	f001 fa34 	bl	8009530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80080c8:	2201      	movs	r2, #1
 80080ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80080ce:	4891      	ldr	r0, [pc, #580]	; (8008314 <MX_GPIO_Init+0x30c>)
 80080d0:	f001 fa2e 	bl	8009530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80080d4:	2200      	movs	r2, #0
 80080d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080da:	488f      	ldr	r0, [pc, #572]	; (8008318 <MX_GPIO_Init+0x310>)
 80080dc:	f001 fa28 	bl	8009530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80080e0:	2201      	movs	r2, #1
 80080e2:	2120      	movs	r1, #32
 80080e4:	488a      	ldr	r0, [pc, #552]	; (8008310 <MX_GPIO_Init+0x308>)
 80080e6:	f001 fa23 	bl	8009530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80080ea:	2201      	movs	r2, #1
 80080ec:	2101      	movs	r1, #1
 80080ee:	4887      	ldr	r0, [pc, #540]	; (800830c <MX_GPIO_Init+0x304>)
 80080f0:	f001 fa1e 	bl	8009530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80080f4:	f240 1315 	movw	r3, #277	; 0x115
 80080f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080fa:	2301      	movs	r3, #1
 80080fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008102:	2300      	movs	r3, #0
 8008104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008106:	f107 0314 	add.w	r3, r7, #20
 800810a:	4619      	mov	r1, r3
 800810c:	487f      	ldr	r0, [pc, #508]	; (800830c <MX_GPIO_Init+0x304>)
 800810e:	f001 f84f 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8008112:	236a      	movs	r3, #106	; 0x6a
 8008114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008116:	4b81      	ldr	r3, [pc, #516]	; (800831c <MX_GPIO_Init+0x314>)
 8008118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800811a:	2300      	movs	r3, #0
 800811c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800811e:	f107 0314 	add.w	r3, r7, #20
 8008122:	4619      	mov	r1, r3
 8008124:	4879      	ldr	r0, [pc, #484]	; (800830c <MX_GPIO_Init+0x304>)
 8008126:	f001 f843 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800812a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800812e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008130:	4b7b      	ldr	r3, [pc, #492]	; (8008320 <MX_GPIO_Init+0x318>)
 8008132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008134:	2300      	movs	r3, #0
 8008136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8008138:	f107 0314 	add.w	r3, r7, #20
 800813c:	4619      	mov	r1, r3
 800813e:	4876      	ldr	r0, [pc, #472]	; (8008318 <MX_GPIO_Init+0x310>)
 8008140:	f001 f836 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8008144:	233f      	movs	r3, #63	; 0x3f
 8008146:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008148:	230b      	movs	r3, #11
 800814a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800814c:	2300      	movs	r3, #0
 800814e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008150:	f107 0314 	add.w	r3, r7, #20
 8008154:	4619      	mov	r1, r3
 8008156:	4870      	ldr	r0, [pc, #448]	; (8008318 <MX_GPIO_Init+0x310>)
 8008158:	f001 f82a 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800815c:	2303      	movs	r3, #3
 800815e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008160:	2302      	movs	r3, #2
 8008162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008164:	2300      	movs	r3, #0
 8008166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008168:	2303      	movs	r3, #3
 800816a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800816c:	2308      	movs	r3, #8
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008170:	f107 0314 	add.w	r3, r7, #20
 8008174:	4619      	mov	r1, r3
 8008176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800817a:	f001 f819 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800817e:	f248 1304 	movw	r3, #33028	; 0x8104
 8008182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008184:	2301      	movs	r3, #1
 8008186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008188:	2300      	movs	r3, #0
 800818a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800818c:	2300      	movs	r3, #0
 800818e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008190:	f107 0314 	add.w	r3, r7, #20
 8008194:	4619      	mov	r1, r3
 8008196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800819a:	f001 f809 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800819e:	2308      	movs	r3, #8
 80081a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081a2:	2302      	movs	r3, #2
 80081a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081aa:	2300      	movs	r3, #0
 80081ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80081ae:	2301      	movs	r3, #1
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80081b2:	f107 0314 	add.w	r3, r7, #20
 80081b6:	4619      	mov	r1, r3
 80081b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081bc:	f000 fff8 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80081c0:	2310      	movs	r3, #16
 80081c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80081c4:	230b      	movs	r3, #11
 80081c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80081cc:	f107 0314 	add.w	r3, r7, #20
 80081d0:	4619      	mov	r1, r3
 80081d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081d6:	f000 ffeb 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80081da:	23e0      	movs	r3, #224	; 0xe0
 80081dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081de:	2302      	movs	r3, #2
 80081e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081e6:	2303      	movs	r3, #3
 80081e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80081ea:	2305      	movs	r3, #5
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081ee:	f107 0314 	add.w	r3, r7, #20
 80081f2:	4619      	mov	r1, r3
 80081f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081f8:	f000 ffda 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80081fc:	2301      	movs	r3, #1
 80081fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008200:	4b46      	ldr	r3, [pc, #280]	; (800831c <MX_GPIO_Init+0x314>)
 8008202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008204:	2300      	movs	r3, #0
 8008206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8008208:	f107 0314 	add.w	r3, r7, #20
 800820c:	4619      	mov	r1, r3
 800820e:	4840      	ldr	r0, [pc, #256]	; (8008310 <MX_GPIO_Init+0x308>)
 8008210:	f000 ffce 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8008214:	2302      	movs	r3, #2
 8008216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008218:	230b      	movs	r3, #11
 800821a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800821c:	2300      	movs	r3, #0
 800821e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8008220:	f107 0314 	add.w	r3, r7, #20
 8008224:	4619      	mov	r1, r3
 8008226:	483a      	ldr	r0, [pc, #232]	; (8008310 <MX_GPIO_Init+0x308>)
 8008228:	f000 ffc2 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800822c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8008230:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008232:	2301      	movs	r3, #1
 8008234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008236:	2300      	movs	r3, #0
 8008238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800823a:	2300      	movs	r3, #0
 800823c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800823e:	f107 0314 	add.w	r3, r7, #20
 8008242:	4619      	mov	r1, r3
 8008244:	4832      	ldr	r0, [pc, #200]	; (8008310 <MX_GPIO_Init+0x308>)
 8008246:	f000 ffb3 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 800824a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800824e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008250:	4b32      	ldr	r3, [pc, #200]	; (800831c <MX_GPIO_Init+0x314>)
 8008252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008254:	2300      	movs	r3, #0
 8008256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008258:	f107 0314 	add.w	r3, r7, #20
 800825c:	4619      	mov	r1, r3
 800825e:	482d      	ldr	r0, [pc, #180]	; (8008314 <MX_GPIO_Init+0x30c>)
 8008260:	f000 ffa6 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8008264:	f243 0381 	movw	r3, #12417	; 0x3081
 8008268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800826a:	2301      	movs	r3, #1
 800826c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826e:	2300      	movs	r3, #0
 8008270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008272:	2300      	movs	r3, #0
 8008274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008276:	f107 0314 	add.w	r3, r7, #20
 800827a:	4619      	mov	r1, r3
 800827c:	4825      	ldr	r0, [pc, #148]	; (8008314 <MX_GPIO_Init+0x30c>)
 800827e:	f000 ff97 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8008282:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008288:	2301      	movs	r3, #1
 800828a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828c:	2300      	movs	r3, #0
 800828e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008290:	2300      	movs	r3, #0
 8008292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008294:	f107 0314 	add.w	r3, r7, #20
 8008298:	4619      	mov	r1, r3
 800829a:	481f      	ldr	r0, [pc, #124]	; (8008318 <MX_GPIO_Init+0x310>)
 800829c:	f000 ff88 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80082a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80082a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80082a6:	4b1d      	ldr	r3, [pc, #116]	; (800831c <MX_GPIO_Init+0x314>)
 80082a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082ae:	f107 0314 	add.w	r3, r7, #20
 80082b2:	4619      	mov	r1, r3
 80082b4:	4818      	ldr	r0, [pc, #96]	; (8008318 <MX_GPIO_Init+0x310>)
 80082b6:	f000 ff7b 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80082ba:	2302      	movs	r3, #2
 80082bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082be:	2302      	movs	r3, #2
 80082c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082c6:	2303      	movs	r3, #3
 80082c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80082ca:	2305      	movs	r3, #5
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80082ce:	f107 0314 	add.w	r3, r7, #20
 80082d2:	4619      	mov	r1, r3
 80082d4:	480f      	ldr	r0, [pc, #60]	; (8008314 <MX_GPIO_Init+0x30c>)
 80082d6:	f000 ff6b 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80082da:	2378      	movs	r3, #120	; 0x78
 80082dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082de:	2302      	movs	r3, #2
 80082e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082e6:	2303      	movs	r3, #3
 80082e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80082ea:	2307      	movs	r3, #7
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082ee:	f107 0314 	add.w	r3, r7, #20
 80082f2:	4619      	mov	r1, r3
 80082f4:	4807      	ldr	r0, [pc, #28]	; (8008314 <MX_GPIO_Init+0x30c>)
 80082f6:	f000 ff5b 	bl	80091b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80082fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80082fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008300:	2312      	movs	r3, #18
 8008302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008304:	2301      	movs	r3, #1
 8008306:	e00d      	b.n	8008324 <MX_GPIO_Init+0x31c>
 8008308:	40021000 	.word	0x40021000
 800830c:	48001000 	.word	0x48001000
 8008310:	48000400 	.word	0x48000400
 8008314:	48000c00 	.word	0x48000c00
 8008318:	48000800 	.word	0x48000800
 800831c:	10110000 	.word	0x10110000
 8008320:	10210000 	.word	0x10210000
 8008324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008326:	2303      	movs	r3, #3
 8008328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800832a:	2304      	movs	r3, #4
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800832e:	f107 0314 	add.w	r3, r7, #20
 8008332:	4619      	mov	r1, r3
 8008334:	480b      	ldr	r0, [pc, #44]	; (8008364 <MX_GPIO_Init+0x35c>)
 8008336:	f000 ff3b 	bl	80091b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800833a:	2200      	movs	r2, #0
 800833c:	2100      	movs	r1, #0
 800833e:	2017      	movs	r0, #23
 8008340:	f000 fd09 	bl	8008d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008344:	2017      	movs	r0, #23
 8008346:	f000 fd22 	bl	8008d8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	2028      	movs	r0, #40	; 0x28
 8008350:	f000 fd01 	bl	8008d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008354:	2028      	movs	r0, #40	; 0x28
 8008356:	f000 fd1a 	bl	8008d8e <HAL_NVIC_EnableIRQ>

}
 800835a:	bf00      	nop
 800835c:	3728      	adds	r7, #40	; 0x28
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	48000400 	.word	0x48000400

08008368 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af04      	add	r7, sp, #16
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	607a      	str	r2, [r7, #4]
 8008372:	461a      	mov	r2, r3
 8008374:	460b      	mov	r3, r1
 8008376:	72fb      	strb	r3, [r7, #11]
 8008378:	4613      	mov	r3, r2
 800837a:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c2)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4a0b      	ldr	r2, [pc, #44]	; (80083ac <platform_write+0x44>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d10d      	bne.n	80083a0 <platform_write+0x38>
	{
		HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 8008384:	7afb      	ldrb	r3, [r7, #11]
 8008386:	b29a      	uxth	r2, r3
 8008388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800838c:	9302      	str	r3, [sp, #8]
 800838e:	893b      	ldrh	r3, [r7, #8]
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	2301      	movs	r3, #1
 8008398:	21d5      	movs	r1, #213	; 0xd5
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f001 f992 	bl	80096c4 <HAL_I2C_Mem_Write>
				I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	}
	return 0;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20009ae0 	.word	0x20009ae0

080083b0 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af04      	add	r7, sp, #16
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	461a      	mov	r2, r3
 80083bc:	460b      	mov	r3, r1
 80083be:	72fb      	strb	r3, [r7, #11]
 80083c0:	4613      	mov	r3, r2
 80083c2:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c2)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a0b      	ldr	r2, [pc, #44]	; (80083f4 <platform_read+0x44>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d10d      	bne.n	80083e8 <platform_read+0x38>
	{
		HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 80083cc:	7afb      	ldrb	r3, [r7, #11]
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	893b      	ldrh	r3, [r7, #8]
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	2301      	movs	r3, #1
 80083e0:	21d5      	movs	r1, #213	; 0xd5
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f001 fa82 	bl	80098ec <HAL_I2C_Mem_Read>
				I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	}
	return 0;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20009ae0 	.word	0x20009ae0

080083f8 <tx_com>:
 * @param  tx_buffer     buffer to trasmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, tx_buffer, len, 1000);
 8008404:	887a      	ldrh	r2, [r7, #2]
 8008406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4803      	ldr	r0, [pc, #12]	; (800841c <tx_com+0x24>)
 800840e:	f003 fc51 	bl	800bcb4 <HAL_UART_Transmit>
}
 8008412:	bf00      	nop
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	2000a7d0 	.word	0x2000a7d0

08008420 <platform_read_int_pin>:

/*
 * @brief  read interrupt pin (platform dependent)
 */
static int32_t platform_read_int_pin(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(LSM6DSL_INT1_GPIO_PORT, LSM6DSL_INT1_PIN);
 8008424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008428:	4802      	ldr	r0, [pc, #8]	; (8008434 <platform_read_int_pin+0x14>)
 800842a:	f001 f869 	bl	8009500 <HAL_GPIO_ReadPin>
 800842e:	4603      	mov	r3, r0
}
 8008430:	4618      	mov	r0, r3
 8008432:	bd80      	pop	{r7, pc}
 8008434:	48000c00 	.word	0x48000c00

08008438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800843c:	bf00      	nop
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
	...

08008448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <HAL_MspInit+0x44>)
 8008450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008452:	4a0e      	ldr	r2, [pc, #56]	; (800848c <HAL_MspInit+0x44>)
 8008454:	f043 0301 	orr.w	r3, r3, #1
 8008458:	6613      	str	r3, [r2, #96]	; 0x60
 800845a:	4b0c      	ldr	r3, [pc, #48]	; (800848c <HAL_MspInit+0x44>)
 800845c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	607b      	str	r3, [r7, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008466:	4b09      	ldr	r3, [pc, #36]	; (800848c <HAL_MspInit+0x44>)
 8008468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846a:	4a08      	ldr	r2, [pc, #32]	; (800848c <HAL_MspInit+0x44>)
 800846c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008470:	6593      	str	r3, [r2, #88]	; 0x58
 8008472:	4b06      	ldr	r3, [pc, #24]	; (800848c <HAL_MspInit+0x44>)
 8008474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	40021000 	.word	0x40021000

08008490 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a0a      	ldr	r2, [pc, #40]	; (80084c8 <HAL_CRC_MspInit+0x38>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d10b      	bne.n	80084ba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80084a2:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <HAL_CRC_MspInit+0x3c>)
 80084a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a6:	4a09      	ldr	r2, [pc, #36]	; (80084cc <HAL_CRC_MspInit+0x3c>)
 80084a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084ac:	6493      	str	r3, [r2, #72]	; 0x48
 80084ae:	4b07      	ldr	r3, [pc, #28]	; (80084cc <HAL_CRC_MspInit+0x3c>)
 80084b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	40023000 	.word	0x40023000
 80084cc:	40021000 	.word	0x40021000

080084d0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08a      	sub	sp, #40	; 0x28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d8:	f107 0314 	add.w	r3, r7, #20
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	605a      	str	r2, [r3, #4]
 80084e2:	609a      	str	r2, [r3, #8]
 80084e4:	60da      	str	r2, [r3, #12]
 80084e6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80084e8:	4b18      	ldr	r3, [pc, #96]	; (800854c <HAL_DFSDM_ChannelMspInit+0x7c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d128      	bne.n	8008542 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80084f0:	4b17      	ldr	r3, [pc, #92]	; (8008550 <HAL_DFSDM_ChannelMspInit+0x80>)
 80084f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f4:	4a16      	ldr	r2, [pc, #88]	; (8008550 <HAL_DFSDM_ChannelMspInit+0x80>)
 80084f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084fa:	6613      	str	r3, [r2, #96]	; 0x60
 80084fc:	4b14      	ldr	r3, [pc, #80]	; (8008550 <HAL_DFSDM_ChannelMspInit+0x80>)
 80084fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008504:	613b      	str	r3, [r7, #16]
 8008506:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008508:	4b11      	ldr	r3, [pc, #68]	; (8008550 <HAL_DFSDM_ChannelMspInit+0x80>)
 800850a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850c:	4a10      	ldr	r2, [pc, #64]	; (8008550 <HAL_DFSDM_ChannelMspInit+0x80>)
 800850e:	f043 0310 	orr.w	r3, r3, #16
 8008512:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008514:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <HAL_DFSDM_ChannelMspInit+0x80>)
 8008516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8008520:	f44f 7320 	mov.w	r3, #640	; 0x280
 8008524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008526:	2302      	movs	r3, #2
 8008528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800852a:	2300      	movs	r3, #0
 800852c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800852e:	2300      	movs	r3, #0
 8008530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8008532:	2306      	movs	r3, #6
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008536:	f107 0314 	add.w	r3, r7, #20
 800853a:	4619      	mov	r1, r3
 800853c:	4805      	ldr	r0, [pc, #20]	; (8008554 <HAL_DFSDM_ChannelMspInit+0x84>)
 800853e:	f000 fe37 	bl	80091b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8008542:	bf00      	nop
 8008544:	3728      	adds	r7, #40	; 0x28
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20005b0c 	.word	0x20005b0c
 8008550:	40021000 	.word	0x40021000
 8008554:	48001000 	.word	0x48001000

08008558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	; 0x28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008560:	f107 0314 	add.w	r3, r7, #20
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	605a      	str	r2, [r3, #4]
 800856a:	609a      	str	r2, [r3, #8]
 800856c:	60da      	str	r2, [r3, #12]
 800856e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a17      	ldr	r2, [pc, #92]	; (80085d4 <HAL_I2C_MspInit+0x7c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d128      	bne.n	80085cc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800857a:	4b17      	ldr	r3, [pc, #92]	; (80085d8 <HAL_I2C_MspInit+0x80>)
 800857c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800857e:	4a16      	ldr	r2, [pc, #88]	; (80085d8 <HAL_I2C_MspInit+0x80>)
 8008580:	f043 0302 	orr.w	r3, r3, #2
 8008584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008586:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <HAL_I2C_MspInit+0x80>)
 8008588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8008592:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008598:	2312      	movs	r3, #18
 800859a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800859c:	2301      	movs	r3, #1
 800859e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085a0:	2303      	movs	r3, #3
 80085a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80085a4:	2304      	movs	r3, #4
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085a8:	f107 0314 	add.w	r3, r7, #20
 80085ac:	4619      	mov	r1, r3
 80085ae:	480b      	ldr	r0, [pc, #44]	; (80085dc <HAL_I2C_MspInit+0x84>)
 80085b0:	f000 fdfe 	bl	80091b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80085b4:	4b08      	ldr	r3, [pc, #32]	; (80085d8 <HAL_I2C_MspInit+0x80>)
 80085b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b8:	4a07      	ldr	r2, [pc, #28]	; (80085d8 <HAL_I2C_MspInit+0x80>)
 80085ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085be:	6593      	str	r3, [r2, #88]	; 0x58
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <HAL_I2C_MspInit+0x80>)
 80085c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80085cc:	bf00      	nop
 80085ce:	3728      	adds	r7, #40	; 0x28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40005800 	.word	0x40005800
 80085d8:	40021000 	.word	0x40021000
 80085dc:	48000400 	.word	0x48000400

080085e0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b08a      	sub	sp, #40	; 0x28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085e8:	f107 0314 	add.w	r3, r7, #20
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	605a      	str	r2, [r3, #4]
 80085f2:	609a      	str	r2, [r3, #8]
 80085f4:	60da      	str	r2, [r3, #12]
 80085f6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a17      	ldr	r2, [pc, #92]	; (800865c <HAL_QSPI_MspInit+0x7c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d128      	bne.n	8008654 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008602:	4b17      	ldr	r3, [pc, #92]	; (8008660 <HAL_QSPI_MspInit+0x80>)
 8008604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008606:	4a16      	ldr	r2, [pc, #88]	; (8008660 <HAL_QSPI_MspInit+0x80>)
 8008608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800860c:	6513      	str	r3, [r2, #80]	; 0x50
 800860e:	4b14      	ldr	r3, [pc, #80]	; (8008660 <HAL_QSPI_MspInit+0x80>)
 8008610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800861a:	4b11      	ldr	r3, [pc, #68]	; (8008660 <HAL_QSPI_MspInit+0x80>)
 800861c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861e:	4a10      	ldr	r2, [pc, #64]	; (8008660 <HAL_QSPI_MspInit+0x80>)
 8008620:	f043 0310 	orr.w	r3, r3, #16
 8008624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008626:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <HAL_QSPI_MspInit+0x80>)
 8008628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800862a:	f003 0310 	and.w	r3, r3, #16
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8008632:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8008636:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008638:	2302      	movs	r3, #2
 800863a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800863c:	2300      	movs	r3, #0
 800863e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008640:	2303      	movs	r3, #3
 8008642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8008644:	230a      	movs	r3, #10
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008648:	f107 0314 	add.w	r3, r7, #20
 800864c:	4619      	mov	r1, r3
 800864e:	4805      	ldr	r0, [pc, #20]	; (8008664 <HAL_QSPI_MspInit+0x84>)
 8008650:	f000 fdae 	bl	80091b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8008654:	bf00      	nop
 8008656:	3728      	adds	r7, #40	; 0x28
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	a0001000 	.word	0xa0001000
 8008660:	40021000 	.word	0x40021000
 8008664:	48001000 	.word	0x48001000

08008668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08a      	sub	sp, #40	; 0x28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008670:	f107 0314 	add.w	r3, r7, #20
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	605a      	str	r2, [r3, #4]
 800867a:	609a      	str	r2, [r3, #8]
 800867c:	60da      	str	r2, [r3, #12]
 800867e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a17      	ldr	r2, [pc, #92]	; (80086e4 <HAL_SPI_MspInit+0x7c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d128      	bne.n	80086dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800868a:	4b17      	ldr	r3, [pc, #92]	; (80086e8 <HAL_SPI_MspInit+0x80>)
 800868c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800868e:	4a16      	ldr	r2, [pc, #88]	; (80086e8 <HAL_SPI_MspInit+0x80>)
 8008690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008694:	6593      	str	r3, [r2, #88]	; 0x58
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <HAL_SPI_MspInit+0x80>)
 8008698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086a2:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <HAL_SPI_MspInit+0x80>)
 80086a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a6:	4a10      	ldr	r2, [pc, #64]	; (80086e8 <HAL_SPI_MspInit+0x80>)
 80086a8:	f043 0304 	orr.w	r3, r3, #4
 80086ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086ae:	4b0e      	ldr	r3, [pc, #56]	; (80086e8 <HAL_SPI_MspInit+0x80>)
 80086b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b2:	f003 0304 	and.w	r3, r3, #4
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80086ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80086be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c0:	2302      	movs	r3, #2
 80086c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c4:	2300      	movs	r3, #0
 80086c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086c8:	2303      	movs	r3, #3
 80086ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80086cc:	2306      	movs	r3, #6
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086d0:	f107 0314 	add.w	r3, r7, #20
 80086d4:	4619      	mov	r1, r3
 80086d6:	4805      	ldr	r0, [pc, #20]	; (80086ec <HAL_SPI_MspInit+0x84>)
 80086d8:	f000 fd6a 	bl	80091b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80086dc:	bf00      	nop
 80086de:	3728      	adds	r7, #40	; 0x28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40003c00 	.word	0x40003c00
 80086e8:	40021000 	.word	0x40021000
 80086ec:	48000800 	.word	0x48000800

080086f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08c      	sub	sp, #48	; 0x30
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086f8:	f107 031c 	add.w	r3, r7, #28
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	605a      	str	r2, [r3, #4]
 8008702:	609a      	str	r2, [r3, #8]
 8008704:	60da      	str	r2, [r3, #12]
 8008706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a2e      	ldr	r2, [pc, #184]	; (80087c8 <HAL_UART_MspInit+0xd8>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d128      	bne.n	8008764 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008712:	4b2e      	ldr	r3, [pc, #184]	; (80087cc <HAL_UART_MspInit+0xdc>)
 8008714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008716:	4a2d      	ldr	r2, [pc, #180]	; (80087cc <HAL_UART_MspInit+0xdc>)
 8008718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800871c:	6613      	str	r3, [r2, #96]	; 0x60
 800871e:	4b2b      	ldr	r3, [pc, #172]	; (80087cc <HAL_UART_MspInit+0xdc>)
 8008720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008726:	61bb      	str	r3, [r7, #24]
 8008728:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800872a:	4b28      	ldr	r3, [pc, #160]	; (80087cc <HAL_UART_MspInit+0xdc>)
 800872c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800872e:	4a27      	ldr	r2, [pc, #156]	; (80087cc <HAL_UART_MspInit+0xdc>)
 8008730:	f043 0302 	orr.w	r3, r3, #2
 8008734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008736:	4b25      	ldr	r3, [pc, #148]	; (80087cc <HAL_UART_MspInit+0xdc>)
 8008738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8008742:	23c0      	movs	r3, #192	; 0xc0
 8008744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008746:	2302      	movs	r3, #2
 8008748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800874a:	2300      	movs	r3, #0
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800874e:	2303      	movs	r3, #3
 8008750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008752:	2307      	movs	r3, #7
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008756:	f107 031c 	add.w	r3, r7, #28
 800875a:	4619      	mov	r1, r3
 800875c:	481c      	ldr	r0, [pc, #112]	; (80087d0 <HAL_UART_MspInit+0xe0>)
 800875e:	f000 fd27 	bl	80091b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008762:	e02d      	b.n	80087c0 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a1a      	ldr	r2, [pc, #104]	; (80087d4 <HAL_UART_MspInit+0xe4>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d128      	bne.n	80087c0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800876e:	4b17      	ldr	r3, [pc, #92]	; (80087cc <HAL_UART_MspInit+0xdc>)
 8008770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008772:	4a16      	ldr	r2, [pc, #88]	; (80087cc <HAL_UART_MspInit+0xdc>)
 8008774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008778:	6593      	str	r3, [r2, #88]	; 0x58
 800877a:	4b14      	ldr	r3, [pc, #80]	; (80087cc <HAL_UART_MspInit+0xdc>)
 800877c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008786:	4b11      	ldr	r3, [pc, #68]	; (80087cc <HAL_UART_MspInit+0xdc>)
 8008788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878a:	4a10      	ldr	r2, [pc, #64]	; (80087cc <HAL_UART_MspInit+0xdc>)
 800878c:	f043 0308 	orr.w	r3, r3, #8
 8008790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008792:	4b0e      	ldr	r3, [pc, #56]	; (80087cc <HAL_UART_MspInit+0xdc>)
 8008794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008796:	f003 0308 	and.w	r3, r3, #8
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800879e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80087a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a4:	2302      	movs	r3, #2
 80087a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a8:	2300      	movs	r3, #0
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ac:	2303      	movs	r3, #3
 80087ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80087b0:	2307      	movs	r3, #7
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80087b4:	f107 031c 	add.w	r3, r7, #28
 80087b8:	4619      	mov	r1, r3
 80087ba:	4807      	ldr	r0, [pc, #28]	; (80087d8 <HAL_UART_MspInit+0xe8>)
 80087bc:	f000 fcf8 	bl	80091b0 <HAL_GPIO_Init>
}
 80087c0:	bf00      	nop
 80087c2:	3730      	adds	r7, #48	; 0x30
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40013800 	.word	0x40013800
 80087cc:	40021000 	.word	0x40021000
 80087d0:	48000400 	.word	0x48000400
 80087d4:	40004800 	.word	0x40004800
 80087d8:	48000c00 	.word	0x48000c00

080087dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08a      	sub	sp, #40	; 0x28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087e4:	f107 0314 	add.w	r3, r7, #20
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	605a      	str	r2, [r3, #4]
 80087ee:	609a      	str	r2, [r3, #8]
 80087f0:	60da      	str	r2, [r3, #12]
 80087f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087fc:	d154      	bne.n	80088a8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087fe:	4b2c      	ldr	r3, [pc, #176]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 8008800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008802:	4a2b      	ldr	r2, [pc, #172]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 8008804:	f043 0301 	orr.w	r3, r3, #1
 8008808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800880a:	4b29      	ldr	r3, [pc, #164]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 800880c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	613b      	str	r3, [r7, #16]
 8008814:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8008816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800881a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800881c:	2300      	movs	r3, #0
 800881e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008820:	2300      	movs	r3, #0
 8008822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008824:	f107 0314 	add.w	r3, r7, #20
 8008828:	4619      	mov	r1, r3
 800882a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800882e:	f000 fcbf 	bl	80091b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8008832:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008838:	2302      	movs	r3, #2
 800883a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800883c:	2300      	movs	r3, #0
 800883e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008840:	2303      	movs	r3, #3
 8008842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008844:	230a      	movs	r3, #10
 8008846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008848:	f107 0314 	add.w	r3, r7, #20
 800884c:	4619      	mov	r1, r3
 800884e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008852:	f000 fcad 	bl	80091b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008856:	4b16      	ldr	r3, [pc, #88]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 8008858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800885a:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 800885c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008862:	4b13      	ldr	r3, [pc, #76]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 8008864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800886e:	4b10      	ldr	r3, [pc, #64]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 8008870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d114      	bne.n	80088a4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800887a:	4b0d      	ldr	r3, [pc, #52]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 800887c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887e:	4a0c      	ldr	r2, [pc, #48]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 8008880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008884:	6593      	str	r3, [r2, #88]	; 0x58
 8008886:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 8008888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800888a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800888e:	60bb      	str	r3, [r7, #8]
 8008890:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008892:	f001 fdb5 	bl	800a400 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008896:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 8008898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889a:	4a05      	ldr	r2, [pc, #20]	; (80088b0 <HAL_PCD_MspInit+0xd4>)
 800889c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088a0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80088a2:	e001      	b.n	80088a8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80088a4:	f001 fdac 	bl	800a400 <HAL_PWREx_EnableVddUSB>
}
 80088a8:	bf00      	nop
 80088aa:	3728      	adds	r7, #40	; 0x28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	40021000 	.word	0x40021000

080088b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80088b8:	bf00      	nop
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088c2:	b480      	push	{r7}
 80088c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088c6:	e7fe      	b.n	80088c6 <HardFault_Handler+0x4>

080088c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088cc:	e7fe      	b.n	80088cc <MemManage_Handler+0x4>

080088ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088ce:	b480      	push	{r7}
 80088d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088d2:	e7fe      	b.n	80088d2 <BusFault_Handler+0x4>

080088d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088d8:	e7fe      	b.n	80088d8 <UsageFault_Handler+0x4>

080088da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088da:	b480      	push	{r7}
 80088dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088de:	bf00      	nop
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088ec:	bf00      	nop
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088f6:	b480      	push	{r7}
 80088f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088fa:	bf00      	nop
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008908:	f000 f90a 	bl	8008b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800890c:	bf00      	nop
 800890e:	bd80      	pop	{r7, pc}

08008910 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008914:	2020      	movs	r0, #32
 8008916:	f000 fe23 	bl	8009560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800891a:	2040      	movs	r0, #64	; 0x40
 800891c:	f000 fe20 	bl	8009560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8008920:	2080      	movs	r0, #128	; 0x80
 8008922:	f000 fe1d 	bl	8009560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8008926:	f44f 7080 	mov.w	r0, #256	; 0x100
 800892a:	f000 fe19 	bl	8009560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800892e:	bf00      	nop
 8008930:	bd80      	pop	{r7, pc}

08008932 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8008936:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800893a:	f000 fe11 	bl	8009560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800893e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008942:	f000 fe0d 	bl	8009560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8008946:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800894a:	f000 fe09 	bl	8009560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800894e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008952:	f000 fe05 	bl	8009560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8008956:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800895a:	f000 fe01 	bl	8009560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800895e:	bf00      	nop
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800896c:	4b11      	ldr	r3, [pc, #68]	; (80089b4 <_sbrk+0x50>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d102      	bne.n	800897a <_sbrk+0x16>
		heap_end = &end;
 8008974:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <_sbrk+0x50>)
 8008976:	4a10      	ldr	r2, [pc, #64]	; (80089b8 <_sbrk+0x54>)
 8008978:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800897a:	4b0e      	ldr	r3, [pc, #56]	; (80089b4 <_sbrk+0x50>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008980:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <_sbrk+0x50>)
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4413      	add	r3, r2
 8008988:	466a      	mov	r2, sp
 800898a:	4293      	cmp	r3, r2
 800898c:	d907      	bls.n	800899e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800898e:	f007 f973 	bl	800fc78 <__errno>
 8008992:	4602      	mov	r2, r0
 8008994:	230c      	movs	r3, #12
 8008996:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008998:	f04f 33ff 	mov.w	r3, #4294967295
 800899c:	e006      	b.n	80089ac <_sbrk+0x48>
	}

	heap_end += incr;
 800899e:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <_sbrk+0x50>)
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4413      	add	r3, r2
 80089a6:	4a03      	ldr	r2, [pc, #12]	; (80089b4 <_sbrk+0x50>)
 80089a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80089aa:	68fb      	ldr	r3, [r7, #12]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20005b10 	.word	0x20005b10
 80089b8:	2000a8a0 	.word	0x2000a8a0

080089bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80089c0:	4b17      	ldr	r3, [pc, #92]	; (8008a20 <SystemInit+0x64>)
 80089c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c6:	4a16      	ldr	r2, [pc, #88]	; (8008a20 <SystemInit+0x64>)
 80089c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80089d0:	4b14      	ldr	r3, [pc, #80]	; (8008a24 <SystemInit+0x68>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a13      	ldr	r2, [pc, #76]	; (8008a24 <SystemInit+0x68>)
 80089d6:	f043 0301 	orr.w	r3, r3, #1
 80089da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <SystemInit+0x68>)
 80089de:	2200      	movs	r2, #0
 80089e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80089e2:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <SystemInit+0x68>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a0f      	ldr	r2, [pc, #60]	; (8008a24 <SystemInit+0x68>)
 80089e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80089ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80089f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80089f2:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <SystemInit+0x68>)
 80089f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80089f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80089fa:	4b0a      	ldr	r3, [pc, #40]	; (8008a24 <SystemInit+0x68>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a09      	ldr	r2, [pc, #36]	; (8008a24 <SystemInit+0x68>)
 8008a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008a06:	4b07      	ldr	r3, [pc, #28]	; (8008a24 <SystemInit+0x68>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008a0c:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <SystemInit+0x64>)
 8008a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008a12:	609a      	str	r2, [r3, #8]
#endif
}
 8008a14:	bf00      	nop
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	e000ed00 	.word	0xe000ed00
 8008a24:	40021000 	.word	0x40021000

08008a28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a60 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008a2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008a2e:	e003      	b.n	8008a38 <LoopCopyDataInit>

08008a30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008a30:	4b0c      	ldr	r3, [pc, #48]	; (8008a64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008a32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008a34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008a36:	3104      	adds	r1, #4

08008a38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008a38:	480b      	ldr	r0, [pc, #44]	; (8008a68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8008a3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008a3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008a40:	d3f6      	bcc.n	8008a30 <CopyDataInit>
	ldr	r2, =_sbss
 8008a42:	4a0b      	ldr	r2, [pc, #44]	; (8008a70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008a44:	e002      	b.n	8008a4c <LoopFillZerobss>

08008a46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008a46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008a48:	f842 3b04 	str.w	r3, [r2], #4

08008a4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008a4c:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <LoopForever+0x16>)
	cmp	r2, r3
 8008a4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008a50:	d3f9      	bcc.n	8008a46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008a52:	f7ff ffb3 	bl	80089bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008a56:	f007 f915 	bl	800fc84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008a5a:	f7fe fe79 	bl	8007750 <main>

08008a5e <LoopForever>:

LoopForever:
    b LoopForever
 8008a5e:	e7fe      	b.n	8008a5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008a60:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8008a64:	0806e50c 	.word	0x0806e50c
	ldr	r0, =_sdata
 8008a68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008a6c:	20000a80 	.word	0x20000a80
	ldr	r2, =_sbss
 8008a70:	20000a80 	.word	0x20000a80
	ldr	r3, = _ebss
 8008a74:	2000a89c 	.word	0x2000a89c

08008a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008a78:	e7fe      	b.n	8008a78 <ADC1_2_IRQHandler>

08008a7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a84:	2003      	movs	r0, #3
 8008a86:	f000 f95b 	bl	8008d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	f000 f80e 	bl	8008aac <HAL_InitTick>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	71fb      	strb	r3, [r7, #7]
 8008a9a:	e001      	b.n	8008aa0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008a9c:	f7ff fcd4 	bl	8008448 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
	...

08008aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008ab8:	4b16      	ldr	r3, [pc, #88]	; (8008b14 <HAL_InitTick+0x68>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d022      	beq.n	8008b06 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008ac0:	4b15      	ldr	r3, [pc, #84]	; (8008b18 <HAL_InitTick+0x6c>)
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	4b13      	ldr	r3, [pc, #76]	; (8008b14 <HAL_InitTick+0x68>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 f968 	bl	8008daa <HAL_SYSTICK_Config>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10f      	bne.n	8008b00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b0f      	cmp	r3, #15
 8008ae4:	d809      	bhi.n	8008afa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	f000 f932 	bl	8008d56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008af2:	4a0a      	ldr	r2, [pc, #40]	; (8008b1c <HAL_InitTick+0x70>)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	e007      	b.n	8008b0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	73fb      	strb	r3, [r7, #15]
 8008afe:	e004      	b.n	8008b0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	73fb      	strb	r3, [r7, #15]
 8008b04:	e001      	b.n	8008b0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	20000008 	.word	0x20000008
 8008b18:	20000000 	.word	0x20000000
 8008b1c:	20000004 	.word	0x20000004

08008b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b20:	b480      	push	{r7}
 8008b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008b24:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <HAL_IncTick+0x1c>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <HAL_IncTick+0x20>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	4a03      	ldr	r2, [pc, #12]	; (8008b3c <HAL_IncTick+0x1c>)
 8008b30:	6013      	str	r3, [r2, #0]
}
 8008b32:	bf00      	nop
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	2000a894 	.word	0x2000a894
 8008b40:	20000008 	.word	0x20000008

08008b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
  return uwTick;
 8008b48:	4b03      	ldr	r3, [pc, #12]	; (8008b58 <HAL_GetTick+0x14>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	2000a894 	.word	0x2000a894

08008b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b64:	f7ff ffee 	bl	8008b44 <HAL_GetTick>
 8008b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b74:	d004      	beq.n	8008b80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008b76:	4b09      	ldr	r3, [pc, #36]	; (8008b9c <HAL_Delay+0x40>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008b80:	bf00      	nop
 8008b82:	f7ff ffdf 	bl	8008b44 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d8f7      	bhi.n	8008b82 <HAL_Delay+0x26>
  {
  }
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20000008 	.word	0x20000008

08008ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bb0:	4b0c      	ldr	r3, [pc, #48]	; (8008be4 <__NVIC_SetPriorityGrouping+0x44>)
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008bd2:	4a04      	ldr	r2, [pc, #16]	; (8008be4 <__NVIC_SetPriorityGrouping+0x44>)
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	60d3      	str	r3, [r2, #12]
}
 8008bd8:	bf00      	nop
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	e000ed00 	.word	0xe000ed00

08008be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008bec:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <__NVIC_GetPriorityGrouping+0x18>)
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	0a1b      	lsrs	r3, r3, #8
 8008bf2:	f003 0307 	and.w	r3, r3, #7
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	e000ed00 	.word	0xe000ed00

08008c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	db0b      	blt.n	8008c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	f003 021f 	and.w	r2, r3, #31
 8008c1c:	4907      	ldr	r1, [pc, #28]	; (8008c3c <__NVIC_EnableIRQ+0x38>)
 8008c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c22:	095b      	lsrs	r3, r3, #5
 8008c24:	2001      	movs	r0, #1
 8008c26:	fa00 f202 	lsl.w	r2, r0, r2
 8008c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	e000e100 	.word	0xe000e100

08008c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	6039      	str	r1, [r7, #0]
 8008c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	db0a      	blt.n	8008c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	490c      	ldr	r1, [pc, #48]	; (8008c8c <__NVIC_SetPriority+0x4c>)
 8008c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c5e:	0112      	lsls	r2, r2, #4
 8008c60:	b2d2      	uxtb	r2, r2
 8008c62:	440b      	add	r3, r1
 8008c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c68:	e00a      	b.n	8008c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	4908      	ldr	r1, [pc, #32]	; (8008c90 <__NVIC_SetPriority+0x50>)
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	f003 030f 	and.w	r3, r3, #15
 8008c76:	3b04      	subs	r3, #4
 8008c78:	0112      	lsls	r2, r2, #4
 8008c7a:	b2d2      	uxtb	r2, r2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	761a      	strb	r2, [r3, #24]
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	e000e100 	.word	0xe000e100
 8008c90:	e000ed00 	.word	0xe000ed00

08008c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b089      	sub	sp, #36	; 0x24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	f1c3 0307 	rsb	r3, r3, #7
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	bf28      	it	cs
 8008cb2:	2304      	movcs	r3, #4
 8008cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	2b06      	cmp	r3, #6
 8008cbc:	d902      	bls.n	8008cc4 <NVIC_EncodePriority+0x30>
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	3b03      	subs	r3, #3
 8008cc2:	e000      	b.n	8008cc6 <NVIC_EncodePriority+0x32>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	43da      	mvns	r2, r3
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	401a      	ands	r2, r3
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce6:	43d9      	mvns	r1, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cec:	4313      	orrs	r3, r2
         );
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3724      	adds	r7, #36	; 0x24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
	...

08008cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d0c:	d301      	bcc.n	8008d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e00f      	b.n	8008d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d12:	4a0a      	ldr	r2, [pc, #40]	; (8008d3c <SysTick_Config+0x40>)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d1a:	210f      	movs	r1, #15
 8008d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d20:	f7ff ff8e 	bl	8008c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <SysTick_Config+0x40>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d2a:	4b04      	ldr	r3, [pc, #16]	; (8008d3c <SysTick_Config+0x40>)
 8008d2c:	2207      	movs	r2, #7
 8008d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	e000e010 	.word	0xe000e010

08008d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff ff29 	bl	8008ba0 <__NVIC_SetPriorityGrouping>
}
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	607a      	str	r2, [r7, #4]
 8008d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008d64:	2300      	movs	r3, #0
 8008d66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d68:	f7ff ff3e 	bl	8008be8 <__NVIC_GetPriorityGrouping>
 8008d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	68b9      	ldr	r1, [r7, #8]
 8008d72:	6978      	ldr	r0, [r7, #20]
 8008d74:	f7ff ff8e 	bl	8008c94 <NVIC_EncodePriority>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff ff5d 	bl	8008c40 <__NVIC_SetPriority>
}
 8008d86:	bf00      	nop
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	4603      	mov	r3, r0
 8008d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff ff31 	bl	8008c04 <__NVIC_EnableIRQ>
}
 8008da2:	bf00      	nop
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff ffa2 	bl	8008cfc <SysTick_Config>
 8008db8:	4603      	mov	r3, r0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e054      	b.n	8008e80 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7f5b      	ldrb	r3, [r3, #29]
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d105      	bne.n	8008dec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff fb52 	bl	8008490 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	791b      	ldrb	r3, [r3, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10c      	bne.n	8008e14 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a22      	ldr	r2, [pc, #136]	; (8008e88 <HAL_CRC_Init+0xc4>)
 8008e00:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	689a      	ldr	r2, [r3, #8]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f022 0218 	bic.w	r2, r2, #24
 8008e10:	609a      	str	r2, [r3, #8]
 8008e12:	e00c      	b.n	8008e2e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6899      	ldr	r1, [r3, #8]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f834 	bl	8008e8c <HAL_CRCEx_Polynomial_Set>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e028      	b.n	8008e80 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	795b      	ldrb	r3, [r3, #5]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d105      	bne.n	8008e42 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e3e:	611a      	str	r2, [r3, #16]
 8008e40:	e004      	b.n	8008e4c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	6912      	ldr	r2, [r2, #16]
 8008e4a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	695a      	ldr	r2, [r3, #20]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699a      	ldr	r2, [r3, #24]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	430a      	orrs	r2, r1
 8008e76:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	04c11db7 	.word	0x04c11db7

08008e8c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008e9c:	231f      	movs	r3, #31
 8008e9e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008ea0:	bf00      	nop
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	1e5a      	subs	r2, r3, #1
 8008ea6:	613a      	str	r2, [r7, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d009      	beq.n	8008ec0 <HAL_CRCEx_Polynomial_Set+0x34>
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f003 031f 	and.w	r3, r3, #31
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d0f0      	beq.n	8008ea2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b18      	cmp	r3, #24
 8008ec4:	d846      	bhi.n	8008f54 <HAL_CRCEx_Polynomial_Set+0xc8>
 8008ec6:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <HAL_CRCEx_Polynomial_Set+0x40>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008f5b 	.word	0x08008f5b
 8008ed0:	08008f55 	.word	0x08008f55
 8008ed4:	08008f55 	.word	0x08008f55
 8008ed8:	08008f55 	.word	0x08008f55
 8008edc:	08008f55 	.word	0x08008f55
 8008ee0:	08008f55 	.word	0x08008f55
 8008ee4:	08008f55 	.word	0x08008f55
 8008ee8:	08008f55 	.word	0x08008f55
 8008eec:	08008f49 	.word	0x08008f49
 8008ef0:	08008f55 	.word	0x08008f55
 8008ef4:	08008f55 	.word	0x08008f55
 8008ef8:	08008f55 	.word	0x08008f55
 8008efc:	08008f55 	.word	0x08008f55
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008f55 	.word	0x08008f55
 8008f08:	08008f55 	.word	0x08008f55
 8008f0c:	08008f3d 	.word	0x08008f3d
 8008f10:	08008f55 	.word	0x08008f55
 8008f14:	08008f55 	.word	0x08008f55
 8008f18:	08008f55 	.word	0x08008f55
 8008f1c:	08008f55 	.word	0x08008f55
 8008f20:	08008f55 	.word	0x08008f55
 8008f24:	08008f55 	.word	0x08008f55
 8008f28:	08008f55 	.word	0x08008f55
 8008f2c:	08008f31 	.word	0x08008f31
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	2b06      	cmp	r3, #6
 8008f34:	d913      	bls.n	8008f5e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008f3a:	e010      	b.n	8008f5e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	2b07      	cmp	r3, #7
 8008f40:	d90f      	bls.n	8008f62 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008f46:	e00c      	b.n	8008f62 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2b0f      	cmp	r3, #15
 8008f4c:	d90b      	bls.n	8008f66 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008f52:	e008      	b.n	8008f66 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	75fb      	strb	r3, [r7, #23]
      break;
 8008f58:	e006      	b.n	8008f68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008f5a:	bf00      	nop
 8008f5c:	e004      	b.n	8008f68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008f5e:	bf00      	nop
 8008f60:	e002      	b.n	8008f68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008f62:	bf00      	nop
 8008f64:	e000      	b.n	8008f68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008f66:	bf00      	nop
  }
  if (status == HAL_OK)
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10d      	bne.n	8008f8a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f023 0118 	bic.w	r1, r3, #24
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	371c      	adds	r7, #28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e0ac      	b.n	8009104 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 f8b2 	bl	8009118 <DFSDM_GetChannelFromInstance>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	4b55      	ldr	r3, [pc, #340]	; (800910c <HAL_DFSDM_ChannelInit+0x174>)
 8008fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e09f      	b.n	8009104 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff fa83 	bl	80084d0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8008fca:	4b51      	ldr	r3, [pc, #324]	; (8009110 <HAL_DFSDM_ChannelInit+0x178>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	4a4f      	ldr	r2, [pc, #316]	; (8009110 <HAL_DFSDM_ChannelInit+0x178>)
 8008fd2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8008fd4:	4b4e      	ldr	r3, [pc, #312]	; (8009110 <HAL_DFSDM_ChannelInit+0x178>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d125      	bne.n	8009028 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8008fdc:	4b4d      	ldr	r3, [pc, #308]	; (8009114 <HAL_DFSDM_ChannelInit+0x17c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a4c      	ldr	r2, [pc, #304]	; (8009114 <HAL_DFSDM_ChannelInit+0x17c>)
 8008fe2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008fe6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8008fe8:	4b4a      	ldr	r3, [pc, #296]	; (8009114 <HAL_DFSDM_ChannelInit+0x17c>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	4948      	ldr	r1, [pc, #288]	; (8009114 <HAL_DFSDM_ChannelInit+0x17c>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8008ff6:	4b47      	ldr	r3, [pc, #284]	; (8009114 <HAL_DFSDM_ChannelInit+0x17c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a46      	ldr	r2, [pc, #280]	; (8009114 <HAL_DFSDM_ChannelInit+0x17c>)
 8008ffc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8009000:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	791b      	ldrb	r3, [r3, #4]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d108      	bne.n	800901c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800900a:	4b42      	ldr	r3, [pc, #264]	; (8009114 <HAL_DFSDM_ChannelInit+0x17c>)
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	3b01      	subs	r3, #1
 8009014:	041b      	lsls	r3, r3, #16
 8009016:	493f      	ldr	r1, [pc, #252]	; (8009114 <HAL_DFSDM_ChannelInit+0x17c>)
 8009018:	4313      	orrs	r3, r2
 800901a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800901c:	4b3d      	ldr	r3, [pc, #244]	; (8009114 <HAL_DFSDM_ChannelInit+0x17c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a3c      	ldr	r2, [pc, #240]	; (8009114 <HAL_DFSDM_ChannelInit+0x17c>)
 8009022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009026:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8009036:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6819      	ldr	r1, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8009046:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800904c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 020f 	bic.w	r2, r2, #15
 8009064:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6819      	ldr	r1, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	689a      	ldr	r2, [r3, #8]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800908c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6899      	ldr	r1, [r3, #8]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909c:	3b01      	subs	r3, #1
 800909e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80090a0:	431a      	orrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f002 0207 	and.w	r2, r2, #7
 80090b8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6859      	ldr	r1, [r3, #4]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ca:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80090cc:	431a      	orrs	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090e4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f810 	bl	8009118 <DFSDM_GetChannelFromInstance>
 80090f8:	4601      	mov	r1, r0
 80090fa:	4a04      	ldr	r2, [pc, #16]	; (800910c <HAL_DFSDM_ChannelInit+0x174>)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20005b18 	.word	0x20005b18
 8009110:	20005b14 	.word	0x20005b14
 8009114:	40016000 	.word	0x40016000

08009118 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a1c      	ldr	r2, [pc, #112]	; (8009194 <DFSDM_GetChannelFromInstance+0x7c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d102      	bne.n	800912e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	e02b      	b.n	8009186 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a19      	ldr	r2, [pc, #100]	; (8009198 <DFSDM_GetChannelFromInstance+0x80>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d102      	bne.n	800913c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8009136:	2301      	movs	r3, #1
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	e024      	b.n	8009186 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a17      	ldr	r2, [pc, #92]	; (800919c <DFSDM_GetChannelFromInstance+0x84>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d102      	bne.n	800914a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8009144:	2302      	movs	r3, #2
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e01d      	b.n	8009186 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a14      	ldr	r2, [pc, #80]	; (80091a0 <DFSDM_GetChannelFromInstance+0x88>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d102      	bne.n	8009158 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8009152:	2304      	movs	r3, #4
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e016      	b.n	8009186 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a12      	ldr	r2, [pc, #72]	; (80091a4 <DFSDM_GetChannelFromInstance+0x8c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d102      	bne.n	8009166 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8009160:	2305      	movs	r3, #5
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	e00f      	b.n	8009186 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a0f      	ldr	r2, [pc, #60]	; (80091a8 <DFSDM_GetChannelFromInstance+0x90>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d102      	bne.n	8009174 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800916e:	2306      	movs	r3, #6
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	e008      	b.n	8009186 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a0d      	ldr	r2, [pc, #52]	; (80091ac <DFSDM_GetChannelFromInstance+0x94>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d102      	bne.n	8009182 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800917c:	2307      	movs	r3, #7
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	e001      	b.n	8009186 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8009182:	2303      	movs	r3, #3
 8009184:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8009186:	68fb      	ldr	r3, [r7, #12]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	40016000 	.word	0x40016000
 8009198:	40016020 	.word	0x40016020
 800919c:	40016040 	.word	0x40016040
 80091a0:	40016080 	.word	0x40016080
 80091a4:	400160a0 	.word	0x400160a0
 80091a8:	400160c0 	.word	0x400160c0
 80091ac:	400160e0 	.word	0x400160e0

080091b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b087      	sub	sp, #28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091ba:	2300      	movs	r3, #0
 80091bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091be:	e17f      	b.n	80094c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	2101      	movs	r1, #1
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	fa01 f303 	lsl.w	r3, r1, r3
 80091cc:	4013      	ands	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 8171 	beq.w	80094ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d00b      	beq.n	80091f8 <HAL_GPIO_Init+0x48>
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d007      	beq.n	80091f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80091ec:	2b11      	cmp	r3, #17
 80091ee:	d003      	beq.n	80091f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2b12      	cmp	r3, #18
 80091f6:	d130      	bne.n	800925a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	2203      	movs	r2, #3
 8009204:	fa02 f303 	lsl.w	r3, r2, r3
 8009208:	43db      	mvns	r3, r3
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	4013      	ands	r3, r2
 800920e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	68da      	ldr	r2, [r3, #12]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	fa02 f303 	lsl.w	r3, r2, r3
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	4313      	orrs	r3, r2
 8009220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800922e:	2201      	movs	r2, #1
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	fa02 f303 	lsl.w	r3, r2, r3
 8009236:	43db      	mvns	r3, r3
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	4013      	ands	r3, r2
 800923c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	091b      	lsrs	r3, r3, #4
 8009244:	f003 0201 	and.w	r2, r3, #1
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	fa02 f303 	lsl.w	r3, r2, r3
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	4313      	orrs	r3, r2
 8009252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	2b03      	cmp	r3, #3
 8009264:	d118      	bne.n	8009298 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800926c:	2201      	movs	r2, #1
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	fa02 f303 	lsl.w	r3, r2, r3
 8009274:	43db      	mvns	r3, r3
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	4013      	ands	r3, r2
 800927a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	08db      	lsrs	r3, r3, #3
 8009282:	f003 0201 	and.w	r2, r3, #1
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	fa02 f303 	lsl.w	r3, r2, r3
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	4313      	orrs	r3, r2
 8009290:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	2203      	movs	r2, #3
 80092a4:	fa02 f303 	lsl.w	r3, r2, r3
 80092a8:	43db      	mvns	r3, r3
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	4013      	ands	r3, r2
 80092ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	fa02 f303 	lsl.w	r3, r2, r3
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	4313      	orrs	r3, r2
 80092c0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d003      	beq.n	80092d8 <HAL_GPIO_Init+0x128>
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b12      	cmp	r3, #18
 80092d6:	d123      	bne.n	8009320 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	08da      	lsrs	r2, r3, #3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3208      	adds	r2, #8
 80092e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	220f      	movs	r2, #15
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	43db      	mvns	r3, r3
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	4013      	ands	r3, r2
 80092fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f003 0307 	and.w	r3, r3, #7
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	fa02 f303 	lsl.w	r3, r2, r3
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	4313      	orrs	r3, r2
 8009310:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	08da      	lsrs	r2, r3, #3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3208      	adds	r2, #8
 800931a:	6939      	ldr	r1, [r7, #16]
 800931c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	2203      	movs	r2, #3
 800932c:	fa02 f303 	lsl.w	r3, r2, r3
 8009330:	43db      	mvns	r3, r3
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4013      	ands	r3, r2
 8009336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f003 0203 	and.w	r2, r3, #3
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	005b      	lsls	r3, r3, #1
 8009344:	fa02 f303 	lsl.w	r3, r2, r3
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	4313      	orrs	r3, r2
 800934c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 80ac 	beq.w	80094ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009362:	4b5e      	ldr	r3, [pc, #376]	; (80094dc <HAL_GPIO_Init+0x32c>)
 8009364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009366:	4a5d      	ldr	r2, [pc, #372]	; (80094dc <HAL_GPIO_Init+0x32c>)
 8009368:	f043 0301 	orr.w	r3, r3, #1
 800936c:	6613      	str	r3, [r2, #96]	; 0x60
 800936e:	4b5b      	ldr	r3, [pc, #364]	; (80094dc <HAL_GPIO_Init+0x32c>)
 8009370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	60bb      	str	r3, [r7, #8]
 8009378:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800937a:	4a59      	ldr	r2, [pc, #356]	; (80094e0 <HAL_GPIO_Init+0x330>)
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	089b      	lsrs	r3, r3, #2
 8009380:	3302      	adds	r3, #2
 8009382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009386:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	220f      	movs	r2, #15
 8009392:	fa02 f303 	lsl.w	r3, r2, r3
 8009396:	43db      	mvns	r3, r3
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	4013      	ands	r3, r2
 800939c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80093a4:	d025      	beq.n	80093f2 <HAL_GPIO_Init+0x242>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a4e      	ldr	r2, [pc, #312]	; (80094e4 <HAL_GPIO_Init+0x334>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d01f      	beq.n	80093ee <HAL_GPIO_Init+0x23e>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a4d      	ldr	r2, [pc, #308]	; (80094e8 <HAL_GPIO_Init+0x338>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d019      	beq.n	80093ea <HAL_GPIO_Init+0x23a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a4c      	ldr	r2, [pc, #304]	; (80094ec <HAL_GPIO_Init+0x33c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d013      	beq.n	80093e6 <HAL_GPIO_Init+0x236>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a4b      	ldr	r2, [pc, #300]	; (80094f0 <HAL_GPIO_Init+0x340>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d00d      	beq.n	80093e2 <HAL_GPIO_Init+0x232>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a4a      	ldr	r2, [pc, #296]	; (80094f4 <HAL_GPIO_Init+0x344>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d007      	beq.n	80093de <HAL_GPIO_Init+0x22e>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a49      	ldr	r2, [pc, #292]	; (80094f8 <HAL_GPIO_Init+0x348>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d101      	bne.n	80093da <HAL_GPIO_Init+0x22a>
 80093d6:	2306      	movs	r3, #6
 80093d8:	e00c      	b.n	80093f4 <HAL_GPIO_Init+0x244>
 80093da:	2307      	movs	r3, #7
 80093dc:	e00a      	b.n	80093f4 <HAL_GPIO_Init+0x244>
 80093de:	2305      	movs	r3, #5
 80093e0:	e008      	b.n	80093f4 <HAL_GPIO_Init+0x244>
 80093e2:	2304      	movs	r3, #4
 80093e4:	e006      	b.n	80093f4 <HAL_GPIO_Init+0x244>
 80093e6:	2303      	movs	r3, #3
 80093e8:	e004      	b.n	80093f4 <HAL_GPIO_Init+0x244>
 80093ea:	2302      	movs	r3, #2
 80093ec:	e002      	b.n	80093f4 <HAL_GPIO_Init+0x244>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <HAL_GPIO_Init+0x244>
 80093f2:	2300      	movs	r3, #0
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	f002 0203 	and.w	r2, r2, #3
 80093fa:	0092      	lsls	r2, r2, #2
 80093fc:	4093      	lsls	r3, r2
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	4313      	orrs	r3, r2
 8009402:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009404:	4936      	ldr	r1, [pc, #216]	; (80094e0 <HAL_GPIO_Init+0x330>)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	089b      	lsrs	r3, r3, #2
 800940a:	3302      	adds	r3, #2
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009412:	4b3a      	ldr	r3, [pc, #232]	; (80094fc <HAL_GPIO_Init+0x34c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	43db      	mvns	r3, r3
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	4013      	ands	r3, r2
 8009420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d003      	beq.n	8009436 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4313      	orrs	r3, r2
 8009434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009436:	4a31      	ldr	r2, [pc, #196]	; (80094fc <HAL_GPIO_Init+0x34c>)
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800943c:	4b2f      	ldr	r3, [pc, #188]	; (80094fc <HAL_GPIO_Init+0x34c>)
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	43db      	mvns	r3, r3
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4013      	ands	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4313      	orrs	r3, r2
 800945e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009460:	4a26      	ldr	r2, [pc, #152]	; (80094fc <HAL_GPIO_Init+0x34c>)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009466:	4b25      	ldr	r3, [pc, #148]	; (80094fc <HAL_GPIO_Init+0x34c>)
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	43db      	mvns	r3, r3
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	4013      	ands	r3, r2
 8009474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800948a:	4a1c      	ldr	r2, [pc, #112]	; (80094fc <HAL_GPIO_Init+0x34c>)
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009490:	4b1a      	ldr	r3, [pc, #104]	; (80094fc <HAL_GPIO_Init+0x34c>)
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	43db      	mvns	r3, r3
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4013      	ands	r3, r2
 800949e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80094b4:	4a11      	ldr	r2, [pc, #68]	; (80094fc <HAL_GPIO_Init+0x34c>)
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	3301      	adds	r3, #1
 80094be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	fa22 f303 	lsr.w	r3, r2, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f47f ae78 	bne.w	80091c0 <HAL_GPIO_Init+0x10>
  }
}
 80094d0:	bf00      	nop
 80094d2:	371c      	adds	r7, #28
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	40021000 	.word	0x40021000
 80094e0:	40010000 	.word	0x40010000
 80094e4:	48000400 	.word	0x48000400
 80094e8:	48000800 	.word	0x48000800
 80094ec:	48000c00 	.word	0x48000c00
 80094f0:	48001000 	.word	0x48001000
 80094f4:	48001400 	.word	0x48001400
 80094f8:	48001800 	.word	0x48001800
 80094fc:	40010400 	.word	0x40010400

08009500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	691a      	ldr	r2, [r3, #16]
 8009510:	887b      	ldrh	r3, [r7, #2]
 8009512:	4013      	ands	r3, r2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009518:	2301      	movs	r3, #1
 800951a:	73fb      	strb	r3, [r7, #15]
 800951c:	e001      	b.n	8009522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800951e:	2300      	movs	r3, #0
 8009520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	807b      	strh	r3, [r7, #2]
 800953c:	4613      	mov	r3, r2
 800953e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009540:	787b      	ldrb	r3, [r7, #1]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009546:	887a      	ldrh	r2, [r7, #2]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800954c:	e002      	b.n	8009554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800954e:	887a      	ldrh	r2, [r7, #2]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800956a:	4b08      	ldr	r3, [pc, #32]	; (800958c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800956c:	695a      	ldr	r2, [r3, #20]
 800956e:	88fb      	ldrh	r3, [r7, #6]
 8009570:	4013      	ands	r3, r2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d006      	beq.n	8009584 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009576:	4a05      	ldr	r2, [pc, #20]	; (800958c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009578:	88fb      	ldrh	r3, [r7, #6]
 800957a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800957c:	88fb      	ldrh	r3, [r7, #6]
 800957e:	4618      	mov	r0, r3
 8009580:	f000 f806 	bl	8009590 <HAL_GPIO_EXTI_Callback>
  }
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	40010400 	.word	0x40010400

08009590 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800959a:	bf00      	nop
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b082      	sub	sp, #8
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e081      	b.n	80096bc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d106      	bne.n	80095d2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7fe ffc3 	bl	8008558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2224      	movs	r2, #36	; 0x24
 80095d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 0201 	bic.w	r2, r2, #1
 80095e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80095f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009606:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d107      	bne.n	8009620 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689a      	ldr	r2, [r3, #8]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800961c:	609a      	str	r2, [r3, #8]
 800961e:	e006      	b.n	800962e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689a      	ldr	r2, [r3, #8]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800962c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d104      	bne.n	8009640 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800963e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6812      	ldr	r2, [r2, #0]
 800964a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800964e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009652:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009662:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691a      	ldr	r2, [r3, #16]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	ea42 0103 	orr.w	r1, r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	021a      	lsls	r2, r3, #8
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	69d9      	ldr	r1, [r3, #28]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1a      	ldr	r2, [r3, #32]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f042 0201 	orr.w	r2, r2, #1
 800969c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	4608      	mov	r0, r1
 80096ce:	4611      	mov	r1, r2
 80096d0:	461a      	mov	r2, r3
 80096d2:	4603      	mov	r3, r0
 80096d4:	817b      	strh	r3, [r7, #10]
 80096d6:	460b      	mov	r3, r1
 80096d8:	813b      	strh	r3, [r7, #8]
 80096da:	4613      	mov	r3, r2
 80096dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	f040 80f9 	bne.w	80098de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <HAL_I2C_Mem_Write+0x34>
 80096f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d105      	bne.n	8009704 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e0ed      	b.n	80098e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <HAL_I2C_Mem_Write+0x4e>
 800970e:	2302      	movs	r3, #2
 8009710:	e0e6      	b.n	80098e0 <HAL_I2C_Mem_Write+0x21c>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800971a:	f7ff fa13 	bl	8008b44 <HAL_GetTick>
 800971e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	2319      	movs	r3, #25
 8009726:	2201      	movs	r2, #1
 8009728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 fac3 	bl	8009cb8 <I2C_WaitOnFlagUntilTimeout>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e0d1      	b.n	80098e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2221      	movs	r2, #33	; 0x21
 8009740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2240      	movs	r2, #64	; 0x40
 8009748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a3a      	ldr	r2, [r7, #32]
 8009756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800975c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009764:	88f8      	ldrh	r0, [r7, #6]
 8009766:	893a      	ldrh	r2, [r7, #8]
 8009768:	8979      	ldrh	r1, [r7, #10]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	4603      	mov	r3, r0
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f9d3 	bl	8009b20 <I2C_RequestMemoryWrite>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e0a9      	b.n	80098e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009790:	b29b      	uxth	r3, r3
 8009792:	2bff      	cmp	r3, #255	; 0xff
 8009794:	d90e      	bls.n	80097b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	22ff      	movs	r2, #255	; 0xff
 800979a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	8979      	ldrh	r1, [r7, #10]
 80097a4:	2300      	movs	r3, #0
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 fba5 	bl	8009efc <I2C_TransferConfig>
 80097b2:	e00f      	b.n	80097d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	8979      	ldrh	r1, [r7, #10]
 80097c6:	2300      	movs	r3, #0
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fb94 	bl	8009efc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 faad 	bl	8009d38 <I2C_WaitOnTXISFlagUntilTimeout>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e07b      	b.n	80098e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009802:	b29b      	uxth	r3, r3
 8009804:	3b01      	subs	r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009810:	3b01      	subs	r3, #1
 8009812:	b29a      	uxth	r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800981c:	b29b      	uxth	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d034      	beq.n	800988c <HAL_I2C_Mem_Write+0x1c8>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009826:	2b00      	cmp	r3, #0
 8009828:	d130      	bne.n	800988c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009830:	2200      	movs	r2, #0
 8009832:	2180      	movs	r1, #128	; 0x80
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 fa3f 	bl	8009cb8 <I2C_WaitOnFlagUntilTimeout>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e04d      	b.n	80098e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009848:	b29b      	uxth	r3, r3
 800984a:	2bff      	cmp	r3, #255	; 0xff
 800984c:	d90e      	bls.n	800986c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	22ff      	movs	r2, #255	; 0xff
 8009852:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009858:	b2da      	uxtb	r2, r3
 800985a:	8979      	ldrh	r1, [r7, #10]
 800985c:	2300      	movs	r3, #0
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 fb49 	bl	8009efc <I2C_TransferConfig>
 800986a:	e00f      	b.n	800988c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009870:	b29a      	uxth	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800987a:	b2da      	uxtb	r2, r3
 800987c:	8979      	ldrh	r1, [r7, #10]
 800987e:	2300      	movs	r3, #0
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 fb38 	bl	8009efc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009890:	b29b      	uxth	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d19e      	bne.n	80097d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 fa8c 	bl	8009db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e01a      	b.n	80098e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2220      	movs	r2, #32
 80098b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6859      	ldr	r1, [r3, #4]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <HAL_I2C_Mem_Write+0x224>)
 80098be:	400b      	ands	r3, r1
 80098c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	e000      	b.n	80098e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80098de:	2302      	movs	r3, #2
  }
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	fe00e800 	.word	0xfe00e800

080098ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	4608      	mov	r0, r1
 80098f6:	4611      	mov	r1, r2
 80098f8:	461a      	mov	r2, r3
 80098fa:	4603      	mov	r3, r0
 80098fc:	817b      	strh	r3, [r7, #10]
 80098fe:	460b      	mov	r3, r1
 8009900:	813b      	strh	r3, [r7, #8]
 8009902:	4613      	mov	r3, r2
 8009904:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b20      	cmp	r3, #32
 8009910:	f040 80fd 	bne.w	8009b0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <HAL_I2C_Mem_Read+0x34>
 800991a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800991c:	2b00      	cmp	r3, #0
 800991e:	d105      	bne.n	800992c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009926:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e0f1      	b.n	8009b10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009932:	2b01      	cmp	r3, #1
 8009934:	d101      	bne.n	800993a <HAL_I2C_Mem_Read+0x4e>
 8009936:	2302      	movs	r3, #2
 8009938:	e0ea      	b.n	8009b10 <HAL_I2C_Mem_Read+0x224>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009942:	f7ff f8ff 	bl	8008b44 <HAL_GetTick>
 8009946:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	2319      	movs	r3, #25
 800994e:	2201      	movs	r2, #1
 8009950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 f9af 	bl	8009cb8 <I2C_WaitOnFlagUntilTimeout>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d001      	beq.n	8009964 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e0d5      	b.n	8009b10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2222      	movs	r2, #34	; 0x22
 8009968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2240      	movs	r2, #64	; 0x40
 8009970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a3a      	ldr	r2, [r7, #32]
 800997e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800998c:	88f8      	ldrh	r0, [r7, #6]
 800998e:	893a      	ldrh	r2, [r7, #8]
 8009990:	8979      	ldrh	r1, [r7, #10]
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	4603      	mov	r3, r0
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f913 	bl	8009bc8 <I2C_RequestMemoryRead>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d005      	beq.n	80099b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e0ad      	b.n	8009b10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	2bff      	cmp	r3, #255	; 0xff
 80099bc:	d90e      	bls.n	80099dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	22ff      	movs	r2, #255	; 0xff
 80099c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	8979      	ldrh	r1, [r7, #10]
 80099cc:	4b52      	ldr	r3, [pc, #328]	; (8009b18 <HAL_I2C_Mem_Read+0x22c>)
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fa91 	bl	8009efc <I2C_TransferConfig>
 80099da:	e00f      	b.n	80099fc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	8979      	ldrh	r1, [r7, #10]
 80099ee:	4b4a      	ldr	r3, [pc, #296]	; (8009b18 <HAL_I2C_Mem_Read+0x22c>)
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 fa80 	bl	8009efc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	2200      	movs	r2, #0
 8009a04:	2104      	movs	r1, #4
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 f956 	bl	8009cb8 <I2C_WaitOnFlagUntilTimeout>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e07c      	b.n	8009b10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a32:	3b01      	subs	r3, #1
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	3b01      	subs	r3, #1
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d034      	beq.n	8009abc <HAL_I2C_Mem_Read+0x1d0>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d130      	bne.n	8009abc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	2200      	movs	r2, #0
 8009a62:	2180      	movs	r1, #128	; 0x80
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 f927 	bl	8009cb8 <I2C_WaitOnFlagUntilTimeout>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e04d      	b.n	8009b10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	2bff      	cmp	r3, #255	; 0xff
 8009a7c:	d90e      	bls.n	8009a9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	22ff      	movs	r2, #255	; 0xff
 8009a82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	8979      	ldrh	r1, [r7, #10]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 fa31 	bl	8009efc <I2C_TransferConfig>
 8009a9a:	e00f      	b.n	8009abc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	8979      	ldrh	r1, [r7, #10]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 fa20 	bl	8009efc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d19a      	bne.n	80099fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 f974 	bl	8009db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e01a      	b.n	8009b10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6859      	ldr	r1, [r3, #4]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	4b0b      	ldr	r3, [pc, #44]	; (8009b1c <HAL_I2C_Mem_Read+0x230>)
 8009aee:	400b      	ands	r3, r1
 8009af0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	e000      	b.n	8009b10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009b0e:	2302      	movs	r3, #2
  }
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	80002400 	.word	0x80002400
 8009b1c:	fe00e800 	.word	0xfe00e800

08009b20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af02      	add	r7, sp, #8
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	4608      	mov	r0, r1
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4603      	mov	r3, r0
 8009b30:	817b      	strh	r3, [r7, #10]
 8009b32:	460b      	mov	r3, r1
 8009b34:	813b      	strh	r3, [r7, #8]
 8009b36:	4613      	mov	r3, r2
 8009b38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009b3a:	88fb      	ldrh	r3, [r7, #6]
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	8979      	ldrh	r1, [r7, #10]
 8009b40:	4b20      	ldr	r3, [pc, #128]	; (8009bc4 <I2C_RequestMemoryWrite+0xa4>)
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 f9d7 	bl	8009efc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b4e:	69fa      	ldr	r2, [r7, #28]
 8009b50:	69b9      	ldr	r1, [r7, #24]
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f000 f8f0 	bl	8009d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e02c      	b.n	8009bbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b62:	88fb      	ldrh	r3, [r7, #6]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d105      	bne.n	8009b74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b68:	893b      	ldrh	r3, [r7, #8]
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	629a      	str	r2, [r3, #40]	; 0x28
 8009b72:	e015      	b.n	8009ba0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009b74:	893b      	ldrh	r3, [r7, #8]
 8009b76:	0a1b      	lsrs	r3, r3, #8
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b82:	69fa      	ldr	r2, [r7, #28]
 8009b84:	69b9      	ldr	r1, [r7, #24]
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 f8d6 	bl	8009d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e012      	b.n	8009bbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b96:	893b      	ldrh	r3, [r7, #8]
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2180      	movs	r1, #128	; 0x80
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 f884 	bl	8009cb8 <I2C_WaitOnFlagUntilTimeout>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e000      	b.n	8009bbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	80002000 	.word	0x80002000

08009bc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af02      	add	r7, sp, #8
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	4608      	mov	r0, r1
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	817b      	strh	r3, [r7, #10]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	813b      	strh	r3, [r7, #8]
 8009bde:	4613      	mov	r3, r2
 8009be0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009be2:	88fb      	ldrh	r3, [r7, #6]
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	8979      	ldrh	r1, [r7, #10]
 8009be8:	4b20      	ldr	r3, [pc, #128]	; (8009c6c <I2C_RequestMemoryRead+0xa4>)
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	2300      	movs	r3, #0
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 f984 	bl	8009efc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bf4:	69fa      	ldr	r2, [r7, #28]
 8009bf6:	69b9      	ldr	r1, [r7, #24]
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f000 f89d 	bl	8009d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e02c      	b.n	8009c62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009c08:	88fb      	ldrh	r3, [r7, #6]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d105      	bne.n	8009c1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c0e:	893b      	ldrh	r3, [r7, #8]
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	629a      	str	r2, [r3, #40]	; 0x28
 8009c18:	e015      	b.n	8009c46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009c1a:	893b      	ldrh	r3, [r7, #8]
 8009c1c:	0a1b      	lsrs	r3, r3, #8
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c28:	69fa      	ldr	r2, [r7, #28]
 8009c2a:	69b9      	ldr	r1, [r7, #24]
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f000 f883 	bl	8009d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e012      	b.n	8009c62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c3c:	893b      	ldrh	r3, [r7, #8]
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2140      	movs	r1, #64	; 0x40
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 f831 	bl	8009cb8 <I2C_WaitOnFlagUntilTimeout>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e000      	b.n	8009c62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	80002000 	.word	0x80002000

08009c70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	f003 0302 	and.w	r3, r3, #2
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d103      	bne.n	8009c8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	f003 0301 	and.w	r3, r3, #1
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d007      	beq.n	8009cac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	699a      	ldr	r2, [r3, #24]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f042 0201 	orr.w	r2, r2, #1
 8009caa:	619a      	str	r2, [r3, #24]
  }
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cc8:	e022      	b.n	8009d10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd0:	d01e      	beq.n	8009d10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cd2:	f7fe ff37 	bl	8008b44 <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d302      	bcc.n	8009ce8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d113      	bne.n	8009d10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cec:	f043 0220 	orr.w	r2, r3, #32
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e00f      	b.n	8009d30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	699a      	ldr	r2, [r3, #24]
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4013      	ands	r3, r2
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	bf0c      	ite	eq
 8009d20:	2301      	moveq	r3, #1
 8009d22:	2300      	movne	r3, #0
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	461a      	mov	r2, r3
 8009d28:	79fb      	ldrb	r3, [r7, #7]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d0cd      	beq.n	8009cca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d44:	e02c      	b.n	8009da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	68b9      	ldr	r1, [r7, #8]
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f000 f870 	bl	8009e30 <I2C_IsAcknowledgeFailed>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e02a      	b.n	8009db0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d60:	d01e      	beq.n	8009da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d62:	f7fe feef 	bl	8008b44 <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d302      	bcc.n	8009d78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d113      	bne.n	8009da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d7c:	f043 0220 	orr.w	r2, r3, #32
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e007      	b.n	8009db0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d1cb      	bne.n	8009d46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dc4:	e028      	b.n	8009e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f000 f830 	bl	8009e30 <I2C_IsAcknowledgeFailed>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e026      	b.n	8009e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dda:	f7fe feb3 	bl	8008b44 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d302      	bcc.n	8009df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d113      	bne.n	8009e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df4:	f043 0220 	orr.w	r2, r3, #32
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e007      	b.n	8009e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b20      	cmp	r3, #32
 8009e24:	d1cf      	bne.n	8009dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	f003 0310 	and.w	r3, r3, #16
 8009e46:	2b10      	cmp	r3, #16
 8009e48:	d151      	bne.n	8009eee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e4a:	e022      	b.n	8009e92 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e52:	d01e      	beq.n	8009e92 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e54:	f7fe fe76 	bl	8008b44 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d302      	bcc.n	8009e6a <I2C_IsAcknowledgeFailed+0x3a>
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d113      	bne.n	8009e92 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e6e:	f043 0220 	orr.w	r2, r3, #32
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e02e      	b.n	8009ef0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	f003 0320 	and.w	r3, r3, #32
 8009e9c:	2b20      	cmp	r3, #32
 8009e9e:	d1d5      	bne.n	8009e4c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2210      	movs	r2, #16
 8009ea6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2220      	movs	r2, #32
 8009eae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f7ff fedd 	bl	8009c70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	6859      	ldr	r1, [r3, #4]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <I2C_IsAcknowledgeFailed+0xc8>)
 8009ec2:	400b      	ands	r3, r1
 8009ec4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eca:	f043 0204 	orr.w	r2, r3, #4
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e000      	b.n	8009ef0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	fe00e800 	.word	0xfe00e800

08009efc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	607b      	str	r3, [r7, #4]
 8009f06:	460b      	mov	r3, r1
 8009f08:	817b      	strh	r3, [r7, #10]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685a      	ldr	r2, [r3, #4]
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	0d5b      	lsrs	r3, r3, #21
 8009f18:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009f1c:	4b0d      	ldr	r3, [pc, #52]	; (8009f54 <I2C_TransferConfig+0x58>)
 8009f1e:	430b      	orrs	r3, r1
 8009f20:	43db      	mvns	r3, r3
 8009f22:	ea02 0103 	and.w	r1, r2, r3
 8009f26:	897b      	ldrh	r3, [r7, #10]
 8009f28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009f2c:	7a7b      	ldrb	r3, [r7, #9]
 8009f2e:	041b      	lsls	r3, r3, #16
 8009f30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f34:	431a      	orrs	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	431a      	orrs	r2, r3
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009f46:	bf00      	nop
 8009f48:	3714      	adds	r7, #20
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	03ff63ff 	.word	0x03ff63ff

08009f58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	d138      	bne.n	8009fe0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d101      	bne.n	8009f7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009f78:	2302      	movs	r3, #2
 8009f7a:	e032      	b.n	8009fe2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2224      	movs	r2, #36	; 0x24
 8009f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 0201 	bic.w	r2, r2, #1
 8009f9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009faa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6819      	ldr	r1, [r3, #0]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f042 0201 	orr.w	r2, r2, #1
 8009fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	e000      	b.n	8009fe2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009fe0:	2302      	movs	r3, #2
  }
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b085      	sub	sp, #20
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b20      	cmp	r3, #32
 800a002:	d139      	bne.n	800a078 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d101      	bne.n	800a012 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a00e:	2302      	movs	r3, #2
 800a010:	e033      	b.n	800a07a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2224      	movs	r2, #36	; 0x24
 800a01e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f022 0201 	bic.w	r2, r2, #1
 800a030:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a040:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	021b      	lsls	r3, r3, #8
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	4313      	orrs	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0201 	orr.w	r2, r2, #1
 800a062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2220      	movs	r2, #32
 800a068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	e000      	b.n	800a07a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a078:	2302      	movs	r3, #2
  }
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a086:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a088:	b08f      	sub	sp, #60	; 0x3c
 800a08a:	af0a      	add	r7, sp, #40	; 0x28
 800a08c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e116      	b.n	800a2c6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d106      	bne.n	800a0b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7fe fb92 	bl	80087dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d102      	bne.n	800a0d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f002 fba6 	bl	800c828 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	603b      	str	r3, [r7, #0]
 800a0e2:	687e      	ldr	r6, [r7, #4]
 800a0e4:	466d      	mov	r5, sp
 800a0e6:	f106 0410 	add.w	r4, r6, #16
 800a0ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a0f6:	e885 0003 	stmia.w	r5, {r0, r1}
 800a0fa:	1d33      	adds	r3, r6, #4
 800a0fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0fe:	6838      	ldr	r0, [r7, #0]
 800a100:	f002 fb40 	bl	800c784 <USB_CoreInit>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2202      	movs	r2, #2
 800a10e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e0d7      	b.n	800a2c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2100      	movs	r1, #0
 800a11c:	4618      	mov	r0, r3
 800a11e:	f002 fb94 	bl	800c84a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a122:	2300      	movs	r3, #0
 800a124:	73fb      	strb	r3, [r7, #15]
 800a126:	e04a      	b.n	800a1be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a128:	7bfa      	ldrb	r2, [r7, #15]
 800a12a:	6879      	ldr	r1, [r7, #4]
 800a12c:	4613      	mov	r3, r2
 800a12e:	00db      	lsls	r3, r3, #3
 800a130:	1a9b      	subs	r3, r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	440b      	add	r3, r1
 800a136:	333d      	adds	r3, #61	; 0x3d
 800a138:	2201      	movs	r2, #1
 800a13a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a13c:	7bfa      	ldrb	r2, [r7, #15]
 800a13e:	6879      	ldr	r1, [r7, #4]
 800a140:	4613      	mov	r3, r2
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	1a9b      	subs	r3, r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	440b      	add	r3, r1
 800a14a:	333c      	adds	r3, #60	; 0x3c
 800a14c:	7bfa      	ldrb	r2, [r7, #15]
 800a14e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a150:	7bfa      	ldrb	r2, [r7, #15]
 800a152:	7bfb      	ldrb	r3, [r7, #15]
 800a154:	b298      	uxth	r0, r3
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	4613      	mov	r3, r2
 800a15a:	00db      	lsls	r3, r3, #3
 800a15c:	1a9b      	subs	r3, r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	440b      	add	r3, r1
 800a162:	3342      	adds	r3, #66	; 0x42
 800a164:	4602      	mov	r2, r0
 800a166:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a168:	7bfa      	ldrb	r2, [r7, #15]
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	4613      	mov	r3, r2
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	1a9b      	subs	r3, r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	440b      	add	r3, r1
 800a176:	333f      	adds	r3, #63	; 0x3f
 800a178:	2200      	movs	r2, #0
 800a17a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a17c:	7bfa      	ldrb	r2, [r7, #15]
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	4613      	mov	r3, r2
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	1a9b      	subs	r3, r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	440b      	add	r3, r1
 800a18a:	3344      	adds	r3, #68	; 0x44
 800a18c:	2200      	movs	r2, #0
 800a18e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a190:	7bfa      	ldrb	r2, [r7, #15]
 800a192:	6879      	ldr	r1, [r7, #4]
 800a194:	4613      	mov	r3, r2
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	1a9b      	subs	r3, r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	440b      	add	r3, r1
 800a19e:	3348      	adds	r3, #72	; 0x48
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a1a4:	7bfa      	ldrb	r2, [r7, #15]
 800a1a6:	6879      	ldr	r1, [r7, #4]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	00db      	lsls	r3, r3, #3
 800a1ac:	1a9b      	subs	r3, r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	440b      	add	r3, r1
 800a1b2:	3350      	adds	r3, #80	; 0x50
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	73fb      	strb	r3, [r7, #15]
 800a1be:	7bfa      	ldrb	r2, [r7, #15]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d3af      	bcc.n	800a128 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	73fb      	strb	r3, [r7, #15]
 800a1cc:	e044      	b.n	800a258 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a1ce:	7bfa      	ldrb	r2, [r7, #15]
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	1a9b      	subs	r3, r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	440b      	add	r3, r1
 800a1dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a1e4:	7bfa      	ldrb	r2, [r7, #15]
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	00db      	lsls	r3, r3, #3
 800a1ec:	1a9b      	subs	r3, r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	440b      	add	r3, r1
 800a1f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a1f6:	7bfa      	ldrb	r2, [r7, #15]
 800a1f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a1fa:	7bfa      	ldrb	r2, [r7, #15]
 800a1fc:	6879      	ldr	r1, [r7, #4]
 800a1fe:	4613      	mov	r3, r2
 800a200:	00db      	lsls	r3, r3, #3
 800a202:	1a9b      	subs	r3, r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	440b      	add	r3, r1
 800a208:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a20c:	2200      	movs	r2, #0
 800a20e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a210:	7bfa      	ldrb	r2, [r7, #15]
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	4613      	mov	r3, r2
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	1a9b      	subs	r3, r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	440b      	add	r3, r1
 800a21e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a222:	2200      	movs	r2, #0
 800a224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a226:	7bfa      	ldrb	r2, [r7, #15]
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	4613      	mov	r3, r2
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	1a9b      	subs	r3, r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	440b      	add	r3, r1
 800a234:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a238:	2200      	movs	r2, #0
 800a23a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a23c:	7bfa      	ldrb	r2, [r7, #15]
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	4613      	mov	r3, r2
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	1a9b      	subs	r3, r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	440b      	add	r3, r1
 800a24a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a252:	7bfb      	ldrb	r3, [r7, #15]
 800a254:	3301      	adds	r3, #1
 800a256:	73fb      	strb	r3, [r7, #15]
 800a258:	7bfa      	ldrb	r2, [r7, #15]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d3b5      	bcc.n	800a1ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	603b      	str	r3, [r7, #0]
 800a268:	687e      	ldr	r6, [r7, #4]
 800a26a:	466d      	mov	r5, sp
 800a26c:	f106 0410 	add.w	r4, r6, #16
 800a270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a278:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a27c:	e885 0003 	stmia.w	r5, {r0, r1}
 800a280:	1d33      	adds	r3, r6, #4
 800a282:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a284:	6838      	ldr	r0, [r7, #0]
 800a286:	f002 fb0b 	bl	800c8a0 <USB_DevInit>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d005      	beq.n	800a29c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2202      	movs	r2, #2
 800a294:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e014      	b.n	800a2c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d102      	bne.n	800a2ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f80a 	bl	800a2ce <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f002 fc9b 	bl	800cbfa <USB_DevDisconnect>

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b085      	sub	sp, #20
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a300:	f043 0303 	orr.w	r3, r3, #3
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
	...

0800a318 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a04      	ldr	r2, [pc, #16]	; (800a334 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a326:	6013      	str	r3, [r2, #0]
}
 800a328:	bf00      	nop
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	40007000 	.word	0x40007000

0800a338 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a338:	b480      	push	{r7}
 800a33a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a33c:	4b04      	ldr	r3, [pc, #16]	; (800a350 <HAL_PWREx_GetVoltageRange+0x18>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a344:	4618      	mov	r0, r3
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	40007000 	.word	0x40007000

0800a354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a362:	d130      	bne.n	800a3c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a364:	4b23      	ldr	r3, [pc, #140]	; (800a3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a370:	d038      	beq.n	800a3e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a372:	4b20      	ldr	r3, [pc, #128]	; (800a3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a37a:	4a1e      	ldr	r2, [pc, #120]	; (800a3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a37c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a380:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a382:	4b1d      	ldr	r3, [pc, #116]	; (800a3f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2232      	movs	r2, #50	; 0x32
 800a388:	fb02 f303 	mul.w	r3, r2, r3
 800a38c:	4a1b      	ldr	r2, [pc, #108]	; (800a3fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a38e:	fba2 2303 	umull	r2, r3, r2, r3
 800a392:	0c9b      	lsrs	r3, r3, #18
 800a394:	3301      	adds	r3, #1
 800a396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a398:	e002      	b.n	800a3a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3a0:	4b14      	ldr	r3, [pc, #80]	; (800a3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ac:	d102      	bne.n	800a3b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1f2      	bne.n	800a39a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a3b4:	4b0f      	ldr	r3, [pc, #60]	; (800a3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3b6:	695b      	ldr	r3, [r3, #20]
 800a3b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3c0:	d110      	bne.n	800a3e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e00f      	b.n	800a3e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a3c6:	4b0b      	ldr	r3, [pc, #44]	; (800a3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3d2:	d007      	beq.n	800a3e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a3d4:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a3dc:	4a05      	ldr	r2, [pc, #20]	; (800a3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	40007000 	.word	0x40007000
 800a3f8:	20000000 	.word	0x20000000
 800a3fc:	431bde83 	.word	0x431bde83

0800a400 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a400:	b480      	push	{r7}
 800a402:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a404:	4b05      	ldr	r3, [pc, #20]	; (800a41c <HAL_PWREx_EnableVddUSB+0x1c>)
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4a04      	ldr	r2, [pc, #16]	; (800a41c <HAL_PWREx_EnableVddUSB+0x1c>)
 800a40a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a40e:	6053      	str	r3, [r2, #4]
}
 800a410:	bf00      	nop
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	40007000 	.word	0x40007000

0800a420 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af02      	add	r7, sp, #8
 800a426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a428:	f7fe fb8c 	bl	8008b44 <HAL_GetTick>
 800a42c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e06f      	b.n	800a518 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	2b01      	cmp	r3, #1
 800a442:	d101      	bne.n	800a448 <HAL_QSPI_Init+0x28>
 800a444:	2302      	movs	r3, #2
 800a446:	e067      	b.n	800a518 <HAL_QSPI_Init+0xf8>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10b      	bne.n	800a474 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7fe f8bb 	bl	80085e0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a46a:	f241 3188 	movw	r1, #5000	; 0x1388
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f858 	bl	800a524 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	3b01      	subs	r3, #1
 800a484:	021a      	lsls	r2, r3, #8
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	2120      	movs	r1, #32
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f850 	bl	800a540 <QSPI_WaitFlagStateUntilTimeout>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a4a4:	7afb      	ldrb	r3, [r7, #11]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d131      	bne.n	800a50e <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a4b4:	f023 0310 	bic.w	r3, r3, #16
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	6852      	ldr	r2, [r2, #4]
 800a4bc:	0611      	lsls	r1, r2, #24
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	68d2      	ldr	r2, [r2, #12]
 800a4c2:	4311      	orrs	r1, r2
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	6812      	ldr	r2, [r2, #0]
 800a4c8:	430b      	orrs	r3, r1
 800a4ca:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	4b13      	ldr	r3, [pc, #76]	; (800a520 <HAL_QSPI_Init+0x100>)
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	6912      	ldr	r2, [r2, #16]
 800a4da:	0411      	lsls	r1, r2, #16
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	6952      	ldr	r2, [r2, #20]
 800a4e0:	4311      	orrs	r1, r2
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	6992      	ldr	r2, [r2, #24]
 800a4e6:	4311      	orrs	r1, r2
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	6812      	ldr	r2, [r2, #0]
 800a4ec:	430b      	orrs	r3, r1
 800a4ee:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0201 	orr.w	r2, r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800a516:	7afb      	ldrb	r3, [r7, #11]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	ffe0f8fe 	.word	0xffe0f8fe

0800a524 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	641a      	str	r2, [r3, #64]	; 0x40
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	4613      	mov	r3, r2
 800a54e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a550:	e01a      	b.n	800a588 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d016      	beq.n	800a588 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a55a:	f7fe faf3 	bl	8008b44 <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	69ba      	ldr	r2, [r7, #24]
 800a566:	429a      	cmp	r2, r3
 800a568:	d302      	bcc.n	800a570 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10b      	bne.n	800a588 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2204      	movs	r2, #4
 800a574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57c:	f043 0201 	orr.w	r2, r3, #1
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e00e      	b.n	800a5a6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689a      	ldr	r2, [r3, #8]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	4013      	ands	r3, r2
 800a592:	2b00      	cmp	r3, #0
 800a594:	bf14      	ite	ne
 800a596:	2301      	movne	r3, #1
 800a598:	2300      	moveq	r3, #0
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	461a      	mov	r2, r3
 800a59e:	79fb      	ldrb	r3, [r7, #7]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d1d6      	bne.n	800a552 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
	...

0800a5b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b088      	sub	sp, #32
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e3d4      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5c2:	4ba1      	ldr	r3, [pc, #644]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f003 030c 	and.w	r3, r3, #12
 800a5ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a5cc:	4b9e      	ldr	r3, [pc, #632]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f003 0303 	and.w	r3, r3, #3
 800a5d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0310 	and.w	r3, r3, #16
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 80e4 	beq.w	800a7ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d007      	beq.n	800a5fa <HAL_RCC_OscConfig+0x4a>
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	2b0c      	cmp	r3, #12
 800a5ee:	f040 808b 	bne.w	800a708 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	f040 8087 	bne.w	800a708 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a5fa:	4b93      	ldr	r3, [pc, #588]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f003 0302 	and.w	r3, r3, #2
 800a602:	2b00      	cmp	r3, #0
 800a604:	d005      	beq.n	800a612 <HAL_RCC_OscConfig+0x62>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e3ac      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a1a      	ldr	r2, [r3, #32]
 800a616:	4b8c      	ldr	r3, [pc, #560]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0308 	and.w	r3, r3, #8
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d004      	beq.n	800a62c <HAL_RCC_OscConfig+0x7c>
 800a622:	4b89      	ldr	r3, [pc, #548]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a62a:	e005      	b.n	800a638 <HAL_RCC_OscConfig+0x88>
 800a62c:	4b86      	ldr	r3, [pc, #536]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a62e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a632:	091b      	lsrs	r3, r3, #4
 800a634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a638:	4293      	cmp	r3, r2
 800a63a:	d223      	bcs.n	800a684 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fd3f 	bl	800b0c4 <RCC_SetFlashLatencyFromMSIRange>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e38d      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a650:	4b7d      	ldr	r3, [pc, #500]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a7c      	ldr	r2, [pc, #496]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a656:	f043 0308 	orr.w	r3, r3, #8
 800a65a:	6013      	str	r3, [r2, #0]
 800a65c:	4b7a      	ldr	r3, [pc, #488]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a1b      	ldr	r3, [r3, #32]
 800a668:	4977      	ldr	r1, [pc, #476]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a66e:	4b76      	ldr	r3, [pc, #472]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	021b      	lsls	r3, r3, #8
 800a67c:	4972      	ldr	r1, [pc, #456]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	604b      	str	r3, [r1, #4]
 800a682:	e025      	b.n	800a6d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a684:	4b70      	ldr	r3, [pc, #448]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a6f      	ldr	r2, [pc, #444]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a68a:	f043 0308 	orr.w	r3, r3, #8
 800a68e:	6013      	str	r3, [r2, #0]
 800a690:	4b6d      	ldr	r3, [pc, #436]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a1b      	ldr	r3, [r3, #32]
 800a69c:	496a      	ldr	r1, [pc, #424]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a6a2:	4b69      	ldr	r3, [pc, #420]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	021b      	lsls	r3, r3, #8
 800a6b0:	4965      	ldr	r1, [pc, #404]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d109      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f000 fcff 	bl	800b0c4 <RCC_SetFlashLatencyFromMSIRange>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e34d      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a6d0:	f000 fc36 	bl	800af40 <HAL_RCC_GetSysClockFreq>
 800a6d4:	4601      	mov	r1, r0
 800a6d6:	4b5c      	ldr	r3, [pc, #368]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	091b      	lsrs	r3, r3, #4
 800a6dc:	f003 030f 	and.w	r3, r3, #15
 800a6e0:	4a5a      	ldr	r2, [pc, #360]	; (800a84c <HAL_RCC_OscConfig+0x29c>)
 800a6e2:	5cd3      	ldrb	r3, [r2, r3]
 800a6e4:	f003 031f 	and.w	r3, r3, #31
 800a6e8:	fa21 f303 	lsr.w	r3, r1, r3
 800a6ec:	4a58      	ldr	r2, [pc, #352]	; (800a850 <HAL_RCC_OscConfig+0x2a0>)
 800a6ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a6f0:	4b58      	ldr	r3, [pc, #352]	; (800a854 <HAL_RCC_OscConfig+0x2a4>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7fe f9d9 	bl	8008aac <HAL_InitTick>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d052      	beq.n	800a7aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800a704:	7bfb      	ldrb	r3, [r7, #15]
 800a706:	e331      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d032      	beq.n	800a776 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a710:	4b4d      	ldr	r3, [pc, #308]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a4c      	ldr	r2, [pc, #304]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a716:	f043 0301 	orr.w	r3, r3, #1
 800a71a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a71c:	f7fe fa12 	bl	8008b44 <HAL_GetTick>
 800a720:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a722:	e008      	b.n	800a736 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a724:	f7fe fa0e 	bl	8008b44 <HAL_GetTick>
 800a728:	4602      	mov	r2, r0
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d901      	bls.n	800a736 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800a732:	2303      	movs	r3, #3
 800a734:	e31a      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a736:	4b44      	ldr	r3, [pc, #272]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0302 	and.w	r3, r3, #2
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d0f0      	beq.n	800a724 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a742:	4b41      	ldr	r3, [pc, #260]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a40      	ldr	r2, [pc, #256]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a748:	f043 0308 	orr.w	r3, r3, #8
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	4b3e      	ldr	r3, [pc, #248]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a1b      	ldr	r3, [r3, #32]
 800a75a:	493b      	ldr	r1, [pc, #236]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a760:	4b39      	ldr	r3, [pc, #228]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	021b      	lsls	r3, r3, #8
 800a76e:	4936      	ldr	r1, [pc, #216]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a770:	4313      	orrs	r3, r2
 800a772:	604b      	str	r3, [r1, #4]
 800a774:	e01a      	b.n	800a7ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a776:	4b34      	ldr	r3, [pc, #208]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a33      	ldr	r2, [pc, #204]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a77c:	f023 0301 	bic.w	r3, r3, #1
 800a780:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a782:	f7fe f9df 	bl	8008b44 <HAL_GetTick>
 800a786:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a788:	e008      	b.n	800a79c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a78a:	f7fe f9db 	bl	8008b44 <HAL_GetTick>
 800a78e:	4602      	mov	r2, r0
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	2b02      	cmp	r3, #2
 800a796:	d901      	bls.n	800a79c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e2e7      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a79c:	4b2a      	ldr	r3, [pc, #168]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1f0      	bne.n	800a78a <HAL_RCC_OscConfig+0x1da>
 800a7a8:	e000      	b.n	800a7ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a7aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d074      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	2b08      	cmp	r3, #8
 800a7bc:	d005      	beq.n	800a7ca <HAL_RCC_OscConfig+0x21a>
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	2b0c      	cmp	r3, #12
 800a7c2:	d10e      	bne.n	800a7e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d10b      	bne.n	800a7e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7ca:	4b1f      	ldr	r3, [pc, #124]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d064      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x2f0>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d160      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e2c4      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ea:	d106      	bne.n	800a7fa <HAL_RCC_OscConfig+0x24a>
 800a7ec:	4b16      	ldr	r3, [pc, #88]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a15      	ldr	r2, [pc, #84]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a7f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	e01d      	b.n	800a836 <HAL_RCC_OscConfig+0x286>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a802:	d10c      	bne.n	800a81e <HAL_RCC_OscConfig+0x26e>
 800a804:	4b10      	ldr	r3, [pc, #64]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a0f      	ldr	r2, [pc, #60]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a80a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	4b0d      	ldr	r3, [pc, #52]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a0c      	ldr	r2, [pc, #48]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a81a:	6013      	str	r3, [r2, #0]
 800a81c:	e00b      	b.n	800a836 <HAL_RCC_OscConfig+0x286>
 800a81e:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a09      	ldr	r2, [pc, #36]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	4b07      	ldr	r3, [pc, #28]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a06      	ldr	r2, [pc, #24]	; (800a848 <HAL_RCC_OscConfig+0x298>)
 800a830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a834:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d01c      	beq.n	800a878 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a83e:	f7fe f981 	bl	8008b44 <HAL_GetTick>
 800a842:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a844:	e011      	b.n	800a86a <HAL_RCC_OscConfig+0x2ba>
 800a846:	bf00      	nop
 800a848:	40021000 	.word	0x40021000
 800a84c:	08015454 	.word	0x08015454
 800a850:	20000000 	.word	0x20000000
 800a854:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a858:	f7fe f974 	bl	8008b44 <HAL_GetTick>
 800a85c:	4602      	mov	r2, r0
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	2b64      	cmp	r3, #100	; 0x64
 800a864:	d901      	bls.n	800a86a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e280      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a86a:	4baf      	ldr	r3, [pc, #700]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0f0      	beq.n	800a858 <HAL_RCC_OscConfig+0x2a8>
 800a876:	e014      	b.n	800a8a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a878:	f7fe f964 	bl	8008b44 <HAL_GetTick>
 800a87c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a87e:	e008      	b.n	800a892 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a880:	f7fe f960 	bl	8008b44 <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b64      	cmp	r3, #100	; 0x64
 800a88c:	d901      	bls.n	800a892 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e26c      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a892:	4ba5      	ldr	r3, [pc, #660]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1f0      	bne.n	800a880 <HAL_RCC_OscConfig+0x2d0>
 800a89e:	e000      	b.n	800a8a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d060      	beq.n	800a970 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	2b04      	cmp	r3, #4
 800a8b2:	d005      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x310>
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	2b0c      	cmp	r3, #12
 800a8b8:	d119      	bne.n	800a8ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d116      	bne.n	800a8ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8c0:	4b99      	ldr	r3, [pc, #612]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <HAL_RCC_OscConfig+0x328>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e249      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8d8:	4b93      	ldr	r3, [pc, #588]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	061b      	lsls	r3, r3, #24
 800a8e6:	4990      	ldr	r1, [pc, #576]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8ec:	e040      	b.n	800a970 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d023      	beq.n	800a93e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8f6:	4b8c      	ldr	r3, [pc, #560]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a8b      	ldr	r2, [pc, #556]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a8fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a902:	f7fe f91f 	bl	8008b44 <HAL_GetTick>
 800a906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a908:	e008      	b.n	800a91c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a90a:	f7fe f91b 	bl	8008b44 <HAL_GetTick>
 800a90e:	4602      	mov	r2, r0
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	2b02      	cmp	r3, #2
 800a916:	d901      	bls.n	800a91c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a918:	2303      	movs	r3, #3
 800a91a:	e227      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a91c:	4b82      	ldr	r3, [pc, #520]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a924:	2b00      	cmp	r3, #0
 800a926:	d0f0      	beq.n	800a90a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a928:	4b7f      	ldr	r3, [pc, #508]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	061b      	lsls	r3, r3, #24
 800a936:	497c      	ldr	r1, [pc, #496]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a938:	4313      	orrs	r3, r2
 800a93a:	604b      	str	r3, [r1, #4]
 800a93c:	e018      	b.n	800a970 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a93e:	4b7a      	ldr	r3, [pc, #488]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a79      	ldr	r2, [pc, #484]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a94a:	f7fe f8fb 	bl	8008b44 <HAL_GetTick>
 800a94e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a950:	e008      	b.n	800a964 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a952:	f7fe f8f7 	bl	8008b44 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d901      	bls.n	800a964 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a960:	2303      	movs	r3, #3
 800a962:	e203      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a964:	4b70      	ldr	r3, [pc, #448]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1f0      	bne.n	800a952 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 0308 	and.w	r3, r3, #8
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d03c      	beq.n	800a9f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d01c      	beq.n	800a9be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a984:	4b68      	ldr	r3, [pc, #416]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a98a:	4a67      	ldr	r2, [pc, #412]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a98c:	f043 0301 	orr.w	r3, r3, #1
 800a990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a994:	f7fe f8d6 	bl	8008b44 <HAL_GetTick>
 800a998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a99a:	e008      	b.n	800a9ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a99c:	f7fe f8d2 	bl	8008b44 <HAL_GetTick>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d901      	bls.n	800a9ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e1de      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a9ae:	4b5e      	ldr	r3, [pc, #376]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a9b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d0ef      	beq.n	800a99c <HAL_RCC_OscConfig+0x3ec>
 800a9bc:	e01b      	b.n	800a9f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9be:	4b5a      	ldr	r3, [pc, #360]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a9c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9c4:	4a58      	ldr	r2, [pc, #352]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a9c6:	f023 0301 	bic.w	r3, r3, #1
 800a9ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9ce:	f7fe f8b9 	bl	8008b44 <HAL_GetTick>
 800a9d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a9d4:	e008      	b.n	800a9e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9d6:	f7fe f8b5 	bl	8008b44 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d901      	bls.n	800a9e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e1c1      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a9e8:	4b4f      	ldr	r3, [pc, #316]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800a9ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9ee:	f003 0302 	and.w	r3, r3, #2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1ef      	bne.n	800a9d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 80a6 	beq.w	800ab50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa04:	2300      	movs	r3, #0
 800aa06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800aa08:	4b47      	ldr	r3, [pc, #284]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10d      	bne.n	800aa30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa14:	4b44      	ldr	r3, [pc, #272]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aa16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa18:	4a43      	ldr	r2, [pc, #268]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aa1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa1e:	6593      	str	r3, [r2, #88]	; 0x58
 800aa20:	4b41      	ldr	r3, [pc, #260]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aa22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa28:	60bb      	str	r3, [r7, #8]
 800aa2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa30:	4b3e      	ldr	r3, [pc, #248]	; (800ab2c <HAL_RCC_OscConfig+0x57c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d118      	bne.n	800aa6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa3c:	4b3b      	ldr	r3, [pc, #236]	; (800ab2c <HAL_RCC_OscConfig+0x57c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a3a      	ldr	r2, [pc, #232]	; (800ab2c <HAL_RCC_OscConfig+0x57c>)
 800aa42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa48:	f7fe f87c 	bl	8008b44 <HAL_GetTick>
 800aa4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa4e:	e008      	b.n	800aa62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa50:	f7fe f878 	bl	8008b44 <HAL_GetTick>
 800aa54:	4602      	mov	r2, r0
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d901      	bls.n	800aa62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e184      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa62:	4b32      	ldr	r3, [pc, #200]	; (800ab2c <HAL_RCC_OscConfig+0x57c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d0f0      	beq.n	800aa50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d108      	bne.n	800aa88 <HAL_RCC_OscConfig+0x4d8>
 800aa76:	4b2c      	ldr	r3, [pc, #176]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aa78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa7c:	4a2a      	ldr	r2, [pc, #168]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aa86:	e024      	b.n	800aad2 <HAL_RCC_OscConfig+0x522>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	2b05      	cmp	r3, #5
 800aa8e:	d110      	bne.n	800aab2 <HAL_RCC_OscConfig+0x502>
 800aa90:	4b25      	ldr	r3, [pc, #148]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa96:	4a24      	ldr	r2, [pc, #144]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aa98:	f043 0304 	orr.w	r3, r3, #4
 800aa9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aaa0:	4b21      	ldr	r3, [pc, #132]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aaa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaa6:	4a20      	ldr	r2, [pc, #128]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aaa8:	f043 0301 	orr.w	r3, r3, #1
 800aaac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aab0:	e00f      	b.n	800aad2 <HAL_RCC_OscConfig+0x522>
 800aab2:	4b1d      	ldr	r3, [pc, #116]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aab8:	4a1b      	ldr	r2, [pc, #108]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aaba:	f023 0301 	bic.w	r3, r3, #1
 800aabe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aac2:	4b19      	ldr	r3, [pc, #100]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aac8:	4a17      	ldr	r2, [pc, #92]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aaca:	f023 0304 	bic.w	r3, r3, #4
 800aace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d016      	beq.n	800ab08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aada:	f7fe f833 	bl	8008b44 <HAL_GetTick>
 800aade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aae0:	e00a      	b.n	800aaf8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aae2:	f7fe f82f 	bl	8008b44 <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d901      	bls.n	800aaf8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	e139      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aaf8:	4b0b      	ldr	r3, [pc, #44]	; (800ab28 <HAL_RCC_OscConfig+0x578>)
 800aafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aafe:	f003 0302 	and.w	r3, r3, #2
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d0ed      	beq.n	800aae2 <HAL_RCC_OscConfig+0x532>
 800ab06:	e01a      	b.n	800ab3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab08:	f7fe f81c 	bl	8008b44 <HAL_GetTick>
 800ab0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ab0e:	e00f      	b.n	800ab30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab10:	f7fe f818 	bl	8008b44 <HAL_GetTick>
 800ab14:	4602      	mov	r2, r0
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d906      	bls.n	800ab30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e122      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
 800ab26:	bf00      	nop
 800ab28:	40021000 	.word	0x40021000
 800ab2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ab30:	4b90      	ldr	r3, [pc, #576]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ab32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab36:	f003 0302 	and.w	r3, r3, #2
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1e8      	bne.n	800ab10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab3e:	7ffb      	ldrb	r3, [r7, #31]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d105      	bne.n	800ab50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab44:	4b8b      	ldr	r3, [pc, #556]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ab46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab48:	4a8a      	ldr	r2, [pc, #552]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ab4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f000 8108 	beq.w	800ad6a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	f040 80d0 	bne.w	800ad04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ab64:	4b83      	ldr	r3, [pc, #524]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f003 0203 	and.w	r2, r3, #3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d130      	bne.n	800abda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab82:	3b01      	subs	r3, #1
 800ab84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d127      	bne.n	800abda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d11f      	bne.n	800abda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aba4:	2a07      	cmp	r2, #7
 800aba6:	bf14      	ite	ne
 800aba8:	2201      	movne	r2, #1
 800abaa:	2200      	moveq	r2, #0
 800abac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800abae:	4293      	cmp	r3, r2
 800abb0:	d113      	bne.n	800abda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abbc:	085b      	lsrs	r3, r3, #1
 800abbe:	3b01      	subs	r3, #1
 800abc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d109      	bne.n	800abda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd0:	085b      	lsrs	r3, r3, #1
 800abd2:	3b01      	subs	r3, #1
 800abd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d06e      	beq.n	800acb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	2b0c      	cmp	r3, #12
 800abde:	d069      	beq.n	800acb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800abe0:	4b64      	ldr	r3, [pc, #400]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d105      	bne.n	800abf8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800abec:	4b61      	ldr	r3, [pc, #388]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e0b7      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800abfc:	4b5d      	ldr	r3, [pc, #372]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a5c      	ldr	r2, [pc, #368]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ac02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ac08:	f7fd ff9c 	bl	8008b44 <HAL_GetTick>
 800ac0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac0e:	e008      	b.n	800ac22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac10:	f7fd ff98 	bl	8008b44 <HAL_GetTick>
 800ac14:	4602      	mov	r2, r0
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	1ad3      	subs	r3, r2, r3
 800ac1a:	2b02      	cmp	r3, #2
 800ac1c:	d901      	bls.n	800ac22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	e0a4      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac22:	4b54      	ldr	r3, [pc, #336]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1f0      	bne.n	800ac10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac2e:	4b51      	ldr	r3, [pc, #324]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ac30:	68da      	ldr	r2, [r3, #12]
 800ac32:	4b51      	ldr	r3, [pc, #324]	; (800ad78 <HAL_RCC_OscConfig+0x7c8>)
 800ac34:	4013      	ands	r3, r2
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac3e:	3a01      	subs	r2, #1
 800ac40:	0112      	lsls	r2, r2, #4
 800ac42:	4311      	orrs	r1, r2
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac48:	0212      	lsls	r2, r2, #8
 800ac4a:	4311      	orrs	r1, r2
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ac50:	0852      	lsrs	r2, r2, #1
 800ac52:	3a01      	subs	r2, #1
 800ac54:	0552      	lsls	r2, r2, #21
 800ac56:	4311      	orrs	r1, r2
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ac5c:	0852      	lsrs	r2, r2, #1
 800ac5e:	3a01      	subs	r2, #1
 800ac60:	0652      	lsls	r2, r2, #25
 800ac62:	4311      	orrs	r1, r2
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ac68:	0912      	lsrs	r2, r2, #4
 800ac6a:	0452      	lsls	r2, r2, #17
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	4941      	ldr	r1, [pc, #260]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ac74:	4b3f      	ldr	r3, [pc, #252]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a3e      	ldr	r2, [pc, #248]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ac7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ac80:	4b3c      	ldr	r3, [pc, #240]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	4a3b      	ldr	r2, [pc, #236]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ac86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ac8c:	f7fd ff5a 	bl	8008b44 <HAL_GetTick>
 800ac90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac92:	e008      	b.n	800aca6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac94:	f7fd ff56 	bl	8008b44 <HAL_GetTick>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d901      	bls.n	800aca6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e062      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aca6:	4b33      	ldr	r3, [pc, #204]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0f0      	beq.n	800ac94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800acb2:	e05a      	b.n	800ad6a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e059      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acb8:	4b2e      	ldr	r3, [pc, #184]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d152      	bne.n	800ad6a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800acc4:	4b2b      	ldr	r3, [pc, #172]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a2a      	ldr	r2, [pc, #168]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800acca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800acd0:	4b28      	ldr	r3, [pc, #160]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	4a27      	ldr	r2, [pc, #156]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800acd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800acdc:	f7fd ff32 	bl	8008b44 <HAL_GetTick>
 800ace0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ace2:	e008      	b.n	800acf6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ace4:	f7fd ff2e 	bl	8008b44 <HAL_GetTick>
 800ace8:	4602      	mov	r2, r0
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d901      	bls.n	800acf6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800acf2:	2303      	movs	r3, #3
 800acf4:	e03a      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acf6:	4b1f      	ldr	r3, [pc, #124]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0f0      	beq.n	800ace4 <HAL_RCC_OscConfig+0x734>
 800ad02:	e032      	b.n	800ad6a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	2b0c      	cmp	r3, #12
 800ad08:	d02d      	beq.n	800ad66 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad0a:	4b1a      	ldr	r3, [pc, #104]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a19      	ldr	r2, [pc, #100]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ad10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800ad16:	4b17      	ldr	r3, [pc, #92]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d105      	bne.n	800ad2e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ad22:	4b14      	ldr	r3, [pc, #80]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	4a13      	ldr	r2, [pc, #76]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ad28:	f023 0303 	bic.w	r3, r3, #3
 800ad2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ad2e:	4b11      	ldr	r3, [pc, #68]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	4a10      	ldr	r2, [pc, #64]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ad34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ad38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad3e:	f7fd ff01 	bl	8008b44 <HAL_GetTick>
 800ad42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad44:	e008      	b.n	800ad58 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad46:	f7fd fefd 	bl	8008b44 <HAL_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d901      	bls.n	800ad58 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e009      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad58:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <HAL_RCC_OscConfig+0x7c4>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1f0      	bne.n	800ad46 <HAL_RCC_OscConfig+0x796>
 800ad64:	e001      	b.n	800ad6a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e000      	b.n	800ad6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3720      	adds	r7, #32
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	40021000 	.word	0x40021000
 800ad78:	f99d808c 	.word	0xf99d808c

0800ad7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e0c8      	b.n	800af22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad90:	4b66      	ldr	r3, [pc, #408]	; (800af2c <HAL_RCC_ClockConfig+0x1b0>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 0307 	and.w	r3, r3, #7
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d910      	bls.n	800adc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad9e:	4b63      	ldr	r3, [pc, #396]	; (800af2c <HAL_RCC_ClockConfig+0x1b0>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f023 0207 	bic.w	r2, r3, #7
 800ada6:	4961      	ldr	r1, [pc, #388]	; (800af2c <HAL_RCC_ClockConfig+0x1b0>)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	4313      	orrs	r3, r2
 800adac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adae:	4b5f      	ldr	r3, [pc, #380]	; (800af2c <HAL_RCC_ClockConfig+0x1b0>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 0307 	and.w	r3, r3, #7
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d001      	beq.n	800adc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e0b0      	b.n	800af22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d04c      	beq.n	800ae66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	2b03      	cmp	r3, #3
 800add2:	d107      	bne.n	800ade4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800add4:	4b56      	ldr	r3, [pc, #344]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800addc:	2b00      	cmp	r3, #0
 800adde:	d121      	bne.n	800ae24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e09e      	b.n	800af22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d107      	bne.n	800adfc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800adec:	4b50      	ldr	r3, [pc, #320]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d115      	bne.n	800ae24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e092      	b.n	800af22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d107      	bne.n	800ae14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ae04:	4b4a      	ldr	r3, [pc, #296]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0302 	and.w	r3, r3, #2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d109      	bne.n	800ae24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e086      	b.n	800af22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae14:	4b46      	ldr	r3, [pc, #280]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e07e      	b.n	800af22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ae24:	4b42      	ldr	r3, [pc, #264]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	f023 0203 	bic.w	r2, r3, #3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	493f      	ldr	r1, [pc, #252]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800ae32:	4313      	orrs	r3, r2
 800ae34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae36:	f7fd fe85 	bl	8008b44 <HAL_GetTick>
 800ae3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae3c:	e00a      	b.n	800ae54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae3e:	f7fd fe81 	bl	8008b44 <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d901      	bls.n	800ae54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	e066      	b.n	800af22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae54:	4b36      	ldr	r3, [pc, #216]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	f003 020c 	and.w	r2, r3, #12
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d1eb      	bne.n	800ae3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 0302 	and.w	r3, r3, #2
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d008      	beq.n	800ae84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae72:	4b2f      	ldr	r3, [pc, #188]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	492c      	ldr	r1, [pc, #176]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800ae80:	4313      	orrs	r3, r2
 800ae82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae84:	4b29      	ldr	r3, [pc, #164]	; (800af2c <HAL_RCC_ClockConfig+0x1b0>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0307 	and.w	r3, r3, #7
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d210      	bcs.n	800aeb4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae92:	4b26      	ldr	r3, [pc, #152]	; (800af2c <HAL_RCC_ClockConfig+0x1b0>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f023 0207 	bic.w	r2, r3, #7
 800ae9a:	4924      	ldr	r1, [pc, #144]	; (800af2c <HAL_RCC_ClockConfig+0x1b0>)
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aea2:	4b22      	ldr	r3, [pc, #136]	; (800af2c <HAL_RCC_ClockConfig+0x1b0>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 0307 	and.w	r3, r3, #7
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d001      	beq.n	800aeb4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e036      	b.n	800af22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d008      	beq.n	800aed2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aec0:	4b1b      	ldr	r3, [pc, #108]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	4918      	ldr	r1, [pc, #96]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800aece:	4313      	orrs	r3, r2
 800aed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 0308 	and.w	r3, r3, #8
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d009      	beq.n	800aef2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aede:	4b14      	ldr	r3, [pc, #80]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	00db      	lsls	r3, r3, #3
 800aeec:	4910      	ldr	r1, [pc, #64]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aef2:	f000 f825 	bl	800af40 <HAL_RCC_GetSysClockFreq>
 800aef6:	4601      	mov	r1, r0
 800aef8:	4b0d      	ldr	r3, [pc, #52]	; (800af30 <HAL_RCC_ClockConfig+0x1b4>)
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	091b      	lsrs	r3, r3, #4
 800aefe:	f003 030f 	and.w	r3, r3, #15
 800af02:	4a0c      	ldr	r2, [pc, #48]	; (800af34 <HAL_RCC_ClockConfig+0x1b8>)
 800af04:	5cd3      	ldrb	r3, [r2, r3]
 800af06:	f003 031f 	and.w	r3, r3, #31
 800af0a:	fa21 f303 	lsr.w	r3, r1, r3
 800af0e:	4a0a      	ldr	r2, [pc, #40]	; (800af38 <HAL_RCC_ClockConfig+0x1bc>)
 800af10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800af12:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <HAL_RCC_ClockConfig+0x1c0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4618      	mov	r0, r3
 800af18:	f7fd fdc8 	bl	8008aac <HAL_InitTick>
 800af1c:	4603      	mov	r3, r0
 800af1e:	72fb      	strb	r3, [r7, #11]

  return status;
 800af20:	7afb      	ldrb	r3, [r7, #11]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	40022000 	.word	0x40022000
 800af30:	40021000 	.word	0x40021000
 800af34:	08015454 	.word	0x08015454
 800af38:	20000000 	.word	0x20000000
 800af3c:	20000004 	.word	0x20000004

0800af40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af40:	b480      	push	{r7}
 800af42:	b089      	sub	sp, #36	; 0x24
 800af44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800af46:	2300      	movs	r3, #0
 800af48:	61fb      	str	r3, [r7, #28]
 800af4a:	2300      	movs	r3, #0
 800af4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af4e:	4b3d      	ldr	r3, [pc, #244]	; (800b044 <HAL_RCC_GetSysClockFreq+0x104>)
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f003 030c 	and.w	r3, r3, #12
 800af56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af58:	4b3a      	ldr	r3, [pc, #232]	; (800b044 <HAL_RCC_GetSysClockFreq+0x104>)
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	f003 0303 	and.w	r3, r3, #3
 800af60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d005      	beq.n	800af74 <HAL_RCC_GetSysClockFreq+0x34>
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	2b0c      	cmp	r3, #12
 800af6c:	d121      	bne.n	800afb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d11e      	bne.n	800afb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800af74:	4b33      	ldr	r3, [pc, #204]	; (800b044 <HAL_RCC_GetSysClockFreq+0x104>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 0308 	and.w	r3, r3, #8
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d107      	bne.n	800af90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800af80:	4b30      	ldr	r3, [pc, #192]	; (800b044 <HAL_RCC_GetSysClockFreq+0x104>)
 800af82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af86:	0a1b      	lsrs	r3, r3, #8
 800af88:	f003 030f 	and.w	r3, r3, #15
 800af8c:	61fb      	str	r3, [r7, #28]
 800af8e:	e005      	b.n	800af9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800af90:	4b2c      	ldr	r3, [pc, #176]	; (800b044 <HAL_RCC_GetSysClockFreq+0x104>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	091b      	lsrs	r3, r3, #4
 800af96:	f003 030f 	and.w	r3, r3, #15
 800af9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800af9c:	4a2a      	ldr	r2, [pc, #168]	; (800b048 <HAL_RCC_GetSysClockFreq+0x108>)
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10d      	bne.n	800afc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800afb0:	e00a      	b.n	800afc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	d102      	bne.n	800afbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800afb8:	4b24      	ldr	r3, [pc, #144]	; (800b04c <HAL_RCC_GetSysClockFreq+0x10c>)
 800afba:	61bb      	str	r3, [r7, #24]
 800afbc:	e004      	b.n	800afc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2b08      	cmp	r3, #8
 800afc2:	d101      	bne.n	800afc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800afc4:	4b22      	ldr	r3, [pc, #136]	; (800b050 <HAL_RCC_GetSysClockFreq+0x110>)
 800afc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2b0c      	cmp	r3, #12
 800afcc:	d133      	bne.n	800b036 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800afce:	4b1d      	ldr	r3, [pc, #116]	; (800b044 <HAL_RCC_GetSysClockFreq+0x104>)
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d002      	beq.n	800afe4 <HAL_RCC_GetSysClockFreq+0xa4>
 800afde:	2b03      	cmp	r3, #3
 800afe0:	d003      	beq.n	800afea <HAL_RCC_GetSysClockFreq+0xaa>
 800afe2:	e005      	b.n	800aff0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800afe4:	4b19      	ldr	r3, [pc, #100]	; (800b04c <HAL_RCC_GetSysClockFreq+0x10c>)
 800afe6:	617b      	str	r3, [r7, #20]
      break;
 800afe8:	e005      	b.n	800aff6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800afea:	4b19      	ldr	r3, [pc, #100]	; (800b050 <HAL_RCC_GetSysClockFreq+0x110>)
 800afec:	617b      	str	r3, [r7, #20]
      break;
 800afee:	e002      	b.n	800aff6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	617b      	str	r3, [r7, #20]
      break;
 800aff4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aff6:	4b13      	ldr	r3, [pc, #76]	; (800b044 <HAL_RCC_GetSysClockFreq+0x104>)
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	091b      	lsrs	r3, r3, #4
 800affc:	f003 0307 	and.w	r3, r3, #7
 800b000:	3301      	adds	r3, #1
 800b002:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b004:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <HAL_RCC_GetSysClockFreq+0x104>)
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	0a1b      	lsrs	r3, r3, #8
 800b00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	fb02 f203 	mul.w	r2, r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	fbb2 f3f3 	udiv	r3, r2, r3
 800b01a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b01c:	4b09      	ldr	r3, [pc, #36]	; (800b044 <HAL_RCC_GetSysClockFreq+0x104>)
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	0e5b      	lsrs	r3, r3, #25
 800b022:	f003 0303 	and.w	r3, r3, #3
 800b026:	3301      	adds	r3, #1
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	fbb2 f3f3 	udiv	r3, r2, r3
 800b034:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b036:	69bb      	ldr	r3, [r7, #24]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3724      	adds	r7, #36	; 0x24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	40021000 	.word	0x40021000
 800b048:	0801546c 	.word	0x0801546c
 800b04c:	00f42400 	.word	0x00f42400
 800b050:	007a1200 	.word	0x007a1200

0800b054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b058:	4b03      	ldr	r3, [pc, #12]	; (800b068 <HAL_RCC_GetHCLKFreq+0x14>)
 800b05a:	681b      	ldr	r3, [r3, #0]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	20000000 	.word	0x20000000

0800b06c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b070:	f7ff fff0 	bl	800b054 <HAL_RCC_GetHCLKFreq>
 800b074:	4601      	mov	r1, r0
 800b076:	4b06      	ldr	r3, [pc, #24]	; (800b090 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	0a1b      	lsrs	r3, r3, #8
 800b07c:	f003 0307 	and.w	r3, r3, #7
 800b080:	4a04      	ldr	r2, [pc, #16]	; (800b094 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b082:	5cd3      	ldrb	r3, [r2, r3]
 800b084:	f003 031f 	and.w	r3, r3, #31
 800b088:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	40021000 	.word	0x40021000
 800b094:	08015464 	.word	0x08015464

0800b098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b09c:	f7ff ffda 	bl	800b054 <HAL_RCC_GetHCLKFreq>
 800b0a0:	4601      	mov	r1, r0
 800b0a2:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	0adb      	lsrs	r3, r3, #11
 800b0a8:	f003 0307 	and.w	r3, r3, #7
 800b0ac:	4a04      	ldr	r2, [pc, #16]	; (800b0c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b0ae:	5cd3      	ldrb	r3, [r2, r3]
 800b0b0:	f003 031f 	and.w	r3, r3, #31
 800b0b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	40021000 	.word	0x40021000
 800b0c0:	08015464 	.word	0x08015464

0800b0c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b0d0:	4b2a      	ldr	r3, [pc, #168]	; (800b17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b0dc:	f7ff f92c 	bl	800a338 <HAL_PWREx_GetVoltageRange>
 800b0e0:	6178      	str	r0, [r7, #20]
 800b0e2:	e014      	b.n	800b10e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b0e4:	4b25      	ldr	r3, [pc, #148]	; (800b17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b0e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e8:	4a24      	ldr	r2, [pc, #144]	; (800b17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b0ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0ee:	6593      	str	r3, [r2, #88]	; 0x58
 800b0f0:	4b22      	ldr	r3, [pc, #136]	; (800b17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b0f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b0fc:	f7ff f91c 	bl	800a338 <HAL_PWREx_GetVoltageRange>
 800b100:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b102:	4b1e      	ldr	r3, [pc, #120]	; (800b17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b106:	4a1d      	ldr	r2, [pc, #116]	; (800b17c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b10c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b114:	d10b      	bne.n	800b12e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b80      	cmp	r3, #128	; 0x80
 800b11a:	d919      	bls.n	800b150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2ba0      	cmp	r3, #160	; 0xa0
 800b120:	d902      	bls.n	800b128 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b122:	2302      	movs	r3, #2
 800b124:	613b      	str	r3, [r7, #16]
 800b126:	e013      	b.n	800b150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b128:	2301      	movs	r3, #1
 800b12a:	613b      	str	r3, [r7, #16]
 800b12c:	e010      	b.n	800b150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b80      	cmp	r3, #128	; 0x80
 800b132:	d902      	bls.n	800b13a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b134:	2303      	movs	r3, #3
 800b136:	613b      	str	r3, [r7, #16]
 800b138:	e00a      	b.n	800b150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b80      	cmp	r3, #128	; 0x80
 800b13e:	d102      	bne.n	800b146 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b140:	2302      	movs	r3, #2
 800b142:	613b      	str	r3, [r7, #16]
 800b144:	e004      	b.n	800b150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b70      	cmp	r3, #112	; 0x70
 800b14a:	d101      	bne.n	800b150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b14c:	2301      	movs	r3, #1
 800b14e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b150:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f023 0207 	bic.w	r2, r3, #7
 800b158:	4909      	ldr	r1, [pc, #36]	; (800b180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0307 	and.w	r3, r3, #7
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d001      	beq.n	800b172 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e000      	b.n	800b174 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	40021000 	.word	0x40021000
 800b180:	40022000 	.word	0x40022000

0800b184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b18c:	2300      	movs	r3, #0
 800b18e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b190:	2300      	movs	r3, #0
 800b192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d03f      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1a8:	d01c      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800b1aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1ae:	d802      	bhi.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00e      	beq.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800b1b4:	e01f      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800b1b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1ba:	d003      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800b1bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b1c0:	d01c      	beq.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800b1c2:	e018      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b1c4:	4b85      	ldr	r3, [pc, #532]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	4a84      	ldr	r2, [pc, #528]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b1ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b1d0:	e015      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fac9 	bl	800b770 <RCCEx_PLLSAI1_Config>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b1e2:	e00c      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	3320      	adds	r3, #32
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f000 fbb0 	bl	800b950 <RCCEx_PLLSAI2_Config>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b1f4:	e003      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	74fb      	strb	r3, [r7, #19]
      break;
 800b1fa:	e000      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800b1fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1fe:	7cfb      	ldrb	r3, [r7, #19]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10b      	bne.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b204:	4b75      	ldr	r3, [pc, #468]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b20a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b212:	4972      	ldr	r1, [pc, #456]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b214:	4313      	orrs	r3, r2
 800b216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b21a:	e001      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21c:	7cfb      	ldrb	r3, [r7, #19]
 800b21e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d03f      	beq.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b234:	d01c      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800b236:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b23a:	d802      	bhi.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00e      	beq.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0xda>
 800b240:	e01f      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b246:	d003      	beq.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800b248:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b24c:	d01c      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800b24e:	e018      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b250:	4b62      	ldr	r3, [pc, #392]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	4a61      	ldr	r2, [pc, #388]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b25a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b25c:	e015      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3304      	adds	r3, #4
 800b262:	2100      	movs	r1, #0
 800b264:	4618      	mov	r0, r3
 800b266:	f000 fa83 	bl	800b770 <RCCEx_PLLSAI1_Config>
 800b26a:	4603      	mov	r3, r0
 800b26c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b26e:	e00c      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3320      	adds	r3, #32
 800b274:	2100      	movs	r1, #0
 800b276:	4618      	mov	r0, r3
 800b278:	f000 fb6a 	bl	800b950 <RCCEx_PLLSAI2_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b280:	e003      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	74fb      	strb	r3, [r7, #19]
      break;
 800b286:	e000      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b28a:	7cfb      	ldrb	r3, [r7, #19]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10b      	bne.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b290:	4b52      	ldr	r3, [pc, #328]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b296:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b29e:	494f      	ldr	r1, [pc, #316]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b2a6:	e001      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a8:	7cfb      	ldrb	r3, [r7, #19]
 800b2aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 80a0 	beq.w	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b2be:	4b47      	ldr	r3, [pc, #284]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e000      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00d      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b2d4:	4b41      	ldr	r3, [pc, #260]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b2d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2d8:	4a40      	ldr	r2, [pc, #256]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b2da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2de:	6593      	str	r3, [r2, #88]	; 0x58
 800b2e0:	4b3e      	ldr	r3, [pc, #248]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2e8:	60bb      	str	r3, [r7, #8]
 800b2ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2f0:	4b3b      	ldr	r3, [pc, #236]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a3a      	ldr	r2, [pc, #232]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b2f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b2fc:	f7fd fc22 	bl	8008b44 <HAL_GetTick>
 800b300:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b302:	e009      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b304:	f7fd fc1e 	bl	8008b44 <HAL_GetTick>
 800b308:	4602      	mov	r2, r0
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d902      	bls.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800b312:	2303      	movs	r3, #3
 800b314:	74fb      	strb	r3, [r7, #19]
        break;
 800b316:	e005      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b318:	4b31      	ldr	r3, [pc, #196]	; (800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b320:	2b00      	cmp	r3, #0
 800b322:	d0ef      	beq.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800b324:	7cfb      	ldrb	r3, [r7, #19]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d15c      	bne.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b32a:	4b2c      	ldr	r3, [pc, #176]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b32c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b334:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d01f      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	429a      	cmp	r2, r3
 800b346:	d019      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b348:	4b24      	ldr	r3, [pc, #144]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b354:	4b21      	ldr	r3, [pc, #132]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b35a:	4a20      	ldr	r2, [pc, #128]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b35c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b364:	4b1d      	ldr	r3, [pc, #116]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b36a:	4a1c      	ldr	r2, [pc, #112]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b36c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b374:	4a19      	ldr	r2, [pc, #100]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	2b00      	cmp	r3, #0
 800b384:	d016      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b386:	f7fd fbdd 	bl	8008b44 <HAL_GetTick>
 800b38a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b38c:	e00b      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b38e:	f7fd fbd9 	bl	8008b44 <HAL_GetTick>
 800b392:	4602      	mov	r2, r0
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	f241 3288 	movw	r2, #5000	; 0x1388
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d902      	bls.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	74fb      	strb	r3, [r7, #19]
            break;
 800b3a4:	e006      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3a6:	4b0d      	ldr	r3, [pc, #52]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0ec      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800b3b4:	7cfb      	ldrb	r3, [r7, #19]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10c      	bne.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b3ba:	4b08      	ldr	r3, [pc, #32]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ca:	4904      	ldr	r1, [pc, #16]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b3d2:	e009      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b3d4:	7cfb      	ldrb	r3, [r7, #19]
 800b3d6:	74bb      	strb	r3, [r7, #18]
 800b3d8:	e006      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800b3da:	bf00      	nop
 800b3dc:	40021000 	.word	0x40021000
 800b3e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e4:	7cfb      	ldrb	r3, [r7, #19]
 800b3e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b3e8:	7c7b      	ldrb	r3, [r7, #17]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d105      	bne.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3ee:	4b9e      	ldr	r3, [pc, #632]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b3f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3f2:	4a9d      	ldr	r2, [pc, #628]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b3f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00a      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b406:	4b98      	ldr	r3, [pc, #608]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b40c:	f023 0203 	bic.w	r2, r3, #3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b414:	4994      	ldr	r1, [pc, #592]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b416:	4313      	orrs	r3, r2
 800b418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0302 	and.w	r3, r3, #2
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00a      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b428:	4b8f      	ldr	r3, [pc, #572]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b42e:	f023 020c 	bic.w	r2, r3, #12
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b436:	498c      	ldr	r1, [pc, #560]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b438:	4313      	orrs	r3, r2
 800b43a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0304 	and.w	r3, r3, #4
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00a      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b44a:	4b87      	ldr	r3, [pc, #540]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b450:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b458:	4983      	ldr	r1, [pc, #524]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b45a:	4313      	orrs	r3, r2
 800b45c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 0308 	and.w	r3, r3, #8
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00a      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b46c:	4b7e      	ldr	r3, [pc, #504]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b472:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b47a:	497b      	ldr	r1, [pc, #492]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b47c:	4313      	orrs	r3, r2
 800b47e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0310 	and.w	r3, r3, #16
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b48e:	4b76      	ldr	r3, [pc, #472]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b49c:	4972      	ldr	r1, [pc, #456]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0320 	and.w	r3, r3, #32
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00a      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b4b0:	4b6d      	ldr	r3, [pc, #436]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4be:	496a      	ldr	r1, [pc, #424]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b4d2:	4b65      	ldr	r3, [pc, #404]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4e0:	4961      	ldr	r1, [pc, #388]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00a      	beq.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4f4:	4b5c      	ldr	r3, [pc, #368]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b502:	4959      	ldr	r1, [pc, #356]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b504:	4313      	orrs	r3, r2
 800b506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00a      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b516:	4b54      	ldr	r3, [pc, #336]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b51c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b524:	4950      	ldr	r1, [pc, #320]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b526:	4313      	orrs	r3, r2
 800b528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00a      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b538:	4b4b      	ldr	r3, [pc, #300]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b53e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b546:	4948      	ldr	r1, [pc, #288]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b548:	4313      	orrs	r3, r2
 800b54a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b55a:	4b43      	ldr	r3, [pc, #268]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b568:	493f      	ldr	r1, [pc, #252]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d028      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b57c:	4b3a      	ldr	r3, [pc, #232]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b58a:	4937      	ldr	r1, [pc, #220]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b59a:	d106      	bne.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b59c:	4b32      	ldr	r3, [pc, #200]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	4a31      	ldr	r2, [pc, #196]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b5a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5a6:	60d3      	str	r3, [r2, #12]
 800b5a8:	e011      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5b2:	d10c      	bne.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	2101      	movs	r1, #1
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 f8d8 	bl	800b770 <RCCEx_PLLSAI1_Config>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b5c4:	7cfb      	ldrb	r3, [r7, #19]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d001      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800b5ca:	7cfb      	ldrb	r3, [r7, #19]
 800b5cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d028      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b5da:	4b23      	ldr	r3, [pc, #140]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e8:	491f      	ldr	r1, [pc, #124]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5f8:	d106      	bne.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b5fa:	4b1b      	ldr	r3, [pc, #108]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	4a1a      	ldr	r2, [pc, #104]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b604:	60d3      	str	r3, [r2, #12]
 800b606:	e011      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b60c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b610:	d10c      	bne.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3304      	adds	r3, #4
 800b616:	2101      	movs	r1, #1
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 f8a9 	bl	800b770 <RCCEx_PLLSAI1_Config>
 800b61e:	4603      	mov	r3, r0
 800b620:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b622:	7cfb      	ldrb	r3, [r7, #19]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800b628:	7cfb      	ldrb	r3, [r7, #19]
 800b62a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d02b      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b638:	4b0b      	ldr	r3, [pc, #44]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b63e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b646:	4908      	ldr	r1, [pc, #32]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b648:	4313      	orrs	r3, r2
 800b64a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b656:	d109      	bne.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b658:	4b03      	ldr	r3, [pc, #12]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	4a02      	ldr	r2, [pc, #8]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800b65e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b662:	60d3      	str	r3, [r2, #12]
 800b664:	e014      	b.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800b666:	bf00      	nop
 800b668:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b674:	d10c      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	3304      	adds	r3, #4
 800b67a:	2101      	movs	r1, #1
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 f877 	bl	800b770 <RCCEx_PLLSAI1_Config>
 800b682:	4603      	mov	r3, r0
 800b684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b686:	7cfb      	ldrb	r3, [r7, #19]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d001      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800b68c:	7cfb      	ldrb	r3, [r7, #19]
 800b68e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d02f      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b69c:	4b2b      	ldr	r3, [pc, #172]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6aa:	4928      	ldr	r1, [pc, #160]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6ba:	d10d      	bne.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3304      	adds	r3, #4
 800b6c0:	2102      	movs	r1, #2
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 f854 	bl	800b770 <RCCEx_PLLSAI1_Config>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b6cc:	7cfb      	ldrb	r3, [r7, #19]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d014      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800b6d2:	7cfb      	ldrb	r3, [r7, #19]
 800b6d4:	74bb      	strb	r3, [r7, #18]
 800b6d6:	e011      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6e0:	d10c      	bne.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	3320      	adds	r3, #32
 800b6e6:	2102      	movs	r1, #2
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f000 f931 	bl	800b950 <RCCEx_PLLSAI2_Config>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b6f2:	7cfb      	ldrb	r3, [r7, #19]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800b6f8:	7cfb      	ldrb	r3, [r7, #19]
 800b6fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00a      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b708:	4b10      	ldr	r3, [pc, #64]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b70e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b716:	490d      	ldr	r1, [pc, #52]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00b      	beq.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b72a:	4b08      	ldr	r3, [pc, #32]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b730:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b73a:	4904      	ldr	r1, [pc, #16]	; (800b74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b73c:	4313      	orrs	r3, r2
 800b73e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b742:	7cbb      	ldrb	r3, [r7, #18]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3718      	adds	r7, #24
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	40021000 	.word	0x40021000

0800b750 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800b750:	b480      	push	{r7}
 800b752:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a04      	ldr	r2, [pc, #16]	; (800b76c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b75a:	f043 0304 	orr.w	r3, r3, #4
 800b75e:	6013      	str	r3, [r2, #0]
}
 800b760:	bf00      	nop
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	40021000 	.word	0x40021000

0800b770 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b77e:	4b73      	ldr	r3, [pc, #460]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	f003 0303 	and.w	r3, r3, #3
 800b786:	2b00      	cmp	r3, #0
 800b788:	d018      	beq.n	800b7bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b78a:	4b70      	ldr	r3, [pc, #448]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f003 0203 	and.w	r2, r3, #3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	429a      	cmp	r2, r3
 800b798:	d10d      	bne.n	800b7b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
       ||
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d009      	beq.n	800b7b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b7a2:	4b6a      	ldr	r3, [pc, #424]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	091b      	lsrs	r3, r3, #4
 800b7a8:	f003 0307 	and.w	r3, r3, #7
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
       ||
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d044      	beq.n	800b840 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	73fb      	strb	r3, [r7, #15]
 800b7ba:	e041      	b.n	800b840 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d00c      	beq.n	800b7de <RCCEx_PLLSAI1_Config+0x6e>
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d013      	beq.n	800b7f0 <RCCEx_PLLSAI1_Config+0x80>
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d120      	bne.n	800b80e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b7cc:	4b5f      	ldr	r3, [pc, #380]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 0302 	and.w	r3, r3, #2
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d11d      	bne.n	800b814 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7dc:	e01a      	b.n	800b814 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b7de:	4b5b      	ldr	r3, [pc, #364]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d116      	bne.n	800b818 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7ee:	e013      	b.n	800b818 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b7f0:	4b56      	ldr	r3, [pc, #344]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10f      	bne.n	800b81c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b7fc:	4b53      	ldr	r3, [pc, #332]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b804:	2b00      	cmp	r3, #0
 800b806:	d109      	bne.n	800b81c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b80c:	e006      	b.n	800b81c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	73fb      	strb	r3, [r7, #15]
      break;
 800b812:	e004      	b.n	800b81e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800b814:	bf00      	nop
 800b816:	e002      	b.n	800b81e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800b818:	bf00      	nop
 800b81a:	e000      	b.n	800b81e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800b81c:	bf00      	nop
    }

    if(status == HAL_OK)
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10d      	bne.n	800b840 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b824:	4b49      	ldr	r3, [pc, #292]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6819      	ldr	r1, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	3b01      	subs	r3, #1
 800b836:	011b      	lsls	r3, r3, #4
 800b838:	430b      	orrs	r3, r1
 800b83a:	4944      	ldr	r1, [pc, #272]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b83c:	4313      	orrs	r3, r2
 800b83e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d17d      	bne.n	800b942 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b846:	4b41      	ldr	r3, [pc, #260]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a40      	ldr	r2, [pc, #256]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b84c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b852:	f7fd f977 	bl	8008b44 <HAL_GetTick>
 800b856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b858:	e009      	b.n	800b86e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b85a:	f7fd f973 	bl	8008b44 <HAL_GetTick>
 800b85e:	4602      	mov	r2, r0
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	1ad3      	subs	r3, r2, r3
 800b864:	2b02      	cmp	r3, #2
 800b866:	d902      	bls.n	800b86e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800b868:	2303      	movs	r3, #3
 800b86a:	73fb      	strb	r3, [r7, #15]
        break;
 800b86c:	e005      	b.n	800b87a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b86e:	4b37      	ldr	r3, [pc, #220]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1ef      	bne.n	800b85a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d160      	bne.n	800b942 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d111      	bne.n	800b8aa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b886:	4b31      	ldr	r3, [pc, #196]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b88e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	6892      	ldr	r2, [r2, #8]
 800b896:	0211      	lsls	r1, r2, #8
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	68d2      	ldr	r2, [r2, #12]
 800b89c:	0912      	lsrs	r2, r2, #4
 800b89e:	0452      	lsls	r2, r2, #17
 800b8a0:	430a      	orrs	r2, r1
 800b8a2:	492a      	ldr	r1, [pc, #168]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	610b      	str	r3, [r1, #16]
 800b8a8:	e027      	b.n	800b8fa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d112      	bne.n	800b8d6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b8b0:	4b26      	ldr	r3, [pc, #152]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b8b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	6892      	ldr	r2, [r2, #8]
 800b8c0:	0211      	lsls	r1, r2, #8
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	6912      	ldr	r2, [r2, #16]
 800b8c6:	0852      	lsrs	r2, r2, #1
 800b8c8:	3a01      	subs	r2, #1
 800b8ca:	0552      	lsls	r2, r2, #21
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	491f      	ldr	r1, [pc, #124]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	610b      	str	r3, [r1, #16]
 800b8d4:	e011      	b.n	800b8fa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b8d6:	4b1d      	ldr	r3, [pc, #116]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b8de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	6892      	ldr	r2, [r2, #8]
 800b8e6:	0211      	lsls	r1, r2, #8
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	6952      	ldr	r2, [r2, #20]
 800b8ec:	0852      	lsrs	r2, r2, #1
 800b8ee:	3a01      	subs	r2, #1
 800b8f0:	0652      	lsls	r2, r2, #25
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	4915      	ldr	r1, [pc, #84]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b8fa:	4b14      	ldr	r3, [pc, #80]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a13      	ldr	r2, [pc, #76]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b900:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b904:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b906:	f7fd f91d 	bl	8008b44 <HAL_GetTick>
 800b90a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b90c:	e009      	b.n	800b922 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b90e:	f7fd f919 	bl	8008b44 <HAL_GetTick>
 800b912:	4602      	mov	r2, r0
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	2b02      	cmp	r3, #2
 800b91a:	d902      	bls.n	800b922 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800b91c:	2303      	movs	r3, #3
 800b91e:	73fb      	strb	r3, [r7, #15]
          break;
 800b920:	e005      	b.n	800b92e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b922:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d0ef      	beq.n	800b90e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d106      	bne.n	800b942 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b934:	4b05      	ldr	r3, [pc, #20]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b936:	691a      	ldr	r2, [r3, #16]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	4903      	ldr	r1, [pc, #12]	; (800b94c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b93e:	4313      	orrs	r3, r2
 800b940:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b942:	7bfb      	ldrb	r3, [r7, #15]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	40021000 	.word	0x40021000

0800b950 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b95e:	4b68      	ldr	r3, [pc, #416]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	f003 0303 	and.w	r3, r3, #3
 800b966:	2b00      	cmp	r3, #0
 800b968:	d018      	beq.n	800b99c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b96a:	4b65      	ldr	r3, [pc, #404]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	f003 0203 	and.w	r2, r3, #3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d10d      	bne.n	800b996 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
       ||
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d009      	beq.n	800b996 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b982:	4b5f      	ldr	r3, [pc, #380]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	091b      	lsrs	r3, r3, #4
 800b988:	f003 0307 	and.w	r3, r3, #7
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
       ||
 800b992:	429a      	cmp	r2, r3
 800b994:	d044      	beq.n	800ba20 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	73fb      	strb	r3, [r7, #15]
 800b99a:	e041      	b.n	800ba20 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d00c      	beq.n	800b9be <RCCEx_PLLSAI2_Config+0x6e>
 800b9a4:	2b03      	cmp	r3, #3
 800b9a6:	d013      	beq.n	800b9d0 <RCCEx_PLLSAI2_Config+0x80>
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d120      	bne.n	800b9ee <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b9ac:	4b54      	ldr	r3, [pc, #336]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d11d      	bne.n	800b9f4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b9bc:	e01a      	b.n	800b9f4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b9be:	4b50      	ldr	r3, [pc, #320]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d116      	bne.n	800b9f8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b9ce:	e013      	b.n	800b9f8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b9d0:	4b4b      	ldr	r3, [pc, #300]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10f      	bne.n	800b9fc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b9dc:	4b48      	ldr	r3, [pc, #288]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d109      	bne.n	800b9fc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b9ec:	e006      	b.n	800b9fc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f2:	e004      	b.n	800b9fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 800b9f4:	bf00      	nop
 800b9f6:	e002      	b.n	800b9fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 800b9f8:	bf00      	nop
 800b9fa:	e000      	b.n	800b9fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 800b9fc:	bf00      	nop
    }

    if(status == HAL_OK)
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10d      	bne.n	800ba20 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ba04:	4b3e      	ldr	r3, [pc, #248]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6819      	ldr	r1, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	011b      	lsls	r3, r3, #4
 800ba18:	430b      	orrs	r3, r1
 800ba1a:	4939      	ldr	r1, [pc, #228]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ba20:	7bfb      	ldrb	r3, [r7, #15]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d167      	bne.n	800baf6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ba26:	4b36      	ldr	r3, [pc, #216]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a35      	ldr	r2, [pc, #212]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ba2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba32:	f7fd f887 	bl	8008b44 <HAL_GetTick>
 800ba36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ba38:	e009      	b.n	800ba4e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ba3a:	f7fd f883 	bl	8008b44 <HAL_GetTick>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d902      	bls.n	800ba4e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	73fb      	strb	r3, [r7, #15]
        break;
 800ba4c:	e005      	b.n	800ba5a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ba4e:	4b2c      	ldr	r3, [pc, #176]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1ef      	bne.n	800ba3a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d14a      	bne.n	800baf6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d111      	bne.n	800ba8a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ba66:	4b26      	ldr	r3, [pc, #152]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800ba6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	6892      	ldr	r2, [r2, #8]
 800ba76:	0211      	lsls	r1, r2, #8
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	68d2      	ldr	r2, [r2, #12]
 800ba7c:	0912      	lsrs	r2, r2, #4
 800ba7e:	0452      	lsls	r2, r2, #17
 800ba80:	430a      	orrs	r2, r1
 800ba82:	491f      	ldr	r1, [pc, #124]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ba84:	4313      	orrs	r3, r2
 800ba86:	614b      	str	r3, [r1, #20]
 800ba88:	e011      	b.n	800baae <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ba8a:	4b1d      	ldr	r3, [pc, #116]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ba92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	6892      	ldr	r2, [r2, #8]
 800ba9a:	0211      	lsls	r1, r2, #8
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	6912      	ldr	r2, [r2, #16]
 800baa0:	0852      	lsrs	r2, r2, #1
 800baa2:	3a01      	subs	r2, #1
 800baa4:	0652      	lsls	r2, r2, #25
 800baa6:	430a      	orrs	r2, r1
 800baa8:	4915      	ldr	r1, [pc, #84]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800baaa:	4313      	orrs	r3, r2
 800baac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800baae:	4b14      	ldr	r3, [pc, #80]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a13      	ldr	r2, [pc, #76]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800bab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bab8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baba:	f7fd f843 	bl	8008b44 <HAL_GetTick>
 800babe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bac0:	e009      	b.n	800bad6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bac2:	f7fd f83f 	bl	8008b44 <HAL_GetTick>
 800bac6:	4602      	mov	r2, r0
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d902      	bls.n	800bad6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	73fb      	strb	r3, [r7, #15]
          break;
 800bad4:	e005      	b.n	800bae2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bad6:	4b0a      	ldr	r3, [pc, #40]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0ef      	beq.n	800bac2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d106      	bne.n	800baf6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800bae8:	4b05      	ldr	r3, [pc, #20]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800baea:	695a      	ldr	r2, [r3, #20]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	695b      	ldr	r3, [r3, #20]
 800baf0:	4903      	ldr	r1, [pc, #12]	; (800bb00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800baf2:	4313      	orrs	r3, r2
 800baf4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800baf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	40021000 	.word	0x40021000

0800bb04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	e07c      	b.n	800bc10 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d106      	bne.n	800bb36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7fc fd99 	bl	8008668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2202      	movs	r2, #2
 800bb3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb4c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb56:	d902      	bls.n	800bb5e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	60fb      	str	r3, [r7, #12]
 800bb5c:	e002      	b.n	800bb64 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bb5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bb6c:	d007      	beq.n	800bb7e <HAL_SPI_Init+0x7a>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb76:	d002      	beq.n	800bb7e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d10b      	bne.n	800bb9e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb8e:	d903      	bls.n	800bb98 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2202      	movs	r2, #2
 800bb94:	631a      	str	r2, [r3, #48]	; 0x30
 800bb96:	e002      	b.n	800bb9e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	431a      	orrs	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	431a      	orrs	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bbbc:	431a      	orrs	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a1b      	ldr	r3, [r3, #32]
 800bbc8:	ea42 0103 	orr.w	r1, r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	430a      	orrs	r2, r1
 800bbd6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	0c1b      	lsrs	r3, r3, #16
 800bbde:	f003 0204 	and.w	r2, r3, #4
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe6:	431a      	orrs	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbec:	431a      	orrs	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	ea42 0103 	orr.w	r1, r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	430a      	orrs	r2, r1
 800bbfe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d101      	bne.n	800bc2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e040      	b.n	800bcac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d106      	bne.n	800bc40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7fc fd58 	bl	80086f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2224      	movs	r2, #36	; 0x24
 800bc44:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 0201 	bic.w	r2, r2, #1
 800bc54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f8c0 	bl	800bddc <UART_SetConfig>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d101      	bne.n	800bc66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e022      	b.n	800bcac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d002      	beq.n	800bc74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fc26 	bl	800c4c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	685a      	ldr	r2, [r3, #4]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	689a      	ldr	r2, [r3, #8]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f042 0201 	orr.w	r2, r2, #1
 800bca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fcad 	bl	800c604 <UART_CheckIdleState>
 800bcaa:	4603      	mov	r3, r0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08a      	sub	sp, #40	; 0x28
 800bcb8:	af02      	add	r7, sp, #8
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	603b      	str	r3, [r7, #0]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcc8:	2b20      	cmp	r3, #32
 800bcca:	f040 8081 	bne.w	800bdd0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <HAL_UART_Transmit+0x26>
 800bcd4:	88fb      	ldrh	r3, [r7, #6]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e079      	b.n	800bdd2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d101      	bne.n	800bcec <HAL_UART_Transmit+0x38>
 800bce8:	2302      	movs	r3, #2
 800bcea:	e072      	b.n	800bdd2 <HAL_UART_Transmit+0x11e>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2221      	movs	r2, #33	; 0x21
 800bcfe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800bd00:	f7fc ff20 	bl	8008b44 <HAL_GetTick>
 800bd04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	88fa      	ldrh	r2, [r7, #6]
 800bd0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	88fa      	ldrh	r2, [r7, #6]
 800bd12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd1e:	d108      	bne.n	800bd32 <HAL_UART_Transmit+0x7e>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d104      	bne.n	800bd32 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	61bb      	str	r3, [r7, #24]
 800bd30:	e003      	b.n	800bd3a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800bd42:	e02d      	b.n	800bda0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	2180      	movs	r1, #128	; 0x80
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 fc9d 	bl	800c68e <UART_WaitOnFlagUntilTimeout>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d001      	beq.n	800bd5e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	e039      	b.n	800bdd2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10b      	bne.n	800bd7c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	881a      	ldrh	r2, [r3, #0]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd70:	b292      	uxth	r2, r2
 800bd72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	3302      	adds	r3, #2
 800bd78:	61bb      	str	r3, [r7, #24]
 800bd7a:	e008      	b.n	800bd8e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	781a      	ldrb	r2, [r3, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	b292      	uxth	r2, r2
 800bd86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	3b01      	subs	r3, #1
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1cb      	bne.n	800bd44 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	2140      	movs	r1, #64	; 0x40
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 fc69 	bl	800c68e <UART_WaitOnFlagUntilTimeout>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e005      	b.n	800bdd2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2220      	movs	r2, #32
 800bdca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	e000      	b.n	800bdd2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800bdd0:	2302      	movs	r3, #2
  }
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3720      	adds	r7, #32
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
	...

0800bddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bddc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800bde0:	b08a      	sub	sp, #40	; 0x28
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bde6:	2300      	movs	r3, #0
 800bde8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	689a      	ldr	r2, [r3, #8]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	431a      	orrs	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	431a      	orrs	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	69db      	ldr	r3, [r3, #28]
 800be06:	4313      	orrs	r3, r2
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	4bb8      	ldr	r3, [pc, #736]	; (800c0f4 <UART_SetConfig+0x318>)
 800be12:	4013      	ands	r3, r2
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	6812      	ldr	r2, [r2, #0]
 800be18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be1a:	430b      	orrs	r3, r1
 800be1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68da      	ldr	r2, [r3, #12]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	430a      	orrs	r2, r1
 800be32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	699b      	ldr	r3, [r3, #24]
 800be38:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4aae      	ldr	r2, [pc, #696]	; (800c0f8 <UART_SetConfig+0x31c>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d004      	beq.n	800be4e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a1b      	ldr	r3, [r3, #32]
 800be48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be4a:	4313      	orrs	r3, r2
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be5e:	430a      	orrs	r2, r1
 800be60:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4aa5      	ldr	r2, [pc, #660]	; (800c0fc <UART_SetConfig+0x320>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d126      	bne.n	800beba <UART_SetConfig+0xde>
 800be6c:	4ba4      	ldr	r3, [pc, #656]	; (800c100 <UART_SetConfig+0x324>)
 800be6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be72:	f003 0303 	and.w	r3, r3, #3
 800be76:	2b03      	cmp	r3, #3
 800be78:	d81a      	bhi.n	800beb0 <UART_SetConfig+0xd4>
 800be7a:	a201      	add	r2, pc, #4	; (adr r2, 800be80 <UART_SetConfig+0xa4>)
 800be7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be80:	0800be91 	.word	0x0800be91
 800be84:	0800bea1 	.word	0x0800bea1
 800be88:	0800be99 	.word	0x0800be99
 800be8c:	0800bea9 	.word	0x0800bea9
 800be90:	2301      	movs	r3, #1
 800be92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be96:	e105      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800be98:	2302      	movs	r3, #2
 800be9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be9e:	e101      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bea0:	2304      	movs	r3, #4
 800bea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bea6:	e0fd      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bea8:	2308      	movs	r3, #8
 800beaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beae:	e0f9      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800beb0:	2310      	movs	r3, #16
 800beb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beb6:	bf00      	nop
 800beb8:	e0f4      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a91      	ldr	r2, [pc, #580]	; (800c104 <UART_SetConfig+0x328>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d138      	bne.n	800bf36 <UART_SetConfig+0x15a>
 800bec4:	4b8e      	ldr	r3, [pc, #568]	; (800c100 <UART_SetConfig+0x324>)
 800bec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beca:	f003 030c 	and.w	r3, r3, #12
 800bece:	2b0c      	cmp	r3, #12
 800bed0:	d82c      	bhi.n	800bf2c <UART_SetConfig+0x150>
 800bed2:	a201      	add	r2, pc, #4	; (adr r2, 800bed8 <UART_SetConfig+0xfc>)
 800bed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed8:	0800bf0d 	.word	0x0800bf0d
 800bedc:	0800bf2d 	.word	0x0800bf2d
 800bee0:	0800bf2d 	.word	0x0800bf2d
 800bee4:	0800bf2d 	.word	0x0800bf2d
 800bee8:	0800bf1d 	.word	0x0800bf1d
 800beec:	0800bf2d 	.word	0x0800bf2d
 800bef0:	0800bf2d 	.word	0x0800bf2d
 800bef4:	0800bf2d 	.word	0x0800bf2d
 800bef8:	0800bf15 	.word	0x0800bf15
 800befc:	0800bf2d 	.word	0x0800bf2d
 800bf00:	0800bf2d 	.word	0x0800bf2d
 800bf04:	0800bf2d 	.word	0x0800bf2d
 800bf08:	0800bf25 	.word	0x0800bf25
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf12:	e0c7      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bf14:	2302      	movs	r3, #2
 800bf16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf1a:	e0c3      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bf1c:	2304      	movs	r3, #4
 800bf1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf22:	e0bf      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bf24:	2308      	movs	r3, #8
 800bf26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf2a:	e0bb      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bf2c:	2310      	movs	r3, #16
 800bf2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf32:	bf00      	nop
 800bf34:	e0b6      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a73      	ldr	r2, [pc, #460]	; (800c108 <UART_SetConfig+0x32c>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d125      	bne.n	800bf8c <UART_SetConfig+0x1b0>
 800bf40:	4b6f      	ldr	r3, [pc, #444]	; (800c100 <UART_SetConfig+0x324>)
 800bf42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bf4a:	2b10      	cmp	r3, #16
 800bf4c:	d011      	beq.n	800bf72 <UART_SetConfig+0x196>
 800bf4e:	2b10      	cmp	r3, #16
 800bf50:	d802      	bhi.n	800bf58 <UART_SetConfig+0x17c>
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d005      	beq.n	800bf62 <UART_SetConfig+0x186>
 800bf56:	e014      	b.n	800bf82 <UART_SetConfig+0x1a6>
 800bf58:	2b20      	cmp	r3, #32
 800bf5a:	d006      	beq.n	800bf6a <UART_SetConfig+0x18e>
 800bf5c:	2b30      	cmp	r3, #48	; 0x30
 800bf5e:	d00c      	beq.n	800bf7a <UART_SetConfig+0x19e>
 800bf60:	e00f      	b.n	800bf82 <UART_SetConfig+0x1a6>
 800bf62:	2300      	movs	r3, #0
 800bf64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf68:	e09c      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf70:	e098      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bf72:	2304      	movs	r3, #4
 800bf74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf78:	e094      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bf7a:	2308      	movs	r3, #8
 800bf7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf80:	e090      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bf82:	2310      	movs	r3, #16
 800bf84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf88:	bf00      	nop
 800bf8a:	e08b      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a5e      	ldr	r2, [pc, #376]	; (800c10c <UART_SetConfig+0x330>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d125      	bne.n	800bfe2 <UART_SetConfig+0x206>
 800bf96:	4b5a      	ldr	r3, [pc, #360]	; (800c100 <UART_SetConfig+0x324>)
 800bf98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bfa0:	2b40      	cmp	r3, #64	; 0x40
 800bfa2:	d011      	beq.n	800bfc8 <UART_SetConfig+0x1ec>
 800bfa4:	2b40      	cmp	r3, #64	; 0x40
 800bfa6:	d802      	bhi.n	800bfae <UART_SetConfig+0x1d2>
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d005      	beq.n	800bfb8 <UART_SetConfig+0x1dc>
 800bfac:	e014      	b.n	800bfd8 <UART_SetConfig+0x1fc>
 800bfae:	2b80      	cmp	r3, #128	; 0x80
 800bfb0:	d006      	beq.n	800bfc0 <UART_SetConfig+0x1e4>
 800bfb2:	2bc0      	cmp	r3, #192	; 0xc0
 800bfb4:	d00c      	beq.n	800bfd0 <UART_SetConfig+0x1f4>
 800bfb6:	e00f      	b.n	800bfd8 <UART_SetConfig+0x1fc>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfbe:	e071      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfc6:	e06d      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bfc8:	2304      	movs	r3, #4
 800bfca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfce:	e069      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bfd0:	2308      	movs	r3, #8
 800bfd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfd6:	e065      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bfd8:	2310      	movs	r3, #16
 800bfda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfde:	bf00      	nop
 800bfe0:	e060      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a4a      	ldr	r2, [pc, #296]	; (800c110 <UART_SetConfig+0x334>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d129      	bne.n	800c040 <UART_SetConfig+0x264>
 800bfec:	4b44      	ldr	r3, [pc, #272]	; (800c100 <UART_SetConfig+0x324>)
 800bfee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bffa:	d014      	beq.n	800c026 <UART_SetConfig+0x24a>
 800bffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c000:	d802      	bhi.n	800c008 <UART_SetConfig+0x22c>
 800c002:	2b00      	cmp	r3, #0
 800c004:	d007      	beq.n	800c016 <UART_SetConfig+0x23a>
 800c006:	e016      	b.n	800c036 <UART_SetConfig+0x25a>
 800c008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c00c:	d007      	beq.n	800c01e <UART_SetConfig+0x242>
 800c00e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c012:	d00c      	beq.n	800c02e <UART_SetConfig+0x252>
 800c014:	e00f      	b.n	800c036 <UART_SetConfig+0x25a>
 800c016:	2300      	movs	r3, #0
 800c018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c01c:	e042      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800c01e:	2302      	movs	r3, #2
 800c020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c024:	e03e      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800c026:	2304      	movs	r3, #4
 800c028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c02c:	e03a      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800c02e:	2308      	movs	r3, #8
 800c030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c034:	e036      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800c036:	2310      	movs	r3, #16
 800c038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c03c:	bf00      	nop
 800c03e:	e031      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a2c      	ldr	r2, [pc, #176]	; (800c0f8 <UART_SetConfig+0x31c>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d129      	bne.n	800c09e <UART_SetConfig+0x2c2>
 800c04a:	4b2d      	ldr	r3, [pc, #180]	; (800c100 <UART_SetConfig+0x324>)
 800c04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c050:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c058:	d014      	beq.n	800c084 <UART_SetConfig+0x2a8>
 800c05a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c05e:	d802      	bhi.n	800c066 <UART_SetConfig+0x28a>
 800c060:	2b00      	cmp	r3, #0
 800c062:	d007      	beq.n	800c074 <UART_SetConfig+0x298>
 800c064:	e016      	b.n	800c094 <UART_SetConfig+0x2b8>
 800c066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c06a:	d007      	beq.n	800c07c <UART_SetConfig+0x2a0>
 800c06c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c070:	d00c      	beq.n	800c08c <UART_SetConfig+0x2b0>
 800c072:	e00f      	b.n	800c094 <UART_SetConfig+0x2b8>
 800c074:	2300      	movs	r3, #0
 800c076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c07a:	e013      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800c07c:	2302      	movs	r3, #2
 800c07e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c082:	e00f      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800c084:	2304      	movs	r3, #4
 800c086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c08a:	e00b      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800c08c:	2308      	movs	r3, #8
 800c08e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c092:	e007      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800c094:	2310      	movs	r3, #16
 800c096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c09a:	bf00      	nop
 800c09c:	e002      	b.n	800c0a4 <UART_SetConfig+0x2c8>
 800c09e:	2310      	movs	r3, #16
 800c0a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a13      	ldr	r2, [pc, #76]	; (800c0f8 <UART_SetConfig+0x31c>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	f040 80fe 	bne.w	800c2ac <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c0b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c0b4:	2b08      	cmp	r3, #8
 800c0b6:	d837      	bhi.n	800c128 <UART_SetConfig+0x34c>
 800c0b8:	a201      	add	r2, pc, #4	; (adr r2, 800c0c0 <UART_SetConfig+0x2e4>)
 800c0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0be:	bf00      	nop
 800c0c0:	0800c0e5 	.word	0x0800c0e5
 800c0c4:	0800c129 	.word	0x0800c129
 800c0c8:	0800c0ed 	.word	0x0800c0ed
 800c0cc:	0800c129 	.word	0x0800c129
 800c0d0:	0800c119 	.word	0x0800c119
 800c0d4:	0800c129 	.word	0x0800c129
 800c0d8:	0800c129 	.word	0x0800c129
 800c0dc:	0800c129 	.word	0x0800c129
 800c0e0:	0800c121 	.word	0x0800c121
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800c0e4:	f7fe ffc2 	bl	800b06c <HAL_RCC_GetPCLK1Freq>
 800c0e8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c0ea:	e020      	b.n	800c12e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800c0ec:	4b09      	ldr	r3, [pc, #36]	; (800c114 <UART_SetConfig+0x338>)
 800c0ee:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c0f0:	e01d      	b.n	800c12e <UART_SetConfig+0x352>
 800c0f2:	bf00      	nop
 800c0f4:	efff69f3 	.word	0xefff69f3
 800c0f8:	40008000 	.word	0x40008000
 800c0fc:	40013800 	.word	0x40013800
 800c100:	40021000 	.word	0x40021000
 800c104:	40004400 	.word	0x40004400
 800c108:	40004800 	.word	0x40004800
 800c10c:	40004c00 	.word	0x40004c00
 800c110:	40005000 	.word	0x40005000
 800c114:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800c118:	f7fe ff12 	bl	800af40 <HAL_RCC_GetSysClockFreq>
 800c11c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c11e:	e006      	b.n	800c12e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800c120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c124:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c126:	e002      	b.n	800c12e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	76fb      	strb	r3, [r7, #27]
        break;
 800c12c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 81b9 	beq.w	800c4a8 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	685a      	ldr	r2, [r3, #4]
 800c13a:	4613      	mov	r3, r2
 800c13c:	005b      	lsls	r3, r3, #1
 800c13e:	4413      	add	r3, r2
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	429a      	cmp	r2, r3
 800c144:	d305      	bcc.n	800c152 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d902      	bls.n	800c158 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	76fb      	strb	r3, [r7, #27]
 800c156:	e1a7      	b.n	800c4a8 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800c158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c15c:	2b08      	cmp	r3, #8
 800c15e:	f200 8092 	bhi.w	800c286 <UART_SetConfig+0x4aa>
 800c162:	a201      	add	r2, pc, #4	; (adr r2, 800c168 <UART_SetConfig+0x38c>)
 800c164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c168:	0800c18d 	.word	0x0800c18d
 800c16c:	0800c287 	.word	0x0800c287
 800c170:	0800c1db 	.word	0x0800c1db
 800c174:	0800c287 	.word	0x0800c287
 800c178:	0800c20f 	.word	0x0800c20f
 800c17c:	0800c287 	.word	0x0800c287
 800c180:	0800c287 	.word	0x0800c287
 800c184:	0800c287 	.word	0x0800c287
 800c188:	0800c25d 	.word	0x0800c25d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800c18c:	f7fe ff6e 	bl	800b06c <HAL_RCC_GetPCLK1Freq>
 800c190:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	4619      	mov	r1, r3
 800c196:	f04f 0200 	mov.w	r2, #0
 800c19a:	f04f 0300 	mov.w	r3, #0
 800c19e:	f04f 0400 	mov.w	r4, #0
 800c1a2:	0214      	lsls	r4, r2, #8
 800c1a4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c1a8:	020b      	lsls	r3, r1, #8
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	6852      	ldr	r2, [r2, #4]
 800c1ae:	0852      	lsrs	r2, r2, #1
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	eb13 0b01 	adds.w	fp, r3, r1
 800c1ba:	eb44 0c02 	adc.w	ip, r4, r2
 800c1be:	4658      	mov	r0, fp
 800c1c0:	4661      	mov	r1, ip
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	f04f 0400 	mov.w	r4, #0
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	4623      	mov	r3, r4
 800c1ce:	f7fa fdfb 	bl	8006dc8 <__aeabi_uldivmod>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c1d8:	e058      	b.n	800c28c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	085b      	lsrs	r3, r3, #1
 800c1e0:	f04f 0400 	mov.w	r4, #0
 800c1e4:	49ae      	ldr	r1, [pc, #696]	; (800c4a0 <UART_SetConfig+0x6c4>)
 800c1e6:	f04f 0200 	mov.w	r2, #0
 800c1ea:	eb13 0b01 	adds.w	fp, r3, r1
 800c1ee:	eb44 0c02 	adc.w	ip, r4, r2
 800c1f2:	4658      	mov	r0, fp
 800c1f4:	4661      	mov	r1, ip
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	f04f 0400 	mov.w	r4, #0
 800c1fe:	461a      	mov	r2, r3
 800c200:	4623      	mov	r3, r4
 800c202:	f7fa fde1 	bl	8006dc8 <__aeabi_uldivmod>
 800c206:	4603      	mov	r3, r0
 800c208:	460c      	mov	r4, r1
 800c20a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c20c:	e03e      	b.n	800c28c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800c20e:	f7fe fe97 	bl	800af40 <HAL_RCC_GetSysClockFreq>
 800c212:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	4619      	mov	r1, r3
 800c218:	f04f 0200 	mov.w	r2, #0
 800c21c:	f04f 0300 	mov.w	r3, #0
 800c220:	f04f 0400 	mov.w	r4, #0
 800c224:	0214      	lsls	r4, r2, #8
 800c226:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c22a:	020b      	lsls	r3, r1, #8
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	6852      	ldr	r2, [r2, #4]
 800c230:	0852      	lsrs	r2, r2, #1
 800c232:	4611      	mov	r1, r2
 800c234:	f04f 0200 	mov.w	r2, #0
 800c238:	eb13 0b01 	adds.w	fp, r3, r1
 800c23c:	eb44 0c02 	adc.w	ip, r4, r2
 800c240:	4658      	mov	r0, fp
 800c242:	4661      	mov	r1, ip
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	f04f 0400 	mov.w	r4, #0
 800c24c:	461a      	mov	r2, r3
 800c24e:	4623      	mov	r3, r4
 800c250:	f7fa fdba 	bl	8006dc8 <__aeabi_uldivmod>
 800c254:	4603      	mov	r3, r0
 800c256:	460c      	mov	r4, r1
 800c258:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c25a:	e017      	b.n	800c28c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	085b      	lsrs	r3, r3, #1
 800c262:	f04f 0400 	mov.w	r4, #0
 800c266:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800c26a:	f144 0100 	adc.w	r1, r4, #0
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	f04f 0400 	mov.w	r4, #0
 800c276:	461a      	mov	r2, r3
 800c278:	4623      	mov	r3, r4
 800c27a:	f7fa fda5 	bl	8006dc8 <__aeabi_uldivmod>
 800c27e:	4603      	mov	r3, r0
 800c280:	460c      	mov	r4, r1
 800c282:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c284:	e002      	b.n	800c28c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800c286:	2301      	movs	r3, #1
 800c288:	76fb      	strb	r3, [r7, #27]
            break;
 800c28a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c292:	d308      	bcc.n	800c2a6 <UART_SetConfig+0x4ca>
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c29a:	d204      	bcs.n	800c2a6 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	69fa      	ldr	r2, [r7, #28]
 800c2a2:	60da      	str	r2, [r3, #12]
 800c2a4:	e100      	b.n	800c4a8 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	76fb      	strb	r3, [r7, #27]
 800c2aa:	e0fd      	b.n	800c4a8 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	69db      	ldr	r3, [r3, #28]
 800c2b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2b4:	f040 8084 	bne.w	800c3c0 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800c2b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c2bc:	2b08      	cmp	r3, #8
 800c2be:	d85f      	bhi.n	800c380 <UART_SetConfig+0x5a4>
 800c2c0:	a201      	add	r2, pc, #4	; (adr r2, 800c2c8 <UART_SetConfig+0x4ec>)
 800c2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c6:	bf00      	nop
 800c2c8:	0800c2ed 	.word	0x0800c2ed
 800c2cc:	0800c30d 	.word	0x0800c30d
 800c2d0:	0800c32d 	.word	0x0800c32d
 800c2d4:	0800c381 	.word	0x0800c381
 800c2d8:	0800c349 	.word	0x0800c349
 800c2dc:	0800c381 	.word	0x0800c381
 800c2e0:	0800c381 	.word	0x0800c381
 800c2e4:	0800c381 	.word	0x0800c381
 800c2e8:	0800c369 	.word	0x0800c369
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2ec:	f7fe febe 	bl	800b06c <HAL_RCC_GetPCLK1Freq>
 800c2f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	005a      	lsls	r2, r3, #1
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	085b      	lsrs	r3, r3, #1
 800c2fc:	441a      	add	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	fbb2 f3f3 	udiv	r3, r2, r3
 800c306:	b29b      	uxth	r3, r3
 800c308:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c30a:	e03c      	b.n	800c386 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c30c:	f7fe fec4 	bl	800b098 <HAL_RCC_GetPCLK2Freq>
 800c310:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	005a      	lsls	r2, r3, #1
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	085b      	lsrs	r3, r3, #1
 800c31c:	441a      	add	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	fbb2 f3f3 	udiv	r3, r2, r3
 800c326:	b29b      	uxth	r3, r3
 800c328:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c32a:	e02c      	b.n	800c386 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	085b      	lsrs	r3, r3, #1
 800c332:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800c336:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	6852      	ldr	r2, [r2, #4]
 800c33e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c342:	b29b      	uxth	r3, r3
 800c344:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c346:	e01e      	b.n	800c386 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c348:	f7fe fdfa 	bl	800af40 <HAL_RCC_GetSysClockFreq>
 800c34c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	005a      	lsls	r2, r3, #1
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	085b      	lsrs	r3, r3, #1
 800c358:	441a      	add	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c362:	b29b      	uxth	r3, r3
 800c364:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c366:	e00e      	b.n	800c386 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	085b      	lsrs	r3, r3, #1
 800c36e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	fbb2 f3f3 	udiv	r3, r2, r3
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c37e:	e002      	b.n	800c386 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	76fb      	strb	r3, [r7, #27]
        break;
 800c384:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	2b0f      	cmp	r3, #15
 800c38a:	d916      	bls.n	800c3ba <UART_SetConfig+0x5de>
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c392:	d212      	bcs.n	800c3ba <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	b29b      	uxth	r3, r3
 800c398:	f023 030f 	bic.w	r3, r3, #15
 800c39c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	085b      	lsrs	r3, r3, #1
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	f003 0307 	and.w	r3, r3, #7
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	89fb      	ldrh	r3, [r7, #14]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	89fa      	ldrh	r2, [r7, #14]
 800c3b6:	60da      	str	r2, [r3, #12]
 800c3b8:	e076      	b.n	800c4a8 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	76fb      	strb	r3, [r7, #27]
 800c3be:	e073      	b.n	800c4a8 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800c3c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c3c4:	2b08      	cmp	r3, #8
 800c3c6:	d85c      	bhi.n	800c482 <UART_SetConfig+0x6a6>
 800c3c8:	a201      	add	r2, pc, #4	; (adr r2, 800c3d0 <UART_SetConfig+0x5f4>)
 800c3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ce:	bf00      	nop
 800c3d0:	0800c3f5 	.word	0x0800c3f5
 800c3d4:	0800c413 	.word	0x0800c413
 800c3d8:	0800c431 	.word	0x0800c431
 800c3dc:	0800c483 	.word	0x0800c483
 800c3e0:	0800c44d 	.word	0x0800c44d
 800c3e4:	0800c483 	.word	0x0800c483
 800c3e8:	0800c483 	.word	0x0800c483
 800c3ec:	0800c483 	.word	0x0800c483
 800c3f0:	0800c46b 	.word	0x0800c46b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3f4:	f7fe fe3a 	bl	800b06c <HAL_RCC_GetPCLK1Freq>
 800c3f8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	085a      	lsrs	r2, r3, #1
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	441a      	add	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	fbb2 f3f3 	udiv	r3, r2, r3
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c410:	e03a      	b.n	800c488 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c412:	f7fe fe41 	bl	800b098 <HAL_RCC_GetPCLK2Freq>
 800c416:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	085a      	lsrs	r2, r3, #1
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	441a      	add	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	fbb2 f3f3 	udiv	r3, r2, r3
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c42e:	e02b      	b.n	800c488 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	085b      	lsrs	r3, r3, #1
 800c436:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800c43a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	6852      	ldr	r2, [r2, #4]
 800c442:	fbb3 f3f2 	udiv	r3, r3, r2
 800c446:	b29b      	uxth	r3, r3
 800c448:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c44a:	e01d      	b.n	800c488 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c44c:	f7fe fd78 	bl	800af40 <HAL_RCC_GetSysClockFreq>
 800c450:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	085a      	lsrs	r2, r3, #1
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	441a      	add	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	fbb2 f3f3 	udiv	r3, r2, r3
 800c464:	b29b      	uxth	r3, r3
 800c466:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c468:	e00e      	b.n	800c488 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	085b      	lsrs	r3, r3, #1
 800c470:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	fbb2 f3f3 	udiv	r3, r2, r3
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c480:	e002      	b.n	800c488 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	76fb      	strb	r3, [r7, #27]
        break;
 800c486:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	2b0f      	cmp	r3, #15
 800c48c:	d90a      	bls.n	800c4a4 <UART_SetConfig+0x6c8>
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c494:	d206      	bcs.n	800c4a4 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	69fa      	ldr	r2, [r7, #28]
 800c49c:	60da      	str	r2, [r3, #12]
 800c49e:	e003      	b.n	800c4a8 <UART_SetConfig+0x6cc>
 800c4a0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c4b4:	7efb      	ldrb	r3, [r7, #27]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3728      	adds	r7, #40	; 0x28
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c4c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00a      	beq.n	800c4ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ee:	f003 0302 	and.w	r3, r3, #2
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00a      	beq.n	800c50c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	430a      	orrs	r2, r1
 800c50a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c510:	f003 0304 	and.w	r3, r3, #4
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00a      	beq.n	800c52e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	430a      	orrs	r2, r1
 800c52c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c532:	f003 0308 	and.w	r3, r3, #8
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00a      	beq.n	800c550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	430a      	orrs	r2, r1
 800c54e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c554:	f003 0310 	and.w	r3, r3, #16
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00a      	beq.n	800c572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	430a      	orrs	r2, r1
 800c570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c576:	f003 0320 	and.w	r3, r3, #32
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00a      	beq.n	800c594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	430a      	orrs	r2, r1
 800c592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d01a      	beq.n	800c5d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	430a      	orrs	r2, r1
 800c5b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5be:	d10a      	bne.n	800c5d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	430a      	orrs	r2, r1
 800c5d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00a      	beq.n	800c5f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	430a      	orrs	r2, r1
 800c5f6:	605a      	str	r2, [r3, #4]
  }
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af02      	add	r7, sp, #8
 800c60a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c612:	f7fc fa97 	bl	8008b44 <HAL_GetTick>
 800c616:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f003 0308 	and.w	r3, r3, #8
 800c622:	2b08      	cmp	r3, #8
 800c624:	d10e      	bne.n	800c644 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c626:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f82a 	bl	800c68e <UART_WaitOnFlagUntilTimeout>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c640:	2303      	movs	r3, #3
 800c642:	e020      	b.n	800c686 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 0304 	and.w	r3, r3, #4
 800c64e:	2b04      	cmp	r3, #4
 800c650:	d10e      	bne.n	800c670 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c652:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f814 	bl	800c68e <UART_WaitOnFlagUntilTimeout>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c66c:	2303      	movs	r3, #3
 800c66e:	e00a      	b.n	800c686 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2220      	movs	r2, #32
 800c674:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2220      	movs	r2, #32
 800c67a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b084      	sub	sp, #16
 800c692:	af00      	add	r7, sp, #0
 800c694:	60f8      	str	r0, [r7, #12]
 800c696:	60b9      	str	r1, [r7, #8]
 800c698:	603b      	str	r3, [r7, #0]
 800c69a:	4613      	mov	r3, r2
 800c69c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c69e:	e05d      	b.n	800c75c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a6:	d059      	beq.n	800c75c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6a8:	f7fc fa4c 	bl	8008b44 <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	69ba      	ldr	r2, [r7, #24]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d302      	bcc.n	800c6be <UART_WaitOnFlagUntilTimeout+0x30>
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d11b      	bne.n	800c6f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c6cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	689a      	ldr	r2, [r3, #8]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f022 0201 	bic.w	r2, r2, #1
 800c6dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c6f2:	2303      	movs	r3, #3
 800c6f4:	e042      	b.n	800c77c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 0304 	and.w	r3, r3, #4
 800c700:	2b00      	cmp	r3, #0
 800c702:	d02b      	beq.n	800c75c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	69db      	ldr	r3, [r3, #28]
 800c70a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c70e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c712:	d123      	bne.n	800c75c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c71c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c72c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	689a      	ldr	r2, [r3, #8]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f022 0201 	bic.w	r2, r2, #1
 800c73c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2220      	movs	r2, #32
 800c742:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2220      	movs	r2, #32
 800c748:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2220      	movs	r2, #32
 800c74e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c758:	2303      	movs	r3, #3
 800c75a:	e00f      	b.n	800c77c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	69da      	ldr	r2, [r3, #28]
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	4013      	ands	r3, r2
 800c766:	68ba      	ldr	r2, [r7, #8]
 800c768:	429a      	cmp	r2, r3
 800c76a:	bf0c      	ite	eq
 800c76c:	2301      	moveq	r3, #1
 800c76e:	2300      	movne	r3, #0
 800c770:	b2db      	uxtb	r3, r3
 800c772:	461a      	mov	r2, r3
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	429a      	cmp	r2, r3
 800c778:	d092      	beq.n	800c6a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c784:	b084      	sub	sp, #16
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	f107 001c 	add.w	r0, r7, #28
 800c792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d122      	bne.n	800c7e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c7b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c7c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d105      	bne.n	800c7d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fa28 	bl	800cc2c <USB_CoreReset>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73fb      	strb	r3, [r7, #15]
 800c7e0:	e01a      	b.n	800c818 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fa1c 	bl	800cc2c <USB_CoreReset>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d106      	bne.n	800c80c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c802:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	639a      	str	r2, [r3, #56]	; 0x38
 800c80a:	e005      	b.n	800c818 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c810:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800c818:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c824:	b004      	add	sp, #16
 800c826:	4770      	bx	lr

0800c828 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	f023 0201 	bic.w	r2, r3, #1
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr

0800c84a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b082      	sub	sp, #8
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	460b      	mov	r3, r1
 800c854:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c862:	78fb      	ldrb	r3, [r7, #3]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d106      	bne.n	800c876 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	60da      	str	r2, [r3, #12]
 800c874:	e00b      	b.n	800c88e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c876:	78fb      	ldrb	r3, [r7, #3]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d106      	bne.n	800c88a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	60da      	str	r2, [r3, #12]
 800c888:	e001      	b.n	800c88e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e003      	b.n	800c896 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c88e:	2032      	movs	r0, #50	; 0x32
 800c890:	f7fc f964 	bl	8008b5c <HAL_Delay>

  return HAL_OK;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3708      	adds	r7, #8
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
	...

0800c8a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8a0:	b084      	sub	sp, #16
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b086      	sub	sp, #24
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c8ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	613b      	str	r3, [r7, #16]
 800c8be:	e009      	b.n	800c8d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	3340      	adds	r3, #64	; 0x40
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4413      	add	r3, r2
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	613b      	str	r3, [r7, #16]
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b0e      	cmp	r3, #14
 800c8d8:	d9f2      	bls.n	800c8c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d11c      	bne.n	800c91a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ee:	f043 0302 	orr.w	r3, r3, #2
 800c8f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	e005      	b.n	800c926 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c92c:	461a      	mov	r2, r3
 800c92e:	2300      	movs	r3, #0
 800c930:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c938:	4619      	mov	r1, r3
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c940:	461a      	mov	r2, r3
 800c942:	680b      	ldr	r3, [r1, #0]
 800c944:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c946:	2103      	movs	r1, #3
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f93d 	bl	800cbc8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c94e:	2110      	movs	r1, #16
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 f8f1 	bl	800cb38 <USB_FlushTxFifo>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d001      	beq.n	800c960 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 f90f 	bl	800cb84 <USB_FlushRxFifo>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800c96c:	2301      	movs	r3, #1
 800c96e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c976:	461a      	mov	r2, r3
 800c978:	2300      	movs	r3, #0
 800c97a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c982:	461a      	mov	r2, r3
 800c984:	2300      	movs	r3, #0
 800c986:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98e:	461a      	mov	r2, r3
 800c990:	2300      	movs	r3, #0
 800c992:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c994:	2300      	movs	r3, #0
 800c996:	613b      	str	r3, [r7, #16]
 800c998:	e043      	b.n	800ca22 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	015a      	lsls	r2, r3, #5
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9b0:	d118      	bne.n	800c9e4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10a      	bne.n	800c9ce <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	015a      	lsls	r2, r3, #5
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9ca:	6013      	str	r3, [r2, #0]
 800c9cc:	e013      	b.n	800c9f6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	015a      	lsls	r2, r3, #5
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9da:	461a      	mov	r2, r3
 800c9dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c9e0:	6013      	str	r3, [r2, #0]
 800c9e2:	e008      	b.n	800c9f6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	015a      	lsls	r2, r3, #5
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	015a      	lsls	r2, r3, #5
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca02:	461a      	mov	r2, r3
 800ca04:	2300      	movs	r3, #0
 800ca06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	015a      	lsls	r2, r3, #5
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	4413      	add	r3, r2
 800ca10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca14:	461a      	mov	r2, r3
 800ca16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	613b      	str	r3, [r7, #16]
 800ca22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d3b7      	bcc.n	800c99a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	613b      	str	r3, [r7, #16]
 800ca2e:	e043      	b.n	800cab8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	015a      	lsls	r2, r3, #5
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	4413      	add	r3, r2
 800ca38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca46:	d118      	bne.n	800ca7a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10a      	bne.n	800ca64 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	015a      	lsls	r2, r3, #5
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	4413      	add	r3, r2
 800ca56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca60:	6013      	str	r3, [r2, #0]
 800ca62:	e013      	b.n	800ca8c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	015a      	lsls	r2, r3, #5
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca70:	461a      	mov	r2, r3
 800ca72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca76:	6013      	str	r3, [r2, #0]
 800ca78:	e008      	b.n	800ca8c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	015a      	lsls	r2, r3, #5
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4413      	add	r3, r2
 800ca82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca86:	461a      	mov	r2, r3
 800ca88:	2300      	movs	r3, #0
 800ca8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca98:	461a      	mov	r2, r3
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	015a      	lsls	r2, r3, #5
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	4413      	add	r3, r2
 800caa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caaa:	461a      	mov	r2, r3
 800caac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cab0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	3301      	adds	r3, #1
 800cab6:	613b      	str	r3, [r7, #16]
 800cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caba:	693a      	ldr	r2, [r7, #16]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d3b7      	bcc.n	800ca30 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cad2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cae0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	699b      	ldr	r3, [r3, #24]
 800cae6:	f043 0210 	orr.w	r2, r3, #16
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	699a      	ldr	r2, [r3, #24]
 800caf2:	4b10      	ldr	r3, [pc, #64]	; (800cb34 <USB_DevInit+0x294>)
 800caf4:	4313      	orrs	r3, r2
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d005      	beq.n	800cb0c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	f043 0208 	orr.w	r2, r3, #8
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d107      	bne.n	800cb22 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb1a:	f043 0304 	orr.w	r3, r3, #4
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb22:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3718      	adds	r7, #24
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb2e:	b004      	add	sp, #16
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	803c3800 	.word	0x803c3800

0800cb38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cb42:	2300      	movs	r3, #0
 800cb44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	019b      	lsls	r3, r3, #6
 800cb4a:	f043 0220 	orr.w	r2, r3, #32
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3301      	adds	r3, #1
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	4a09      	ldr	r2, [pc, #36]	; (800cb80 <USB_FlushTxFifo+0x48>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d901      	bls.n	800cb64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e006      	b.n	800cb72 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	f003 0320 	and.w	r3, r3, #32
 800cb6c:	2b20      	cmp	r3, #32
 800cb6e:	d0f0      	beq.n	800cb52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	00030d40 	.word	0x00030d40

0800cb84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2210      	movs	r2, #16
 800cb94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	4a09      	ldr	r2, [pc, #36]	; (800cbc4 <USB_FlushRxFifo+0x40>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d901      	bls.n	800cba8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e006      	b.n	800cbb6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	f003 0310 	and.w	r3, r3, #16
 800cbb0:	2b10      	cmp	r3, #16
 800cbb2:	d0f0      	beq.n	800cb96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	00030d40 	.word	0x00030d40

0800cbc8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	68f9      	ldr	r1, [r7, #12]
 800cbe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b084      	sub	sp, #16
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc14:	f043 0302 	orr.w	r3, r3, #2
 800cc18:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cc1a:	2003      	movs	r0, #3
 800cc1c:	f7fb ff9e 	bl	8008b5c <HAL_Delay>

  return HAL_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cc34:	2300      	movs	r3, #0
 800cc36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	60fb      	str	r3, [r7, #12]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	4a13      	ldr	r2, [pc, #76]	; (800cc90 <USB_CoreReset+0x64>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d901      	bls.n	800cc4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc46:	2303      	movs	r3, #3
 800cc48:	e01b      	b.n	800cc82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	daf2      	bge.n	800cc38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc52:	2300      	movs	r3, #0
 800cc54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	f043 0201 	orr.w	r2, r3, #1
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3301      	adds	r3, #1
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	4a09      	ldr	r2, [pc, #36]	; (800cc90 <USB_CoreReset+0x64>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d901      	bls.n	800cc74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e006      	b.n	800cc82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d0f0      	beq.n	800cc62 <USB_CoreReset+0x36>

  return HAL_OK;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	00030d40 	.word	0x00030d40

0800cc94 <arm_abs_f32>:

void arm_abs_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b08b      	sub	sp, #44	; 0x2c
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;                  /* temporary variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	089b      	lsrs	r3, r3, #2
 800cca4:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800cca6:	e03b      	b.n	800cd20 <arm_abs_f32+0x8c>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    /* read sample from source */
    in1 = *pSrc;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	623b      	str	r3, [r7, #32]
    in2 = *(pSrc + 1);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	61fb      	str	r3, [r7, #28]
    in3 = *(pSrc + 2);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	61bb      	str	r3, [r7, #24]

    /* find absolute value */
    in1 = fabsf(in1);
 800ccba:	edd7 7a08 	vldr	s15, [r7, #32]
 800ccbe:	eef0 7ae7 	vabs.f32	s15, s15
 800ccc2:	edc7 7a08 	vstr	s15, [r7, #32]

    /* read sample from source */
    in4 = *(pSrc + 3);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	617b      	str	r3, [r7, #20]

    /* find absolute value */
    in2 = fabsf(in2);
 800cccc:	edd7 7a07 	vldr	s15, [r7, #28]
 800ccd0:	eef0 7ae7 	vabs.f32	s15, s15
 800ccd4:	edc7 7a07 	vstr	s15, [r7, #28]

    /* read sample from source */
    *pDst = in1;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	6a3a      	ldr	r2, [r7, #32]
 800ccdc:	601a      	str	r2, [r3, #0]

    /* find absolute value */
    in3 = fabsf(in3);
 800ccde:	edd7 7a06 	vldr	s15, [r7, #24]
 800cce2:	eef0 7ae7 	vabs.f32	s15, s15
 800cce6:	edc7 7a06 	vstr	s15, [r7, #24]

    /* find absolute value */
    in4 = fabsf(in4);
 800ccea:	edd7 7a05 	vldr	s15, [r7, #20]
 800ccee:	eef0 7ae7 	vabs.f32	s15, s15
 800ccf2:	edc7 7a05 	vstr	s15, [r7, #20]

    /* store result to destination */
    *(pDst + 1) = in2;
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	69fa      	ldr	r2, [r7, #28]
 800ccfc:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 2) = in3;
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	3308      	adds	r3, #8
 800cd02:	69ba      	ldr	r2, [r7, #24]
 800cd04:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 3) = in4;
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	330c      	adds	r3, #12
 800cd0a:	697a      	ldr	r2, [r7, #20]
 800cd0c:	601a      	str	r2, [r3, #0]


    /* Update source pointer to process next sampels */
    pSrc += 4u;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3310      	adds	r3, #16
 800cd12:	60fb      	str	r3, [r7, #12]

    /* Update destination pointer to process next sampels */
    pDst += 4u;
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	3310      	adds	r3, #16
 800cd18:	60bb      	str	r3, [r7, #8]

    /* Decrement the loop counter */
    blkCnt--;
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1c0      	bne.n	800cca8 <arm_abs_f32+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f003 0303 	and.w	r3, r3, #3
 800cd2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /*   #ifndef ARM_MATH_CM0_FAMILY   */

  while(blkCnt > 0u)
 800cd2e:	e00e      	b.n	800cd4e <arm_abs_f32+0xba>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    *pDst++ = fabsf(*pSrc++);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	1d1a      	adds	r2, r3, #4
 800cd34:	60fa      	str	r2, [r7, #12]
 800cd36:	edd3 7a00 	vldr	s15, [r3]
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	1d1a      	adds	r2, r3, #4
 800cd3e:	60ba      	str	r2, [r7, #8]
 800cd40:	eef0 7ae7 	vabs.f32	s15, s15
 800cd44:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 800cd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d1ed      	bne.n	800cd30 <arm_abs_f32+0x9c>
  }
}
 800cd54:	bf00      	nop
 800cd56:	372c      	adds	r7, #44	; 0x2c
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b092      	sub	sp, #72	; 0x48
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	089b      	lsrs	r3, r3, #2
 800cd70:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800cd72:	e0ce      	b.n	800cf12 <arm_cmplx_mag_f32+0x1b2>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	1d1a      	adds	r2, r3, #4
 800cd78:	60fa      	str	r2, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	1d1a      	adds	r2, r3, #4
 800cd82:	60fa      	str	r2, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800cd88:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800cd8c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800cd90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd94:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800cd98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cd9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cda0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	1d1a      	adds	r2, r3, #4
 800cda8:	60ba      	str	r2, [r7, #8]
 800cdaa:	edc7 7a08 	vstr	s15, [r7, #32]
 800cdae:	61fb      	str	r3, [r7, #28]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800cdb0:	edd7 7a08 	vldr	s15, [r7, #32]
 800cdb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdbc:	db09      	blt.n	800cdd2 <arm_cmplx_mag_f32+0x72>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800cdbe:	ed97 0a08 	vldr	s0, [r7, #32]
 800cdc2:	f006 fa9b 	bl	80132fc <sqrtf>
 800cdc6:	eef0 7a40 	vmov.f32	s15, s0
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	edc3 7a00 	vstr	s15, [r3]
 800cdd0:	e003      	b.n	800cdda <arm_cmplx_mag_f32+0x7a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	f04f 0200 	mov.w	r2, #0
 800cdd8:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	1d1a      	adds	r2, r3, #4
 800cdde:	60fa      	str	r2, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	1d1a      	adds	r2, r3, #4
 800cde8:	60fa      	str	r2, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800cdee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800cdf2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800cdf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdfa:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800cdfe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ce02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	1d1a      	adds	r2, r3, #4
 800ce0e:	60ba      	str	r2, [r7, #8]
 800ce10:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
    if (in >= 0.0f)
 800ce16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce22:	db09      	blt.n	800ce38 <arm_cmplx_mag_f32+0xd8>
      *pOut = __builtin_sqrtf(in);
 800ce24:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800ce28:	f006 fa68 	bl	80132fc <sqrtf>
 800ce2c:	eef0 7a40 	vmov.f32	s15, s0
 800ce30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce32:	edc3 7a00 	vstr	s15, [r3]
 800ce36:	e003      	b.n	800ce40 <arm_cmplx_mag_f32+0xe0>
      *pOut = 0.0f;
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	f04f 0200 	mov.w	r2, #0
 800ce3e:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	1d1a      	adds	r2, r3, #4
 800ce44:	60fa      	str	r2, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	1d1a      	adds	r2, r3, #4
 800ce4e:	60fa      	str	r2, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800ce54:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ce58:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800ce5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce60:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800ce64:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ce68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	1d1a      	adds	r2, r3, #4
 800ce74:	60ba      	str	r2, [r7, #8]
 800ce76:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800ce7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (in >= 0.0f)
 800ce7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce88:	db09      	blt.n	800ce9e <arm_cmplx_mag_f32+0x13e>
      *pOut = __builtin_sqrtf(in);
 800ce8a:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800ce8e:	f006 fa35 	bl	80132fc <sqrtf>
 800ce92:	eef0 7a40 	vmov.f32	s15, s0
 800ce96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce98:	edc3 7a00 	vstr	s15, [r3]
 800ce9c:	e003      	b.n	800cea6 <arm_cmplx_mag_f32+0x146>
      *pOut = 0.0f;
 800ce9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea0:	f04f 0200 	mov.w	r2, #0
 800cea4:	601a      	str	r2, [r3, #0]

    realIn = *pSrc++;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	1d1a      	adds	r2, r3, #4
 800ceaa:	60fa      	str	r2, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	1d1a      	adds	r2, r3, #4
 800ceb4:	60fa      	str	r2, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800ceba:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800cebe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800cec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cec6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800ceca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ced2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	1d1a      	adds	r2, r3, #4
 800ceda:	60ba      	str	r2, [r7, #8]
 800cedc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800cee0:	637b      	str	r3, [r7, #52]	; 0x34
    if (in >= 0.0f)
 800cee2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800cee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ceea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceee:	db09      	blt.n	800cf04 <arm_cmplx_mag_f32+0x1a4>
      *pOut = __builtin_sqrtf(in);
 800cef0:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800cef4:	f006 fa02 	bl	80132fc <sqrtf>
 800cef8:	eef0 7a40 	vmov.f32	s15, s0
 800cefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefe:	edc3 7a00 	vstr	s15, [r3]
 800cf02:	e003      	b.n	800cf0c <arm_cmplx_mag_f32+0x1ac>
      *pOut = 0.0f;
 800cf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf06:	f04f 0200 	mov.w	r2, #0
 800cf0a:	601a      	str	r2, [r3, #0]


    /* Decrement the loop counter */
    blkCnt--;
 800cf0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	647b      	str	r3, [r7, #68]	; 0x44
  while(blkCnt > 0u)
 800cf12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f47f af2d 	bne.w	800cd74 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f003 0303 	and.w	r3, r3, #3
 800cf20:	647b      	str	r3, [r7, #68]	; 0x44

  while(blkCnt > 0u)
 800cf22:	e035      	b.n	800cf90 <arm_cmplx_mag_f32+0x230>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	1d1a      	adds	r2, r3, #4
 800cf28:	60fa      	str	r2, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	1d1a      	adds	r2, r3, #4
 800cf32:	60fa      	str	r2, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800cf38:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800cf3c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800cf40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf44:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800cf48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cf4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	1d1a      	adds	r2, r3, #4
 800cf58:	60ba      	str	r2, [r7, #8]
 800cf5a:	edc7 7a06 	vstr	s15, [r7, #24]
 800cf5e:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800cf60:	edd7 7a06 	vldr	s15, [r7, #24]
 800cf64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6c:	db09      	blt.n	800cf82 <arm_cmplx_mag_f32+0x222>
      *pOut = __builtin_sqrtf(in);
 800cf6e:	ed97 0a06 	vldr	s0, [r7, #24]
 800cf72:	f006 f9c3 	bl	80132fc <sqrtf>
 800cf76:	eef0 7a40 	vmov.f32	s15, s0
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	edc3 7a00 	vstr	s15, [r3]
 800cf80:	e003      	b.n	800cf8a <arm_cmplx_mag_f32+0x22a>
      *pOut = 0.0f;
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	f04f 0200 	mov.w	r2, #0
 800cf88:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 800cf8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	647b      	str	r3, [r7, #68]	; 0x44
  while(blkCnt > 0u)
 800cf90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d1c6      	bne.n	800cf24 <arm_cmplx_mag_f32+0x1c4>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 800cf96:	bf00      	nop
 800cf98:	3748      	adds	r7, #72	; 0x48
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800cf9e:	b480      	push	{r7}
 800cfa0:	b085      	sub	sp, #20
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	60f8      	str	r0, [r7, #12]
 800cfa6:	607b      	str	r3, [r7, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	817b      	strh	r3, [r7, #10]
 800cfac:	4613      	mov	r3, r2
 800cfae:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	897a      	ldrh	r2, [r7, #10]
 800cfb4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	893a      	ldrh	r2, [r7, #8]
 800cfba:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	605a      	str	r2, [r3, #4]
}
 800cfc2:	bf00      	nop
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 800cfce:	b480      	push	{r7}
 800cfd0:	b08b      	sub	sp, #44	; 0x2c
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	60f8      	str	r0, [r7, #12]
 800cfd6:	60b9      	str	r1, [r7, #8]
 800cfd8:	607a      	str	r2, [r7, #4]
 800cfda:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	1d1a      	adds	r2, r3, #4
 800cfe8:	60fa      	str	r2, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	089b      	lsrs	r3, r3, #2
 800cff4:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 800cff6:	e051      	b.n	800d09c <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	1d1a      	adds	r2, r3, #4
 800cffc:	60fa      	str	r2, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	1d1a      	adds	r2, r3, #4
 800d006:	60fa      	str	r2, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800d00c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d010:	edd7 7a05 	vldr	s15, [r7, #20]
 800d014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01c:	d504      	bpl.n	800d028 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	3301      	adds	r3, #1
 800d026:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	1d1a      	adds	r2, r3, #4
 800d02c:	60fa      	str	r2, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 800d032:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d036:	edd7 7a04 	vldr	s15, [r7, #16]
 800d03a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d042:	d504      	bpl.n	800d04e <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	3302      	adds	r3, #2
 800d04c:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	1d1a      	adds	r2, r3, #4
 800d052:	60fa      	str	r2, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800d058:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d05c:	edd7 7a05 	vldr	s15, [r7, #20]
 800d060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d068:	d504      	bpl.n	800d074 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	3303      	adds	r3, #3
 800d072:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 800d074:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d078:	edd7 7a04 	vldr	s15, [r7, #16]
 800d07c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d084:	d504      	bpl.n	800d090 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	3304      	adds	r3, #4
 800d08e:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	3304      	adds	r3, #4
 800d094:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	3b01      	subs	r3, #1
 800d09a:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 800d09c:	6a3b      	ldr	r3, [r7, #32]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1aa      	bne.n	800cff8 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	f003 0303 	and.w	r3, r3, #3
 800d0aa:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 800d0ac:	e016      	b.n	800d0dc <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	1d1a      	adds	r2, r3, #4
 800d0b2:	60fa      	str	r2, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 800d0b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d0bc:	edd7 7a05 	vldr	s15, [r7, #20]
 800d0c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c8:	d505      	bpl.n	800d0d6 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 800d0ce:	68ba      	ldr	r2, [r7, #8]
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 800d0dc:	6a3b      	ldr	r3, [r7, #32]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1e5      	bne.n	800d0ae <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0e6:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	69fa      	ldr	r2, [r7, #28]
 800d0ec:	601a      	str	r2, [r3, #0]
}
 800d0ee:	bf00      	nop
 800d0f0:	372c      	adds	r7, #44	; 0x2c
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr

0800d0fa <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b0a0      	sub	sp, #128	; 0x80
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	881b      	ldrh	r3, [r3, #0]
 800d108:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 800d10a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	4413      	add	r3, r2
 800d112:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 800d11e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d120:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 800d122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d124:	085b      	lsrs	r3, r3, #1
 800d126:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 800d128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	4413      	add	r3, r2
 800d130:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 800d132:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d138:	4413      	add	r3, r2
 800d13a:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 800d13c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d13e:	089b      	lsrs	r3, r3, #2
 800d140:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d142:	e1b6      	b.n	800d4b2 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 800d15c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 800d162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 800d168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 800d16e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 800d174:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 800d17a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 800d180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d182:	689b      	ldr	r3, [r3, #8]
 800d184:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 800d186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 800d18c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 800d192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 800d198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 800d19e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 800d1a4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d1a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	1d1a      	adds	r2, r3, #4
 800d1b0:	603a      	str	r2, [r7, #0]
 800d1b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1b6:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 800d1ba:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d1be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	1d1a      	adds	r2, r3, #4
 800d1c6:	603a      	str	r2, [r7, #0]
 800d1c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1cc:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 800d1d0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800d1d4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	1d1a      	adds	r2, r3, #4
 800d1dc:	603a      	str	r2, [r7, #0]
 800d1de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1e2:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 800d1e6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800d1ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	1d1a      	adds	r2, r3, #4
 800d1f2:	603a      	str	r2, [r7, #0]
 800d1f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1f8:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 800d1fc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d200:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d204:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d208:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 800d20c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d210:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d214:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d218:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 800d21c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800d220:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d224:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d228:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 800d22c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800d230:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d234:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d238:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 800d23c:	ed97 7a06 	vldr	s14, [r7, #24]
 800d240:	edd7 7a02 	vldr	s15, [r7, #8]
 800d244:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d246:	1d1a      	adds	r2, r3, #4
 800d248:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d24a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d24e:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 800d252:	ed97 7a07 	vldr	s14, [r7, #28]
 800d256:	edd7 7a03 	vldr	s15, [r7, #12]
 800d25a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d25c:	1d1a      	adds	r2, r3, #4
 800d25e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d260:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d264:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 800d268:	ed97 7a08 	vldr	s14, [r7, #32]
 800d26c:	edd7 7a04 	vldr	s15, [r7, #16]
 800d270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d272:	1d1a      	adds	r2, r3, #4
 800d274:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d27a:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 800d27e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d282:	edd7 7a05 	vldr	s15, [r7, #20]
 800d286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d288:	1d1a      	adds	r2, r3, #4
 800d28a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d28c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d290:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 800d294:	ed97 7a02 	vldr	s14, [r7, #8]
 800d298:	edd7 7a06 	vldr	s15, [r7, #24]
 800d29c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2a0:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 800d2a4:	ed97 7a03 	vldr	s14, [r7, #12]
 800d2a8:	edd7 7a07 	vldr	s15, [r7, #28]
 800d2ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2b0:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 800d2b4:	ed97 7a04 	vldr	s14, [r7, #16]
 800d2b8:	edd7 7a08 	vldr	s15, [r7, #32]
 800d2bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2c0:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800d2c4:	ed97 7a05 	vldr	s14, [r7, #20]
 800d2c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d2cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2d0:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800d2d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2d6:	1d1a      	adds	r2, r3, #4
 800d2d8:	673a      	str	r2, [r7, #112]	; 0x70
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800d2de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2e0:	1d1a      	adds	r2, r3, #4
 800d2e2:	673a      	str	r2, [r7, #112]	; 0x70
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800d2e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d2f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 800d2f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d2fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d304:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 800d308:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d30c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d310:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d314:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 800d318:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d31c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d320:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d324:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800d328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d32a:	1d1a      	adds	r2, r3, #4
 800d32c:	677a      	str	r2, [r7, #116]	; 0x74
 800d32e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d332:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800d336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d33a:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 800d33e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d340:	1d1a      	adds	r2, r3, #4
 800d342:	677a      	str	r2, [r7, #116]	; 0x74
 800d344:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d348:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d34c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d350:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 800d354:	edd7 7a02 	vldr	s15, [r7, #8]
 800d358:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d35c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d360:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 800d364:	edd7 7a03 	vldr	s15, [r7, #12]
 800d368:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d36c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d370:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 800d374:	edd7 7a03 	vldr	s15, [r7, #12]
 800d378:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d380:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 800d384:	edd7 7a02 	vldr	s15, [r7, #8]
 800d388:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d390:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 800d394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d396:	1d1a      	adds	r2, r3, #4
 800d398:	67ba      	str	r2, [r7, #120]	; 0x78
 800d39a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d39e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800d3a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3a6:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 800d3aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3ac:	1d1a      	adds	r2, r3, #4
 800d3ae:	67ba      	str	r2, [r7, #120]	; 0x78
 800d3b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d3b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d3b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3bc:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 800d3c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3c2:	1d1a      	adds	r2, r3, #4
 800d3c4:	673a      	str	r2, [r7, #112]	; 0x70
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800d3ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3cc:	1d1a      	adds	r2, r3, #4
 800d3ce:	673a      	str	r2, [r7, #112]	; 0x70
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 800d3d4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d3d8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d3dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3e0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800d3e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d3e8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d3ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3f0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800d3f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d3f8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d3fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d400:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800d404:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d408:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d410:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 800d414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d416:	1d1a      	adds	r2, r3, #4
 800d418:	677a      	str	r2, [r7, #116]	; 0x74
 800d41a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d41e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800d422:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d426:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800d42a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d42c:	1d1a      	adds	r2, r3, #4
 800d42e:	677a      	str	r2, [r7, #116]	; 0x74
 800d430:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d434:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d43c:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 800d440:	edd7 7a04 	vldr	s15, [r7, #16]
 800d444:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d44c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 800d450:	edd7 7a05 	vldr	s15, [r7, #20]
 800d454:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d45c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 800d460:	edd7 7a05 	vldr	s15, [r7, #20]
 800d464:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d46c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 800d470:	edd7 7a04 	vldr	s15, [r7, #16]
 800d474:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d47c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 800d480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d482:	1d1a      	adds	r2, r3, #4
 800d484:	67ba      	str	r2, [r7, #120]	; 0x78
 800d486:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d48a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800d48e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d492:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 800d496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d498:	1d1a      	adds	r2, r3, #4
 800d49a:	67ba      	str	r2, [r7, #120]	; 0x78
 800d49c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d4a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d4a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4a8:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 800d4ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ae:	3b01      	subs	r3, #1
 800d4b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f47f ae45 	bne.w	800d144 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 800d4ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4bc:	b299      	uxth	r1, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d4c6:	f000 fedb 	bl	800e280 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 800d4ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4cc:	b299      	uxth	r1, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	685a      	ldr	r2, [r3, #4]
 800d4d2:	2302      	movs	r3, #2
 800d4d4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800d4d6:	f000 fed3 	bl	800e280 <arm_radix8_butterfly_f32>
}
 800d4da:	bf00      	nop
 800d4dc:	3780      	adds	r7, #128	; 0x80
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b0ac      	sub	sp, #176	; 0xb0
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	881b      	ldrh	r3, [r3, #0]
 800d4f0:	085b      	lsrs	r3, r3, #1
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800d4f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	4413      	add	r3, r2
 800d502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800d506:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d510:	4413      	add	r3, r2
 800d512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800d516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d520:	4413      	add	r3, r2
 800d522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800d52a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d52e:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800d530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d534:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800d536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d53a:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 800d53c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d540:	3b04      	subs	r3, #4
 800d542:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800d546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d54a:	3b04      	subs	r3, #4
 800d54c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800d550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d554:	3b04      	subs	r3, #4
 800d556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800d55a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d564:	4413      	add	r3, r2
 800d566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d572:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d576:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d57a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d57e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800d582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d586:	085b      	lsrs	r3, r3, #1
 800d588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 800d58c:	2302      	movs	r3, #2
 800d58e:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800d590:	2304      	movs	r3, #4
 800d592:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800d594:	2306      	movs	r3, #6
 800d596:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	ed93 7a00 	vldr	s14, [r3]
 800d59e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5a2:	edd3 7a00 	vldr	s15, [r3]
 800d5a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5aa:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	ed93 7a00 	vldr	s14, [r3]
 800d5b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5b8:	edd3 7a00 	vldr	s15, [r3]
 800d5bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5c0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	3304      	adds	r3, #4
 800d5c8:	ed93 7a00 	vldr	s14, [r3]
 800d5cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	edd3 7a00 	vldr	s15, [r3]
 800d5d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5da:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	ed93 7a00 	vldr	s14, [r3]
 800d5e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5ea:	3304      	adds	r3, #4
 800d5ec:	edd3 7a00 	vldr	s15, [r3]
 800d5f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800d5f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5fc:	3304      	adds	r3, #4
 800d5fe:	ed93 7a00 	vldr	s14, [r3]
 800d602:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d60a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d60e:	3304      	adds	r3, #4
 800d610:	edd3 7a00 	vldr	s15, [r3]
 800d614:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d618:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800d61c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d620:	edd3 7a00 	vldr	s15, [r3]
 800d624:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d628:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d62c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d630:	edd3 7a00 	vldr	s15, [r3]
 800d634:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d638:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800d63c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d640:	edd3 7a00 	vldr	s15, [r3]
 800d644:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800d648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d64c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d650:	edd3 7a00 	vldr	s15, [r3]
 800d654:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d658:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800d65c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d660:	3304      	adds	r3, #4
 800d662:	edd3 7a00 	vldr	s15, [r3]
 800d666:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d66a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d66e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d672:	3304      	adds	r3, #4
 800d674:	edd3 7a00 	vldr	s15, [r3]
 800d678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d67c:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800d680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d684:	3304      	adds	r3, #4
 800d686:	edd3 7a00 	vldr	s15, [r3]
 800d68a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d68e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d696:	3304      	adds	r3, #4
 800d698:	edd3 7a00 	vldr	s15, [r3]
 800d69c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6a0:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800d6a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6a8:	ed93 7a00 	vldr	s14, [r3]
 800d6ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d6b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6b8:	edd3 7a00 	vldr	s15, [r3]
 800d6bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6c0:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800d6c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6c8:	ed93 7a00 	vldr	s14, [r3]
 800d6cc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d6d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6d8:	edd3 7a00 	vldr	s15, [r3]
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	1d1a      	adds	r2, r3, #4
 800d6e0:	603a      	str	r2, [r7, #0]
 800d6e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d6e6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800d6ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6ee:	3304      	adds	r3, #4
 800d6f0:	ed93 7a00 	vldr	s14, [r3]
 800d6f4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800d6f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d700:	3304      	adds	r3, #4
 800d702:	edd3 7a00 	vldr	s15, [r3]
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	1d1a      	adds	r2, r3, #4
 800d70a:	603a      	str	r2, [r7, #0]
 800d70c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d710:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 800d714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d718:	1d1a      	adds	r2, r3, #4
 800d71a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d71e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d720:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800d722:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d726:	1d1a      	adds	r2, r3, #4
 800d728:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d72e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800d730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d734:	1d1a      	adds	r2, r3, #4
 800d736:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d73a:	69fa      	ldr	r2, [r7, #28]
 800d73c:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800d73e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d742:	1d1a      	adds	r2, r3, #4
 800d744:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d748:	6a3a      	ldr	r2, [r7, #32]
 800d74a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800d74c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d750:	1d1a      	adds	r2, r3, #4
 800d752:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800d756:	68fa      	ldr	r2, [r7, #12]
 800d758:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800d75a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d75e:	1d1a      	adds	r2, r3, #4
 800d760:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800d764:	693a      	ldr	r2, [r7, #16]
 800d766:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800d768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d770:	4413      	add	r3, r2
 800d772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800d776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d77e:	4413      	add	r3, r2
 800d780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800d784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d78c:	4413      	add	r3, r2
 800d78e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 800d792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d796:	3b02      	subs	r3, #2
 800d798:	085b      	lsrs	r3, r3, #1
 800d79a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d79e:	e31a      	b.n	800ddd6 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	ed93 7a00 	vldr	s14, [r3]
 800d7a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7aa:	edd3 7a00 	vldr	s15, [r3]
 800d7ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7b2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	ed93 7a00 	vldr	s14, [r3]
 800d7bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7c0:	edd3 7a00 	vldr	s15, [r3]
 800d7c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7c8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	ed93 7a00 	vldr	s14, [r3]
 800d7d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7d8:	3304      	adds	r3, #4
 800d7da:	edd3 7a00 	vldr	s15, [r3]
 800d7de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	ed93 7a00 	vldr	s14, [r3]
 800d7ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	edd3 7a00 	vldr	s15, [r3]
 800d7f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7fc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 800d800:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d804:	3304      	adds	r3, #4
 800d806:	ed93 7a00 	vldr	s14, [r3]
 800d80a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d80e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d812:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d816:	3304      	adds	r3, #4
 800d818:	edd3 7a00 	vldr	s15, [r3]
 800d81c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d820:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800d824:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d828:	edd3 7a00 	vldr	s15, [r3]
 800d82c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d830:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d834:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d838:	edd3 7a00 	vldr	s15, [r3]
 800d83c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d840:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 800d844:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d848:	edd3 7a00 	vldr	s15, [r3]
 800d84c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800d850:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d858:	edd3 7a00 	vldr	s15, [r3]
 800d85c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d860:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 800d864:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d868:	3304      	adds	r3, #4
 800d86a:	edd3 7a00 	vldr	s15, [r3]
 800d86e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d872:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d87a:	3304      	adds	r3, #4
 800d87c:	edd3 7a00 	vldr	s15, [r3]
 800d880:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d884:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 800d888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d88c:	3304      	adds	r3, #4
 800d88e:	edd3 7a00 	vldr	s15, [r3]
 800d892:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d896:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d89a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d89e:	3304      	adds	r3, #4
 800d8a0:	edd3 7a00 	vldr	s15, [r3]
 800d8a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8a8:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 800d8ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8b0:	ed93 7a00 	vldr	s14, [r3]
 800d8b4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d8b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8c0:	edd3 7a00 	vldr	s15, [r3]
 800d8c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8c8:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 800d8cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8d0:	ed93 7a00 	vldr	s14, [r3]
 800d8d4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d8d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8e0:	edd3 7a00 	vldr	s15, [r3]
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	1d1a      	adds	r2, r3, #4
 800d8e8:	603a      	str	r2, [r7, #0]
 800d8ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8ee:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 800d8f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8f6:	3304      	adds	r3, #4
 800d8f8:	ed93 7a00 	vldr	s14, [r3]
 800d8fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800d900:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d904:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d908:	3304      	adds	r3, #4
 800d90a:	edd3 7a00 	vldr	s15, [r3]
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	1d1a      	adds	r2, r3, #4
 800d912:	603a      	str	r2, [r7, #0]
 800d914:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d918:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800d91c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d920:	3b04      	subs	r3, #4
 800d922:	ed93 7a00 	vldr	s14, [r3]
 800d926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d92a:	3b04      	subs	r3, #4
 800d92c:	edd3 7a00 	vldr	s15, [r3]
 800d930:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d934:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800d938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d93c:	3b04      	subs	r3, #4
 800d93e:	ed93 7a00 	vldr	s14, [r3]
 800d942:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d946:	3b04      	subs	r3, #4
 800d948:	edd3 7a00 	vldr	s15, [r3]
 800d94c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d950:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 800d954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d958:	ed93 7a00 	vldr	s14, [r3]
 800d95c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d960:	edd3 7a00 	vldr	s15, [r3]
 800d964:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d968:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 800d96c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d970:	ed93 7a00 	vldr	s14, [r3]
 800d974:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d978:	edd3 7a00 	vldr	s15, [r3]
 800d97c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d980:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 800d984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d988:	ed93 7a00 	vldr	s14, [r3]
 800d98c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d990:	edd3 7a00 	vldr	s15, [r3]
 800d994:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d998:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d99c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9a0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800d9a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d9a8:	ed93 7a00 	vldr	s14, [r3]
 800d9ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d9b0:	edd3 7a00 	vldr	s15, [r3]
 800d9b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d9bc:	3b04      	subs	r3, #4
 800d9be:	edd3 7a00 	vldr	s15, [r3]
 800d9c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9ca:	3b04      	subs	r3, #4
 800d9cc:	edd3 7a00 	vldr	s15, [r3]
 800d9d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9d4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800d9d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d9dc:	3b04      	subs	r3, #4
 800d9de:	edd3 7a00 	vldr	s15, [r3]
 800d9e2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d9e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9ee:	3b04      	subs	r3, #4
 800d9f0:	edd3 7a00 	vldr	s15, [r3]
 800d9f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 800d9fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da00:	edd3 7a00 	vldr	s15, [r3]
 800da04:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800da08:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da10:	edd3 7a00 	vldr	s15, [r3]
 800da14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da18:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 800da1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da20:	ed93 7a00 	vldr	s14, [r3]
 800da24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da28:	edd3 7a00 	vldr	s15, [r3]
 800da2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da30:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800da34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da38:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800da3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da40:	3b04      	subs	r3, #4
 800da42:	ed93 7a00 	vldr	s14, [r3]
 800da46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da4a:	3b04      	subs	r3, #4
 800da4c:	edd3 7a00 	vldr	s15, [r3]
 800da50:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da54:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800da58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da5c:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 800da60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da64:	ed93 7a00 	vldr	s14, [r3]
 800da68:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800da6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da74:	edd3 7a00 	vldr	s15, [r3]
 800da78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da7c:	1f1a      	subs	r2, r3, #4
 800da7e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800da82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da86:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800da8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800da8e:	3b04      	subs	r3, #4
 800da90:	ed93 7a00 	vldr	s14, [r3]
 800da94:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800da98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800daa0:	3b04      	subs	r3, #4
 800daa2:	edd3 7a00 	vldr	s15, [r3]
 800daa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800daaa:	1f1a      	subs	r2, r3, #4
 800daac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800dab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dab4:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 800dab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dabc:	1d1a      	adds	r2, r3, #4
 800dabe:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 800dac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800daca:	1d1a      	adds	r2, r3, #4
 800dacc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 800dad4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dad8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dadc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dae0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 800dae4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dae8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800daec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800daf0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 800daf4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800daf8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dafc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db00:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 800db04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800db08:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800db0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db10:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 800db14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db18:	1d1a      	adds	r2, r3, #4
 800db1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800db1e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800db22:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800db26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db2a:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800db2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db32:	1d1a      	adds	r2, r3, #4
 800db34:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800db38:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800db3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800db40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db44:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 800db48:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800db4c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800db50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db54:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 800db58:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800db5c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800db60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db64:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 800db68:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800db6c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800db70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db74:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 800db78:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800db7c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800db80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db84:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 800db88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800db8c:	1f1a      	subs	r2, r3, #4
 800db8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800db92:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800db96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800db9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db9e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 800dba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dba6:	1f1a      	subs	r2, r3, #4
 800dba8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dbac:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800dbb0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dbb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbb8:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 800dbbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 800dbc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 800dbcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dbd4:	4413      	add	r3, r2
 800dbd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 800dbda:	edd7 7a07 	vldr	s15, [r7, #28]
 800dbde:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dbe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbe6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 800dbea:	edd7 7a08 	vldr	s15, [r7, #32]
 800dbee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbf6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 800dbfa:	edd7 7a08 	vldr	s15, [r7, #32]
 800dbfe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dc02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc06:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 800dc0a:	edd7 7a07 	vldr	s15, [r7, #28]
 800dc0e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dc12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc16:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 800dc1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc1e:	1d1a      	adds	r2, r3, #4
 800dc20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dc24:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800dc28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800dc2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc30:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 800dc34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc38:	1d1a      	adds	r2, r3, #4
 800dc3a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dc3e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800dc42:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dc46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc4a:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 800dc4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc52:	eef1 7a67 	vneg.f32	s15, s15
 800dc56:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dc5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc5e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 800dc62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800dc66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dc6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc6e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 800dc72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800dc76:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dc7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc7e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 800dc82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc86:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dc8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc8e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 800dc92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dc96:	1f1a      	subs	r2, r3, #4
 800dc98:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dc9c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800dca0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800dca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dca8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 800dcac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dcb0:	1f1a      	subs	r2, r3, #4
 800dcb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dcb6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800dcba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800dcbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dcc2:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 800dcc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 800dcce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 800dcd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dcde:	4413      	add	r3, r2
 800dce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 800dce4:	edd7 7a03 	vldr	s15, [r7, #12]
 800dce8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dcec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcf0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 800dcf4:	edd7 7a04 	vldr	s15, [r7, #16]
 800dcf8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dcfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd00:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 800dd04:	edd7 7a04 	vldr	s15, [r7, #16]
 800dd08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dd0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd10:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 800dd14:	edd7 7a03 	vldr	s15, [r7, #12]
 800dd18:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dd1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd20:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 800dd24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd28:	1d1a      	adds	r2, r3, #4
 800dd2a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800dd2e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800dd32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800dd36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd3a:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 800dd3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd42:	1d1a      	adds	r2, r3, #4
 800dd44:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800dd48:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800dd4c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dd50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd54:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 800dd58:	edd7 7a06 	vldr	s15, [r7, #24]
 800dd5c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dd60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd64:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 800dd68:	edd7 7a05 	vldr	s15, [r7, #20]
 800dd6c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dd70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd74:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 800dd78:	edd7 7a05 	vldr	s15, [r7, #20]
 800dd7c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dd80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd84:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 800dd88:	edd7 7a06 	vldr	s15, [r7, #24]
 800dd8c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dd90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd94:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 800dd98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd9c:	1f1a      	subs	r2, r3, #4
 800dd9e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800dda2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800dda6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ddaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddae:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 800ddb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ddb6:	1f1a      	subs	r2, r3, #4
 800ddb8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800ddbc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ddc0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ddc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddc8:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 800ddcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ddd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f47f ace0 	bne.w	800d7a0 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	ed93 7a00 	vldr	s14, [r3]
 800dde6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddea:	edd3 7a00 	vldr	s15, [r3]
 800ddee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddf2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	ed93 7a00 	vldr	s14, [r3]
 800ddfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de00:	edd3 7a00 	vldr	s15, [r3]
 800de04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de08:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	3304      	adds	r3, #4
 800de10:	ed93 7a00 	vldr	s14, [r3]
 800de14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de18:	3304      	adds	r3, #4
 800de1a:	edd3 7a00 	vldr	s15, [r3]
 800de1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de22:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	3304      	adds	r3, #4
 800de2a:	ed93 7a00 	vldr	s14, [r3]
 800de2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de32:	3304      	adds	r3, #4
 800de34:	edd3 7a00 	vldr	s15, [r3]
 800de38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de3c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800de40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de44:	3304      	adds	r3, #4
 800de46:	ed93 7a00 	vldr	s14, [r3]
 800de4a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800de4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800de52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de56:	3304      	adds	r3, #4
 800de58:	edd3 7a00 	vldr	s15, [r3]
 800de5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800de64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de68:	edd3 7a00 	vldr	s15, [r3]
 800de6c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800de70:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de78:	edd3 7a00 	vldr	s15, [r3]
 800de7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de80:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800de84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de88:	edd3 7a00 	vldr	s15, [r3]
 800de8c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800de90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de98:	edd3 7a00 	vldr	s15, [r3]
 800de9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dea0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800dea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dea8:	3304      	adds	r3, #4
 800deaa:	edd3 7a00 	vldr	s15, [r3]
 800deae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800deb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800deb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800deba:	3304      	adds	r3, #4
 800debc:	edd3 7a00 	vldr	s15, [r3]
 800dec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dec4:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800dec8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800decc:	3304      	adds	r3, #4
 800dece:	edd3 7a00 	vldr	s15, [r3]
 800ded2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ded6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800deda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dede:	3304      	adds	r3, #4
 800dee0:	edd3 7a00 	vldr	s15, [r3]
 800dee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dee8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800deec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800def0:	ed93 7a00 	vldr	s14, [r3]
 800def4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800def8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800defc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df00:	edd3 7a00 	vldr	s15, [r3]
 800df04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df08:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800df0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df10:	ed93 7a00 	vldr	s14, [r3]
 800df14:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800df18:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df20:	edd3 7a00 	vldr	s15, [r3]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	1d1a      	adds	r2, r3, #4
 800df28:	603a      	str	r2, [r7, #0]
 800df2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df2e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800df32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df36:	3304      	adds	r3, #4
 800df38:	ed93 7a00 	vldr	s14, [r3]
 800df3c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800df40:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df48:	3304      	adds	r3, #4
 800df4a:	edd3 7a00 	vldr	s15, [r3]
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	1d1a      	adds	r2, r3, #4
 800df52:	603a      	str	r2, [r7, #0]
 800df54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df58:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 800df5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800df64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800df6c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800df70:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800df74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df78:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800df7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800df80:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800df84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df88:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800df8c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800df90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800df94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800df9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dfa0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dfa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800dfac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfb0:	1d1a      	adds	r2, r3, #4
 800dfb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800dfb6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800dfba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800dfbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfc2:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800dfc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfca:	1d1a      	adds	r2, r3, #4
 800dfcc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800dfd0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800dfd4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dfd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfdc:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 800dfe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800dfe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800dff0:	edd7 7a07 	vldr	s15, [r7, #28]
 800dff4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800dff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dffc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800e000:	edd7 7a08 	vldr	s15, [r7, #32]
 800e004:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800e008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e00c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800e010:	edd7 7a08 	vldr	s15, [r7, #32]
 800e014:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800e018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e01c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800e020:	edd7 7a07 	vldr	s15, [r7, #28]
 800e024:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800e028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e02c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 800e030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e034:	1d1a      	adds	r2, r3, #4
 800e036:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e03a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800e03e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e042:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e046:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800e04a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e04e:	1d1a      	adds	r2, r3, #4
 800e050:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e054:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800e058:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e05c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e060:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800e064:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800e06c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800e074:	edd7 7a03 	vldr	s15, [r7, #12]
 800e078:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800e07c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e080:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800e084:	edd7 7a04 	vldr	s15, [r7, #16]
 800e088:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800e08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e090:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800e094:	edd7 7a04 	vldr	s15, [r7, #16]
 800e098:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800e09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0a0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800e0a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0a8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800e0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0b0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800e0b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e0b8:	1d1a      	adds	r2, r3, #4
 800e0ba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800e0be:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800e0c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e0c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0ca:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800e0ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e0d2:	1d1a      	adds	r2, r3, #4
 800e0d4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800e0d8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800e0dc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e0e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e0e4:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 800e0e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e0ec:	b299      	uxth	r1, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	685a      	ldr	r2, [r3, #4]
 800e0f2:	2304      	movs	r3, #4
 800e0f4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e0f6:	f000 f8c3 	bl	800e280 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 800e0fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e0fe:	b299      	uxth	r1, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685a      	ldr	r2, [r3, #4]
 800e104:	2304      	movs	r3, #4
 800e106:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e108:	f000 f8ba 	bl	800e280 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 800e10c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e110:	b299      	uxth	r1, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	685a      	ldr	r2, [r3, #4]
 800e116:	2304      	movs	r3, #4
 800e118:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800e11a:	f000 f8b1 	bl	800e280 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 800e11e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e122:	b299      	uxth	r1, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	685a      	ldr	r2, [r3, #4]
 800e128:	2304      	movs	r3, #4
 800e12a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800e12c:	f000 f8a8 	bl	800e280 <arm_radix8_butterfly_f32>
}
 800e130:	bf00      	nop
 800e132:	37b0      	adds	r7, #176	; 0xb0
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	4611      	mov	r1, r2
 800e144:	461a      	mov	r2, r3
 800e146:	460b      	mov	r3, r1
 800e148:	71fb      	strb	r3, [r7, #7]
 800e14a:	4613      	mov	r3, r2
 800e14c:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800e154:	79fb      	ldrb	r3, [r7, #7]
 800e156:	2b01      	cmp	r3, #1
 800e158:	d117      	bne.n	800e18a <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	3304      	adds	r3, #4
 800e15e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800e160:	2300      	movs	r3, #0
 800e162:	61fb      	str	r3, [r7, #28]
 800e164:	e00d      	b.n	800e182 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	edd3 7a00 	vldr	s15, [r3]
 800e16c:	eef1 7a67 	vneg.f32	s15, s15
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	3308      	adds	r3, #8
 800e17a:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	3301      	adds	r3, #1
 800e180:	61fb      	str	r3, [r7, #28]
 800e182:	69fa      	ldr	r2, [r7, #28]
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	429a      	cmp	r2, r3
 800e188:	d3ed      	bcc.n	800e166 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e190:	d024      	beq.n	800e1dc <arm_cfft_f32+0xa4>
 800e192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e196:	d80b      	bhi.n	800e1b0 <arm_cfft_f32+0x78>
 800e198:	2b20      	cmp	r3, #32
 800e19a:	d01f      	beq.n	800e1dc <arm_cfft_f32+0xa4>
 800e19c:	2b20      	cmp	r3, #32
 800e19e:	d802      	bhi.n	800e1a6 <arm_cfft_f32+0x6e>
 800e1a0:	2b10      	cmp	r3, #16
 800e1a2:	d016      	beq.n	800e1d2 <arm_cfft_f32+0x9a>
 800e1a4:	e028      	b.n	800e1f8 <arm_cfft_f32+0xc0>
 800e1a6:	2b40      	cmp	r3, #64	; 0x40
 800e1a8:	d01d      	beq.n	800e1e6 <arm_cfft_f32+0xae>
 800e1aa:	2b80      	cmp	r3, #128	; 0x80
 800e1ac:	d011      	beq.n	800e1d2 <arm_cfft_f32+0x9a>
 800e1ae:	e023      	b.n	800e1f8 <arm_cfft_f32+0xc0>
 800e1b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1b4:	d00d      	beq.n	800e1d2 <arm_cfft_f32+0x9a>
 800e1b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1ba:	d803      	bhi.n	800e1c4 <arm_cfft_f32+0x8c>
 800e1bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1c0:	d011      	beq.n	800e1e6 <arm_cfft_f32+0xae>
 800e1c2:	e019      	b.n	800e1f8 <arm_cfft_f32+0xc0>
 800e1c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1c8:	d008      	beq.n	800e1dc <arm_cfft_f32+0xa4>
 800e1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1ce:	d00a      	beq.n	800e1e6 <arm_cfft_f32+0xae>
 800e1d0:	e012      	b.n	800e1f8 <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800e1d2:	68b9      	ldr	r1, [r7, #8]
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f7fe ff90 	bl	800d0fa <arm_cfft_radix8by2_f32>
        break;
 800e1da:	e00d      	b.n	800e1f8 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800e1dc:	68b9      	ldr	r1, [r7, #8]
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f7ff f97f 	bl	800d4e2 <arm_cfft_radix8by4_f32>
        break;
 800e1e4:	e008      	b.n	800e1f8 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	b299      	uxth	r1, r3
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	685a      	ldr	r2, [r3, #4]
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	68b8      	ldr	r0, [r7, #8]
 800e1f2:	f000 f845 	bl	800e280 <arm_radix8_butterfly_f32>
        break;
 800e1f6:	bf00      	nop
    }  

    if( bitReverseFlag )
 800e1f8:	79bb      	ldrb	r3, [r7, #6]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d007      	beq.n	800e20e <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	8999      	ldrh	r1, [r3, #12]
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	461a      	mov	r2, r3
 800e208:	68b8      	ldr	r0, [r7, #8]
 800e20a:	f7f1 ffe1 	bl	80001d0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800e20e:	79fb      	ldrb	r3, [r7, #7]
 800e210:	2b01      	cmp	r3, #1
 800e212:	d130      	bne.n	800e276 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	ee07 3a90 	vmov	s15, r3
 800e21a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e21e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e226:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800e22e:	2300      	movs	r3, #0
 800e230:	61fb      	str	r3, [r7, #28]
 800e232:	e01c      	b.n	800e26e <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	1d1a      	adds	r2, r3, #4
 800e238:	61ba      	str	r2, [r7, #24]
 800e23a:	ed93 7a00 	vldr	s14, [r3]
 800e23e:	edd7 7a04 	vldr	s15, [r7, #16]
 800e242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e246:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	edd3 7a00 	vldr	s15, [r3]
 800e250:	eeb1 7a67 	vneg.f32	s14, s15
 800e254:	edd7 7a04 	vldr	s15, [r7, #16]
 800e258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	3304      	adds	r3, #4
 800e266:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	3301      	adds	r3, #1
 800e26c:	61fb      	str	r3, [r7, #28]
 800e26e:	69fa      	ldr	r2, [r7, #28]
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	429a      	cmp	r2, r3
 800e274:	d3de      	bcc.n	800e234 <arm_cfft_f32+0xfc>
        }
    }
}
 800e276:	bf00      	nop
 800e278:	3720      	adds	r7, #32
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
	...

0800e280 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 800e280:	b480      	push	{r7}
 800e282:	b0bd      	sub	sp, #244	; 0xf4
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	607a      	str	r2, [r7, #4]
 800e28a:	461a      	mov	r2, r3
 800e28c:	460b      	mov	r3, r1
 800e28e:	817b      	strh	r3, [r7, #10]
 800e290:	4613      	mov	r3, r2
 800e292:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800e294:	4b09      	ldr	r3, [pc, #36]	; (800e2bc <arm_radix8_butterfly_f32+0x3c>)
 800e296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800e29a:	897b      	ldrh	r3, [r7, #10]
 800e29c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 800e2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800e2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ac:	08db      	lsrs	r3, r3, #3
 800e2ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e2b8:	e002      	b.n	800e2c0 <arm_radix8_butterfly_f32+0x40>
 800e2ba:	bf00      	nop
 800e2bc:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 800e2c0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800e2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2c8:	4413      	add	r3, r2
 800e2ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800e2ce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2d6:	4413      	add	r3, r2
 800e2d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800e2dc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2e4:	4413      	add	r3, r2
 800e2e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800e2ea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800e2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2f2:	4413      	add	r3, r2
 800e2f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800e2f8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e300:	4413      	add	r3, r2
 800e302:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800e306:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e30e:	4413      	add	r3, r2
 800e310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800e314:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e31c:	4413      	add	r3, r2
 800e31e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800e322:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e326:	00db      	lsls	r3, r3, #3
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	4413      	add	r3, r2
 800e32c:	ed93 7a00 	vldr	s14, [r3]
 800e330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e334:	00db      	lsls	r3, r3, #3
 800e336:	68fa      	ldr	r2, [r7, #12]
 800e338:	4413      	add	r3, r2
 800e33a:	edd3 7a00 	vldr	s15, [r3]
 800e33e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e342:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800e346:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e34a:	00db      	lsls	r3, r3, #3
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	4413      	add	r3, r2
 800e350:	ed93 7a00 	vldr	s14, [r3]
 800e354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e358:	00db      	lsls	r3, r3, #3
 800e35a:	68fa      	ldr	r2, [r7, #12]
 800e35c:	4413      	add	r3, r2
 800e35e:	edd3 7a00 	vldr	s15, [r3]
 800e362:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e366:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800e36a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e36e:	00db      	lsls	r3, r3, #3
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	4413      	add	r3, r2
 800e374:	ed93 7a00 	vldr	s14, [r3]
 800e378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	4413      	add	r3, r2
 800e382:	edd3 7a00 	vldr	s15, [r3]
 800e386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e38a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800e38e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e392:	00db      	lsls	r3, r3, #3
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	4413      	add	r3, r2
 800e398:	ed93 7a00 	vldr	s14, [r3]
 800e39c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	edd3 7a00 	vldr	s15, [r3]
 800e3aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3ae:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800e3b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	ed93 7a00 	vldr	s14, [r3]
 800e3c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e3c4:	00db      	lsls	r3, r3, #3
 800e3c6:	68fa      	ldr	r2, [r7, #12]
 800e3c8:	4413      	add	r3, r2
 800e3ca:	edd3 7a00 	vldr	s15, [r3]
 800e3ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3d2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800e3d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e3da:	00db      	lsls	r3, r3, #3
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	4413      	add	r3, r2
 800e3e0:	ed93 7a00 	vldr	s14, [r3]
 800e3e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e3e8:	00db      	lsls	r3, r3, #3
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	edd3 7a00 	vldr	s15, [r3]
 800e3f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3f6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800e3fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e3fe:	00db      	lsls	r3, r3, #3
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	4413      	add	r3, r2
 800e404:	ed93 7a00 	vldr	s14, [r3]
 800e408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e40c:	00db      	lsls	r3, r3, #3
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	4413      	add	r3, r2
 800e412:	edd3 7a00 	vldr	s15, [r3]
 800e416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e41a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800e41e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e422:	00db      	lsls	r3, r3, #3
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	4413      	add	r3, r2
 800e428:	ed93 7a00 	vldr	s14, [r3]
 800e42c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e430:	00db      	lsls	r3, r3, #3
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	4413      	add	r3, r2
 800e436:	edd3 7a00 	vldr	s15, [r3]
 800e43a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e43e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800e442:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800e446:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800e44a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e44e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800e452:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800e456:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800e45a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e45e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800e462:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800e466:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800e46a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e46e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800e472:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800e476:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800e47a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e47e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800e482:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e486:	00db      	lsls	r3, r3, #3
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	4413      	add	r3, r2
 800e48c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800e490:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800e494:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e498:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800e49c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e4a0:	00db      	lsls	r3, r3, #3
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800e4aa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800e4ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4b2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800e4b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e4ba:	00db      	lsls	r3, r3, #3
 800e4bc:	3304      	adds	r3, #4
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	ed93 7a00 	vldr	s14, [r3]
 800e4c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e4ca:	00db      	lsls	r3, r3, #3
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	68fa      	ldr	r2, [r7, #12]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	edd3 7a00 	vldr	s15, [r3]
 800e4d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4da:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800e4de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e4e2:	00db      	lsls	r3, r3, #3
 800e4e4:	3304      	adds	r3, #4
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	ed93 7a00 	vldr	s14, [r3]
 800e4ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e4f2:	00db      	lsls	r3, r3, #3
 800e4f4:	3304      	adds	r3, #4
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	edd3 7a00 	vldr	s15, [r3]
 800e4fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e502:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800e506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e50a:	00db      	lsls	r3, r3, #3
 800e50c:	3304      	adds	r3, #4
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	4413      	add	r3, r2
 800e512:	ed93 7a00 	vldr	s14, [r3]
 800e516:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e51a:	00db      	lsls	r3, r3, #3
 800e51c:	3304      	adds	r3, #4
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	4413      	add	r3, r2
 800e522:	edd3 7a00 	vldr	s15, [r3]
 800e526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e52a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800e52e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e532:	00db      	lsls	r3, r3, #3
 800e534:	3304      	adds	r3, #4
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	4413      	add	r3, r2
 800e53a:	ed93 7a00 	vldr	s14, [r3]
 800e53e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	3304      	adds	r3, #4
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	4413      	add	r3, r2
 800e54a:	edd3 7a00 	vldr	s15, [r3]
 800e54e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e552:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800e556:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e55a:	00db      	lsls	r3, r3, #3
 800e55c:	3304      	adds	r3, #4
 800e55e:	68fa      	ldr	r2, [r7, #12]
 800e560:	4413      	add	r3, r2
 800e562:	ed93 7a00 	vldr	s14, [r3]
 800e566:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e56a:	00db      	lsls	r3, r3, #3
 800e56c:	3304      	adds	r3, #4
 800e56e:	68fa      	ldr	r2, [r7, #12]
 800e570:	4413      	add	r3, r2
 800e572:	edd3 7a00 	vldr	s15, [r3]
 800e576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e57a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800e57e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e582:	00db      	lsls	r3, r3, #3
 800e584:	3304      	adds	r3, #4
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	4413      	add	r3, r2
 800e58a:	ed93 7a00 	vldr	s14, [r3]
 800e58e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e592:	00db      	lsls	r3, r3, #3
 800e594:	3304      	adds	r3, #4
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	4413      	add	r3, r2
 800e59a:	edd3 7a00 	vldr	s15, [r3]
 800e59e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5a2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800e5a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e5aa:	00db      	lsls	r3, r3, #3
 800e5ac:	3304      	adds	r3, #4
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	ed93 7a00 	vldr	s14, [r3]
 800e5b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e5ba:	00db      	lsls	r3, r3, #3
 800e5bc:	3304      	adds	r3, #4
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	edd3 7a00 	vldr	s15, [r3]
 800e5c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5ca:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800e5ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e5d2:	00db      	lsls	r3, r3, #3
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	4413      	add	r3, r2
 800e5da:	ed93 7a00 	vldr	s14, [r3]
 800e5de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e5e2:	00db      	lsls	r3, r3, #3
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	68fa      	ldr	r2, [r7, #12]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	edd3 7a00 	vldr	s15, [r3]
 800e5ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5f2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800e5f6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800e5fa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800e5fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e602:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800e606:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800e60a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800e60e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e612:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800e616:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800e61a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800e61e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e622:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800e626:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800e62a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800e62e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e632:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800e636:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e63a:	00db      	lsls	r3, r3, #3
 800e63c:	3304      	adds	r3, #4
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	4413      	add	r3, r2
 800e642:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800e646:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800e64a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e64e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800e652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e656:	00db      	lsls	r3, r3, #3
 800e658:	3304      	adds	r3, #4
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	4413      	add	r3, r2
 800e65e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800e662:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800e666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e66a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800e66e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e672:	00db      	lsls	r3, r3, #3
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	4413      	add	r3, r2
 800e678:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800e67c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800e680:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e684:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800e688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e68c:	00db      	lsls	r3, r3, #3
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	4413      	add	r3, r2
 800e692:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800e696:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800e69a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e69e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800e6a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e6a6:	00db      	lsls	r3, r3, #3
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800e6b2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800e6b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6ba:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800e6be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e6c2:	00db      	lsls	r3, r3, #3
 800e6c4:	3304      	adds	r3, #4
 800e6c6:	68fa      	ldr	r2, [r7, #12]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800e6ce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800e6d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6d6:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800e6da:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800e6de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800e6e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6e6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800e6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6ee:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800e6f2:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800e6f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800e6fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6fe:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800e702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e706:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800e70a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800e70e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800e712:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e716:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800e71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e71e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800e722:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800e726:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800e72a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e72e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800e732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e736:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800e73a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800e73e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800e742:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e746:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800e74a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800e74e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800e752:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e756:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800e75a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800e75e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800e762:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e766:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800e76a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800e76e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800e772:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e776:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800e77a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800e77e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800e782:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e786:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800e78a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800e78e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800e792:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e796:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800e79a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800e79e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800e7a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7a6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800e7aa:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800e7ae:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800e7b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7b6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800e7ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e7be:	00db      	lsls	r3, r3, #3
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	4413      	add	r3, r2
 800e7c4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800e7c8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800e7cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e7d0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800e7d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e7d8:	00db      	lsls	r3, r3, #3
 800e7da:	68fa      	ldr	r2, [r7, #12]
 800e7dc:	4413      	add	r3, r2
 800e7de:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800e7e2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800e7e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7ea:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800e7ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e7f2:	00db      	lsls	r3, r3, #3
 800e7f4:	68fa      	ldr	r2, [r7, #12]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800e7fc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800e800:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e804:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800e808:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e80c:	00db      	lsls	r3, r3, #3
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	4413      	add	r3, r2
 800e812:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800e816:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800e81a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e81e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800e822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e826:	00db      	lsls	r3, r3, #3
 800e828:	3304      	adds	r3, #4
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	4413      	add	r3, r2
 800e82e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800e832:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e83a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800e83e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e842:	00db      	lsls	r3, r3, #3
 800e844:	3304      	adds	r3, #4
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	4413      	add	r3, r2
 800e84a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800e84e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e852:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e856:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800e85a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	3304      	adds	r3, #4
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	4413      	add	r3, r2
 800e866:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800e86a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800e86e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e872:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800e876:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e87a:	00db      	lsls	r3, r3, #3
 800e87c:	3304      	adds	r3, #4
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	4413      	add	r3, r2
 800e882:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800e886:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800e88a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e88e:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 800e892:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800e896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e89a:	4413      	add	r3, r2
 800e89c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 800e8a0:	897b      	ldrh	r3, [r7, #10]
 800e8a2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	f4ff ad0a 	bcc.w	800e2c0 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 800e8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8b0:	2b07      	cmp	r3, #7
 800e8b2:	f240 84e3 	bls.w	800f27c <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800e8c2:	893b      	ldrh	r3, [r7, #8]
 800e8c4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e8c8:	4413      	add	r3, r2
 800e8ca:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800e8cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800e8d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e8d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8d8:	4413      	add	r3, r2
 800e8da:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800e8dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e8de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8e0:	4413      	add	r3, r2
 800e8e2:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800e8e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e8e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8e8:	4413      	add	r3, r2
 800e8ea:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800e8ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e8ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8f0:	4413      	add	r3, r2
 800e8f2:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800e8f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e8f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8f8:	4413      	add	r3, r2
 800e8fa:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800e8fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e8fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e900:	4413      	add	r3, r2
 800e902:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 800e904:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e908:	00db      	lsls	r3, r3, #3
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	4413      	add	r3, r2
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800e912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e914:	00db      	lsls	r3, r3, #3
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	4413      	add	r3, r2
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800e91e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e920:	00db      	lsls	r3, r3, #3
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	4413      	add	r3, r2
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800e92a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e92c:	00db      	lsls	r3, r3, #3
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	4413      	add	r3, r2
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800e936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e938:	00db      	lsls	r3, r3, #3
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	4413      	add	r3, r2
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800e942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e944:	00db      	lsls	r3, r3, #3
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	4413      	add	r3, r2
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800e94e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	4413      	add	r3, r2
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800e95a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e95e:	00db      	lsls	r3, r3, #3
 800e960:	3304      	adds	r3, #4
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	4413      	add	r3, r2
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800e96a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e96c:	00db      	lsls	r3, r3, #3
 800e96e:	3304      	adds	r3, #4
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	4413      	add	r3, r2
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800e978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e97a:	00db      	lsls	r3, r3, #3
 800e97c:	3304      	adds	r3, #4
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	4413      	add	r3, r2
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800e986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e988:	00db      	lsls	r3, r3, #3
 800e98a:	3304      	adds	r3, #4
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	4413      	add	r3, r2
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800e994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e996:	00db      	lsls	r3, r3, #3
 800e998:	3304      	adds	r3, #4
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	4413      	add	r3, r2
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800e9a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9a4:	00db      	lsls	r3, r3, #3
 800e9a6:	3304      	adds	r3, #4
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 800e9b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9b2:	00db      	lsls	r3, r3, #3
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 800e9be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e9c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800e9c6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800e9ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9ce:	4413      	add	r3, r2
 800e9d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800e9d4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e9d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9dc:	4413      	add	r3, r2
 800e9de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800e9e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9ea:	4413      	add	r3, r2
 800e9ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800e9f0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800e9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9f8:	4413      	add	r3, r2
 800e9fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800e9fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ea02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea06:	4413      	add	r3, r2
 800ea08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800ea0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea14:	4413      	add	r3, r2
 800ea16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800ea1a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ea1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea22:	4413      	add	r3, r2
 800ea24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800ea28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ea2c:	00db      	lsls	r3, r3, #3
 800ea2e:	68fa      	ldr	r2, [r7, #12]
 800ea30:	4413      	add	r3, r2
 800ea32:	ed93 7a00 	vldr	s14, [r3]
 800ea36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea3a:	00db      	lsls	r3, r3, #3
 800ea3c:	68fa      	ldr	r2, [r7, #12]
 800ea3e:	4413      	add	r3, r2
 800ea40:	edd3 7a00 	vldr	s15, [r3]
 800ea44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea48:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800ea4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ea50:	00db      	lsls	r3, r3, #3
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	4413      	add	r3, r2
 800ea56:	ed93 7a00 	vldr	s14, [r3]
 800ea5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea5e:	00db      	lsls	r3, r3, #3
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	4413      	add	r3, r2
 800ea64:	edd3 7a00 	vldr	s15, [r3]
 800ea68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea6c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800ea70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea74:	00db      	lsls	r3, r3, #3
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	4413      	add	r3, r2
 800ea7a:	ed93 7a00 	vldr	s14, [r3]
 800ea7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ea82:	00db      	lsls	r3, r3, #3
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	4413      	add	r3, r2
 800ea88:	edd3 7a00 	vldr	s15, [r3]
 800ea8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea90:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800ea94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea98:	00db      	lsls	r3, r3, #3
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	ed93 7a00 	vldr	s14, [r3]
 800eaa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800eaa6:	00db      	lsls	r3, r3, #3
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	4413      	add	r3, r2
 800eaac:	edd3 7a00 	vldr	s15, [r3]
 800eab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eab4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800eab8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800eabc:	00db      	lsls	r3, r3, #3
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	4413      	add	r3, r2
 800eac2:	ed93 7a00 	vldr	s14, [r3]
 800eac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eaca:	00db      	lsls	r3, r3, #3
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	4413      	add	r3, r2
 800ead0:	edd3 7a00 	vldr	s15, [r3]
 800ead4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ead8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800eadc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800eae0:	00db      	lsls	r3, r3, #3
 800eae2:	68fa      	ldr	r2, [r7, #12]
 800eae4:	4413      	add	r3, r2
 800eae6:	ed93 7a00 	vldr	s14, [r3]
 800eaea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eaee:	00db      	lsls	r3, r3, #3
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	edd3 7a00 	vldr	s15, [r3]
 800eaf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eafc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800eb00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eb04:	00db      	lsls	r3, r3, #3
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	4413      	add	r3, r2
 800eb0a:	ed93 7a00 	vldr	s14, [r3]
 800eb0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800eb12:	00db      	lsls	r3, r3, #3
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	4413      	add	r3, r2
 800eb18:	edd3 7a00 	vldr	s15, [r3]
 800eb1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb20:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800eb24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eb28:	00db      	lsls	r3, r3, #3
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	ed93 7a00 	vldr	s14, [r3]
 800eb32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800eb36:	00db      	lsls	r3, r3, #3
 800eb38:	68fa      	ldr	r2, [r7, #12]
 800eb3a:	4413      	add	r3, r2
 800eb3c:	edd3 7a00 	vldr	s15, [r3]
 800eb40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb44:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800eb48:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800eb4c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800eb50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb54:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800eb58:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800eb5c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800eb60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb64:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800eb68:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800eb6c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800eb70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb74:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800eb78:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800eb7c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800eb80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb84:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800eb88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800eb8c:	00db      	lsls	r3, r3, #3
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	4413      	add	r3, r2
 800eb92:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800eb96:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800eb9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb9e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800eba2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800eba6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ebaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebae:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800ebb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ebb6:	00db      	lsls	r3, r3, #3
 800ebb8:	3304      	adds	r3, #4
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	ed93 7a00 	vldr	s14, [r3]
 800ebc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ebc6:	00db      	lsls	r3, r3, #3
 800ebc8:	3304      	adds	r3, #4
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	4413      	add	r3, r2
 800ebce:	edd3 7a00 	vldr	s15, [r3]
 800ebd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebd6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800ebda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ebde:	00db      	lsls	r3, r3, #3
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	ed93 7a00 	vldr	s14, [r3]
 800ebea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ebee:	00db      	lsls	r3, r3, #3
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	68fa      	ldr	r2, [r7, #12]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	edd3 7a00 	vldr	s15, [r3]
 800ebfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebfe:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800ec02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ec06:	00db      	lsls	r3, r3, #3
 800ec08:	3304      	adds	r3, #4
 800ec0a:	68fa      	ldr	r2, [r7, #12]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	ed93 7a00 	vldr	s14, [r3]
 800ec12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ec16:	00db      	lsls	r3, r3, #3
 800ec18:	3304      	adds	r3, #4
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	edd3 7a00 	vldr	s15, [r3]
 800ec22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800ec2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ec2e:	00db      	lsls	r3, r3, #3
 800ec30:	3304      	adds	r3, #4
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	4413      	add	r3, r2
 800ec36:	ed93 7a00 	vldr	s14, [r3]
 800ec3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ec3e:	00db      	lsls	r3, r3, #3
 800ec40:	3304      	adds	r3, #4
 800ec42:	68fa      	ldr	r2, [r7, #12]
 800ec44:	4413      	add	r3, r2
 800ec46:	edd3 7a00 	vldr	s15, [r3]
 800ec4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec4e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800ec52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	3304      	adds	r3, #4
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	ed93 7a00 	vldr	s14, [r3]
 800ec62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	3304      	adds	r3, #4
 800ec6a:	68fa      	ldr	r2, [r7, #12]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	edd3 7a00 	vldr	s15, [r3]
 800ec72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec76:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800ec7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ec7e:	00db      	lsls	r3, r3, #3
 800ec80:	3304      	adds	r3, #4
 800ec82:	68fa      	ldr	r2, [r7, #12]
 800ec84:	4413      	add	r3, r2
 800ec86:	ed93 7a00 	vldr	s14, [r3]
 800ec8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ec8e:	00db      	lsls	r3, r3, #3
 800ec90:	3304      	adds	r3, #4
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	4413      	add	r3, r2
 800ec96:	edd3 7a00 	vldr	s15, [r3]
 800ec9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec9e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800eca2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eca6:	00db      	lsls	r3, r3, #3
 800eca8:	3304      	adds	r3, #4
 800ecaa:	68fa      	ldr	r2, [r7, #12]
 800ecac:	4413      	add	r3, r2
 800ecae:	ed93 7a00 	vldr	s14, [r3]
 800ecb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ecb6:	00db      	lsls	r3, r3, #3
 800ecb8:	3304      	adds	r3, #4
 800ecba:	68fa      	ldr	r2, [r7, #12]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	edd3 7a00 	vldr	s15, [r3]
 800ecc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecc6:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800ecca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ecce:	00db      	lsls	r3, r3, #3
 800ecd0:	3304      	adds	r3, #4
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	4413      	add	r3, r2
 800ecd6:	ed93 7a00 	vldr	s14, [r3]
 800ecda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ecde:	00db      	lsls	r3, r3, #3
 800ece0:	3304      	adds	r3, #4
 800ece2:	68fa      	ldr	r2, [r7, #12]
 800ece4:	4413      	add	r3, r2
 800ece6:	edd3 7a00 	vldr	s15, [r3]
 800ecea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecee:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800ecf2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ecf6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ecfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecfe:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800ed02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ed06:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ed0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed0e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800ed12:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ed16:	edd7 7a08 	vldr	s15, [r7, #32]
 800ed1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed1e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800ed22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ed26:	edd7 7a08 	vldr	s15, [r7, #32]
 800ed2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed2e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800ed32:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ed36:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ed3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed3e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800ed42:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ed46:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ed4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed4e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800ed52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ed56:	00db      	lsls	r3, r3, #3
 800ed58:	3304      	adds	r3, #4
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ed62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ed66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed6a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800ed6e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ed72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ed76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed7a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800ed7e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ed82:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ed86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed8a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800ed8e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ed92:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ed96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed9a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800ed9e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800eda2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800eda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edaa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800edae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800edb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800edb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edba:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800edbe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800edc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800edc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edca:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800edce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800edd2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800edd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edda:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800edde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ede2:	00db      	lsls	r3, r3, #3
 800ede4:	68fa      	ldr	r2, [r7, #12]
 800ede6:	4413      	add	r3, r2
 800ede8:	ed97 7a07 	vldr	s14, [r7, #28]
 800edec:	edd7 7a06 	vldr	s15, [r7, #24]
 800edf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800edf4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800edf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800edfc:	00db      	lsls	r3, r3, #3
 800edfe:	3304      	adds	r3, #4
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	4413      	add	r3, r2
 800ee04:	ed97 7a05 	vldr	s14, [r7, #20]
 800ee08:	edd7 7a04 	vldr	s15, [r7, #16]
 800ee0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee10:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800ee14:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ee18:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ee1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee20:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800ee24:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ee28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ee2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee30:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800ee34:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ee38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ee3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee40:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800ee44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ee48:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ee4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee50:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800ee54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ee58:	00db      	lsls	r3, r3, #3
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	ed97 7a07 	vldr	s14, [r7, #28]
 800ee62:	edd7 7a06 	vldr	s15, [r7, #24]
 800ee66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee6a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800ee6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ee72:	00db      	lsls	r3, r3, #3
 800ee74:	3304      	adds	r3, #4
 800ee76:	68fa      	ldr	r2, [r7, #12]
 800ee78:	4413      	add	r3, r2
 800ee7a:	ed97 7a05 	vldr	s14, [r7, #20]
 800ee7e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ee82:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee86:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800ee8a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ee8e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ee92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee96:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800ee9a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ee9e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800eea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eea6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800eeaa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800eeae:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800eeb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eeb6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800eeba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800eebe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800eec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eec6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800eeca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eece:	00db      	lsls	r3, r3, #3
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	4413      	add	r3, r2
 800eed4:	ed97 7a07 	vldr	s14, [r7, #28]
 800eed8:	edd7 7a06 	vldr	s15, [r7, #24]
 800eedc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eee0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800eee4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eee8:	00db      	lsls	r3, r3, #3
 800eeea:	3304      	adds	r3, #4
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	4413      	add	r3, r2
 800eef0:	ed97 7a05 	vldr	s14, [r7, #20]
 800eef4:	edd7 7a04 	vldr	s15, [r7, #16]
 800eef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eefc:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800ef00:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800ef04:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ef08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef0c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ef10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef14:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800ef18:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800ef1c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ef20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef24:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ef28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef2c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800ef30:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800ef34:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ef38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef3c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ef40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800ef48:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800ef4c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ef50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef54:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800ef58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef5c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800ef60:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800ef64:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ef68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef6c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800ef70:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800ef74:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ef78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef7c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800ef80:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800ef84:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800ef88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef8c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800ef90:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800ef94:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800ef98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef9c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800efa0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800efa4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800efa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efac:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800efb0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800efb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800efb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efbc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800efc0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800efc4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800efc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efcc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800efd0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800efd4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800efd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efdc:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800efe0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800efe4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800efe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efec:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800eff0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800eff4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800eff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800effc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800f000:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800f004:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800f008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f00c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800f010:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800f014:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800f018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f01c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800f020:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800f024:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800f028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f02c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800f030:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800f034:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800f038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f03c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800f040:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800f044:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800f048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f04c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800f050:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800f054:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800f058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f05c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800f060:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f064:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800f068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f06c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800f070:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f074:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f07c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800f080:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f084:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f08c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800f090:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f094:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800f098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f09c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800f0a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f0a4:	00db      	lsls	r3, r3, #3
 800f0a6:	68fa      	ldr	r2, [r7, #12]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	ed97 7a07 	vldr	s14, [r7, #28]
 800f0ae:	edd7 7a06 	vldr	s15, [r7, #24]
 800f0b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0b6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800f0ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f0be:	00db      	lsls	r3, r3, #3
 800f0c0:	3304      	adds	r3, #4
 800f0c2:	68fa      	ldr	r2, [r7, #12]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	ed97 7a05 	vldr	s14, [r7, #20]
 800f0ca:	edd7 7a04 	vldr	s15, [r7, #16]
 800f0ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0d2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800f0d6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800f0da:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800f0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0e2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800f0e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f0ea:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800f0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0f2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800f0f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800f0fa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800f0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f102:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800f106:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f10a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800f10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f112:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800f116:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f11a:	00db      	lsls	r3, r3, #3
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	4413      	add	r3, r2
 800f120:	ed97 7a07 	vldr	s14, [r7, #28]
 800f124:	edd7 7a06 	vldr	s15, [r7, #24]
 800f128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f12c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800f130:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f134:	00db      	lsls	r3, r3, #3
 800f136:	3304      	adds	r3, #4
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	4413      	add	r3, r2
 800f13c:	ed97 7a05 	vldr	s14, [r7, #20]
 800f140:	edd7 7a04 	vldr	s15, [r7, #16]
 800f144:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f148:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800f14c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800f150:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800f154:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f158:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800f15c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f160:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800f164:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f168:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800f16c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800f170:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800f174:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f178:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800f17c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f180:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800f184:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f188:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800f18c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f190:	00db      	lsls	r3, r3, #3
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	4413      	add	r3, r2
 800f196:	ed97 7a07 	vldr	s14, [r7, #28]
 800f19a:	edd7 7a06 	vldr	s15, [r7, #24]
 800f19e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1a2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800f1a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f1aa:	00db      	lsls	r3, r3, #3
 800f1ac:	3304      	adds	r3, #4
 800f1ae:	68fa      	ldr	r2, [r7, #12]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	ed97 7a05 	vldr	s14, [r7, #20]
 800f1b6:	edd7 7a04 	vldr	s15, [r7, #16]
 800f1ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1be:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800f1c2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f1c6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800f1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ce:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800f1d2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f1d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800f1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1de:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800f1e2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f1e6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800f1ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ee:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800f1f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f1f6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800f1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1fe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800f202:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f206:	00db      	lsls	r3, r3, #3
 800f208:	68fa      	ldr	r2, [r7, #12]
 800f20a:	4413      	add	r3, r2
 800f20c:	ed97 7a07 	vldr	s14, [r7, #28]
 800f210:	edd7 7a06 	vldr	s15, [r7, #24]
 800f214:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f218:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800f21c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f220:	00db      	lsls	r3, r3, #3
 800f222:	3304      	adds	r3, #4
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	4413      	add	r3, r2
 800f228:	ed97 7a05 	vldr	s14, [r7, #20]
 800f22c:	edd7 7a04 	vldr	s15, [r7, #16]
 800f230:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f234:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 800f238:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800f23c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f240:	4413      	add	r3, r2
 800f242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 800f246:	897b      	ldrh	r3, [r7, #10]
 800f248:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800f24c:	429a      	cmp	r2, r3
 800f24e:	f4ff abba 	bcc.w	800e9c6 <arm_radix8_butterfly_f32+0x746>
         
         j++;
 800f252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f256:	3301      	adds	r3, #1
 800f258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 800f25c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f264:	429a      	cmp	r2, r3
 800f266:	f4ff ab2c 	bcc.w	800e8c2 <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 800f26a:	893b      	ldrh	r3, [r7, #8]
 800f26c:	00db      	lsls	r3, r3, #3
 800f26e:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 800f270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f274:	2b07      	cmp	r3, #7
 800f276:	f63f a813 	bhi.w	800e2a0 <arm_radix8_butterfly_f32+0x20>
}
 800f27a:	e000      	b.n	800f27e <arm_radix8_butterfly_f32+0xffe>
         break;
 800f27c:	bf00      	nop
}
 800f27e:	bf00      	nop
 800f280:	37f4      	adds	r7, #244	; 0xf4
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop

0800f28c <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b095      	sub	sp, #84	; 0x54
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	695b      	ldr	r3, [r3, #20]
 800f29c:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;					
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	881b      	ldrh	r3, [r3, #0]
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800f2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800f2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800f2ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800f2c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800f2c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2c8:	1d1a      	adds	r2, r3, #4
 800f2ca:	64ba      	str	r2, [r7, #72]	; 0x48
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800f2d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2d2:	1d1a      	adds	r2, r3, #4
 800f2d4:	64ba      	str	r2, [r7, #72]	; 0x48
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	62bb      	str	r3, [r7, #40]	; 0x28
   
   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800f2da:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f2de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f2e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   
   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800f2ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f2ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f2f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2f6:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800f2fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f2fe:	edd7 7a08 	vldr	s15, [r7, #32]
 800f302:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	1d1a      	adds	r2, r3, #4
 800f30a:	607a      	str	r2, [r7, #4]
 800f30c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f310:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f314:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800f318:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f31c:	edd7 7a08 	vldr	s15, [r7, #32]
 800f320:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	1d1a      	adds	r2, r3, #4
 800f328:	607a      	str	r2, [r7, #4]
 800f32a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f32e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f332:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800f336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f338:	00db      	lsls	r3, r3, #3
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	4413      	add	r3, r2
 800f33e:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800f340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f342:	3308      	adds	r3, #8
 800f344:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800f346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800f34c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800f352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800f358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800f35e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f360:	1d1a      	adds	r2, r3, #4
 800f362:	64ba      	str	r2, [r7, #72]	; 0x48
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800f368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f36a:	1d1a      	adds	r2, r3, #4
 800f36c:	64ba      	str	r2, [r7, #72]	; 0x48
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800f372:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f376:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f37a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f37e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800f382:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f386:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f38a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f38e:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800f392:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f396:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f39e:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800f3a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f3a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3ae:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800f3b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f3b6:	edd7 7a08 	vldr	s15, [r7, #32]
 800f3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3be:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800f3c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f3c6:	edd7 7a08 	vldr	s15, [r7, #32]
 800f3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3ce:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800f3d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f3d6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f3da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3de:	edd7 7a07 	vldr	s15, [r7, #28]
 800f3e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3e6:	edd7 7a04 	vldr	s15, [r7, #16]
 800f3ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	1d1a      	adds	r2, r3, #4
 800f3f2:	607a      	str	r2, [r7, #4]
 800f3f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f3f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3fc:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800f400:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f404:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f408:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f40c:	edd7 7a06 	vldr	s15, [r7, #24]
 800f410:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f414:	edd7 7a05 	vldr	s15, [r7, #20]
 800f418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	1d1a      	adds	r2, r3, #4
 800f420:	607a      	str	r2, [r7, #4]
 800f422:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f42a:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800f42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f430:	3308      	adds	r3, #8
 800f432:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800f434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f436:	3b08      	subs	r3, #8
 800f438:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800f43a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f43c:	3b01      	subs	r3, #1
 800f43e:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while(k > 0u);
 800f440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f442:	2b00      	cmp	r3, #0
 800f444:	f47f af7f 	bne.w	800f346 <stage_rfft_f32+0xba>
}
 800f448:	bf00      	nop
 800f44a:	3754      	adds	r7, #84	; 0x54
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 800f454:	b480      	push	{r7}
 800f456:	b095      	sub	sp, #84	; 0x54
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	695b      	ldr	r3, [r3, #20]
 800f464:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;					
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	3b01      	subs	r3, #1
 800f474:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800f476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800f47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800f482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f484:	3308      	adds	r3, #8
 800f486:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800f488:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f48c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f490:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	1d1a      	adds	r2, r3, #4
 800f498:	607a      	str	r2, [r7, #4]
 800f49a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f49e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f4a2:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800f4a6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f4aa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f4ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	1d1a      	adds	r2, r3, #4
 800f4b6:	607a      	str	r2, [r7, #4]
 800f4b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f4bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f4c0:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800f4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4c6:	00db      	lsls	r3, r3, #3
 800f4c8:	68ba      	ldr	r2, [r7, #8]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800f4ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4d0:	3308      	adds	r3, #8
 800f4d2:	647b      	str	r3, [r7, #68]	; 0x44

   while(k > 0u)
 800f4d4:	e07c      	b.n	800f5d0 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800f4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800f4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800f4e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800f4e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800f4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4f0:	1d1a      	adds	r2, r3, #4
 800f4f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800f4f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4fa:	1d1a      	adds	r2, r3, #4
 800f4fc:	64ba      	str	r2, [r7, #72]	; 0x48
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800f502:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f506:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f50a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f50e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800f512:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f516:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f51a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f51e:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800f522:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f526:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f52e:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800f532:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f536:	edd7 7a08 	vldr	s15, [r7, #32]
 800f53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f53e:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800f542:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f546:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f54e:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800f552:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f556:	edd7 7a08 	vldr	s15, [r7, #32]
 800f55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f55e:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800f562:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f566:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f56a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f56e:	edd7 7a07 	vldr	s15, [r7, #28]
 800f572:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f576:	edd7 7a06 	vldr	s15, [r7, #24]
 800f57a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	1d1a      	adds	r2, r3, #4
 800f582:	607a      	str	r2, [r7, #4]
 800f584:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f58c:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800f590:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f594:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f59c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f5a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5a4:	edd7 7a04 	vldr	s15, [r7, #16]
 800f5a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	1d1a      	adds	r2, r3, #4
 800f5b0:	607a      	str	r2, [r7, #4]
 800f5b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f5b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5ba:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800f5be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5c0:	3308      	adds	r3, #8
 800f5c2:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800f5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5c6:	3b08      	subs	r3, #8
 800f5c8:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800f5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(k > 0u)
 800f5d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	f47f af7f 	bne.w	800f4d6 <merge_rfft_f32+0x82>
   }

}
 800f5d8:	bf00      	nop
 800f5da:	3754      	adds	r7, #84	; 0x54
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b086      	sub	sp, #24
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	60f8      	str	r0, [r7, #12]
 800f5ec:	60b9      	str	r1, [r7, #8]
 800f5ee:	607a      	str	r2, [r7, #4]
 800f5f0:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	8a1b      	ldrh	r3, [r3, #16]
 800f5fa:	085b      	lsrs	r3, r3, #1
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if(ifftFlag)
 800f602:	78fb      	ldrb	r3, [r7, #3]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00b      	beq.n	800f620 <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	68b9      	ldr	r1, [r7, #8]
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	f7ff ff21 	bl	800f454 <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800f612:	78fa      	ldrb	r2, [r7, #3]
 800f614:	2301      	movs	r3, #1
 800f616:	6879      	ldr	r1, [r7, #4]
 800f618:	6978      	ldr	r0, [r7, #20]
 800f61a:	f7fe fd8d 	bl	800e138 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
   
      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800f61e:	e00a      	b.n	800f636 <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800f620:	78fa      	ldrb	r2, [r7, #3]
 800f622:	2301      	movs	r3, #1
 800f624:	68b9      	ldr	r1, [r7, #8]
 800f626:	6978      	ldr	r0, [r7, #20]
 800f628:	f7fe fd86 	bl	800e138 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	68b9      	ldr	r1, [r7, #8]
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	f7ff fe2b 	bl	800f28c <stage_rfft_f32>
}
 800f636:	bf00      	nop
 800f638:	3718      	adds	r7, #24
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
	...

0800f640 <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.   
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 800f64c:	2300      	movs	r3, #0
 800f64e:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 800f654:	887b      	ldrh	r3, [r7, #2]
 800f656:	085b      	lsrs	r3, r3, #1
 800f658:	b29a      	uxth	r2, r3
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	887a      	ldrh	r2, [r7, #2]
 800f662:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	881b      	ldrh	r3, [r3, #0]
 800f668:	2b80      	cmp	r3, #128	; 0x80
 800f66a:	d050      	beq.n	800f70e <arm_rfft_fast_init_f32+0xce>
 800f66c:	2b80      	cmp	r3, #128	; 0x80
 800f66e:	dc06      	bgt.n	800f67e <arm_rfft_fast_init_f32+0x3e>
 800f670:	2b20      	cmp	r3, #32
 800f672:	d066      	beq.n	800f742 <arm_rfft_fast_init_f32+0x102>
 800f674:	2b40      	cmp	r3, #64	; 0x40
 800f676:	d057      	beq.n	800f728 <arm_rfft_fast_init_f32+0xe8>
 800f678:	2b10      	cmp	r3, #16
 800f67a:	d06f      	beq.n	800f75c <arm_rfft_fast_init_f32+0x11c>
 800f67c:	e07b      	b.n	800f776 <arm_rfft_fast_init_f32+0x136>
 800f67e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f682:	d028      	beq.n	800f6d6 <arm_rfft_fast_init_f32+0x96>
 800f684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f688:	dc03      	bgt.n	800f692 <arm_rfft_fast_init_f32+0x52>
 800f68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f68e:	d030      	beq.n	800f6f2 <arm_rfft_fast_init_f32+0xb2>
 800f690:	e071      	b.n	800f776 <arm_rfft_fast_init_f32+0x136>
 800f692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f696:	d010      	beq.n	800f6ba <arm_rfft_fast_init_f32+0x7a>
 800f698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f69c:	d16b      	bne.n	800f776 <arm_rfft_fast_init_f32+0x136>
  {
  case 2048u:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE2048_TABLE_LENGTH;
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 800f6a4:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	4a38      	ldr	r2, [pc, #224]	; (800f78c <arm_rfft_fast_init_f32+0x14c>)
 800f6aa:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	4a38      	ldr	r2, [pc, #224]	; (800f790 <arm_rfft_fast_init_f32+0x150>)
 800f6b0:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	4a37      	ldr	r2, [pc, #220]	; (800f794 <arm_rfft_fast_init_f32+0x154>)
 800f6b6:	615a      	str	r2, [r3, #20]
    break;
 800f6b8:	e060      	b.n	800f77c <arm_rfft_fast_init_f32+0x13c>
  case 1024u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE1024_TABLE_LENGTH;
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800f6c0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	4a34      	ldr	r2, [pc, #208]	; (800f798 <arm_rfft_fast_init_f32+0x158>)
 800f6c6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	4a34      	ldr	r2, [pc, #208]	; (800f79c <arm_rfft_fast_init_f32+0x15c>)
 800f6cc:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4a33      	ldr	r2, [pc, #204]	; (800f7a0 <arm_rfft_fast_init_f32+0x160>)
 800f6d2:	615a      	str	r2, [r3, #20]
    break;
 800f6d4:	e052      	b.n	800f77c <arm_rfft_fast_init_f32+0x13c>
  case 512u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800f6dc:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	4a30      	ldr	r2, [pc, #192]	; (800f7a4 <arm_rfft_fast_init_f32+0x164>)
 800f6e2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	4a30      	ldr	r2, [pc, #192]	; (800f7a8 <arm_rfft_fast_init_f32+0x168>)
 800f6e8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	4a2f      	ldr	r2, [pc, #188]	; (800f7ac <arm_rfft_fast_init_f32+0x16c>)
 800f6ee:	615a      	str	r2, [r3, #20]
    break;
 800f6f0:	e044      	b.n	800f77c <arm_rfft_fast_init_f32+0x13c>
  case 256u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f6f8:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	4a2c      	ldr	r2, [pc, #176]	; (800f7b0 <arm_rfft_fast_init_f32+0x170>)
 800f6fe:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	4a2c      	ldr	r2, [pc, #176]	; (800f7b4 <arm_rfft_fast_init_f32+0x174>)
 800f704:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4a2b      	ldr	r2, [pc, #172]	; (800f7b8 <arm_rfft_fast_init_f32+0x178>)
 800f70a:	615a      	str	r2, [r3, #20]
    break;
 800f70c:	e036      	b.n	800f77c <arm_rfft_fast_init_f32+0x13c>
  case 128u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	22d0      	movs	r2, #208	; 0xd0
 800f712:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	4a29      	ldr	r2, [pc, #164]	; (800f7bc <arm_rfft_fast_init_f32+0x17c>)
 800f718:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	4a28      	ldr	r2, [pc, #160]	; (800f7c0 <arm_rfft_fast_init_f32+0x180>)
 800f71e:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a28      	ldr	r2, [pc, #160]	; (800f7c4 <arm_rfft_fast_init_f32+0x184>)
 800f724:	615a      	str	r2, [r3, #20]
    break;
 800f726:	e029      	b.n	800f77c <arm_rfft_fast_init_f32+0x13c>
  case 64u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__64_TABLE_LENGTH;
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	2238      	movs	r2, #56	; 0x38
 800f72c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	4a25      	ldr	r2, [pc, #148]	; (800f7c8 <arm_rfft_fast_init_f32+0x188>)
 800f732:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	4a25      	ldr	r2, [pc, #148]	; (800f7cc <arm_rfft_fast_init_f32+0x18c>)
 800f738:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a24      	ldr	r2, [pc, #144]	; (800f7d0 <arm_rfft_fast_init_f32+0x190>)
 800f73e:	615a      	str	r2, [r3, #20]
    break;
 800f740:	e01c      	b.n	800f77c <arm_rfft_fast_init_f32+0x13c>
  case 32u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__32_TABLE_LENGTH;
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	2230      	movs	r2, #48	; 0x30
 800f746:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	4a22      	ldr	r2, [pc, #136]	; (800f7d4 <arm_rfft_fast_init_f32+0x194>)
 800f74c:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	4a21      	ldr	r2, [pc, #132]	; (800f7d8 <arm_rfft_fast_init_f32+0x198>)
 800f752:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4a21      	ldr	r2, [pc, #132]	; (800f7dc <arm_rfft_fast_init_f32+0x19c>)
 800f758:	615a      	str	r2, [r3, #20]
    break;
 800f75a:	e00f      	b.n	800f77c <arm_rfft_fast_init_f32+0x13c>
  case 16u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__16_TABLE_LENGTH;
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	2214      	movs	r2, #20
 800f760:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	4a1e      	ldr	r2, [pc, #120]	; (800f7e0 <arm_rfft_fast_init_f32+0x1a0>)
 800f766:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	4a1e      	ldr	r2, [pc, #120]	; (800f7e4 <arm_rfft_fast_init_f32+0x1a4>)
 800f76c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4a1d      	ldr	r2, [pc, #116]	; (800f7e8 <arm_rfft_fast_init_f32+0x1a8>)
 800f772:	615a      	str	r2, [r3, #20]
    break;
 800f774:	e002      	b.n	800f77c <arm_rfft_fast_init_f32+0x13c>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 800f776:	23ff      	movs	r3, #255	; 0xff
 800f778:	73fb      	strb	r3, [r7, #15]
    break;
 800f77a:	bf00      	nop
  }

  return (status);
 800f77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f780:	4618      	mov	r0, r3
 800f782:	3714      	adds	r7, #20
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	0801ebb4 	.word	0x0801ebb4
 800f790:	0801941c 	.word	0x0801941c
 800f794:	080248f4 	.word	0x080248f4
 800f798:	0801dda4 	.word	0x0801dda4
 800f79c:	0801741c 	.word	0x0801741c
 800f7a0:	080228f4 	.word	0x080228f4
 800f7a4:	0801da24 	.word	0x0801da24
 800f7a8:	0801641c 	.word	0x0801641c
 800f7ac:	080218f4 	.word	0x080218f4
 800f7b0:	0801d6b4 	.word	0x0801d6b4
 800f7b4:	08015c1c 	.word	0x08015c1c
 800f7b8:	080210f4 	.word	0x080210f4
 800f7bc:	0801d514 	.word	0x0801d514
 800f7c0:	0801581c 	.word	0x0801581c
 800f7c4:	08020cf4 	.word	0x08020cf4
 800f7c8:	0801d4a4 	.word	0x0801d4a4
 800f7cc:	0801561c 	.word	0x0801561c
 800f7d0:	08020af4 	.word	0x08020af4
 800f7d4:	0801d444 	.word	0x0801d444
 800f7d8:	0801551c 	.word	0x0801551c
 800f7dc:	080209f4 	.word	0x080209f4
 800f7e0:	0801d41c 	.word	0x0801d41c
 800f7e4:	0801549c 	.word	0x0801549c
 800f7e8:	08020974 	.word	0x08020974

0800f7ec <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b090      	sub	sp, #64	; 0x40
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 800f7f4:	4b28      	ldr	r3, [pc, #160]	; (800f898 <aiInit+0xac>)
 800f7f6:	60fb      	str	r3, [r7, #12]
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	823b      	strh	r3, [r7, #16]
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	827b      	strh	r3, [r7, #18]
 800f800:	2301      	movs	r3, #1
 800f802:	82bb      	strh	r3, [r7, #20]
 800f804:	4b25      	ldr	r3, [pc, #148]	; (800f89c <aiInit+0xb0>)
 800f806:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800f808:	f000 fa26 	bl	800fc58 <ai_network_data_weights_get>
 800f80c:	4603      	mov	r3, r0
    const ai_network_params params = {
 800f80e:	61fb      	str	r3, [r7, #28]
 800f810:	2300      	movs	r3, #0
 800f812:	623b      	str	r3, [r7, #32]
 800f814:	4b22      	ldr	r3, [pc, #136]	; (800f8a0 <aiInit+0xb4>)
 800f816:	627b      	str	r3, [r7, #36]	; 0x24
 800f818:	2301      	movs	r3, #1
 800f81a:	853b      	strh	r3, [r7, #40]	; 0x28
 800f81c:	2301      	movs	r3, #1
 800f81e:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f820:	2301      	movs	r3, #1
 800f822:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f824:	f44f 5368 	mov.w	r3, #14848	; 0x3a00
 800f828:	633b      	str	r3, [r7, #48]	; 0x30
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	637b      	str	r3, [r7, #52]	; 0x34
 800f82e:	2300      	movs	r3, #0
 800f830:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800f832:	2100      	movs	r1, #0
 800f834:	481b      	ldr	r0, [pc, #108]	; (800f8a4 <aiInit+0xb8>)
 800f836:	f000 f9a9 	bl	800fb8c <ai_network_create>
 800f83a:	4603      	mov	r3, r0
 800f83c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 800f83e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f842:	2b00      	cmp	r3, #0
 800f844:	d002      	beq.n	800f84c <aiInit+0x60>
	    return -1;
 800f846:	f04f 33ff 	mov.w	r3, #4294967295
 800f84a:	e020      	b.n	800f88e <aiInit+0xa2>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 800f84c:	4b15      	ldr	r3, [pc, #84]	; (800f8a4 <aiInit+0xb8>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f107 020c 	add.w	r2, r7, #12
 800f854:	4611      	mov	r1, r2
 800f856:	4618      	mov	r0, r3
 800f858:	f000 f9ba 	bl	800fbd0 <ai_network_init>
 800f85c:	4603      	mov	r3, r0
 800f85e:	f083 0301 	eor.w	r3, r3, #1
 800f862:	b2db      	uxtb	r3, r3
 800f864:	2b00      	cmp	r3, #0
 800f866:	d011      	beq.n	800f88c <aiInit+0xa0>
        err = ai_network_get_error(network);
 800f868:	4b0e      	ldr	r3, [pc, #56]	; (800f8a4 <aiInit+0xb8>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4618      	mov	r0, r3
 800f86e:	f000 f981 	bl	800fb74 <ai_network_get_error>
 800f872:	4603      	mov	r3, r0
 800f874:	63fb      	str	r3, [r7, #60]	; 0x3c
        ai_network_destroy(network);
 800f876:	4b0b      	ldr	r3, [pc, #44]	; (800f8a4 <aiInit+0xb8>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f000 f99c 	bl	800fbb8 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 800f880:	4b08      	ldr	r3, [pc, #32]	; (800f8a4 <aiInit+0xb8>)
 800f882:	2200      	movs	r2, #0
 800f884:	601a      	str	r2, [r3, #0]
	    return -2;
 800f886:	f06f 0301 	mvn.w	r3, #1
 800f88a:	e000      	b.n	800f88e <aiInit+0xa2>
    }

    return 0;
 800f88c:	2300      	movs	r3, #0
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3740      	adds	r7, #64	; 0x40
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	40040440 	.word	0x40040440
 800f89c:	00045510 	.word	0x00045510
 800f8a0:	00040440 	.word	0x00040440
 800f8a4:	20005b38 	.word	0x20005b38

0800f8a8 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !network)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d006      	beq.n	800f8c6 <aiRun+0x1e>
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d003      	beq.n	800f8c6 <aiRun+0x1e>
 800f8be:	4b17      	ldr	r3, [pc, #92]	; (800f91c <aiRun+0x74>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d102      	bne.n	800f8cc <aiRun+0x24>
        return -1;
 800f8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ca:	e022      	b.n	800f912 <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 800f8cc:	4b14      	ldr	r3, [pc, #80]	; (800f920 <aiRun+0x78>)
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800f8d2:	4a13      	ldr	r2, [pc, #76]	; (800f920 <aiRun+0x78>)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 800f8d8:	4b12      	ldr	r3, [pc, #72]	; (800f924 <aiRun+0x7c>)
 800f8da:	2201      	movs	r2, #1
 800f8dc:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800f8de:	4a11      	ldr	r2, [pc, #68]	; (800f924 <aiRun+0x7c>)
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800f8e4:	4b0d      	ldr	r3, [pc, #52]	; (800f91c <aiRun+0x74>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a0e      	ldr	r2, [pc, #56]	; (800f924 <aiRun+0x7c>)
 800f8ea:	490d      	ldr	r1, [pc, #52]	; (800f920 <aiRun+0x78>)
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f000 f9a2 	bl	800fc36 <ai_network_run>
 800f8f2:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d00a      	beq.n	800f910 <aiRun+0x68>
        err = ai_network_get_error(network);
 800f8fa:	4b08      	ldr	r3, [pc, #32]	; (800f91c <aiRun+0x74>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4618      	mov	r0, r3
 800f900:	f000 f938 	bl	800fb74 <ai_network_get_error>
 800f904:	4603      	mov	r3, r0
 800f906:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800f90e:	e000      	b.n	800f912 <aiRun+0x6a>
    }

    return 0;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3710      	adds	r7, #16
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	20005b38 	.word	0x20005b38
 800f920:	2000000c 	.word	0x2000000c
 800f924:	20000024 	.word	0x20000024

0800f928 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 800f92c:	4802      	ldr	r0, [pc, #8]	; (800f938 <MX_X_CUBE_AI_Init+0x10>)
 800f92e:	f7ff ff5d 	bl	800f7ec <aiInit>
    /* USER CODE END 0 */
}
 800f932:	bf00      	nop
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20005b3c 	.word	0x20005b3c

0800f93c <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b085      	sub	sp, #20
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	691b      	ldr	r3, [r3, #16]
 800f94a:	3303      	adds	r3, #3
 800f94c:	f023 0303 	bic.w	r3, r3, #3
 800f950:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_4_scratch0_array.data = AI_PTR(activations + 9856);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 800f958:	4a29      	ldr	r2, [pc, #164]	; (800fa00 <network_configure_activations+0xc4>)
 800f95a:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations + 9856);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 800f962:	4a27      	ldr	r2, [pc, #156]	; (800fa00 <network_configure_activations+0xc4>)
 800f964:	60d3      	str	r3, [r2, #12]
    conv2d_3_scratch0_array.data = AI_PTR(activations + 9856);
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 800f96c:	4a25      	ldr	r2, [pc, #148]	; (800fa04 <network_configure_activations+0xc8>)
 800f96e:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch0_array.data_start = AI_PTR(activations + 9856);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
 800f976:	4a23      	ldr	r2, [pc, #140]	; (800fa04 <network_configure_activations+0xc8>)
 800f978:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800f97a:	4b23      	ldr	r3, [pc, #140]	; (800fa08 <network_configure_activations+0xcc>)
 800f97c:	2200      	movs	r2, #0
 800f97e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800f980:	4b21      	ldr	r3, [pc, #132]	; (800fa08 <network_configure_activations+0xcc>)
 800f982:	2200      	movs	r2, #0
 800f984:	60da      	str	r2, [r3, #12]
    conv2d_3_output_array.data = AI_PTR(activations + 640);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f98c:	4a1f      	ldr	r2, [pc, #124]	; (800fa0c <network_configure_activations+0xd0>)
 800f98e:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(activations + 640);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f996:	4a1d      	ldr	r2, [pc, #116]	; (800fa0c <network_configure_activations+0xd0>)
 800f998:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(activations + 0);
 800f99a:	4a1d      	ldr	r2, [pc, #116]	; (800fa10 <network_configure_activations+0xd4>)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations + 0);
 800f9a0:	4a1b      	ldr	r2, [pc, #108]	; (800fa10 <network_configure_activations+0xd4>)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 9344);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 800f9ac:	4a19      	ldr	r2, [pc, #100]	; (800fa14 <network_configure_activations+0xd8>)
 800f9ae:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 9344);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 800f9b6:	4a17      	ldr	r2, [pc, #92]	; (800fa14 <network_configure_activations+0xd8>)
 800f9b8:	60d3      	str	r3, [r2, #12]
    dense_3_nl_output_array.data = AI_PTR(activations + 9344);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 800f9c0:	4a15      	ldr	r2, [pc, #84]	; (800fa18 <network_configure_activations+0xdc>)
 800f9c2:	6093      	str	r3, [r2, #8]
    dense_3_nl_output_array.data_start = AI_PTR(activations + 9344);
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 800f9ca:	4a13      	ldr	r2, [pc, #76]	; (800fa18 <network_configure_activations+0xdc>)
 800f9cc:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations + 9328);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800f9d4:	3330      	adds	r3, #48	; 0x30
 800f9d6:	4a11      	ldr	r2, [pc, #68]	; (800fa1c <network_configure_activations+0xe0>)
 800f9d8:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations + 9328);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 800f9e0:	3330      	adds	r3, #48	; 0x30
 800f9e2:	4a0e      	ldr	r2, [pc, #56]	; (800fa1c <network_configure_activations+0xe0>)
 800f9e4:	60d3      	str	r3, [r2, #12]
    dense_4_nl_output_array.data = AI_PTR(NULL);
 800f9e6:	4b0e      	ldr	r3, [pc, #56]	; (800fa20 <network_configure_activations+0xe4>)
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	609a      	str	r2, [r3, #8]
    dense_4_nl_output_array.data_start = AI_PTR(NULL);
 800f9ec:	4b0c      	ldr	r3, [pc, #48]	; (800fa20 <network_configure_activations+0xe4>)
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800f9f2:	2301      	movs	r3, #1
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3714      	adds	r7, #20
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr
 800fa00:	20000094 	.word	0x20000094
 800fa04:	200000a4 	.word	0x200000a4
 800fa08:	20000134 	.word	0x20000134
 800fa0c:	20000144 	.word	0x20000144
 800fa10:	20000154 	.word	0x20000154
 800fa14:	20000164 	.word	0x20000164
 800fa18:	20000174 	.word	0x20000174
 800fa1c:	20000184 	.word	0x20000184
 800fa20:	20000194 	.word	0x20000194

0800fa24 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	691b      	ldr	r3, [r3, #16]
 800fa32:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800fa34:	4b47      	ldr	r3, [pc, #284]	; (800fb54 <network_configure_weights+0x130>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa3c:	4a45      	ldr	r2, [pc, #276]	; (800fb54 <network_configure_weights+0x130>)
 800fa3e:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights + 283904);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f503 238a 	add.w	r3, r3, #282624	; 0x45000
 800fa46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa4a:	4a42      	ldr	r2, [pc, #264]	; (800fb54 <network_configure_weights+0x130>)
 800fa4c:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights + 283904);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f503 238a 	add.w	r3, r3, #282624	; 0x45000
 800fa54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa58:	4a3e      	ldr	r2, [pc, #248]	; (800fb54 <network_configure_weights+0x130>)
 800fa5a:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800fa5c:	4b3e      	ldr	r3, [pc, #248]	; (800fb58 <network_configure_weights+0x134>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa64:	4a3c      	ldr	r2, [pc, #240]	; (800fb58 <network_configure_weights+0x134>)
 800fa66:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights + 281856);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f503 2389 	add.w	r3, r3, #280576	; 0x44800
 800fa6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa72:	4a39      	ldr	r2, [pc, #228]	; (800fb58 <network_configure_weights+0x134>)
 800fa74:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights + 281856);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	f503 2389 	add.w	r3, r3, #280576	; 0x44800
 800fa7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa80:	4a35      	ldr	r2, [pc, #212]	; (800fb58 <network_configure_weights+0x134>)
 800fa82:	60d3      	str	r3, [r2, #12]
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800fa84:	4b35      	ldr	r3, [pc, #212]	; (800fb5c <network_configure_weights+0x138>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa8c:	4a33      	ldr	r2, [pc, #204]	; (800fb5c <network_configure_weights+0x138>)
 800fa8e:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 281344);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f503 2389 	add.w	r3, r3, #280576	; 0x44800
 800fa96:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800fa9a:	4a30      	ldr	r2, [pc, #192]	; (800fb5c <network_configure_weights+0x138>)
 800fa9c:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 281344);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f503 2389 	add.w	r3, r3, #280576	; 0x44800
 800faa4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800faa8:	4a2c      	ldr	r2, [pc, #176]	; (800fb5c <network_configure_weights+0x138>)
 800faaa:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800faac:	4b2c      	ldr	r3, [pc, #176]	; (800fb60 <network_configure_weights+0x13c>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fab4:	4a2a      	ldr	r2, [pc, #168]	; (800fb60 <network_configure_weights+0x13c>)
 800fab6:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 19200);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f503 4396 	add.w	r3, r3, #19200	; 0x4b00
 800fabe:	4a28      	ldr	r2, [pc, #160]	; (800fb60 <network_configure_weights+0x13c>)
 800fac0:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 19200);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f503 4396 	add.w	r3, r3, #19200	; 0x4b00
 800fac8:	4a25      	ldr	r2, [pc, #148]	; (800fb60 <network_configure_weights+0x13c>)
 800faca:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800facc:	4b25      	ldr	r3, [pc, #148]	; (800fb64 <network_configure_weights+0x140>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fad4:	4a23      	ldr	r2, [pc, #140]	; (800fb64 <network_configure_weights+0x140>)
 800fad6:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights + 19072);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f503 4395 	add.w	r3, r3, #19072	; 0x4a80
 800fade:	4a21      	ldr	r2, [pc, #132]	; (800fb64 <network_configure_weights+0x140>)
 800fae0:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights + 19072);
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	f503 4395 	add.w	r3, r3, #19072	; 0x4a80
 800fae8:	4a1e      	ldr	r2, [pc, #120]	; (800fb64 <network_configure_weights+0x140>)
 800faea:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800faec:	4b1e      	ldr	r3, [pc, #120]	; (800fb68 <network_configure_weights+0x144>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800faf4:	4a1c      	ldr	r2, [pc, #112]	; (800fb68 <network_configure_weights+0x144>)
 800faf6:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights + 640);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fafe:	4a1a      	ldr	r2, [pc, #104]	; (800fb68 <network_configure_weights+0x144>)
 800fb00:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights + 640);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fb08:	4a17      	ldr	r2, [pc, #92]	; (800fb68 <network_configure_weights+0x144>)
 800fb0a:	60d3      	str	r3, [r2, #12]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800fb0c:	4b17      	ldr	r3, [pc, #92]	; (800fb6c <network_configure_weights+0x148>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb14:	4a15      	ldr	r2, [pc, #84]	; (800fb6c <network_configure_weights+0x148>)
 800fb16:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(weights + 576);
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800fb1e:	4a13      	ldr	r2, [pc, #76]	; (800fb6c <network_configure_weights+0x148>)
 800fb20:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(weights + 576);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800fb28:	4a10      	ldr	r2, [pc, #64]	; (800fb6c <network_configure_weights+0x148>)
 800fb2a:	60d3      	str	r3, [r2, #12]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800fb2c:	4b10      	ldr	r3, [pc, #64]	; (800fb70 <network_configure_weights+0x14c>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb34:	4a0e      	ldr	r2, [pc, #56]	; (800fb70 <network_configure_weights+0x14c>)
 800fb36:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(weights + 0);
 800fb38:	4a0d      	ldr	r2, [pc, #52]	; (800fb70 <network_configure_weights+0x14c>)
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(weights + 0);
 800fb3e:	4a0c      	ldr	r2, [pc, #48]	; (800fb70 <network_configure_weights+0x14c>)
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800fb44:	2301      	movs	r3, #1
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	200000b4 	.word	0x200000b4
 800fb58:	200000c4 	.word	0x200000c4
 800fb5c:	200000d4 	.word	0x200000d4
 800fb60:	200000e4 	.word	0x200000e4
 800fb64:	200000f4 	.word	0x200000f4
 800fb68:	20000104 	.word	0x20000104
 800fb6c:	20000114 	.word	0x20000114
 800fb70:	20000124 	.word	0x20000124

0800fb74 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7f0 fc82 	bl	8000486 <ai_platform_network_get_error>
 800fb82:	4603      	mov	r3, r0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af02      	add	r7, sp, #8
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800fb96:	2300      	movs	r3, #0
 800fb98:	9301      	str	r3, [sp, #4]
 800fb9a:	2303      	movs	r3, #3
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	2301      	movs	r3, #1
 800fba0:	4a04      	ldr	r2, [pc, #16]	; (800fbb4 <ai_network_create+0x28>)
 800fba2:	6839      	ldr	r1, [r7, #0]
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7f0 fd59 	bl	800065c <ai_platform_network_create>
 800fbaa:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	2000003c 	.word	0x2000003c

0800fbb8 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f7f0 fd90 	bl	80006e6 <ai_platform_network_destroy>
 800fbc6:	4603      	mov	r3, r0
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800fbda:	6839      	ldr	r1, [r7, #0]
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7f0 fda5 	bl	800072c <ai_platform_network_init>
 800fbe2:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d101      	bne.n	800fbee <ai_network_init+0x1e>
 800fbea:	2300      	movs	r3, #0
 800fbec:	e01f      	b.n	800fc2e <ai_network_init+0x5e>

  ai_bool ok = true;
 800fbee:	2301      	movs	r3, #1
 800fbf0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	68f8      	ldr	r0, [r7, #12]
 800fbf8:	f7ff ff14 	bl	800fa24 <network_configure_weights>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	461a      	mov	r2, r3
 800fc00:	7afb      	ldrb	r3, [r7, #11]
 800fc02:	4013      	ands	r3, r2
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	bf14      	ite	ne
 800fc08:	2301      	movne	r3, #1
 800fc0a:	2300      	moveq	r3, #0
 800fc0c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	3318      	adds	r3, #24
 800fc12:	4619      	mov	r1, r3
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f7ff fe91 	bl	800f93c <network_configure_activations>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	7afb      	ldrb	r3, [r7, #11]
 800fc20:	4013      	ands	r3, r2
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	bf14      	ite	ne
 800fc26:	2301      	movne	r3, #1
 800fc28:	2300      	moveq	r3, #0
 800fc2a:	72fb      	strb	r3, [r7, #11]

  return ok;
 800fc2c:	7afb      	ldrb	r3, [r7, #11]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}

0800fc36 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800fc36:	b580      	push	{r7, lr}
 800fc38:	b084      	sub	sp, #16
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	60f8      	str	r0, [r7, #12]
 800fc3e:	60b9      	str	r1, [r7, #8]
 800fc40:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	68b9      	ldr	r1, [r7, #8]
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f7f0 fdcc 	bl	80007e4 <ai_platform_network_process>
 800fc4c:	4603      	mov	r3, r0
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3710      	adds	r7, #16
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
	...

0800fc58 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	af00      	add	r7, sp, #0
    0x2a, 0xbe, 0x57, 0x4f, 0xa8, 0x3d, 0xe0, 0x54, 0x36, 0x3c,
    0x19, 0x04, 0xfe, 0x3d, 0x8a, 0xba, 0xd9, 0x3c, 0x06, 0xbc,
    0xe2, 0xbb, 0xb9, 0x08, 0x2b, 0xbc, 0xa0, 0xbc, 0x93, 0xb9
  };

  return AI_HANDLE_PTR(s_network_weights);
 800fc5c:	4b02      	ldr	r3, [pc, #8]	; (800fc68 <ai_network_data_weights_get+0x10>)

}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr
 800fc68:	08028924 	.word	0x08028924

0800fc6c <__aeabi_memclr>:
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f7f6 bb1f 	b.w	80062b0 <__aeabi_memset>

0800fc72 <__aeabi_memcpy>:
 800fc72:	f000 b83a 	b.w	800fcea <memcpy>
	...

0800fc78 <__errno>:
 800fc78:	4b01      	ldr	r3, [pc, #4]	; (800fc80 <__errno+0x8>)
 800fc7a:	6818      	ldr	r0, [r3, #0]
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop
 800fc80:	200008ac 	.word	0x200008ac

0800fc84 <__libc_init_array>:
 800fc84:	b570      	push	{r4, r5, r6, lr}
 800fc86:	4e0d      	ldr	r6, [pc, #52]	; (800fcbc <__libc_init_array+0x38>)
 800fc88:	4c0d      	ldr	r4, [pc, #52]	; (800fcc0 <__libc_init_array+0x3c>)
 800fc8a:	1ba4      	subs	r4, r4, r6
 800fc8c:	10a4      	asrs	r4, r4, #2
 800fc8e:	2500      	movs	r5, #0
 800fc90:	42a5      	cmp	r5, r4
 800fc92:	d109      	bne.n	800fca8 <__libc_init_array+0x24>
 800fc94:	4e0b      	ldr	r6, [pc, #44]	; (800fcc4 <__libc_init_array+0x40>)
 800fc96:	4c0c      	ldr	r4, [pc, #48]	; (800fcc8 <__libc_init_array+0x44>)
 800fc98:	f005 fb24 	bl	80152e4 <_init>
 800fc9c:	1ba4      	subs	r4, r4, r6
 800fc9e:	10a4      	asrs	r4, r4, #2
 800fca0:	2500      	movs	r5, #0
 800fca2:	42a5      	cmp	r5, r4
 800fca4:	d105      	bne.n	800fcb2 <__libc_init_array+0x2e>
 800fca6:	bd70      	pop	{r4, r5, r6, pc}
 800fca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fcac:	4798      	blx	r3
 800fcae:	3501      	adds	r5, #1
 800fcb0:	e7ee      	b.n	800fc90 <__libc_init_array+0xc>
 800fcb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fcb6:	4798      	blx	r3
 800fcb8:	3501      	adds	r5, #1
 800fcba:	e7f2      	b.n	800fca2 <__libc_init_array+0x1e>
 800fcbc:	0806e504 	.word	0x0806e504
 800fcc0:	0806e504 	.word	0x0806e504
 800fcc4:	0806e504 	.word	0x0806e504
 800fcc8:	0806e508 	.word	0x0806e508

0800fccc <memcmp>:
 800fccc:	b530      	push	{r4, r5, lr}
 800fcce:	2400      	movs	r4, #0
 800fcd0:	42a2      	cmp	r2, r4
 800fcd2:	d101      	bne.n	800fcd8 <memcmp+0xc>
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	e007      	b.n	800fce8 <memcmp+0x1c>
 800fcd8:	5d03      	ldrb	r3, [r0, r4]
 800fcda:	3401      	adds	r4, #1
 800fcdc:	190d      	adds	r5, r1, r4
 800fcde:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800fce2:	42ab      	cmp	r3, r5
 800fce4:	d0f4      	beq.n	800fcd0 <memcmp+0x4>
 800fce6:	1b58      	subs	r0, r3, r5
 800fce8:	bd30      	pop	{r4, r5, pc}

0800fcea <memcpy>:
 800fcea:	b510      	push	{r4, lr}
 800fcec:	1e43      	subs	r3, r0, #1
 800fcee:	440a      	add	r2, r1
 800fcf0:	4291      	cmp	r1, r2
 800fcf2:	d100      	bne.n	800fcf6 <memcpy+0xc>
 800fcf4:	bd10      	pop	{r4, pc}
 800fcf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcfe:	e7f7      	b.n	800fcf0 <memcpy+0x6>

0800fd00 <memset>:
 800fd00:	4402      	add	r2, r0
 800fd02:	4603      	mov	r3, r0
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d100      	bne.n	800fd0a <memset+0xa>
 800fd08:	4770      	bx	lr
 800fd0a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd0e:	e7f9      	b.n	800fd04 <memset+0x4>

0800fd10 <__cvt>:
 800fd10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd14:	ec55 4b10 	vmov	r4, r5, d0
 800fd18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fd1a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fd1e:	2d00      	cmp	r5, #0
 800fd20:	460e      	mov	r6, r1
 800fd22:	4691      	mov	r9, r2
 800fd24:	4619      	mov	r1, r3
 800fd26:	bfb8      	it	lt
 800fd28:	4622      	movlt	r2, r4
 800fd2a:	462b      	mov	r3, r5
 800fd2c:	f027 0720 	bic.w	r7, r7, #32
 800fd30:	bfbb      	ittet	lt
 800fd32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fd36:	461d      	movlt	r5, r3
 800fd38:	2300      	movge	r3, #0
 800fd3a:	232d      	movlt	r3, #45	; 0x2d
 800fd3c:	bfb8      	it	lt
 800fd3e:	4614      	movlt	r4, r2
 800fd40:	2f46      	cmp	r7, #70	; 0x46
 800fd42:	700b      	strb	r3, [r1, #0]
 800fd44:	d004      	beq.n	800fd50 <__cvt+0x40>
 800fd46:	2f45      	cmp	r7, #69	; 0x45
 800fd48:	d100      	bne.n	800fd4c <__cvt+0x3c>
 800fd4a:	3601      	adds	r6, #1
 800fd4c:	2102      	movs	r1, #2
 800fd4e:	e000      	b.n	800fd52 <__cvt+0x42>
 800fd50:	2103      	movs	r1, #3
 800fd52:	ab03      	add	r3, sp, #12
 800fd54:	9301      	str	r3, [sp, #4]
 800fd56:	ab02      	add	r3, sp, #8
 800fd58:	9300      	str	r3, [sp, #0]
 800fd5a:	4632      	mov	r2, r6
 800fd5c:	4653      	mov	r3, sl
 800fd5e:	ec45 4b10 	vmov	d0, r4, r5
 800fd62:	f000 fcdd 	bl	8010720 <_dtoa_r>
 800fd66:	2f47      	cmp	r7, #71	; 0x47
 800fd68:	4680      	mov	r8, r0
 800fd6a:	d102      	bne.n	800fd72 <__cvt+0x62>
 800fd6c:	f019 0f01 	tst.w	r9, #1
 800fd70:	d026      	beq.n	800fdc0 <__cvt+0xb0>
 800fd72:	2f46      	cmp	r7, #70	; 0x46
 800fd74:	eb08 0906 	add.w	r9, r8, r6
 800fd78:	d111      	bne.n	800fd9e <__cvt+0x8e>
 800fd7a:	f898 3000 	ldrb.w	r3, [r8]
 800fd7e:	2b30      	cmp	r3, #48	; 0x30
 800fd80:	d10a      	bne.n	800fd98 <__cvt+0x88>
 800fd82:	2200      	movs	r2, #0
 800fd84:	2300      	movs	r3, #0
 800fd86:	4620      	mov	r0, r4
 800fd88:	4629      	mov	r1, r5
 800fd8a:	f7f6 ff5d 	bl	8006c48 <__aeabi_dcmpeq>
 800fd8e:	b918      	cbnz	r0, 800fd98 <__cvt+0x88>
 800fd90:	f1c6 0601 	rsb	r6, r6, #1
 800fd94:	f8ca 6000 	str.w	r6, [sl]
 800fd98:	f8da 3000 	ldr.w	r3, [sl]
 800fd9c:	4499      	add	r9, r3
 800fd9e:	2200      	movs	r2, #0
 800fda0:	2300      	movs	r3, #0
 800fda2:	4620      	mov	r0, r4
 800fda4:	4629      	mov	r1, r5
 800fda6:	f7f6 ff4f 	bl	8006c48 <__aeabi_dcmpeq>
 800fdaa:	b938      	cbnz	r0, 800fdbc <__cvt+0xac>
 800fdac:	2230      	movs	r2, #48	; 0x30
 800fdae:	9b03      	ldr	r3, [sp, #12]
 800fdb0:	454b      	cmp	r3, r9
 800fdb2:	d205      	bcs.n	800fdc0 <__cvt+0xb0>
 800fdb4:	1c59      	adds	r1, r3, #1
 800fdb6:	9103      	str	r1, [sp, #12]
 800fdb8:	701a      	strb	r2, [r3, #0]
 800fdba:	e7f8      	b.n	800fdae <__cvt+0x9e>
 800fdbc:	f8cd 900c 	str.w	r9, [sp, #12]
 800fdc0:	9b03      	ldr	r3, [sp, #12]
 800fdc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fdc4:	eba3 0308 	sub.w	r3, r3, r8
 800fdc8:	4640      	mov	r0, r8
 800fdca:	6013      	str	r3, [r2, #0]
 800fdcc:	b004      	add	sp, #16
 800fdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fdd2 <__exponent>:
 800fdd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdd4:	2900      	cmp	r1, #0
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	bfba      	itte	lt
 800fdda:	4249      	neglt	r1, r1
 800fddc:	232d      	movlt	r3, #45	; 0x2d
 800fdde:	232b      	movge	r3, #43	; 0x2b
 800fde0:	2909      	cmp	r1, #9
 800fde2:	f804 2b02 	strb.w	r2, [r4], #2
 800fde6:	7043      	strb	r3, [r0, #1]
 800fde8:	dd20      	ble.n	800fe2c <__exponent+0x5a>
 800fdea:	f10d 0307 	add.w	r3, sp, #7
 800fdee:	461f      	mov	r7, r3
 800fdf0:	260a      	movs	r6, #10
 800fdf2:	fb91 f5f6 	sdiv	r5, r1, r6
 800fdf6:	fb06 1115 	mls	r1, r6, r5, r1
 800fdfa:	3130      	adds	r1, #48	; 0x30
 800fdfc:	2d09      	cmp	r5, #9
 800fdfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fe02:	f103 32ff 	add.w	r2, r3, #4294967295
 800fe06:	4629      	mov	r1, r5
 800fe08:	dc09      	bgt.n	800fe1e <__exponent+0x4c>
 800fe0a:	3130      	adds	r1, #48	; 0x30
 800fe0c:	3b02      	subs	r3, #2
 800fe0e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fe12:	42bb      	cmp	r3, r7
 800fe14:	4622      	mov	r2, r4
 800fe16:	d304      	bcc.n	800fe22 <__exponent+0x50>
 800fe18:	1a10      	subs	r0, r2, r0
 800fe1a:	b003      	add	sp, #12
 800fe1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe1e:	4613      	mov	r3, r2
 800fe20:	e7e7      	b.n	800fdf2 <__exponent+0x20>
 800fe22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe26:	f804 2b01 	strb.w	r2, [r4], #1
 800fe2a:	e7f2      	b.n	800fe12 <__exponent+0x40>
 800fe2c:	2330      	movs	r3, #48	; 0x30
 800fe2e:	4419      	add	r1, r3
 800fe30:	7083      	strb	r3, [r0, #2]
 800fe32:	1d02      	adds	r2, r0, #4
 800fe34:	70c1      	strb	r1, [r0, #3]
 800fe36:	e7ef      	b.n	800fe18 <__exponent+0x46>

0800fe38 <_printf_float>:
 800fe38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe3c:	b08d      	sub	sp, #52	; 0x34
 800fe3e:	460c      	mov	r4, r1
 800fe40:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800fe44:	4616      	mov	r6, r2
 800fe46:	461f      	mov	r7, r3
 800fe48:	4605      	mov	r5, r0
 800fe4a:	f001 fa21 	bl	8011290 <_localeconv_r>
 800fe4e:	6803      	ldr	r3, [r0, #0]
 800fe50:	9304      	str	r3, [sp, #16]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7f6 fa79 	bl	800634a <strlen>
 800fe58:	2300      	movs	r3, #0
 800fe5a:	930a      	str	r3, [sp, #40]	; 0x28
 800fe5c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe60:	9005      	str	r0, [sp, #20]
 800fe62:	3307      	adds	r3, #7
 800fe64:	f023 0307 	bic.w	r3, r3, #7
 800fe68:	f103 0208 	add.w	r2, r3, #8
 800fe6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fe70:	f8d4 b000 	ldr.w	fp, [r4]
 800fe74:	f8c8 2000 	str.w	r2, [r8]
 800fe78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fe80:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fe84:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fe88:	9307      	str	r3, [sp, #28]
 800fe8a:	f8cd 8018 	str.w	r8, [sp, #24]
 800fe8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe92:	4ba7      	ldr	r3, [pc, #668]	; (8010130 <_printf_float+0x2f8>)
 800fe94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe98:	f7f6 ff08 	bl	8006cac <__aeabi_dcmpun>
 800fe9c:	bb70      	cbnz	r0, 800fefc <_printf_float+0xc4>
 800fe9e:	f04f 32ff 	mov.w	r2, #4294967295
 800fea2:	4ba3      	ldr	r3, [pc, #652]	; (8010130 <_printf_float+0x2f8>)
 800fea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fea8:	f7f6 fee2 	bl	8006c70 <__aeabi_dcmple>
 800feac:	bb30      	cbnz	r0, 800fefc <_printf_float+0xc4>
 800feae:	2200      	movs	r2, #0
 800feb0:	2300      	movs	r3, #0
 800feb2:	4640      	mov	r0, r8
 800feb4:	4649      	mov	r1, r9
 800feb6:	f7f6 fed1 	bl	8006c5c <__aeabi_dcmplt>
 800feba:	b110      	cbz	r0, 800fec2 <_printf_float+0x8a>
 800febc:	232d      	movs	r3, #45	; 0x2d
 800febe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fec2:	4a9c      	ldr	r2, [pc, #624]	; (8010134 <_printf_float+0x2fc>)
 800fec4:	4b9c      	ldr	r3, [pc, #624]	; (8010138 <_printf_float+0x300>)
 800fec6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800feca:	bf8c      	ite	hi
 800fecc:	4690      	movhi	r8, r2
 800fece:	4698      	movls	r8, r3
 800fed0:	2303      	movs	r3, #3
 800fed2:	f02b 0204 	bic.w	r2, fp, #4
 800fed6:	6123      	str	r3, [r4, #16]
 800fed8:	6022      	str	r2, [r4, #0]
 800feda:	f04f 0900 	mov.w	r9, #0
 800fede:	9700      	str	r7, [sp, #0]
 800fee0:	4633      	mov	r3, r6
 800fee2:	aa0b      	add	r2, sp, #44	; 0x2c
 800fee4:	4621      	mov	r1, r4
 800fee6:	4628      	mov	r0, r5
 800fee8:	f000 f9e6 	bl	80102b8 <_printf_common>
 800feec:	3001      	adds	r0, #1
 800feee:	f040 808d 	bne.w	801000c <_printf_float+0x1d4>
 800fef2:	f04f 30ff 	mov.w	r0, #4294967295
 800fef6:	b00d      	add	sp, #52	; 0x34
 800fef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefc:	4642      	mov	r2, r8
 800fefe:	464b      	mov	r3, r9
 800ff00:	4640      	mov	r0, r8
 800ff02:	4649      	mov	r1, r9
 800ff04:	f7f6 fed2 	bl	8006cac <__aeabi_dcmpun>
 800ff08:	b110      	cbz	r0, 800ff10 <_printf_float+0xd8>
 800ff0a:	4a8c      	ldr	r2, [pc, #560]	; (801013c <_printf_float+0x304>)
 800ff0c:	4b8c      	ldr	r3, [pc, #560]	; (8010140 <_printf_float+0x308>)
 800ff0e:	e7da      	b.n	800fec6 <_printf_float+0x8e>
 800ff10:	6861      	ldr	r1, [r4, #4]
 800ff12:	1c4b      	adds	r3, r1, #1
 800ff14:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ff18:	a80a      	add	r0, sp, #40	; 0x28
 800ff1a:	d13e      	bne.n	800ff9a <_printf_float+0x162>
 800ff1c:	2306      	movs	r3, #6
 800ff1e:	6063      	str	r3, [r4, #4]
 800ff20:	2300      	movs	r3, #0
 800ff22:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ff26:	ab09      	add	r3, sp, #36	; 0x24
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	ec49 8b10 	vmov	d0, r8, r9
 800ff2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ff32:	6022      	str	r2, [r4, #0]
 800ff34:	f8cd a004 	str.w	sl, [sp, #4]
 800ff38:	6861      	ldr	r1, [r4, #4]
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	f7ff fee8 	bl	800fd10 <__cvt>
 800ff40:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ff44:	2b47      	cmp	r3, #71	; 0x47
 800ff46:	4680      	mov	r8, r0
 800ff48:	d109      	bne.n	800ff5e <_printf_float+0x126>
 800ff4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff4c:	1cd8      	adds	r0, r3, #3
 800ff4e:	db02      	blt.n	800ff56 <_printf_float+0x11e>
 800ff50:	6862      	ldr	r2, [r4, #4]
 800ff52:	4293      	cmp	r3, r2
 800ff54:	dd47      	ble.n	800ffe6 <_printf_float+0x1ae>
 800ff56:	f1aa 0a02 	sub.w	sl, sl, #2
 800ff5a:	fa5f fa8a 	uxtb.w	sl, sl
 800ff5e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ff62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff64:	d824      	bhi.n	800ffb0 <_printf_float+0x178>
 800ff66:	3901      	subs	r1, #1
 800ff68:	4652      	mov	r2, sl
 800ff6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ff6e:	9109      	str	r1, [sp, #36]	; 0x24
 800ff70:	f7ff ff2f 	bl	800fdd2 <__exponent>
 800ff74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff76:	1813      	adds	r3, r2, r0
 800ff78:	2a01      	cmp	r2, #1
 800ff7a:	4681      	mov	r9, r0
 800ff7c:	6123      	str	r3, [r4, #16]
 800ff7e:	dc02      	bgt.n	800ff86 <_printf_float+0x14e>
 800ff80:	6822      	ldr	r2, [r4, #0]
 800ff82:	07d1      	lsls	r1, r2, #31
 800ff84:	d501      	bpl.n	800ff8a <_printf_float+0x152>
 800ff86:	3301      	adds	r3, #1
 800ff88:	6123      	str	r3, [r4, #16]
 800ff8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d0a5      	beq.n	800fede <_printf_float+0xa6>
 800ff92:	232d      	movs	r3, #45	; 0x2d
 800ff94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff98:	e7a1      	b.n	800fede <_printf_float+0xa6>
 800ff9a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ff9e:	f000 8177 	beq.w	8010290 <_printf_float+0x458>
 800ffa2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ffa6:	d1bb      	bne.n	800ff20 <_printf_float+0xe8>
 800ffa8:	2900      	cmp	r1, #0
 800ffaa:	d1b9      	bne.n	800ff20 <_printf_float+0xe8>
 800ffac:	2301      	movs	r3, #1
 800ffae:	e7b6      	b.n	800ff1e <_printf_float+0xe6>
 800ffb0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ffb4:	d119      	bne.n	800ffea <_printf_float+0x1b2>
 800ffb6:	2900      	cmp	r1, #0
 800ffb8:	6863      	ldr	r3, [r4, #4]
 800ffba:	dd0c      	ble.n	800ffd6 <_printf_float+0x19e>
 800ffbc:	6121      	str	r1, [r4, #16]
 800ffbe:	b913      	cbnz	r3, 800ffc6 <_printf_float+0x18e>
 800ffc0:	6822      	ldr	r2, [r4, #0]
 800ffc2:	07d2      	lsls	r2, r2, #31
 800ffc4:	d502      	bpl.n	800ffcc <_printf_float+0x194>
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	440b      	add	r3, r1
 800ffca:	6123      	str	r3, [r4, #16]
 800ffcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffce:	65a3      	str	r3, [r4, #88]	; 0x58
 800ffd0:	f04f 0900 	mov.w	r9, #0
 800ffd4:	e7d9      	b.n	800ff8a <_printf_float+0x152>
 800ffd6:	b913      	cbnz	r3, 800ffde <_printf_float+0x1a6>
 800ffd8:	6822      	ldr	r2, [r4, #0]
 800ffda:	07d0      	lsls	r0, r2, #31
 800ffdc:	d501      	bpl.n	800ffe2 <_printf_float+0x1aa>
 800ffde:	3302      	adds	r3, #2
 800ffe0:	e7f3      	b.n	800ffca <_printf_float+0x192>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e7f1      	b.n	800ffca <_printf_float+0x192>
 800ffe6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ffea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ffee:	4293      	cmp	r3, r2
 800fff0:	db05      	blt.n	800fffe <_printf_float+0x1c6>
 800fff2:	6822      	ldr	r2, [r4, #0]
 800fff4:	6123      	str	r3, [r4, #16]
 800fff6:	07d1      	lsls	r1, r2, #31
 800fff8:	d5e8      	bpl.n	800ffcc <_printf_float+0x194>
 800fffa:	3301      	adds	r3, #1
 800fffc:	e7e5      	b.n	800ffca <_printf_float+0x192>
 800fffe:	2b00      	cmp	r3, #0
 8010000:	bfd4      	ite	le
 8010002:	f1c3 0302 	rsble	r3, r3, #2
 8010006:	2301      	movgt	r3, #1
 8010008:	4413      	add	r3, r2
 801000a:	e7de      	b.n	800ffca <_printf_float+0x192>
 801000c:	6823      	ldr	r3, [r4, #0]
 801000e:	055a      	lsls	r2, r3, #21
 8010010:	d407      	bmi.n	8010022 <_printf_float+0x1ea>
 8010012:	6923      	ldr	r3, [r4, #16]
 8010014:	4642      	mov	r2, r8
 8010016:	4631      	mov	r1, r6
 8010018:	4628      	mov	r0, r5
 801001a:	47b8      	blx	r7
 801001c:	3001      	adds	r0, #1
 801001e:	d12b      	bne.n	8010078 <_printf_float+0x240>
 8010020:	e767      	b.n	800fef2 <_printf_float+0xba>
 8010022:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010026:	f240 80dc 	bls.w	80101e2 <_printf_float+0x3aa>
 801002a:	2200      	movs	r2, #0
 801002c:	2300      	movs	r3, #0
 801002e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010032:	f7f6 fe09 	bl	8006c48 <__aeabi_dcmpeq>
 8010036:	2800      	cmp	r0, #0
 8010038:	d033      	beq.n	80100a2 <_printf_float+0x26a>
 801003a:	2301      	movs	r3, #1
 801003c:	4a41      	ldr	r2, [pc, #260]	; (8010144 <_printf_float+0x30c>)
 801003e:	4631      	mov	r1, r6
 8010040:	4628      	mov	r0, r5
 8010042:	47b8      	blx	r7
 8010044:	3001      	adds	r0, #1
 8010046:	f43f af54 	beq.w	800fef2 <_printf_float+0xba>
 801004a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801004e:	429a      	cmp	r2, r3
 8010050:	db02      	blt.n	8010058 <_printf_float+0x220>
 8010052:	6823      	ldr	r3, [r4, #0]
 8010054:	07d8      	lsls	r0, r3, #31
 8010056:	d50f      	bpl.n	8010078 <_printf_float+0x240>
 8010058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801005c:	4631      	mov	r1, r6
 801005e:	4628      	mov	r0, r5
 8010060:	47b8      	blx	r7
 8010062:	3001      	adds	r0, #1
 8010064:	f43f af45 	beq.w	800fef2 <_printf_float+0xba>
 8010068:	f04f 0800 	mov.w	r8, #0
 801006c:	f104 091a 	add.w	r9, r4, #26
 8010070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010072:	3b01      	subs	r3, #1
 8010074:	4543      	cmp	r3, r8
 8010076:	dc09      	bgt.n	801008c <_printf_float+0x254>
 8010078:	6823      	ldr	r3, [r4, #0]
 801007a:	079b      	lsls	r3, r3, #30
 801007c:	f100 8103 	bmi.w	8010286 <_printf_float+0x44e>
 8010080:	68e0      	ldr	r0, [r4, #12]
 8010082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010084:	4298      	cmp	r0, r3
 8010086:	bfb8      	it	lt
 8010088:	4618      	movlt	r0, r3
 801008a:	e734      	b.n	800fef6 <_printf_float+0xbe>
 801008c:	2301      	movs	r3, #1
 801008e:	464a      	mov	r2, r9
 8010090:	4631      	mov	r1, r6
 8010092:	4628      	mov	r0, r5
 8010094:	47b8      	blx	r7
 8010096:	3001      	adds	r0, #1
 8010098:	f43f af2b 	beq.w	800fef2 <_printf_float+0xba>
 801009c:	f108 0801 	add.w	r8, r8, #1
 80100a0:	e7e6      	b.n	8010070 <_printf_float+0x238>
 80100a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	dc2b      	bgt.n	8010100 <_printf_float+0x2c8>
 80100a8:	2301      	movs	r3, #1
 80100aa:	4a26      	ldr	r2, [pc, #152]	; (8010144 <_printf_float+0x30c>)
 80100ac:	4631      	mov	r1, r6
 80100ae:	4628      	mov	r0, r5
 80100b0:	47b8      	blx	r7
 80100b2:	3001      	adds	r0, #1
 80100b4:	f43f af1d 	beq.w	800fef2 <_printf_float+0xba>
 80100b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100ba:	b923      	cbnz	r3, 80100c6 <_printf_float+0x28e>
 80100bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100be:	b913      	cbnz	r3, 80100c6 <_printf_float+0x28e>
 80100c0:	6823      	ldr	r3, [r4, #0]
 80100c2:	07d9      	lsls	r1, r3, #31
 80100c4:	d5d8      	bpl.n	8010078 <_printf_float+0x240>
 80100c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100ca:	4631      	mov	r1, r6
 80100cc:	4628      	mov	r0, r5
 80100ce:	47b8      	blx	r7
 80100d0:	3001      	adds	r0, #1
 80100d2:	f43f af0e 	beq.w	800fef2 <_printf_float+0xba>
 80100d6:	f04f 0900 	mov.w	r9, #0
 80100da:	f104 0a1a 	add.w	sl, r4, #26
 80100de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100e0:	425b      	negs	r3, r3
 80100e2:	454b      	cmp	r3, r9
 80100e4:	dc01      	bgt.n	80100ea <_printf_float+0x2b2>
 80100e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100e8:	e794      	b.n	8010014 <_printf_float+0x1dc>
 80100ea:	2301      	movs	r3, #1
 80100ec:	4652      	mov	r2, sl
 80100ee:	4631      	mov	r1, r6
 80100f0:	4628      	mov	r0, r5
 80100f2:	47b8      	blx	r7
 80100f4:	3001      	adds	r0, #1
 80100f6:	f43f aefc 	beq.w	800fef2 <_printf_float+0xba>
 80100fa:	f109 0901 	add.w	r9, r9, #1
 80100fe:	e7ee      	b.n	80100de <_printf_float+0x2a6>
 8010100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010102:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010104:	429a      	cmp	r2, r3
 8010106:	bfa8      	it	ge
 8010108:	461a      	movge	r2, r3
 801010a:	2a00      	cmp	r2, #0
 801010c:	4691      	mov	r9, r2
 801010e:	dd07      	ble.n	8010120 <_printf_float+0x2e8>
 8010110:	4613      	mov	r3, r2
 8010112:	4631      	mov	r1, r6
 8010114:	4642      	mov	r2, r8
 8010116:	4628      	mov	r0, r5
 8010118:	47b8      	blx	r7
 801011a:	3001      	adds	r0, #1
 801011c:	f43f aee9 	beq.w	800fef2 <_printf_float+0xba>
 8010120:	f104 031a 	add.w	r3, r4, #26
 8010124:	f04f 0b00 	mov.w	fp, #0
 8010128:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801012c:	9306      	str	r3, [sp, #24]
 801012e:	e015      	b.n	801015c <_printf_float+0x324>
 8010130:	7fefffff 	.word	0x7fefffff
 8010134:	0806e0bf 	.word	0x0806e0bf
 8010138:	0806de34 	.word	0x0806de34
 801013c:	0806de3c 	.word	0x0806de3c
 8010140:	0806de38 	.word	0x0806de38
 8010144:	0806de40 	.word	0x0806de40
 8010148:	2301      	movs	r3, #1
 801014a:	9a06      	ldr	r2, [sp, #24]
 801014c:	4631      	mov	r1, r6
 801014e:	4628      	mov	r0, r5
 8010150:	47b8      	blx	r7
 8010152:	3001      	adds	r0, #1
 8010154:	f43f aecd 	beq.w	800fef2 <_printf_float+0xba>
 8010158:	f10b 0b01 	add.w	fp, fp, #1
 801015c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010160:	ebaa 0309 	sub.w	r3, sl, r9
 8010164:	455b      	cmp	r3, fp
 8010166:	dcef      	bgt.n	8010148 <_printf_float+0x310>
 8010168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801016c:	429a      	cmp	r2, r3
 801016e:	44d0      	add	r8, sl
 8010170:	db15      	blt.n	801019e <_printf_float+0x366>
 8010172:	6823      	ldr	r3, [r4, #0]
 8010174:	07da      	lsls	r2, r3, #31
 8010176:	d412      	bmi.n	801019e <_printf_float+0x366>
 8010178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801017a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801017c:	eba3 020a 	sub.w	r2, r3, sl
 8010180:	eba3 0a01 	sub.w	sl, r3, r1
 8010184:	4592      	cmp	sl, r2
 8010186:	bfa8      	it	ge
 8010188:	4692      	movge	sl, r2
 801018a:	f1ba 0f00 	cmp.w	sl, #0
 801018e:	dc0e      	bgt.n	80101ae <_printf_float+0x376>
 8010190:	f04f 0800 	mov.w	r8, #0
 8010194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010198:	f104 091a 	add.w	r9, r4, #26
 801019c:	e019      	b.n	80101d2 <_printf_float+0x39a>
 801019e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101a2:	4631      	mov	r1, r6
 80101a4:	4628      	mov	r0, r5
 80101a6:	47b8      	blx	r7
 80101a8:	3001      	adds	r0, #1
 80101aa:	d1e5      	bne.n	8010178 <_printf_float+0x340>
 80101ac:	e6a1      	b.n	800fef2 <_printf_float+0xba>
 80101ae:	4653      	mov	r3, sl
 80101b0:	4642      	mov	r2, r8
 80101b2:	4631      	mov	r1, r6
 80101b4:	4628      	mov	r0, r5
 80101b6:	47b8      	blx	r7
 80101b8:	3001      	adds	r0, #1
 80101ba:	d1e9      	bne.n	8010190 <_printf_float+0x358>
 80101bc:	e699      	b.n	800fef2 <_printf_float+0xba>
 80101be:	2301      	movs	r3, #1
 80101c0:	464a      	mov	r2, r9
 80101c2:	4631      	mov	r1, r6
 80101c4:	4628      	mov	r0, r5
 80101c6:	47b8      	blx	r7
 80101c8:	3001      	adds	r0, #1
 80101ca:	f43f ae92 	beq.w	800fef2 <_printf_float+0xba>
 80101ce:	f108 0801 	add.w	r8, r8, #1
 80101d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101d6:	1a9b      	subs	r3, r3, r2
 80101d8:	eba3 030a 	sub.w	r3, r3, sl
 80101dc:	4543      	cmp	r3, r8
 80101de:	dcee      	bgt.n	80101be <_printf_float+0x386>
 80101e0:	e74a      	b.n	8010078 <_printf_float+0x240>
 80101e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101e4:	2a01      	cmp	r2, #1
 80101e6:	dc01      	bgt.n	80101ec <_printf_float+0x3b4>
 80101e8:	07db      	lsls	r3, r3, #31
 80101ea:	d53a      	bpl.n	8010262 <_printf_float+0x42a>
 80101ec:	2301      	movs	r3, #1
 80101ee:	4642      	mov	r2, r8
 80101f0:	4631      	mov	r1, r6
 80101f2:	4628      	mov	r0, r5
 80101f4:	47b8      	blx	r7
 80101f6:	3001      	adds	r0, #1
 80101f8:	f43f ae7b 	beq.w	800fef2 <_printf_float+0xba>
 80101fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010200:	4631      	mov	r1, r6
 8010202:	4628      	mov	r0, r5
 8010204:	47b8      	blx	r7
 8010206:	3001      	adds	r0, #1
 8010208:	f108 0801 	add.w	r8, r8, #1
 801020c:	f43f ae71 	beq.w	800fef2 <_printf_float+0xba>
 8010210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010212:	2200      	movs	r2, #0
 8010214:	f103 3aff 	add.w	sl, r3, #4294967295
 8010218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801021c:	2300      	movs	r3, #0
 801021e:	f7f6 fd13 	bl	8006c48 <__aeabi_dcmpeq>
 8010222:	b9c8      	cbnz	r0, 8010258 <_printf_float+0x420>
 8010224:	4653      	mov	r3, sl
 8010226:	4642      	mov	r2, r8
 8010228:	4631      	mov	r1, r6
 801022a:	4628      	mov	r0, r5
 801022c:	47b8      	blx	r7
 801022e:	3001      	adds	r0, #1
 8010230:	d10e      	bne.n	8010250 <_printf_float+0x418>
 8010232:	e65e      	b.n	800fef2 <_printf_float+0xba>
 8010234:	2301      	movs	r3, #1
 8010236:	4652      	mov	r2, sl
 8010238:	4631      	mov	r1, r6
 801023a:	4628      	mov	r0, r5
 801023c:	47b8      	blx	r7
 801023e:	3001      	adds	r0, #1
 8010240:	f43f ae57 	beq.w	800fef2 <_printf_float+0xba>
 8010244:	f108 0801 	add.w	r8, r8, #1
 8010248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801024a:	3b01      	subs	r3, #1
 801024c:	4543      	cmp	r3, r8
 801024e:	dcf1      	bgt.n	8010234 <_printf_float+0x3fc>
 8010250:	464b      	mov	r3, r9
 8010252:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010256:	e6de      	b.n	8010016 <_printf_float+0x1de>
 8010258:	f04f 0800 	mov.w	r8, #0
 801025c:	f104 0a1a 	add.w	sl, r4, #26
 8010260:	e7f2      	b.n	8010248 <_printf_float+0x410>
 8010262:	2301      	movs	r3, #1
 8010264:	e7df      	b.n	8010226 <_printf_float+0x3ee>
 8010266:	2301      	movs	r3, #1
 8010268:	464a      	mov	r2, r9
 801026a:	4631      	mov	r1, r6
 801026c:	4628      	mov	r0, r5
 801026e:	47b8      	blx	r7
 8010270:	3001      	adds	r0, #1
 8010272:	f43f ae3e 	beq.w	800fef2 <_printf_float+0xba>
 8010276:	f108 0801 	add.w	r8, r8, #1
 801027a:	68e3      	ldr	r3, [r4, #12]
 801027c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801027e:	1a9b      	subs	r3, r3, r2
 8010280:	4543      	cmp	r3, r8
 8010282:	dcf0      	bgt.n	8010266 <_printf_float+0x42e>
 8010284:	e6fc      	b.n	8010080 <_printf_float+0x248>
 8010286:	f04f 0800 	mov.w	r8, #0
 801028a:	f104 0919 	add.w	r9, r4, #25
 801028e:	e7f4      	b.n	801027a <_printf_float+0x442>
 8010290:	2900      	cmp	r1, #0
 8010292:	f43f ae8b 	beq.w	800ffac <_printf_float+0x174>
 8010296:	2300      	movs	r3, #0
 8010298:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801029c:	ab09      	add	r3, sp, #36	; 0x24
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	ec49 8b10 	vmov	d0, r8, r9
 80102a4:	6022      	str	r2, [r4, #0]
 80102a6:	f8cd a004 	str.w	sl, [sp, #4]
 80102aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80102ae:	4628      	mov	r0, r5
 80102b0:	f7ff fd2e 	bl	800fd10 <__cvt>
 80102b4:	4680      	mov	r8, r0
 80102b6:	e648      	b.n	800ff4a <_printf_float+0x112>

080102b8 <_printf_common>:
 80102b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102bc:	4691      	mov	r9, r2
 80102be:	461f      	mov	r7, r3
 80102c0:	688a      	ldr	r2, [r1, #8]
 80102c2:	690b      	ldr	r3, [r1, #16]
 80102c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80102c8:	4293      	cmp	r3, r2
 80102ca:	bfb8      	it	lt
 80102cc:	4613      	movlt	r3, r2
 80102ce:	f8c9 3000 	str.w	r3, [r9]
 80102d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80102d6:	4606      	mov	r6, r0
 80102d8:	460c      	mov	r4, r1
 80102da:	b112      	cbz	r2, 80102e2 <_printf_common+0x2a>
 80102dc:	3301      	adds	r3, #1
 80102de:	f8c9 3000 	str.w	r3, [r9]
 80102e2:	6823      	ldr	r3, [r4, #0]
 80102e4:	0699      	lsls	r1, r3, #26
 80102e6:	bf42      	ittt	mi
 80102e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80102ec:	3302      	addmi	r3, #2
 80102ee:	f8c9 3000 	strmi.w	r3, [r9]
 80102f2:	6825      	ldr	r5, [r4, #0]
 80102f4:	f015 0506 	ands.w	r5, r5, #6
 80102f8:	d107      	bne.n	801030a <_printf_common+0x52>
 80102fa:	f104 0a19 	add.w	sl, r4, #25
 80102fe:	68e3      	ldr	r3, [r4, #12]
 8010300:	f8d9 2000 	ldr.w	r2, [r9]
 8010304:	1a9b      	subs	r3, r3, r2
 8010306:	42ab      	cmp	r3, r5
 8010308:	dc28      	bgt.n	801035c <_printf_common+0xa4>
 801030a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801030e:	6822      	ldr	r2, [r4, #0]
 8010310:	3300      	adds	r3, #0
 8010312:	bf18      	it	ne
 8010314:	2301      	movne	r3, #1
 8010316:	0692      	lsls	r2, r2, #26
 8010318:	d42d      	bmi.n	8010376 <_printf_common+0xbe>
 801031a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801031e:	4639      	mov	r1, r7
 8010320:	4630      	mov	r0, r6
 8010322:	47c0      	blx	r8
 8010324:	3001      	adds	r0, #1
 8010326:	d020      	beq.n	801036a <_printf_common+0xb2>
 8010328:	6823      	ldr	r3, [r4, #0]
 801032a:	68e5      	ldr	r5, [r4, #12]
 801032c:	f8d9 2000 	ldr.w	r2, [r9]
 8010330:	f003 0306 	and.w	r3, r3, #6
 8010334:	2b04      	cmp	r3, #4
 8010336:	bf08      	it	eq
 8010338:	1aad      	subeq	r5, r5, r2
 801033a:	68a3      	ldr	r3, [r4, #8]
 801033c:	6922      	ldr	r2, [r4, #16]
 801033e:	bf0c      	ite	eq
 8010340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010344:	2500      	movne	r5, #0
 8010346:	4293      	cmp	r3, r2
 8010348:	bfc4      	itt	gt
 801034a:	1a9b      	subgt	r3, r3, r2
 801034c:	18ed      	addgt	r5, r5, r3
 801034e:	f04f 0900 	mov.w	r9, #0
 8010352:	341a      	adds	r4, #26
 8010354:	454d      	cmp	r5, r9
 8010356:	d11a      	bne.n	801038e <_printf_common+0xd6>
 8010358:	2000      	movs	r0, #0
 801035a:	e008      	b.n	801036e <_printf_common+0xb6>
 801035c:	2301      	movs	r3, #1
 801035e:	4652      	mov	r2, sl
 8010360:	4639      	mov	r1, r7
 8010362:	4630      	mov	r0, r6
 8010364:	47c0      	blx	r8
 8010366:	3001      	adds	r0, #1
 8010368:	d103      	bne.n	8010372 <_printf_common+0xba>
 801036a:	f04f 30ff 	mov.w	r0, #4294967295
 801036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010372:	3501      	adds	r5, #1
 8010374:	e7c3      	b.n	80102fe <_printf_common+0x46>
 8010376:	18e1      	adds	r1, r4, r3
 8010378:	1c5a      	adds	r2, r3, #1
 801037a:	2030      	movs	r0, #48	; 0x30
 801037c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010380:	4422      	add	r2, r4
 8010382:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010386:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801038a:	3302      	adds	r3, #2
 801038c:	e7c5      	b.n	801031a <_printf_common+0x62>
 801038e:	2301      	movs	r3, #1
 8010390:	4622      	mov	r2, r4
 8010392:	4639      	mov	r1, r7
 8010394:	4630      	mov	r0, r6
 8010396:	47c0      	blx	r8
 8010398:	3001      	adds	r0, #1
 801039a:	d0e6      	beq.n	801036a <_printf_common+0xb2>
 801039c:	f109 0901 	add.w	r9, r9, #1
 80103a0:	e7d8      	b.n	8010354 <_printf_common+0x9c>
	...

080103a4 <_printf_i>:
 80103a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80103ac:	460c      	mov	r4, r1
 80103ae:	7e09      	ldrb	r1, [r1, #24]
 80103b0:	b085      	sub	sp, #20
 80103b2:	296e      	cmp	r1, #110	; 0x6e
 80103b4:	4617      	mov	r7, r2
 80103b6:	4606      	mov	r6, r0
 80103b8:	4698      	mov	r8, r3
 80103ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80103bc:	f000 80b3 	beq.w	8010526 <_printf_i+0x182>
 80103c0:	d822      	bhi.n	8010408 <_printf_i+0x64>
 80103c2:	2963      	cmp	r1, #99	; 0x63
 80103c4:	d036      	beq.n	8010434 <_printf_i+0x90>
 80103c6:	d80a      	bhi.n	80103de <_printf_i+0x3a>
 80103c8:	2900      	cmp	r1, #0
 80103ca:	f000 80b9 	beq.w	8010540 <_printf_i+0x19c>
 80103ce:	2958      	cmp	r1, #88	; 0x58
 80103d0:	f000 8083 	beq.w	80104da <_printf_i+0x136>
 80103d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80103dc:	e032      	b.n	8010444 <_printf_i+0xa0>
 80103de:	2964      	cmp	r1, #100	; 0x64
 80103e0:	d001      	beq.n	80103e6 <_printf_i+0x42>
 80103e2:	2969      	cmp	r1, #105	; 0x69
 80103e4:	d1f6      	bne.n	80103d4 <_printf_i+0x30>
 80103e6:	6820      	ldr	r0, [r4, #0]
 80103e8:	6813      	ldr	r3, [r2, #0]
 80103ea:	0605      	lsls	r5, r0, #24
 80103ec:	f103 0104 	add.w	r1, r3, #4
 80103f0:	d52a      	bpl.n	8010448 <_printf_i+0xa4>
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	6011      	str	r1, [r2, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	da03      	bge.n	8010402 <_printf_i+0x5e>
 80103fa:	222d      	movs	r2, #45	; 0x2d
 80103fc:	425b      	negs	r3, r3
 80103fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010402:	486f      	ldr	r0, [pc, #444]	; (80105c0 <_printf_i+0x21c>)
 8010404:	220a      	movs	r2, #10
 8010406:	e039      	b.n	801047c <_printf_i+0xd8>
 8010408:	2973      	cmp	r1, #115	; 0x73
 801040a:	f000 809d 	beq.w	8010548 <_printf_i+0x1a4>
 801040e:	d808      	bhi.n	8010422 <_printf_i+0x7e>
 8010410:	296f      	cmp	r1, #111	; 0x6f
 8010412:	d020      	beq.n	8010456 <_printf_i+0xb2>
 8010414:	2970      	cmp	r1, #112	; 0x70
 8010416:	d1dd      	bne.n	80103d4 <_printf_i+0x30>
 8010418:	6823      	ldr	r3, [r4, #0]
 801041a:	f043 0320 	orr.w	r3, r3, #32
 801041e:	6023      	str	r3, [r4, #0]
 8010420:	e003      	b.n	801042a <_printf_i+0x86>
 8010422:	2975      	cmp	r1, #117	; 0x75
 8010424:	d017      	beq.n	8010456 <_printf_i+0xb2>
 8010426:	2978      	cmp	r1, #120	; 0x78
 8010428:	d1d4      	bne.n	80103d4 <_printf_i+0x30>
 801042a:	2378      	movs	r3, #120	; 0x78
 801042c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010430:	4864      	ldr	r0, [pc, #400]	; (80105c4 <_printf_i+0x220>)
 8010432:	e055      	b.n	80104e0 <_printf_i+0x13c>
 8010434:	6813      	ldr	r3, [r2, #0]
 8010436:	1d19      	adds	r1, r3, #4
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	6011      	str	r1, [r2, #0]
 801043c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010444:	2301      	movs	r3, #1
 8010446:	e08c      	b.n	8010562 <_printf_i+0x1be>
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	6011      	str	r1, [r2, #0]
 801044c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010450:	bf18      	it	ne
 8010452:	b21b      	sxthne	r3, r3
 8010454:	e7cf      	b.n	80103f6 <_printf_i+0x52>
 8010456:	6813      	ldr	r3, [r2, #0]
 8010458:	6825      	ldr	r5, [r4, #0]
 801045a:	1d18      	adds	r0, r3, #4
 801045c:	6010      	str	r0, [r2, #0]
 801045e:	0628      	lsls	r0, r5, #24
 8010460:	d501      	bpl.n	8010466 <_printf_i+0xc2>
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	e002      	b.n	801046c <_printf_i+0xc8>
 8010466:	0668      	lsls	r0, r5, #25
 8010468:	d5fb      	bpl.n	8010462 <_printf_i+0xbe>
 801046a:	881b      	ldrh	r3, [r3, #0]
 801046c:	4854      	ldr	r0, [pc, #336]	; (80105c0 <_printf_i+0x21c>)
 801046e:	296f      	cmp	r1, #111	; 0x6f
 8010470:	bf14      	ite	ne
 8010472:	220a      	movne	r2, #10
 8010474:	2208      	moveq	r2, #8
 8010476:	2100      	movs	r1, #0
 8010478:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801047c:	6865      	ldr	r5, [r4, #4]
 801047e:	60a5      	str	r5, [r4, #8]
 8010480:	2d00      	cmp	r5, #0
 8010482:	f2c0 8095 	blt.w	80105b0 <_printf_i+0x20c>
 8010486:	6821      	ldr	r1, [r4, #0]
 8010488:	f021 0104 	bic.w	r1, r1, #4
 801048c:	6021      	str	r1, [r4, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d13d      	bne.n	801050e <_printf_i+0x16a>
 8010492:	2d00      	cmp	r5, #0
 8010494:	f040 808e 	bne.w	80105b4 <_printf_i+0x210>
 8010498:	4665      	mov	r5, ip
 801049a:	2a08      	cmp	r2, #8
 801049c:	d10b      	bne.n	80104b6 <_printf_i+0x112>
 801049e:	6823      	ldr	r3, [r4, #0]
 80104a0:	07db      	lsls	r3, r3, #31
 80104a2:	d508      	bpl.n	80104b6 <_printf_i+0x112>
 80104a4:	6923      	ldr	r3, [r4, #16]
 80104a6:	6862      	ldr	r2, [r4, #4]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	bfde      	ittt	le
 80104ac:	2330      	movle	r3, #48	; 0x30
 80104ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80104b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80104b6:	ebac 0305 	sub.w	r3, ip, r5
 80104ba:	6123      	str	r3, [r4, #16]
 80104bc:	f8cd 8000 	str.w	r8, [sp]
 80104c0:	463b      	mov	r3, r7
 80104c2:	aa03      	add	r2, sp, #12
 80104c4:	4621      	mov	r1, r4
 80104c6:	4630      	mov	r0, r6
 80104c8:	f7ff fef6 	bl	80102b8 <_printf_common>
 80104cc:	3001      	adds	r0, #1
 80104ce:	d14d      	bne.n	801056c <_printf_i+0x1c8>
 80104d0:	f04f 30ff 	mov.w	r0, #4294967295
 80104d4:	b005      	add	sp, #20
 80104d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104da:	4839      	ldr	r0, [pc, #228]	; (80105c0 <_printf_i+0x21c>)
 80104dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80104e0:	6813      	ldr	r3, [r2, #0]
 80104e2:	6821      	ldr	r1, [r4, #0]
 80104e4:	1d1d      	adds	r5, r3, #4
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	6015      	str	r5, [r2, #0]
 80104ea:	060a      	lsls	r2, r1, #24
 80104ec:	d50b      	bpl.n	8010506 <_printf_i+0x162>
 80104ee:	07ca      	lsls	r2, r1, #31
 80104f0:	bf44      	itt	mi
 80104f2:	f041 0120 	orrmi.w	r1, r1, #32
 80104f6:	6021      	strmi	r1, [r4, #0]
 80104f8:	b91b      	cbnz	r3, 8010502 <_printf_i+0x15e>
 80104fa:	6822      	ldr	r2, [r4, #0]
 80104fc:	f022 0220 	bic.w	r2, r2, #32
 8010500:	6022      	str	r2, [r4, #0]
 8010502:	2210      	movs	r2, #16
 8010504:	e7b7      	b.n	8010476 <_printf_i+0xd2>
 8010506:	064d      	lsls	r5, r1, #25
 8010508:	bf48      	it	mi
 801050a:	b29b      	uxthmi	r3, r3
 801050c:	e7ef      	b.n	80104ee <_printf_i+0x14a>
 801050e:	4665      	mov	r5, ip
 8010510:	fbb3 f1f2 	udiv	r1, r3, r2
 8010514:	fb02 3311 	mls	r3, r2, r1, r3
 8010518:	5cc3      	ldrb	r3, [r0, r3]
 801051a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801051e:	460b      	mov	r3, r1
 8010520:	2900      	cmp	r1, #0
 8010522:	d1f5      	bne.n	8010510 <_printf_i+0x16c>
 8010524:	e7b9      	b.n	801049a <_printf_i+0xf6>
 8010526:	6813      	ldr	r3, [r2, #0]
 8010528:	6825      	ldr	r5, [r4, #0]
 801052a:	6961      	ldr	r1, [r4, #20]
 801052c:	1d18      	adds	r0, r3, #4
 801052e:	6010      	str	r0, [r2, #0]
 8010530:	0628      	lsls	r0, r5, #24
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	d501      	bpl.n	801053a <_printf_i+0x196>
 8010536:	6019      	str	r1, [r3, #0]
 8010538:	e002      	b.n	8010540 <_printf_i+0x19c>
 801053a:	066a      	lsls	r2, r5, #25
 801053c:	d5fb      	bpl.n	8010536 <_printf_i+0x192>
 801053e:	8019      	strh	r1, [r3, #0]
 8010540:	2300      	movs	r3, #0
 8010542:	6123      	str	r3, [r4, #16]
 8010544:	4665      	mov	r5, ip
 8010546:	e7b9      	b.n	80104bc <_printf_i+0x118>
 8010548:	6813      	ldr	r3, [r2, #0]
 801054a:	1d19      	adds	r1, r3, #4
 801054c:	6011      	str	r1, [r2, #0]
 801054e:	681d      	ldr	r5, [r3, #0]
 8010550:	6862      	ldr	r2, [r4, #4]
 8010552:	2100      	movs	r1, #0
 8010554:	4628      	mov	r0, r5
 8010556:	f7f5 ff03 	bl	8006360 <memchr>
 801055a:	b108      	cbz	r0, 8010560 <_printf_i+0x1bc>
 801055c:	1b40      	subs	r0, r0, r5
 801055e:	6060      	str	r0, [r4, #4]
 8010560:	6863      	ldr	r3, [r4, #4]
 8010562:	6123      	str	r3, [r4, #16]
 8010564:	2300      	movs	r3, #0
 8010566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801056a:	e7a7      	b.n	80104bc <_printf_i+0x118>
 801056c:	6923      	ldr	r3, [r4, #16]
 801056e:	462a      	mov	r2, r5
 8010570:	4639      	mov	r1, r7
 8010572:	4630      	mov	r0, r6
 8010574:	47c0      	blx	r8
 8010576:	3001      	adds	r0, #1
 8010578:	d0aa      	beq.n	80104d0 <_printf_i+0x12c>
 801057a:	6823      	ldr	r3, [r4, #0]
 801057c:	079b      	lsls	r3, r3, #30
 801057e:	d413      	bmi.n	80105a8 <_printf_i+0x204>
 8010580:	68e0      	ldr	r0, [r4, #12]
 8010582:	9b03      	ldr	r3, [sp, #12]
 8010584:	4298      	cmp	r0, r3
 8010586:	bfb8      	it	lt
 8010588:	4618      	movlt	r0, r3
 801058a:	e7a3      	b.n	80104d4 <_printf_i+0x130>
 801058c:	2301      	movs	r3, #1
 801058e:	464a      	mov	r2, r9
 8010590:	4639      	mov	r1, r7
 8010592:	4630      	mov	r0, r6
 8010594:	47c0      	blx	r8
 8010596:	3001      	adds	r0, #1
 8010598:	d09a      	beq.n	80104d0 <_printf_i+0x12c>
 801059a:	3501      	adds	r5, #1
 801059c:	68e3      	ldr	r3, [r4, #12]
 801059e:	9a03      	ldr	r2, [sp, #12]
 80105a0:	1a9b      	subs	r3, r3, r2
 80105a2:	42ab      	cmp	r3, r5
 80105a4:	dcf2      	bgt.n	801058c <_printf_i+0x1e8>
 80105a6:	e7eb      	b.n	8010580 <_printf_i+0x1dc>
 80105a8:	2500      	movs	r5, #0
 80105aa:	f104 0919 	add.w	r9, r4, #25
 80105ae:	e7f5      	b.n	801059c <_printf_i+0x1f8>
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d1ac      	bne.n	801050e <_printf_i+0x16a>
 80105b4:	7803      	ldrb	r3, [r0, #0]
 80105b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105be:	e76c      	b.n	801049a <_printf_i+0xf6>
 80105c0:	0806de42 	.word	0x0806de42
 80105c4:	0806de53 	.word	0x0806de53

080105c8 <siprintf>:
 80105c8:	b40e      	push	{r1, r2, r3}
 80105ca:	b500      	push	{lr}
 80105cc:	b09c      	sub	sp, #112	; 0x70
 80105ce:	ab1d      	add	r3, sp, #116	; 0x74
 80105d0:	9002      	str	r0, [sp, #8]
 80105d2:	9006      	str	r0, [sp, #24]
 80105d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105d8:	4809      	ldr	r0, [pc, #36]	; (8010600 <siprintf+0x38>)
 80105da:	9107      	str	r1, [sp, #28]
 80105dc:	9104      	str	r1, [sp, #16]
 80105de:	4909      	ldr	r1, [pc, #36]	; (8010604 <siprintf+0x3c>)
 80105e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80105e4:	9105      	str	r1, [sp, #20]
 80105e6:	6800      	ldr	r0, [r0, #0]
 80105e8:	9301      	str	r3, [sp, #4]
 80105ea:	a902      	add	r1, sp, #8
 80105ec:	f001 fa52 	bl	8011a94 <_svfiprintf_r>
 80105f0:	9b02      	ldr	r3, [sp, #8]
 80105f2:	2200      	movs	r2, #0
 80105f4:	701a      	strb	r2, [r3, #0]
 80105f6:	b01c      	add	sp, #112	; 0x70
 80105f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80105fc:	b003      	add	sp, #12
 80105fe:	4770      	bx	lr
 8010600:	200008ac 	.word	0x200008ac
 8010604:	ffff0208 	.word	0xffff0208

08010608 <quorem>:
 8010608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	6903      	ldr	r3, [r0, #16]
 801060e:	690c      	ldr	r4, [r1, #16]
 8010610:	42a3      	cmp	r3, r4
 8010612:	4680      	mov	r8, r0
 8010614:	f2c0 8082 	blt.w	801071c <quorem+0x114>
 8010618:	3c01      	subs	r4, #1
 801061a:	f101 0714 	add.w	r7, r1, #20
 801061e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010622:	f100 0614 	add.w	r6, r0, #20
 8010626:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801062a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801062e:	eb06 030c 	add.w	r3, r6, ip
 8010632:	3501      	adds	r5, #1
 8010634:	eb07 090c 	add.w	r9, r7, ip
 8010638:	9301      	str	r3, [sp, #4]
 801063a:	fbb0 f5f5 	udiv	r5, r0, r5
 801063e:	b395      	cbz	r5, 80106a6 <quorem+0x9e>
 8010640:	f04f 0a00 	mov.w	sl, #0
 8010644:	4638      	mov	r0, r7
 8010646:	46b6      	mov	lr, r6
 8010648:	46d3      	mov	fp, sl
 801064a:	f850 2b04 	ldr.w	r2, [r0], #4
 801064e:	b293      	uxth	r3, r2
 8010650:	fb05 a303 	mla	r3, r5, r3, sl
 8010654:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010658:	b29b      	uxth	r3, r3
 801065a:	ebab 0303 	sub.w	r3, fp, r3
 801065e:	0c12      	lsrs	r2, r2, #16
 8010660:	f8de b000 	ldr.w	fp, [lr]
 8010664:	fb05 a202 	mla	r2, r5, r2, sl
 8010668:	fa13 f38b 	uxtah	r3, r3, fp
 801066c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010670:	fa1f fb82 	uxth.w	fp, r2
 8010674:	f8de 2000 	ldr.w	r2, [lr]
 8010678:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801067c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010680:	b29b      	uxth	r3, r3
 8010682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010686:	4581      	cmp	r9, r0
 8010688:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801068c:	f84e 3b04 	str.w	r3, [lr], #4
 8010690:	d2db      	bcs.n	801064a <quorem+0x42>
 8010692:	f856 300c 	ldr.w	r3, [r6, ip]
 8010696:	b933      	cbnz	r3, 80106a6 <quorem+0x9e>
 8010698:	9b01      	ldr	r3, [sp, #4]
 801069a:	3b04      	subs	r3, #4
 801069c:	429e      	cmp	r6, r3
 801069e:	461a      	mov	r2, r3
 80106a0:	d330      	bcc.n	8010704 <quorem+0xfc>
 80106a2:	f8c8 4010 	str.w	r4, [r8, #16]
 80106a6:	4640      	mov	r0, r8
 80106a8:	f001 f81e 	bl	80116e8 <__mcmp>
 80106ac:	2800      	cmp	r0, #0
 80106ae:	db25      	blt.n	80106fc <quorem+0xf4>
 80106b0:	3501      	adds	r5, #1
 80106b2:	4630      	mov	r0, r6
 80106b4:	f04f 0c00 	mov.w	ip, #0
 80106b8:	f857 2b04 	ldr.w	r2, [r7], #4
 80106bc:	f8d0 e000 	ldr.w	lr, [r0]
 80106c0:	b293      	uxth	r3, r2
 80106c2:	ebac 0303 	sub.w	r3, ip, r3
 80106c6:	0c12      	lsrs	r2, r2, #16
 80106c8:	fa13 f38e 	uxtah	r3, r3, lr
 80106cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80106d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106d4:	b29b      	uxth	r3, r3
 80106d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106da:	45b9      	cmp	r9, r7
 80106dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80106e0:	f840 3b04 	str.w	r3, [r0], #4
 80106e4:	d2e8      	bcs.n	80106b8 <quorem+0xb0>
 80106e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80106ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80106ee:	b92a      	cbnz	r2, 80106fc <quorem+0xf4>
 80106f0:	3b04      	subs	r3, #4
 80106f2:	429e      	cmp	r6, r3
 80106f4:	461a      	mov	r2, r3
 80106f6:	d30b      	bcc.n	8010710 <quorem+0x108>
 80106f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80106fc:	4628      	mov	r0, r5
 80106fe:	b003      	add	sp, #12
 8010700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010704:	6812      	ldr	r2, [r2, #0]
 8010706:	3b04      	subs	r3, #4
 8010708:	2a00      	cmp	r2, #0
 801070a:	d1ca      	bne.n	80106a2 <quorem+0x9a>
 801070c:	3c01      	subs	r4, #1
 801070e:	e7c5      	b.n	801069c <quorem+0x94>
 8010710:	6812      	ldr	r2, [r2, #0]
 8010712:	3b04      	subs	r3, #4
 8010714:	2a00      	cmp	r2, #0
 8010716:	d1ef      	bne.n	80106f8 <quorem+0xf0>
 8010718:	3c01      	subs	r4, #1
 801071a:	e7ea      	b.n	80106f2 <quorem+0xea>
 801071c:	2000      	movs	r0, #0
 801071e:	e7ee      	b.n	80106fe <quorem+0xf6>

08010720 <_dtoa_r>:
 8010720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010724:	ec57 6b10 	vmov	r6, r7, d0
 8010728:	b097      	sub	sp, #92	; 0x5c
 801072a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801072c:	9106      	str	r1, [sp, #24]
 801072e:	4604      	mov	r4, r0
 8010730:	920b      	str	r2, [sp, #44]	; 0x2c
 8010732:	9312      	str	r3, [sp, #72]	; 0x48
 8010734:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010738:	e9cd 6700 	strd	r6, r7, [sp]
 801073c:	b93d      	cbnz	r5, 801074e <_dtoa_r+0x2e>
 801073e:	2010      	movs	r0, #16
 8010740:	f000 fdb4 	bl	80112ac <malloc>
 8010744:	6260      	str	r0, [r4, #36]	; 0x24
 8010746:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801074a:	6005      	str	r5, [r0, #0]
 801074c:	60c5      	str	r5, [r0, #12]
 801074e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010750:	6819      	ldr	r1, [r3, #0]
 8010752:	b151      	cbz	r1, 801076a <_dtoa_r+0x4a>
 8010754:	685a      	ldr	r2, [r3, #4]
 8010756:	604a      	str	r2, [r1, #4]
 8010758:	2301      	movs	r3, #1
 801075a:	4093      	lsls	r3, r2
 801075c:	608b      	str	r3, [r1, #8]
 801075e:	4620      	mov	r0, r4
 8010760:	f000 fde0 	bl	8011324 <_Bfree>
 8010764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010766:	2200      	movs	r2, #0
 8010768:	601a      	str	r2, [r3, #0]
 801076a:	1e3b      	subs	r3, r7, #0
 801076c:	bfbb      	ittet	lt
 801076e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010772:	9301      	strlt	r3, [sp, #4]
 8010774:	2300      	movge	r3, #0
 8010776:	2201      	movlt	r2, #1
 8010778:	bfac      	ite	ge
 801077a:	f8c8 3000 	strge.w	r3, [r8]
 801077e:	f8c8 2000 	strlt.w	r2, [r8]
 8010782:	4baf      	ldr	r3, [pc, #700]	; (8010a40 <_dtoa_r+0x320>)
 8010784:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010788:	ea33 0308 	bics.w	r3, r3, r8
 801078c:	d114      	bne.n	80107b8 <_dtoa_r+0x98>
 801078e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010790:	f242 730f 	movw	r3, #9999	; 0x270f
 8010794:	6013      	str	r3, [r2, #0]
 8010796:	9b00      	ldr	r3, [sp, #0]
 8010798:	b923      	cbnz	r3, 80107a4 <_dtoa_r+0x84>
 801079a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801079e:	2800      	cmp	r0, #0
 80107a0:	f000 8542 	beq.w	8011228 <_dtoa_r+0xb08>
 80107a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010a54 <_dtoa_r+0x334>
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	f000 8544 	beq.w	8011238 <_dtoa_r+0xb18>
 80107b0:	f10b 0303 	add.w	r3, fp, #3
 80107b4:	f000 bd3e 	b.w	8011234 <_dtoa_r+0xb14>
 80107b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80107bc:	2200      	movs	r2, #0
 80107be:	2300      	movs	r3, #0
 80107c0:	4630      	mov	r0, r6
 80107c2:	4639      	mov	r1, r7
 80107c4:	f7f6 fa40 	bl	8006c48 <__aeabi_dcmpeq>
 80107c8:	4681      	mov	r9, r0
 80107ca:	b168      	cbz	r0, 80107e8 <_dtoa_r+0xc8>
 80107cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80107ce:	2301      	movs	r3, #1
 80107d0:	6013      	str	r3, [r2, #0]
 80107d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f000 8524 	beq.w	8011222 <_dtoa_r+0xb02>
 80107da:	4b9a      	ldr	r3, [pc, #616]	; (8010a44 <_dtoa_r+0x324>)
 80107dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107de:	f103 3bff 	add.w	fp, r3, #4294967295
 80107e2:	6013      	str	r3, [r2, #0]
 80107e4:	f000 bd28 	b.w	8011238 <_dtoa_r+0xb18>
 80107e8:	aa14      	add	r2, sp, #80	; 0x50
 80107ea:	a915      	add	r1, sp, #84	; 0x54
 80107ec:	ec47 6b10 	vmov	d0, r6, r7
 80107f0:	4620      	mov	r0, r4
 80107f2:	f000 fff0 	bl	80117d6 <__d2b>
 80107f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80107fa:	9004      	str	r0, [sp, #16]
 80107fc:	2d00      	cmp	r5, #0
 80107fe:	d07c      	beq.n	80108fa <_dtoa_r+0x1da>
 8010800:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010804:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010808:	46b2      	mov	sl, r6
 801080a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801080e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010812:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010816:	2200      	movs	r2, #0
 8010818:	4b8b      	ldr	r3, [pc, #556]	; (8010a48 <_dtoa_r+0x328>)
 801081a:	4650      	mov	r0, sl
 801081c:	4659      	mov	r1, fp
 801081e:	f7f5 fdf3 	bl	8006408 <__aeabi_dsub>
 8010822:	a381      	add	r3, pc, #516	; (adr r3, 8010a28 <_dtoa_r+0x308>)
 8010824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010828:	f7f5 ffa6 	bl	8006778 <__aeabi_dmul>
 801082c:	a380      	add	r3, pc, #512	; (adr r3, 8010a30 <_dtoa_r+0x310>)
 801082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010832:	f7f5 fdeb 	bl	800640c <__adddf3>
 8010836:	4606      	mov	r6, r0
 8010838:	4628      	mov	r0, r5
 801083a:	460f      	mov	r7, r1
 801083c:	f7f5 ff32 	bl	80066a4 <__aeabi_i2d>
 8010840:	a37d      	add	r3, pc, #500	; (adr r3, 8010a38 <_dtoa_r+0x318>)
 8010842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010846:	f7f5 ff97 	bl	8006778 <__aeabi_dmul>
 801084a:	4602      	mov	r2, r0
 801084c:	460b      	mov	r3, r1
 801084e:	4630      	mov	r0, r6
 8010850:	4639      	mov	r1, r7
 8010852:	f7f5 fddb 	bl	800640c <__adddf3>
 8010856:	4606      	mov	r6, r0
 8010858:	460f      	mov	r7, r1
 801085a:	f7f6 fa3d 	bl	8006cd8 <__aeabi_d2iz>
 801085e:	2200      	movs	r2, #0
 8010860:	4682      	mov	sl, r0
 8010862:	2300      	movs	r3, #0
 8010864:	4630      	mov	r0, r6
 8010866:	4639      	mov	r1, r7
 8010868:	f7f6 f9f8 	bl	8006c5c <__aeabi_dcmplt>
 801086c:	b148      	cbz	r0, 8010882 <_dtoa_r+0x162>
 801086e:	4650      	mov	r0, sl
 8010870:	f7f5 ff18 	bl	80066a4 <__aeabi_i2d>
 8010874:	4632      	mov	r2, r6
 8010876:	463b      	mov	r3, r7
 8010878:	f7f6 f9e6 	bl	8006c48 <__aeabi_dcmpeq>
 801087c:	b908      	cbnz	r0, 8010882 <_dtoa_r+0x162>
 801087e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010882:	f1ba 0f16 	cmp.w	sl, #22
 8010886:	d859      	bhi.n	801093c <_dtoa_r+0x21c>
 8010888:	4970      	ldr	r1, [pc, #448]	; (8010a4c <_dtoa_r+0x32c>)
 801088a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801088e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010896:	f7f6 f9ff 	bl	8006c98 <__aeabi_dcmpgt>
 801089a:	2800      	cmp	r0, #0
 801089c:	d050      	beq.n	8010940 <_dtoa_r+0x220>
 801089e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108a2:	2300      	movs	r3, #0
 80108a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80108a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108a8:	1b5d      	subs	r5, r3, r5
 80108aa:	f1b5 0801 	subs.w	r8, r5, #1
 80108ae:	bf49      	itett	mi
 80108b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80108b4:	2300      	movpl	r3, #0
 80108b6:	9305      	strmi	r3, [sp, #20]
 80108b8:	f04f 0800 	movmi.w	r8, #0
 80108bc:	bf58      	it	pl
 80108be:	9305      	strpl	r3, [sp, #20]
 80108c0:	f1ba 0f00 	cmp.w	sl, #0
 80108c4:	db3e      	blt.n	8010944 <_dtoa_r+0x224>
 80108c6:	2300      	movs	r3, #0
 80108c8:	44d0      	add	r8, sl
 80108ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80108ce:	9307      	str	r3, [sp, #28]
 80108d0:	9b06      	ldr	r3, [sp, #24]
 80108d2:	2b09      	cmp	r3, #9
 80108d4:	f200 8090 	bhi.w	80109f8 <_dtoa_r+0x2d8>
 80108d8:	2b05      	cmp	r3, #5
 80108da:	bfc4      	itt	gt
 80108dc:	3b04      	subgt	r3, #4
 80108de:	9306      	strgt	r3, [sp, #24]
 80108e0:	9b06      	ldr	r3, [sp, #24]
 80108e2:	f1a3 0302 	sub.w	r3, r3, #2
 80108e6:	bfcc      	ite	gt
 80108e8:	2500      	movgt	r5, #0
 80108ea:	2501      	movle	r5, #1
 80108ec:	2b03      	cmp	r3, #3
 80108ee:	f200 808f 	bhi.w	8010a10 <_dtoa_r+0x2f0>
 80108f2:	e8df f003 	tbb	[pc, r3]
 80108f6:	7f7d      	.short	0x7f7d
 80108f8:	7131      	.short	0x7131
 80108fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80108fe:	441d      	add	r5, r3
 8010900:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010904:	2820      	cmp	r0, #32
 8010906:	dd13      	ble.n	8010930 <_dtoa_r+0x210>
 8010908:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801090c:	9b00      	ldr	r3, [sp, #0]
 801090e:	fa08 f800 	lsl.w	r8, r8, r0
 8010912:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010916:	fa23 f000 	lsr.w	r0, r3, r0
 801091a:	ea48 0000 	orr.w	r0, r8, r0
 801091e:	f7f5 feb1 	bl	8006684 <__aeabi_ui2d>
 8010922:	2301      	movs	r3, #1
 8010924:	4682      	mov	sl, r0
 8010926:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801092a:	3d01      	subs	r5, #1
 801092c:	9313      	str	r3, [sp, #76]	; 0x4c
 801092e:	e772      	b.n	8010816 <_dtoa_r+0xf6>
 8010930:	9b00      	ldr	r3, [sp, #0]
 8010932:	f1c0 0020 	rsb	r0, r0, #32
 8010936:	fa03 f000 	lsl.w	r0, r3, r0
 801093a:	e7f0      	b.n	801091e <_dtoa_r+0x1fe>
 801093c:	2301      	movs	r3, #1
 801093e:	e7b1      	b.n	80108a4 <_dtoa_r+0x184>
 8010940:	900f      	str	r0, [sp, #60]	; 0x3c
 8010942:	e7b0      	b.n	80108a6 <_dtoa_r+0x186>
 8010944:	9b05      	ldr	r3, [sp, #20]
 8010946:	eba3 030a 	sub.w	r3, r3, sl
 801094a:	9305      	str	r3, [sp, #20]
 801094c:	f1ca 0300 	rsb	r3, sl, #0
 8010950:	9307      	str	r3, [sp, #28]
 8010952:	2300      	movs	r3, #0
 8010954:	930e      	str	r3, [sp, #56]	; 0x38
 8010956:	e7bb      	b.n	80108d0 <_dtoa_r+0x1b0>
 8010958:	2301      	movs	r3, #1
 801095a:	930a      	str	r3, [sp, #40]	; 0x28
 801095c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801095e:	2b00      	cmp	r3, #0
 8010960:	dd59      	ble.n	8010a16 <_dtoa_r+0x2f6>
 8010962:	9302      	str	r3, [sp, #8]
 8010964:	4699      	mov	r9, r3
 8010966:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010968:	2200      	movs	r2, #0
 801096a:	6072      	str	r2, [r6, #4]
 801096c:	2204      	movs	r2, #4
 801096e:	f102 0014 	add.w	r0, r2, #20
 8010972:	4298      	cmp	r0, r3
 8010974:	6871      	ldr	r1, [r6, #4]
 8010976:	d953      	bls.n	8010a20 <_dtoa_r+0x300>
 8010978:	4620      	mov	r0, r4
 801097a:	f000 fc9f 	bl	80112bc <_Balloc>
 801097e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010980:	6030      	str	r0, [r6, #0]
 8010982:	f1b9 0f0e 	cmp.w	r9, #14
 8010986:	f8d3 b000 	ldr.w	fp, [r3]
 801098a:	f200 80e6 	bhi.w	8010b5a <_dtoa_r+0x43a>
 801098e:	2d00      	cmp	r5, #0
 8010990:	f000 80e3 	beq.w	8010b5a <_dtoa_r+0x43a>
 8010994:	ed9d 7b00 	vldr	d7, [sp]
 8010998:	f1ba 0f00 	cmp.w	sl, #0
 801099c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80109a0:	dd74      	ble.n	8010a8c <_dtoa_r+0x36c>
 80109a2:	4a2a      	ldr	r2, [pc, #168]	; (8010a4c <_dtoa_r+0x32c>)
 80109a4:	f00a 030f 	and.w	r3, sl, #15
 80109a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80109ac:	ed93 7b00 	vldr	d7, [r3]
 80109b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80109b4:	06f0      	lsls	r0, r6, #27
 80109b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80109ba:	d565      	bpl.n	8010a88 <_dtoa_r+0x368>
 80109bc:	4b24      	ldr	r3, [pc, #144]	; (8010a50 <_dtoa_r+0x330>)
 80109be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80109c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80109c6:	f7f6 f801 	bl	80069cc <__aeabi_ddiv>
 80109ca:	e9cd 0100 	strd	r0, r1, [sp]
 80109ce:	f006 060f 	and.w	r6, r6, #15
 80109d2:	2503      	movs	r5, #3
 80109d4:	4f1e      	ldr	r7, [pc, #120]	; (8010a50 <_dtoa_r+0x330>)
 80109d6:	e04c      	b.n	8010a72 <_dtoa_r+0x352>
 80109d8:	2301      	movs	r3, #1
 80109da:	930a      	str	r3, [sp, #40]	; 0x28
 80109dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109de:	4453      	add	r3, sl
 80109e0:	f103 0901 	add.w	r9, r3, #1
 80109e4:	9302      	str	r3, [sp, #8]
 80109e6:	464b      	mov	r3, r9
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	bfb8      	it	lt
 80109ec:	2301      	movlt	r3, #1
 80109ee:	e7ba      	b.n	8010966 <_dtoa_r+0x246>
 80109f0:	2300      	movs	r3, #0
 80109f2:	e7b2      	b.n	801095a <_dtoa_r+0x23a>
 80109f4:	2300      	movs	r3, #0
 80109f6:	e7f0      	b.n	80109da <_dtoa_r+0x2ba>
 80109f8:	2501      	movs	r5, #1
 80109fa:	2300      	movs	r3, #0
 80109fc:	9306      	str	r3, [sp, #24]
 80109fe:	950a      	str	r5, [sp, #40]	; 0x28
 8010a00:	f04f 33ff 	mov.w	r3, #4294967295
 8010a04:	9302      	str	r3, [sp, #8]
 8010a06:	4699      	mov	r9, r3
 8010a08:	2200      	movs	r2, #0
 8010a0a:	2312      	movs	r3, #18
 8010a0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8010a0e:	e7aa      	b.n	8010966 <_dtoa_r+0x246>
 8010a10:	2301      	movs	r3, #1
 8010a12:	930a      	str	r3, [sp, #40]	; 0x28
 8010a14:	e7f4      	b.n	8010a00 <_dtoa_r+0x2e0>
 8010a16:	2301      	movs	r3, #1
 8010a18:	9302      	str	r3, [sp, #8]
 8010a1a:	4699      	mov	r9, r3
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	e7f5      	b.n	8010a0c <_dtoa_r+0x2ec>
 8010a20:	3101      	adds	r1, #1
 8010a22:	6071      	str	r1, [r6, #4]
 8010a24:	0052      	lsls	r2, r2, #1
 8010a26:	e7a2      	b.n	801096e <_dtoa_r+0x24e>
 8010a28:	636f4361 	.word	0x636f4361
 8010a2c:	3fd287a7 	.word	0x3fd287a7
 8010a30:	8b60c8b3 	.word	0x8b60c8b3
 8010a34:	3fc68a28 	.word	0x3fc68a28
 8010a38:	509f79fb 	.word	0x509f79fb
 8010a3c:	3fd34413 	.word	0x3fd34413
 8010a40:	7ff00000 	.word	0x7ff00000
 8010a44:	0806de41 	.word	0x0806de41
 8010a48:	3ff80000 	.word	0x3ff80000
 8010a4c:	0806dea0 	.word	0x0806dea0
 8010a50:	0806de78 	.word	0x0806de78
 8010a54:	0806de6d 	.word	0x0806de6d
 8010a58:	07f1      	lsls	r1, r6, #31
 8010a5a:	d508      	bpl.n	8010a6e <_dtoa_r+0x34e>
 8010a5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a64:	f7f5 fe88 	bl	8006778 <__aeabi_dmul>
 8010a68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010a6c:	3501      	adds	r5, #1
 8010a6e:	1076      	asrs	r6, r6, #1
 8010a70:	3708      	adds	r7, #8
 8010a72:	2e00      	cmp	r6, #0
 8010a74:	d1f0      	bne.n	8010a58 <_dtoa_r+0x338>
 8010a76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010a7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a7e:	f7f5 ffa5 	bl	80069cc <__aeabi_ddiv>
 8010a82:	e9cd 0100 	strd	r0, r1, [sp]
 8010a86:	e01a      	b.n	8010abe <_dtoa_r+0x39e>
 8010a88:	2502      	movs	r5, #2
 8010a8a:	e7a3      	b.n	80109d4 <_dtoa_r+0x2b4>
 8010a8c:	f000 80a0 	beq.w	8010bd0 <_dtoa_r+0x4b0>
 8010a90:	f1ca 0600 	rsb	r6, sl, #0
 8010a94:	4b9f      	ldr	r3, [pc, #636]	; (8010d14 <_dtoa_r+0x5f4>)
 8010a96:	4fa0      	ldr	r7, [pc, #640]	; (8010d18 <_dtoa_r+0x5f8>)
 8010a98:	f006 020f 	and.w	r2, r6, #15
 8010a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010aa8:	f7f5 fe66 	bl	8006778 <__aeabi_dmul>
 8010aac:	e9cd 0100 	strd	r0, r1, [sp]
 8010ab0:	1136      	asrs	r6, r6, #4
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	2502      	movs	r5, #2
 8010ab6:	2e00      	cmp	r6, #0
 8010ab8:	d17f      	bne.n	8010bba <_dtoa_r+0x49a>
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d1e1      	bne.n	8010a82 <_dtoa_r+0x362>
 8010abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	f000 8087 	beq.w	8010bd4 <_dtoa_r+0x4b4>
 8010ac6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010aca:	2200      	movs	r2, #0
 8010acc:	4b93      	ldr	r3, [pc, #588]	; (8010d1c <_dtoa_r+0x5fc>)
 8010ace:	4630      	mov	r0, r6
 8010ad0:	4639      	mov	r1, r7
 8010ad2:	f7f6 f8c3 	bl	8006c5c <__aeabi_dcmplt>
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	d07c      	beq.n	8010bd4 <_dtoa_r+0x4b4>
 8010ada:	f1b9 0f00 	cmp.w	r9, #0
 8010ade:	d079      	beq.n	8010bd4 <_dtoa_r+0x4b4>
 8010ae0:	9b02      	ldr	r3, [sp, #8]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	dd35      	ble.n	8010b52 <_dtoa_r+0x432>
 8010ae6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010aea:	9308      	str	r3, [sp, #32]
 8010aec:	4639      	mov	r1, r7
 8010aee:	2200      	movs	r2, #0
 8010af0:	4b8b      	ldr	r3, [pc, #556]	; (8010d20 <_dtoa_r+0x600>)
 8010af2:	4630      	mov	r0, r6
 8010af4:	f7f5 fe40 	bl	8006778 <__aeabi_dmul>
 8010af8:	e9cd 0100 	strd	r0, r1, [sp]
 8010afc:	9f02      	ldr	r7, [sp, #8]
 8010afe:	3501      	adds	r5, #1
 8010b00:	4628      	mov	r0, r5
 8010b02:	f7f5 fdcf 	bl	80066a4 <__aeabi_i2d>
 8010b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b0a:	f7f5 fe35 	bl	8006778 <__aeabi_dmul>
 8010b0e:	2200      	movs	r2, #0
 8010b10:	4b84      	ldr	r3, [pc, #528]	; (8010d24 <_dtoa_r+0x604>)
 8010b12:	f7f5 fc7b 	bl	800640c <__adddf3>
 8010b16:	4605      	mov	r5, r0
 8010b18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010b1c:	2f00      	cmp	r7, #0
 8010b1e:	d15d      	bne.n	8010bdc <_dtoa_r+0x4bc>
 8010b20:	2200      	movs	r2, #0
 8010b22:	4b81      	ldr	r3, [pc, #516]	; (8010d28 <_dtoa_r+0x608>)
 8010b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b28:	f7f5 fc6e 	bl	8006408 <__aeabi_dsub>
 8010b2c:	462a      	mov	r2, r5
 8010b2e:	4633      	mov	r3, r6
 8010b30:	e9cd 0100 	strd	r0, r1, [sp]
 8010b34:	f7f6 f8b0 	bl	8006c98 <__aeabi_dcmpgt>
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	f040 8288 	bne.w	801104e <_dtoa_r+0x92e>
 8010b3e:	462a      	mov	r2, r5
 8010b40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b48:	f7f6 f888 	bl	8006c5c <__aeabi_dcmplt>
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	f040 827c 	bne.w	801104a <_dtoa_r+0x92a>
 8010b52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010b56:	e9cd 2300 	strd	r2, r3, [sp]
 8010b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f2c0 8150 	blt.w	8010e02 <_dtoa_r+0x6e2>
 8010b62:	f1ba 0f0e 	cmp.w	sl, #14
 8010b66:	f300 814c 	bgt.w	8010e02 <_dtoa_r+0x6e2>
 8010b6a:	4b6a      	ldr	r3, [pc, #424]	; (8010d14 <_dtoa_r+0x5f4>)
 8010b6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b70:	ed93 7b00 	vldr	d7, [r3]
 8010b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b7c:	f280 80d8 	bge.w	8010d30 <_dtoa_r+0x610>
 8010b80:	f1b9 0f00 	cmp.w	r9, #0
 8010b84:	f300 80d4 	bgt.w	8010d30 <_dtoa_r+0x610>
 8010b88:	f040 825e 	bne.w	8011048 <_dtoa_r+0x928>
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	4b66      	ldr	r3, [pc, #408]	; (8010d28 <_dtoa_r+0x608>)
 8010b90:	ec51 0b17 	vmov	r0, r1, d7
 8010b94:	f7f5 fdf0 	bl	8006778 <__aeabi_dmul>
 8010b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b9c:	f7f6 f872 	bl	8006c84 <__aeabi_dcmpge>
 8010ba0:	464f      	mov	r7, r9
 8010ba2:	464e      	mov	r6, r9
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f040 8234 	bne.w	8011012 <_dtoa_r+0x8f2>
 8010baa:	2331      	movs	r3, #49	; 0x31
 8010bac:	f10b 0501 	add.w	r5, fp, #1
 8010bb0:	f88b 3000 	strb.w	r3, [fp]
 8010bb4:	f10a 0a01 	add.w	sl, sl, #1
 8010bb8:	e22f      	b.n	801101a <_dtoa_r+0x8fa>
 8010bba:	07f2      	lsls	r2, r6, #31
 8010bbc:	d505      	bpl.n	8010bca <_dtoa_r+0x4aa>
 8010bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bc2:	f7f5 fdd9 	bl	8006778 <__aeabi_dmul>
 8010bc6:	3501      	adds	r5, #1
 8010bc8:	2301      	movs	r3, #1
 8010bca:	1076      	asrs	r6, r6, #1
 8010bcc:	3708      	adds	r7, #8
 8010bce:	e772      	b.n	8010ab6 <_dtoa_r+0x396>
 8010bd0:	2502      	movs	r5, #2
 8010bd2:	e774      	b.n	8010abe <_dtoa_r+0x39e>
 8010bd4:	f8cd a020 	str.w	sl, [sp, #32]
 8010bd8:	464f      	mov	r7, r9
 8010bda:	e791      	b.n	8010b00 <_dtoa_r+0x3e0>
 8010bdc:	4b4d      	ldr	r3, [pc, #308]	; (8010d14 <_dtoa_r+0x5f4>)
 8010bde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010be2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d047      	beq.n	8010c7c <_dtoa_r+0x55c>
 8010bec:	4602      	mov	r2, r0
 8010bee:	460b      	mov	r3, r1
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	494e      	ldr	r1, [pc, #312]	; (8010d2c <_dtoa_r+0x60c>)
 8010bf4:	f7f5 feea 	bl	80069cc <__aeabi_ddiv>
 8010bf8:	462a      	mov	r2, r5
 8010bfa:	4633      	mov	r3, r6
 8010bfc:	f7f5 fc04 	bl	8006408 <__aeabi_dsub>
 8010c00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010c04:	465d      	mov	r5, fp
 8010c06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c0a:	f7f6 f865 	bl	8006cd8 <__aeabi_d2iz>
 8010c0e:	4606      	mov	r6, r0
 8010c10:	f7f5 fd48 	bl	80066a4 <__aeabi_i2d>
 8010c14:	4602      	mov	r2, r0
 8010c16:	460b      	mov	r3, r1
 8010c18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c1c:	f7f5 fbf4 	bl	8006408 <__aeabi_dsub>
 8010c20:	3630      	adds	r6, #48	; 0x30
 8010c22:	f805 6b01 	strb.w	r6, [r5], #1
 8010c26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010c2a:	e9cd 0100 	strd	r0, r1, [sp]
 8010c2e:	f7f6 f815 	bl	8006c5c <__aeabi_dcmplt>
 8010c32:	2800      	cmp	r0, #0
 8010c34:	d163      	bne.n	8010cfe <_dtoa_r+0x5de>
 8010c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	4937      	ldr	r1, [pc, #220]	; (8010d1c <_dtoa_r+0x5fc>)
 8010c3e:	f7f5 fbe3 	bl	8006408 <__aeabi_dsub>
 8010c42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010c46:	f7f6 f809 	bl	8006c5c <__aeabi_dcmplt>
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	f040 80b7 	bne.w	8010dbe <_dtoa_r+0x69e>
 8010c50:	eba5 030b 	sub.w	r3, r5, fp
 8010c54:	429f      	cmp	r7, r3
 8010c56:	f77f af7c 	ble.w	8010b52 <_dtoa_r+0x432>
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	4b30      	ldr	r3, [pc, #192]	; (8010d20 <_dtoa_r+0x600>)
 8010c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c62:	f7f5 fd89 	bl	8006778 <__aeabi_dmul>
 8010c66:	2200      	movs	r2, #0
 8010c68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010c6c:	4b2c      	ldr	r3, [pc, #176]	; (8010d20 <_dtoa_r+0x600>)
 8010c6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c72:	f7f5 fd81 	bl	8006778 <__aeabi_dmul>
 8010c76:	e9cd 0100 	strd	r0, r1, [sp]
 8010c7a:	e7c4      	b.n	8010c06 <_dtoa_r+0x4e6>
 8010c7c:	462a      	mov	r2, r5
 8010c7e:	4633      	mov	r3, r6
 8010c80:	f7f5 fd7a 	bl	8006778 <__aeabi_dmul>
 8010c84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010c88:	eb0b 0507 	add.w	r5, fp, r7
 8010c8c:	465e      	mov	r6, fp
 8010c8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c92:	f7f6 f821 	bl	8006cd8 <__aeabi_d2iz>
 8010c96:	4607      	mov	r7, r0
 8010c98:	f7f5 fd04 	bl	80066a4 <__aeabi_i2d>
 8010c9c:	3730      	adds	r7, #48	; 0x30
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ca6:	f7f5 fbaf 	bl	8006408 <__aeabi_dsub>
 8010caa:	f806 7b01 	strb.w	r7, [r6], #1
 8010cae:	42ae      	cmp	r6, r5
 8010cb0:	e9cd 0100 	strd	r0, r1, [sp]
 8010cb4:	f04f 0200 	mov.w	r2, #0
 8010cb8:	d126      	bne.n	8010d08 <_dtoa_r+0x5e8>
 8010cba:	4b1c      	ldr	r3, [pc, #112]	; (8010d2c <_dtoa_r+0x60c>)
 8010cbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010cc0:	f7f5 fba4 	bl	800640c <__adddf3>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ccc:	f7f5 ffe4 	bl	8006c98 <__aeabi_dcmpgt>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d174      	bne.n	8010dbe <_dtoa_r+0x69e>
 8010cd4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010cd8:	2000      	movs	r0, #0
 8010cda:	4914      	ldr	r1, [pc, #80]	; (8010d2c <_dtoa_r+0x60c>)
 8010cdc:	f7f5 fb94 	bl	8006408 <__aeabi_dsub>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ce8:	f7f5 ffb8 	bl	8006c5c <__aeabi_dcmplt>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	f43f af30 	beq.w	8010b52 <_dtoa_r+0x432>
 8010cf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010cf6:	2b30      	cmp	r3, #48	; 0x30
 8010cf8:	f105 32ff 	add.w	r2, r5, #4294967295
 8010cfc:	d002      	beq.n	8010d04 <_dtoa_r+0x5e4>
 8010cfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010d02:	e04a      	b.n	8010d9a <_dtoa_r+0x67a>
 8010d04:	4615      	mov	r5, r2
 8010d06:	e7f4      	b.n	8010cf2 <_dtoa_r+0x5d2>
 8010d08:	4b05      	ldr	r3, [pc, #20]	; (8010d20 <_dtoa_r+0x600>)
 8010d0a:	f7f5 fd35 	bl	8006778 <__aeabi_dmul>
 8010d0e:	e9cd 0100 	strd	r0, r1, [sp]
 8010d12:	e7bc      	b.n	8010c8e <_dtoa_r+0x56e>
 8010d14:	0806dea0 	.word	0x0806dea0
 8010d18:	0806de78 	.word	0x0806de78
 8010d1c:	3ff00000 	.word	0x3ff00000
 8010d20:	40240000 	.word	0x40240000
 8010d24:	401c0000 	.word	0x401c0000
 8010d28:	40140000 	.word	0x40140000
 8010d2c:	3fe00000 	.word	0x3fe00000
 8010d30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010d34:	465d      	mov	r5, fp
 8010d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	4639      	mov	r1, r7
 8010d3e:	f7f5 fe45 	bl	80069cc <__aeabi_ddiv>
 8010d42:	f7f5 ffc9 	bl	8006cd8 <__aeabi_d2iz>
 8010d46:	4680      	mov	r8, r0
 8010d48:	f7f5 fcac 	bl	80066a4 <__aeabi_i2d>
 8010d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d50:	f7f5 fd12 	bl	8006778 <__aeabi_dmul>
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	4630      	mov	r0, r6
 8010d5a:	4639      	mov	r1, r7
 8010d5c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010d60:	f7f5 fb52 	bl	8006408 <__aeabi_dsub>
 8010d64:	f805 6b01 	strb.w	r6, [r5], #1
 8010d68:	eba5 060b 	sub.w	r6, r5, fp
 8010d6c:	45b1      	cmp	r9, r6
 8010d6e:	4602      	mov	r2, r0
 8010d70:	460b      	mov	r3, r1
 8010d72:	d139      	bne.n	8010de8 <_dtoa_r+0x6c8>
 8010d74:	f7f5 fb4a 	bl	800640c <__adddf3>
 8010d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d7c:	4606      	mov	r6, r0
 8010d7e:	460f      	mov	r7, r1
 8010d80:	f7f5 ff8a 	bl	8006c98 <__aeabi_dcmpgt>
 8010d84:	b9c8      	cbnz	r0, 8010dba <_dtoa_r+0x69a>
 8010d86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	4639      	mov	r1, r7
 8010d8e:	f7f5 ff5b 	bl	8006c48 <__aeabi_dcmpeq>
 8010d92:	b110      	cbz	r0, 8010d9a <_dtoa_r+0x67a>
 8010d94:	f018 0f01 	tst.w	r8, #1
 8010d98:	d10f      	bne.n	8010dba <_dtoa_r+0x69a>
 8010d9a:	9904      	ldr	r1, [sp, #16]
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f000 fac1 	bl	8011324 <_Bfree>
 8010da2:	2300      	movs	r3, #0
 8010da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010da6:	702b      	strb	r3, [r5, #0]
 8010da8:	f10a 0301 	add.w	r3, sl, #1
 8010dac:	6013      	str	r3, [r2, #0]
 8010dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	f000 8241 	beq.w	8011238 <_dtoa_r+0xb18>
 8010db6:	601d      	str	r5, [r3, #0]
 8010db8:	e23e      	b.n	8011238 <_dtoa_r+0xb18>
 8010dba:	f8cd a020 	str.w	sl, [sp, #32]
 8010dbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010dc2:	2a39      	cmp	r2, #57	; 0x39
 8010dc4:	f105 33ff 	add.w	r3, r5, #4294967295
 8010dc8:	d108      	bne.n	8010ddc <_dtoa_r+0x6bc>
 8010dca:	459b      	cmp	fp, r3
 8010dcc:	d10a      	bne.n	8010de4 <_dtoa_r+0x6c4>
 8010dce:	9b08      	ldr	r3, [sp, #32]
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	9308      	str	r3, [sp, #32]
 8010dd4:	2330      	movs	r3, #48	; 0x30
 8010dd6:	f88b 3000 	strb.w	r3, [fp]
 8010dda:	465b      	mov	r3, fp
 8010ddc:	781a      	ldrb	r2, [r3, #0]
 8010dde:	3201      	adds	r2, #1
 8010de0:	701a      	strb	r2, [r3, #0]
 8010de2:	e78c      	b.n	8010cfe <_dtoa_r+0x5de>
 8010de4:	461d      	mov	r5, r3
 8010de6:	e7ea      	b.n	8010dbe <_dtoa_r+0x69e>
 8010de8:	2200      	movs	r2, #0
 8010dea:	4b9b      	ldr	r3, [pc, #620]	; (8011058 <_dtoa_r+0x938>)
 8010dec:	f7f5 fcc4 	bl	8006778 <__aeabi_dmul>
 8010df0:	2200      	movs	r2, #0
 8010df2:	2300      	movs	r3, #0
 8010df4:	4606      	mov	r6, r0
 8010df6:	460f      	mov	r7, r1
 8010df8:	f7f5 ff26 	bl	8006c48 <__aeabi_dcmpeq>
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	d09a      	beq.n	8010d36 <_dtoa_r+0x616>
 8010e00:	e7cb      	b.n	8010d9a <_dtoa_r+0x67a>
 8010e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e04:	2a00      	cmp	r2, #0
 8010e06:	f000 808b 	beq.w	8010f20 <_dtoa_r+0x800>
 8010e0a:	9a06      	ldr	r2, [sp, #24]
 8010e0c:	2a01      	cmp	r2, #1
 8010e0e:	dc6e      	bgt.n	8010eee <_dtoa_r+0x7ce>
 8010e10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e12:	2a00      	cmp	r2, #0
 8010e14:	d067      	beq.n	8010ee6 <_dtoa_r+0x7c6>
 8010e16:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e1a:	9f07      	ldr	r7, [sp, #28]
 8010e1c:	9d05      	ldr	r5, [sp, #20]
 8010e1e:	9a05      	ldr	r2, [sp, #20]
 8010e20:	2101      	movs	r1, #1
 8010e22:	441a      	add	r2, r3
 8010e24:	4620      	mov	r0, r4
 8010e26:	9205      	str	r2, [sp, #20]
 8010e28:	4498      	add	r8, r3
 8010e2a:	f000 fb1b 	bl	8011464 <__i2b>
 8010e2e:	4606      	mov	r6, r0
 8010e30:	2d00      	cmp	r5, #0
 8010e32:	dd0c      	ble.n	8010e4e <_dtoa_r+0x72e>
 8010e34:	f1b8 0f00 	cmp.w	r8, #0
 8010e38:	dd09      	ble.n	8010e4e <_dtoa_r+0x72e>
 8010e3a:	4545      	cmp	r5, r8
 8010e3c:	9a05      	ldr	r2, [sp, #20]
 8010e3e:	462b      	mov	r3, r5
 8010e40:	bfa8      	it	ge
 8010e42:	4643      	movge	r3, r8
 8010e44:	1ad2      	subs	r2, r2, r3
 8010e46:	9205      	str	r2, [sp, #20]
 8010e48:	1aed      	subs	r5, r5, r3
 8010e4a:	eba8 0803 	sub.w	r8, r8, r3
 8010e4e:	9b07      	ldr	r3, [sp, #28]
 8010e50:	b1eb      	cbz	r3, 8010e8e <_dtoa_r+0x76e>
 8010e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d067      	beq.n	8010f28 <_dtoa_r+0x808>
 8010e58:	b18f      	cbz	r7, 8010e7e <_dtoa_r+0x75e>
 8010e5a:	4631      	mov	r1, r6
 8010e5c:	463a      	mov	r2, r7
 8010e5e:	4620      	mov	r0, r4
 8010e60:	f000 fba0 	bl	80115a4 <__pow5mult>
 8010e64:	9a04      	ldr	r2, [sp, #16]
 8010e66:	4601      	mov	r1, r0
 8010e68:	4606      	mov	r6, r0
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f000 fb03 	bl	8011476 <__multiply>
 8010e70:	9904      	ldr	r1, [sp, #16]
 8010e72:	9008      	str	r0, [sp, #32]
 8010e74:	4620      	mov	r0, r4
 8010e76:	f000 fa55 	bl	8011324 <_Bfree>
 8010e7a:	9b08      	ldr	r3, [sp, #32]
 8010e7c:	9304      	str	r3, [sp, #16]
 8010e7e:	9b07      	ldr	r3, [sp, #28]
 8010e80:	1bda      	subs	r2, r3, r7
 8010e82:	d004      	beq.n	8010e8e <_dtoa_r+0x76e>
 8010e84:	9904      	ldr	r1, [sp, #16]
 8010e86:	4620      	mov	r0, r4
 8010e88:	f000 fb8c 	bl	80115a4 <__pow5mult>
 8010e8c:	9004      	str	r0, [sp, #16]
 8010e8e:	2101      	movs	r1, #1
 8010e90:	4620      	mov	r0, r4
 8010e92:	f000 fae7 	bl	8011464 <__i2b>
 8010e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e98:	4607      	mov	r7, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f000 81d0 	beq.w	8011240 <_dtoa_r+0xb20>
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	4601      	mov	r1, r0
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f000 fb7d 	bl	80115a4 <__pow5mult>
 8010eaa:	9b06      	ldr	r3, [sp, #24]
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	4607      	mov	r7, r0
 8010eb0:	dc40      	bgt.n	8010f34 <_dtoa_r+0x814>
 8010eb2:	9b00      	ldr	r3, [sp, #0]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d139      	bne.n	8010f2c <_dtoa_r+0x80c>
 8010eb8:	9b01      	ldr	r3, [sp, #4]
 8010eba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d136      	bne.n	8010f30 <_dtoa_r+0x810>
 8010ec2:	9b01      	ldr	r3, [sp, #4]
 8010ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ec8:	0d1b      	lsrs	r3, r3, #20
 8010eca:	051b      	lsls	r3, r3, #20
 8010ecc:	b12b      	cbz	r3, 8010eda <_dtoa_r+0x7ba>
 8010ece:	9b05      	ldr	r3, [sp, #20]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	9305      	str	r3, [sp, #20]
 8010ed4:	f108 0801 	add.w	r8, r8, #1
 8010ed8:	2301      	movs	r3, #1
 8010eda:	9307      	str	r3, [sp, #28]
 8010edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d12a      	bne.n	8010f38 <_dtoa_r+0x818>
 8010ee2:	2001      	movs	r0, #1
 8010ee4:	e030      	b.n	8010f48 <_dtoa_r+0x828>
 8010ee6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ee8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010eec:	e795      	b.n	8010e1a <_dtoa_r+0x6fa>
 8010eee:	9b07      	ldr	r3, [sp, #28]
 8010ef0:	f109 37ff 	add.w	r7, r9, #4294967295
 8010ef4:	42bb      	cmp	r3, r7
 8010ef6:	bfbf      	itttt	lt
 8010ef8:	9b07      	ldrlt	r3, [sp, #28]
 8010efa:	9707      	strlt	r7, [sp, #28]
 8010efc:	1afa      	sublt	r2, r7, r3
 8010efe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010f00:	bfbb      	ittet	lt
 8010f02:	189b      	addlt	r3, r3, r2
 8010f04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010f06:	1bdf      	subge	r7, r3, r7
 8010f08:	2700      	movlt	r7, #0
 8010f0a:	f1b9 0f00 	cmp.w	r9, #0
 8010f0e:	bfb5      	itete	lt
 8010f10:	9b05      	ldrlt	r3, [sp, #20]
 8010f12:	9d05      	ldrge	r5, [sp, #20]
 8010f14:	eba3 0509 	sublt.w	r5, r3, r9
 8010f18:	464b      	movge	r3, r9
 8010f1a:	bfb8      	it	lt
 8010f1c:	2300      	movlt	r3, #0
 8010f1e:	e77e      	b.n	8010e1e <_dtoa_r+0x6fe>
 8010f20:	9f07      	ldr	r7, [sp, #28]
 8010f22:	9d05      	ldr	r5, [sp, #20]
 8010f24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010f26:	e783      	b.n	8010e30 <_dtoa_r+0x710>
 8010f28:	9a07      	ldr	r2, [sp, #28]
 8010f2a:	e7ab      	b.n	8010e84 <_dtoa_r+0x764>
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	e7d4      	b.n	8010eda <_dtoa_r+0x7ba>
 8010f30:	9b00      	ldr	r3, [sp, #0]
 8010f32:	e7d2      	b.n	8010eda <_dtoa_r+0x7ba>
 8010f34:	2300      	movs	r3, #0
 8010f36:	9307      	str	r3, [sp, #28]
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010f3e:	6918      	ldr	r0, [r3, #16]
 8010f40:	f000 fa42 	bl	80113c8 <__hi0bits>
 8010f44:	f1c0 0020 	rsb	r0, r0, #32
 8010f48:	4440      	add	r0, r8
 8010f4a:	f010 001f 	ands.w	r0, r0, #31
 8010f4e:	d047      	beq.n	8010fe0 <_dtoa_r+0x8c0>
 8010f50:	f1c0 0320 	rsb	r3, r0, #32
 8010f54:	2b04      	cmp	r3, #4
 8010f56:	dd3b      	ble.n	8010fd0 <_dtoa_r+0x8b0>
 8010f58:	9b05      	ldr	r3, [sp, #20]
 8010f5a:	f1c0 001c 	rsb	r0, r0, #28
 8010f5e:	4403      	add	r3, r0
 8010f60:	9305      	str	r3, [sp, #20]
 8010f62:	4405      	add	r5, r0
 8010f64:	4480      	add	r8, r0
 8010f66:	9b05      	ldr	r3, [sp, #20]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	dd05      	ble.n	8010f78 <_dtoa_r+0x858>
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	9904      	ldr	r1, [sp, #16]
 8010f70:	4620      	mov	r0, r4
 8010f72:	f000 fb65 	bl	8011640 <__lshift>
 8010f76:	9004      	str	r0, [sp, #16]
 8010f78:	f1b8 0f00 	cmp.w	r8, #0
 8010f7c:	dd05      	ble.n	8010f8a <_dtoa_r+0x86a>
 8010f7e:	4639      	mov	r1, r7
 8010f80:	4642      	mov	r2, r8
 8010f82:	4620      	mov	r0, r4
 8010f84:	f000 fb5c 	bl	8011640 <__lshift>
 8010f88:	4607      	mov	r7, r0
 8010f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f8c:	b353      	cbz	r3, 8010fe4 <_dtoa_r+0x8c4>
 8010f8e:	4639      	mov	r1, r7
 8010f90:	9804      	ldr	r0, [sp, #16]
 8010f92:	f000 fba9 	bl	80116e8 <__mcmp>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	da24      	bge.n	8010fe4 <_dtoa_r+0x8c4>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	220a      	movs	r2, #10
 8010f9e:	9904      	ldr	r1, [sp, #16]
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f000 f9d6 	bl	8011352 <__multadd>
 8010fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fa8:	9004      	str	r0, [sp, #16]
 8010faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	f000 814d 	beq.w	801124e <_dtoa_r+0xb2e>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	4631      	mov	r1, r6
 8010fb8:	220a      	movs	r2, #10
 8010fba:	4620      	mov	r0, r4
 8010fbc:	f000 f9c9 	bl	8011352 <__multadd>
 8010fc0:	9b02      	ldr	r3, [sp, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	4606      	mov	r6, r0
 8010fc6:	dc4f      	bgt.n	8011068 <_dtoa_r+0x948>
 8010fc8:	9b06      	ldr	r3, [sp, #24]
 8010fca:	2b02      	cmp	r3, #2
 8010fcc:	dd4c      	ble.n	8011068 <_dtoa_r+0x948>
 8010fce:	e011      	b.n	8010ff4 <_dtoa_r+0x8d4>
 8010fd0:	d0c9      	beq.n	8010f66 <_dtoa_r+0x846>
 8010fd2:	9a05      	ldr	r2, [sp, #20]
 8010fd4:	331c      	adds	r3, #28
 8010fd6:	441a      	add	r2, r3
 8010fd8:	9205      	str	r2, [sp, #20]
 8010fda:	441d      	add	r5, r3
 8010fdc:	4498      	add	r8, r3
 8010fde:	e7c2      	b.n	8010f66 <_dtoa_r+0x846>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	e7f6      	b.n	8010fd2 <_dtoa_r+0x8b2>
 8010fe4:	f1b9 0f00 	cmp.w	r9, #0
 8010fe8:	dc38      	bgt.n	801105c <_dtoa_r+0x93c>
 8010fea:	9b06      	ldr	r3, [sp, #24]
 8010fec:	2b02      	cmp	r3, #2
 8010fee:	dd35      	ble.n	801105c <_dtoa_r+0x93c>
 8010ff0:	f8cd 9008 	str.w	r9, [sp, #8]
 8010ff4:	9b02      	ldr	r3, [sp, #8]
 8010ff6:	b963      	cbnz	r3, 8011012 <_dtoa_r+0x8f2>
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	2205      	movs	r2, #5
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f000 f9a8 	bl	8011352 <__multadd>
 8011002:	4601      	mov	r1, r0
 8011004:	4607      	mov	r7, r0
 8011006:	9804      	ldr	r0, [sp, #16]
 8011008:	f000 fb6e 	bl	80116e8 <__mcmp>
 801100c:	2800      	cmp	r0, #0
 801100e:	f73f adcc 	bgt.w	8010baa <_dtoa_r+0x48a>
 8011012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011014:	465d      	mov	r5, fp
 8011016:	ea6f 0a03 	mvn.w	sl, r3
 801101a:	f04f 0900 	mov.w	r9, #0
 801101e:	4639      	mov	r1, r7
 8011020:	4620      	mov	r0, r4
 8011022:	f000 f97f 	bl	8011324 <_Bfree>
 8011026:	2e00      	cmp	r6, #0
 8011028:	f43f aeb7 	beq.w	8010d9a <_dtoa_r+0x67a>
 801102c:	f1b9 0f00 	cmp.w	r9, #0
 8011030:	d005      	beq.n	801103e <_dtoa_r+0x91e>
 8011032:	45b1      	cmp	r9, r6
 8011034:	d003      	beq.n	801103e <_dtoa_r+0x91e>
 8011036:	4649      	mov	r1, r9
 8011038:	4620      	mov	r0, r4
 801103a:	f000 f973 	bl	8011324 <_Bfree>
 801103e:	4631      	mov	r1, r6
 8011040:	4620      	mov	r0, r4
 8011042:	f000 f96f 	bl	8011324 <_Bfree>
 8011046:	e6a8      	b.n	8010d9a <_dtoa_r+0x67a>
 8011048:	2700      	movs	r7, #0
 801104a:	463e      	mov	r6, r7
 801104c:	e7e1      	b.n	8011012 <_dtoa_r+0x8f2>
 801104e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011052:	463e      	mov	r6, r7
 8011054:	e5a9      	b.n	8010baa <_dtoa_r+0x48a>
 8011056:	bf00      	nop
 8011058:	40240000 	.word	0x40240000
 801105c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801105e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 80fa 	beq.w	801125c <_dtoa_r+0xb3c>
 8011068:	2d00      	cmp	r5, #0
 801106a:	dd05      	ble.n	8011078 <_dtoa_r+0x958>
 801106c:	4631      	mov	r1, r6
 801106e:	462a      	mov	r2, r5
 8011070:	4620      	mov	r0, r4
 8011072:	f000 fae5 	bl	8011640 <__lshift>
 8011076:	4606      	mov	r6, r0
 8011078:	9b07      	ldr	r3, [sp, #28]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d04c      	beq.n	8011118 <_dtoa_r+0x9f8>
 801107e:	6871      	ldr	r1, [r6, #4]
 8011080:	4620      	mov	r0, r4
 8011082:	f000 f91b 	bl	80112bc <_Balloc>
 8011086:	6932      	ldr	r2, [r6, #16]
 8011088:	3202      	adds	r2, #2
 801108a:	4605      	mov	r5, r0
 801108c:	0092      	lsls	r2, r2, #2
 801108e:	f106 010c 	add.w	r1, r6, #12
 8011092:	300c      	adds	r0, #12
 8011094:	f7fe fe29 	bl	800fcea <memcpy>
 8011098:	2201      	movs	r2, #1
 801109a:	4629      	mov	r1, r5
 801109c:	4620      	mov	r0, r4
 801109e:	f000 facf 	bl	8011640 <__lshift>
 80110a2:	9b00      	ldr	r3, [sp, #0]
 80110a4:	f8cd b014 	str.w	fp, [sp, #20]
 80110a8:	f003 0301 	and.w	r3, r3, #1
 80110ac:	46b1      	mov	r9, r6
 80110ae:	9307      	str	r3, [sp, #28]
 80110b0:	4606      	mov	r6, r0
 80110b2:	4639      	mov	r1, r7
 80110b4:	9804      	ldr	r0, [sp, #16]
 80110b6:	f7ff faa7 	bl	8010608 <quorem>
 80110ba:	4649      	mov	r1, r9
 80110bc:	4605      	mov	r5, r0
 80110be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80110c2:	9804      	ldr	r0, [sp, #16]
 80110c4:	f000 fb10 	bl	80116e8 <__mcmp>
 80110c8:	4632      	mov	r2, r6
 80110ca:	9000      	str	r0, [sp, #0]
 80110cc:	4639      	mov	r1, r7
 80110ce:	4620      	mov	r0, r4
 80110d0:	f000 fb24 	bl	801171c <__mdiff>
 80110d4:	68c3      	ldr	r3, [r0, #12]
 80110d6:	4602      	mov	r2, r0
 80110d8:	bb03      	cbnz	r3, 801111c <_dtoa_r+0x9fc>
 80110da:	4601      	mov	r1, r0
 80110dc:	9008      	str	r0, [sp, #32]
 80110de:	9804      	ldr	r0, [sp, #16]
 80110e0:	f000 fb02 	bl	80116e8 <__mcmp>
 80110e4:	9a08      	ldr	r2, [sp, #32]
 80110e6:	4603      	mov	r3, r0
 80110e8:	4611      	mov	r1, r2
 80110ea:	4620      	mov	r0, r4
 80110ec:	9308      	str	r3, [sp, #32]
 80110ee:	f000 f919 	bl	8011324 <_Bfree>
 80110f2:	9b08      	ldr	r3, [sp, #32]
 80110f4:	b9a3      	cbnz	r3, 8011120 <_dtoa_r+0xa00>
 80110f6:	9a06      	ldr	r2, [sp, #24]
 80110f8:	b992      	cbnz	r2, 8011120 <_dtoa_r+0xa00>
 80110fa:	9a07      	ldr	r2, [sp, #28]
 80110fc:	b982      	cbnz	r2, 8011120 <_dtoa_r+0xa00>
 80110fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011102:	d029      	beq.n	8011158 <_dtoa_r+0xa38>
 8011104:	9b00      	ldr	r3, [sp, #0]
 8011106:	2b00      	cmp	r3, #0
 8011108:	dd01      	ble.n	801110e <_dtoa_r+0x9ee>
 801110a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801110e:	9b05      	ldr	r3, [sp, #20]
 8011110:	1c5d      	adds	r5, r3, #1
 8011112:	f883 8000 	strb.w	r8, [r3]
 8011116:	e782      	b.n	801101e <_dtoa_r+0x8fe>
 8011118:	4630      	mov	r0, r6
 801111a:	e7c2      	b.n	80110a2 <_dtoa_r+0x982>
 801111c:	2301      	movs	r3, #1
 801111e:	e7e3      	b.n	80110e8 <_dtoa_r+0x9c8>
 8011120:	9a00      	ldr	r2, [sp, #0]
 8011122:	2a00      	cmp	r2, #0
 8011124:	db04      	blt.n	8011130 <_dtoa_r+0xa10>
 8011126:	d125      	bne.n	8011174 <_dtoa_r+0xa54>
 8011128:	9a06      	ldr	r2, [sp, #24]
 801112a:	bb1a      	cbnz	r2, 8011174 <_dtoa_r+0xa54>
 801112c:	9a07      	ldr	r2, [sp, #28]
 801112e:	bb0a      	cbnz	r2, 8011174 <_dtoa_r+0xa54>
 8011130:	2b00      	cmp	r3, #0
 8011132:	ddec      	ble.n	801110e <_dtoa_r+0x9ee>
 8011134:	2201      	movs	r2, #1
 8011136:	9904      	ldr	r1, [sp, #16]
 8011138:	4620      	mov	r0, r4
 801113a:	f000 fa81 	bl	8011640 <__lshift>
 801113e:	4639      	mov	r1, r7
 8011140:	9004      	str	r0, [sp, #16]
 8011142:	f000 fad1 	bl	80116e8 <__mcmp>
 8011146:	2800      	cmp	r0, #0
 8011148:	dc03      	bgt.n	8011152 <_dtoa_r+0xa32>
 801114a:	d1e0      	bne.n	801110e <_dtoa_r+0x9ee>
 801114c:	f018 0f01 	tst.w	r8, #1
 8011150:	d0dd      	beq.n	801110e <_dtoa_r+0x9ee>
 8011152:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011156:	d1d8      	bne.n	801110a <_dtoa_r+0x9ea>
 8011158:	9b05      	ldr	r3, [sp, #20]
 801115a:	9a05      	ldr	r2, [sp, #20]
 801115c:	1c5d      	adds	r5, r3, #1
 801115e:	2339      	movs	r3, #57	; 0x39
 8011160:	7013      	strb	r3, [r2, #0]
 8011162:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011166:	2b39      	cmp	r3, #57	; 0x39
 8011168:	f105 32ff 	add.w	r2, r5, #4294967295
 801116c:	d04f      	beq.n	801120e <_dtoa_r+0xaee>
 801116e:	3301      	adds	r3, #1
 8011170:	7013      	strb	r3, [r2, #0]
 8011172:	e754      	b.n	801101e <_dtoa_r+0x8fe>
 8011174:	9a05      	ldr	r2, [sp, #20]
 8011176:	2b00      	cmp	r3, #0
 8011178:	f102 0501 	add.w	r5, r2, #1
 801117c:	dd06      	ble.n	801118c <_dtoa_r+0xa6c>
 801117e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011182:	d0e9      	beq.n	8011158 <_dtoa_r+0xa38>
 8011184:	f108 0801 	add.w	r8, r8, #1
 8011188:	9b05      	ldr	r3, [sp, #20]
 801118a:	e7c2      	b.n	8011112 <_dtoa_r+0x9f2>
 801118c:	9a02      	ldr	r2, [sp, #8]
 801118e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011192:	eba5 030b 	sub.w	r3, r5, fp
 8011196:	4293      	cmp	r3, r2
 8011198:	d021      	beq.n	80111de <_dtoa_r+0xabe>
 801119a:	2300      	movs	r3, #0
 801119c:	220a      	movs	r2, #10
 801119e:	9904      	ldr	r1, [sp, #16]
 80111a0:	4620      	mov	r0, r4
 80111a2:	f000 f8d6 	bl	8011352 <__multadd>
 80111a6:	45b1      	cmp	r9, r6
 80111a8:	9004      	str	r0, [sp, #16]
 80111aa:	f04f 0300 	mov.w	r3, #0
 80111ae:	f04f 020a 	mov.w	r2, #10
 80111b2:	4649      	mov	r1, r9
 80111b4:	4620      	mov	r0, r4
 80111b6:	d105      	bne.n	80111c4 <_dtoa_r+0xaa4>
 80111b8:	f000 f8cb 	bl	8011352 <__multadd>
 80111bc:	4681      	mov	r9, r0
 80111be:	4606      	mov	r6, r0
 80111c0:	9505      	str	r5, [sp, #20]
 80111c2:	e776      	b.n	80110b2 <_dtoa_r+0x992>
 80111c4:	f000 f8c5 	bl	8011352 <__multadd>
 80111c8:	4631      	mov	r1, r6
 80111ca:	4681      	mov	r9, r0
 80111cc:	2300      	movs	r3, #0
 80111ce:	220a      	movs	r2, #10
 80111d0:	4620      	mov	r0, r4
 80111d2:	f000 f8be 	bl	8011352 <__multadd>
 80111d6:	4606      	mov	r6, r0
 80111d8:	e7f2      	b.n	80111c0 <_dtoa_r+0xaa0>
 80111da:	f04f 0900 	mov.w	r9, #0
 80111de:	2201      	movs	r2, #1
 80111e0:	9904      	ldr	r1, [sp, #16]
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 fa2c 	bl	8011640 <__lshift>
 80111e8:	4639      	mov	r1, r7
 80111ea:	9004      	str	r0, [sp, #16]
 80111ec:	f000 fa7c 	bl	80116e8 <__mcmp>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	dcb6      	bgt.n	8011162 <_dtoa_r+0xa42>
 80111f4:	d102      	bne.n	80111fc <_dtoa_r+0xadc>
 80111f6:	f018 0f01 	tst.w	r8, #1
 80111fa:	d1b2      	bne.n	8011162 <_dtoa_r+0xa42>
 80111fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011200:	2b30      	cmp	r3, #48	; 0x30
 8011202:	f105 32ff 	add.w	r2, r5, #4294967295
 8011206:	f47f af0a 	bne.w	801101e <_dtoa_r+0x8fe>
 801120a:	4615      	mov	r5, r2
 801120c:	e7f6      	b.n	80111fc <_dtoa_r+0xadc>
 801120e:	4593      	cmp	fp, r2
 8011210:	d105      	bne.n	801121e <_dtoa_r+0xafe>
 8011212:	2331      	movs	r3, #49	; 0x31
 8011214:	f10a 0a01 	add.w	sl, sl, #1
 8011218:	f88b 3000 	strb.w	r3, [fp]
 801121c:	e6ff      	b.n	801101e <_dtoa_r+0x8fe>
 801121e:	4615      	mov	r5, r2
 8011220:	e79f      	b.n	8011162 <_dtoa_r+0xa42>
 8011222:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011288 <_dtoa_r+0xb68>
 8011226:	e007      	b.n	8011238 <_dtoa_r+0xb18>
 8011228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801122a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801128c <_dtoa_r+0xb6c>
 801122e:	b11b      	cbz	r3, 8011238 <_dtoa_r+0xb18>
 8011230:	f10b 0308 	add.w	r3, fp, #8
 8011234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011236:	6013      	str	r3, [r2, #0]
 8011238:	4658      	mov	r0, fp
 801123a:	b017      	add	sp, #92	; 0x5c
 801123c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011240:	9b06      	ldr	r3, [sp, #24]
 8011242:	2b01      	cmp	r3, #1
 8011244:	f77f ae35 	ble.w	8010eb2 <_dtoa_r+0x792>
 8011248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801124a:	9307      	str	r3, [sp, #28]
 801124c:	e649      	b.n	8010ee2 <_dtoa_r+0x7c2>
 801124e:	9b02      	ldr	r3, [sp, #8]
 8011250:	2b00      	cmp	r3, #0
 8011252:	dc03      	bgt.n	801125c <_dtoa_r+0xb3c>
 8011254:	9b06      	ldr	r3, [sp, #24]
 8011256:	2b02      	cmp	r3, #2
 8011258:	f73f aecc 	bgt.w	8010ff4 <_dtoa_r+0x8d4>
 801125c:	465d      	mov	r5, fp
 801125e:	4639      	mov	r1, r7
 8011260:	9804      	ldr	r0, [sp, #16]
 8011262:	f7ff f9d1 	bl	8010608 <quorem>
 8011266:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801126a:	f805 8b01 	strb.w	r8, [r5], #1
 801126e:	9a02      	ldr	r2, [sp, #8]
 8011270:	eba5 030b 	sub.w	r3, r5, fp
 8011274:	429a      	cmp	r2, r3
 8011276:	ddb0      	ble.n	80111da <_dtoa_r+0xaba>
 8011278:	2300      	movs	r3, #0
 801127a:	220a      	movs	r2, #10
 801127c:	9904      	ldr	r1, [sp, #16]
 801127e:	4620      	mov	r0, r4
 8011280:	f000 f867 	bl	8011352 <__multadd>
 8011284:	9004      	str	r0, [sp, #16]
 8011286:	e7ea      	b.n	801125e <_dtoa_r+0xb3e>
 8011288:	0806de40 	.word	0x0806de40
 801128c:	0806de64 	.word	0x0806de64

08011290 <_localeconv_r>:
 8011290:	4b04      	ldr	r3, [pc, #16]	; (80112a4 <_localeconv_r+0x14>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	6a18      	ldr	r0, [r3, #32]
 8011296:	4b04      	ldr	r3, [pc, #16]	; (80112a8 <_localeconv_r+0x18>)
 8011298:	2800      	cmp	r0, #0
 801129a:	bf08      	it	eq
 801129c:	4618      	moveq	r0, r3
 801129e:	30f0      	adds	r0, #240	; 0xf0
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	200008ac 	.word	0x200008ac
 80112a8:	20000910 	.word	0x20000910

080112ac <malloc>:
 80112ac:	4b02      	ldr	r3, [pc, #8]	; (80112b8 <malloc+0xc>)
 80112ae:	4601      	mov	r1, r0
 80112b0:	6818      	ldr	r0, [r3, #0]
 80112b2:	f000 bb3b 	b.w	801192c <_malloc_r>
 80112b6:	bf00      	nop
 80112b8:	200008ac 	.word	0x200008ac

080112bc <_Balloc>:
 80112bc:	b570      	push	{r4, r5, r6, lr}
 80112be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80112c0:	4604      	mov	r4, r0
 80112c2:	460e      	mov	r6, r1
 80112c4:	b93d      	cbnz	r5, 80112d6 <_Balloc+0x1a>
 80112c6:	2010      	movs	r0, #16
 80112c8:	f7ff fff0 	bl	80112ac <malloc>
 80112cc:	6260      	str	r0, [r4, #36]	; 0x24
 80112ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80112d2:	6005      	str	r5, [r0, #0]
 80112d4:	60c5      	str	r5, [r0, #12]
 80112d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80112d8:	68eb      	ldr	r3, [r5, #12]
 80112da:	b183      	cbz	r3, 80112fe <_Balloc+0x42>
 80112dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80112e4:	b9b8      	cbnz	r0, 8011316 <_Balloc+0x5a>
 80112e6:	2101      	movs	r1, #1
 80112e8:	fa01 f506 	lsl.w	r5, r1, r6
 80112ec:	1d6a      	adds	r2, r5, #5
 80112ee:	0092      	lsls	r2, r2, #2
 80112f0:	4620      	mov	r0, r4
 80112f2:	f000 fabf 	bl	8011874 <_calloc_r>
 80112f6:	b160      	cbz	r0, 8011312 <_Balloc+0x56>
 80112f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80112fc:	e00e      	b.n	801131c <_Balloc+0x60>
 80112fe:	2221      	movs	r2, #33	; 0x21
 8011300:	2104      	movs	r1, #4
 8011302:	4620      	mov	r0, r4
 8011304:	f000 fab6 	bl	8011874 <_calloc_r>
 8011308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801130a:	60e8      	str	r0, [r5, #12]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d1e4      	bne.n	80112dc <_Balloc+0x20>
 8011312:	2000      	movs	r0, #0
 8011314:	bd70      	pop	{r4, r5, r6, pc}
 8011316:	6802      	ldr	r2, [r0, #0]
 8011318:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801131c:	2300      	movs	r3, #0
 801131e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011322:	e7f7      	b.n	8011314 <_Balloc+0x58>

08011324 <_Bfree>:
 8011324:	b570      	push	{r4, r5, r6, lr}
 8011326:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011328:	4606      	mov	r6, r0
 801132a:	460d      	mov	r5, r1
 801132c:	b93c      	cbnz	r4, 801133e <_Bfree+0x1a>
 801132e:	2010      	movs	r0, #16
 8011330:	f7ff ffbc 	bl	80112ac <malloc>
 8011334:	6270      	str	r0, [r6, #36]	; 0x24
 8011336:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801133a:	6004      	str	r4, [r0, #0]
 801133c:	60c4      	str	r4, [r0, #12]
 801133e:	b13d      	cbz	r5, 8011350 <_Bfree+0x2c>
 8011340:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011342:	686a      	ldr	r2, [r5, #4]
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801134a:	6029      	str	r1, [r5, #0]
 801134c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011350:	bd70      	pop	{r4, r5, r6, pc}

08011352 <__multadd>:
 8011352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011356:	690d      	ldr	r5, [r1, #16]
 8011358:	461f      	mov	r7, r3
 801135a:	4606      	mov	r6, r0
 801135c:	460c      	mov	r4, r1
 801135e:	f101 0c14 	add.w	ip, r1, #20
 8011362:	2300      	movs	r3, #0
 8011364:	f8dc 0000 	ldr.w	r0, [ip]
 8011368:	b281      	uxth	r1, r0
 801136a:	fb02 7101 	mla	r1, r2, r1, r7
 801136e:	0c0f      	lsrs	r7, r1, #16
 8011370:	0c00      	lsrs	r0, r0, #16
 8011372:	fb02 7000 	mla	r0, r2, r0, r7
 8011376:	b289      	uxth	r1, r1
 8011378:	3301      	adds	r3, #1
 801137a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801137e:	429d      	cmp	r5, r3
 8011380:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011384:	f84c 1b04 	str.w	r1, [ip], #4
 8011388:	dcec      	bgt.n	8011364 <__multadd+0x12>
 801138a:	b1d7      	cbz	r7, 80113c2 <__multadd+0x70>
 801138c:	68a3      	ldr	r3, [r4, #8]
 801138e:	42ab      	cmp	r3, r5
 8011390:	dc12      	bgt.n	80113b8 <__multadd+0x66>
 8011392:	6861      	ldr	r1, [r4, #4]
 8011394:	4630      	mov	r0, r6
 8011396:	3101      	adds	r1, #1
 8011398:	f7ff ff90 	bl	80112bc <_Balloc>
 801139c:	6922      	ldr	r2, [r4, #16]
 801139e:	3202      	adds	r2, #2
 80113a0:	f104 010c 	add.w	r1, r4, #12
 80113a4:	4680      	mov	r8, r0
 80113a6:	0092      	lsls	r2, r2, #2
 80113a8:	300c      	adds	r0, #12
 80113aa:	f7fe fc9e 	bl	800fcea <memcpy>
 80113ae:	4621      	mov	r1, r4
 80113b0:	4630      	mov	r0, r6
 80113b2:	f7ff ffb7 	bl	8011324 <_Bfree>
 80113b6:	4644      	mov	r4, r8
 80113b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80113bc:	3501      	adds	r5, #1
 80113be:	615f      	str	r7, [r3, #20]
 80113c0:	6125      	str	r5, [r4, #16]
 80113c2:	4620      	mov	r0, r4
 80113c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080113c8 <__hi0bits>:
 80113c8:	0c02      	lsrs	r2, r0, #16
 80113ca:	0412      	lsls	r2, r2, #16
 80113cc:	4603      	mov	r3, r0
 80113ce:	b9b2      	cbnz	r2, 80113fe <__hi0bits+0x36>
 80113d0:	0403      	lsls	r3, r0, #16
 80113d2:	2010      	movs	r0, #16
 80113d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80113d8:	bf04      	itt	eq
 80113da:	021b      	lsleq	r3, r3, #8
 80113dc:	3008      	addeq	r0, #8
 80113de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80113e2:	bf04      	itt	eq
 80113e4:	011b      	lsleq	r3, r3, #4
 80113e6:	3004      	addeq	r0, #4
 80113e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80113ec:	bf04      	itt	eq
 80113ee:	009b      	lsleq	r3, r3, #2
 80113f0:	3002      	addeq	r0, #2
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	db06      	blt.n	8011404 <__hi0bits+0x3c>
 80113f6:	005b      	lsls	r3, r3, #1
 80113f8:	d503      	bpl.n	8011402 <__hi0bits+0x3a>
 80113fa:	3001      	adds	r0, #1
 80113fc:	4770      	bx	lr
 80113fe:	2000      	movs	r0, #0
 8011400:	e7e8      	b.n	80113d4 <__hi0bits+0xc>
 8011402:	2020      	movs	r0, #32
 8011404:	4770      	bx	lr

08011406 <__lo0bits>:
 8011406:	6803      	ldr	r3, [r0, #0]
 8011408:	f013 0207 	ands.w	r2, r3, #7
 801140c:	4601      	mov	r1, r0
 801140e:	d00b      	beq.n	8011428 <__lo0bits+0x22>
 8011410:	07da      	lsls	r2, r3, #31
 8011412:	d423      	bmi.n	801145c <__lo0bits+0x56>
 8011414:	0798      	lsls	r0, r3, #30
 8011416:	bf49      	itett	mi
 8011418:	085b      	lsrmi	r3, r3, #1
 801141a:	089b      	lsrpl	r3, r3, #2
 801141c:	2001      	movmi	r0, #1
 801141e:	600b      	strmi	r3, [r1, #0]
 8011420:	bf5c      	itt	pl
 8011422:	600b      	strpl	r3, [r1, #0]
 8011424:	2002      	movpl	r0, #2
 8011426:	4770      	bx	lr
 8011428:	b298      	uxth	r0, r3
 801142a:	b9a8      	cbnz	r0, 8011458 <__lo0bits+0x52>
 801142c:	0c1b      	lsrs	r3, r3, #16
 801142e:	2010      	movs	r0, #16
 8011430:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011434:	bf04      	itt	eq
 8011436:	0a1b      	lsreq	r3, r3, #8
 8011438:	3008      	addeq	r0, #8
 801143a:	071a      	lsls	r2, r3, #28
 801143c:	bf04      	itt	eq
 801143e:	091b      	lsreq	r3, r3, #4
 8011440:	3004      	addeq	r0, #4
 8011442:	079a      	lsls	r2, r3, #30
 8011444:	bf04      	itt	eq
 8011446:	089b      	lsreq	r3, r3, #2
 8011448:	3002      	addeq	r0, #2
 801144a:	07da      	lsls	r2, r3, #31
 801144c:	d402      	bmi.n	8011454 <__lo0bits+0x4e>
 801144e:	085b      	lsrs	r3, r3, #1
 8011450:	d006      	beq.n	8011460 <__lo0bits+0x5a>
 8011452:	3001      	adds	r0, #1
 8011454:	600b      	str	r3, [r1, #0]
 8011456:	4770      	bx	lr
 8011458:	4610      	mov	r0, r2
 801145a:	e7e9      	b.n	8011430 <__lo0bits+0x2a>
 801145c:	2000      	movs	r0, #0
 801145e:	4770      	bx	lr
 8011460:	2020      	movs	r0, #32
 8011462:	4770      	bx	lr

08011464 <__i2b>:
 8011464:	b510      	push	{r4, lr}
 8011466:	460c      	mov	r4, r1
 8011468:	2101      	movs	r1, #1
 801146a:	f7ff ff27 	bl	80112bc <_Balloc>
 801146e:	2201      	movs	r2, #1
 8011470:	6144      	str	r4, [r0, #20]
 8011472:	6102      	str	r2, [r0, #16]
 8011474:	bd10      	pop	{r4, pc}

08011476 <__multiply>:
 8011476:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801147a:	4614      	mov	r4, r2
 801147c:	690a      	ldr	r2, [r1, #16]
 801147e:	6923      	ldr	r3, [r4, #16]
 8011480:	429a      	cmp	r2, r3
 8011482:	bfb8      	it	lt
 8011484:	460b      	movlt	r3, r1
 8011486:	4688      	mov	r8, r1
 8011488:	bfbc      	itt	lt
 801148a:	46a0      	movlt	r8, r4
 801148c:	461c      	movlt	r4, r3
 801148e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011492:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011496:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801149a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801149e:	eb07 0609 	add.w	r6, r7, r9
 80114a2:	42b3      	cmp	r3, r6
 80114a4:	bfb8      	it	lt
 80114a6:	3101      	addlt	r1, #1
 80114a8:	f7ff ff08 	bl	80112bc <_Balloc>
 80114ac:	f100 0514 	add.w	r5, r0, #20
 80114b0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80114b4:	462b      	mov	r3, r5
 80114b6:	2200      	movs	r2, #0
 80114b8:	4573      	cmp	r3, lr
 80114ba:	d316      	bcc.n	80114ea <__multiply+0x74>
 80114bc:	f104 0214 	add.w	r2, r4, #20
 80114c0:	f108 0114 	add.w	r1, r8, #20
 80114c4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80114c8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80114cc:	9300      	str	r3, [sp, #0]
 80114ce:	9b00      	ldr	r3, [sp, #0]
 80114d0:	9201      	str	r2, [sp, #4]
 80114d2:	4293      	cmp	r3, r2
 80114d4:	d80c      	bhi.n	80114f0 <__multiply+0x7a>
 80114d6:	2e00      	cmp	r6, #0
 80114d8:	dd03      	ble.n	80114e2 <__multiply+0x6c>
 80114da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d05d      	beq.n	801159e <__multiply+0x128>
 80114e2:	6106      	str	r6, [r0, #16]
 80114e4:	b003      	add	sp, #12
 80114e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ea:	f843 2b04 	str.w	r2, [r3], #4
 80114ee:	e7e3      	b.n	80114b8 <__multiply+0x42>
 80114f0:	f8b2 b000 	ldrh.w	fp, [r2]
 80114f4:	f1bb 0f00 	cmp.w	fp, #0
 80114f8:	d023      	beq.n	8011542 <__multiply+0xcc>
 80114fa:	4689      	mov	r9, r1
 80114fc:	46ac      	mov	ip, r5
 80114fe:	f04f 0800 	mov.w	r8, #0
 8011502:	f859 4b04 	ldr.w	r4, [r9], #4
 8011506:	f8dc a000 	ldr.w	sl, [ip]
 801150a:	b2a3      	uxth	r3, r4
 801150c:	fa1f fa8a 	uxth.w	sl, sl
 8011510:	fb0b a303 	mla	r3, fp, r3, sl
 8011514:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011518:	f8dc 4000 	ldr.w	r4, [ip]
 801151c:	4443      	add	r3, r8
 801151e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011522:	fb0b 840a 	mla	r4, fp, sl, r8
 8011526:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801152a:	46e2      	mov	sl, ip
 801152c:	b29b      	uxth	r3, r3
 801152e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011532:	454f      	cmp	r7, r9
 8011534:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011538:	f84a 3b04 	str.w	r3, [sl], #4
 801153c:	d82b      	bhi.n	8011596 <__multiply+0x120>
 801153e:	f8cc 8004 	str.w	r8, [ip, #4]
 8011542:	9b01      	ldr	r3, [sp, #4]
 8011544:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011548:	3204      	adds	r2, #4
 801154a:	f1ba 0f00 	cmp.w	sl, #0
 801154e:	d020      	beq.n	8011592 <__multiply+0x11c>
 8011550:	682b      	ldr	r3, [r5, #0]
 8011552:	4689      	mov	r9, r1
 8011554:	46a8      	mov	r8, r5
 8011556:	f04f 0b00 	mov.w	fp, #0
 801155a:	f8b9 c000 	ldrh.w	ip, [r9]
 801155e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011562:	fb0a 440c 	mla	r4, sl, ip, r4
 8011566:	445c      	add	r4, fp
 8011568:	46c4      	mov	ip, r8
 801156a:	b29b      	uxth	r3, r3
 801156c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011570:	f84c 3b04 	str.w	r3, [ip], #4
 8011574:	f859 3b04 	ldr.w	r3, [r9], #4
 8011578:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801157c:	0c1b      	lsrs	r3, r3, #16
 801157e:	fb0a b303 	mla	r3, sl, r3, fp
 8011582:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011586:	454f      	cmp	r7, r9
 8011588:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801158c:	d805      	bhi.n	801159a <__multiply+0x124>
 801158e:	f8c8 3004 	str.w	r3, [r8, #4]
 8011592:	3504      	adds	r5, #4
 8011594:	e79b      	b.n	80114ce <__multiply+0x58>
 8011596:	46d4      	mov	ip, sl
 8011598:	e7b3      	b.n	8011502 <__multiply+0x8c>
 801159a:	46e0      	mov	r8, ip
 801159c:	e7dd      	b.n	801155a <__multiply+0xe4>
 801159e:	3e01      	subs	r6, #1
 80115a0:	e799      	b.n	80114d6 <__multiply+0x60>
	...

080115a4 <__pow5mult>:
 80115a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115a8:	4615      	mov	r5, r2
 80115aa:	f012 0203 	ands.w	r2, r2, #3
 80115ae:	4606      	mov	r6, r0
 80115b0:	460f      	mov	r7, r1
 80115b2:	d007      	beq.n	80115c4 <__pow5mult+0x20>
 80115b4:	3a01      	subs	r2, #1
 80115b6:	4c21      	ldr	r4, [pc, #132]	; (801163c <__pow5mult+0x98>)
 80115b8:	2300      	movs	r3, #0
 80115ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80115be:	f7ff fec8 	bl	8011352 <__multadd>
 80115c2:	4607      	mov	r7, r0
 80115c4:	10ad      	asrs	r5, r5, #2
 80115c6:	d035      	beq.n	8011634 <__pow5mult+0x90>
 80115c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80115ca:	b93c      	cbnz	r4, 80115dc <__pow5mult+0x38>
 80115cc:	2010      	movs	r0, #16
 80115ce:	f7ff fe6d 	bl	80112ac <malloc>
 80115d2:	6270      	str	r0, [r6, #36]	; 0x24
 80115d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115d8:	6004      	str	r4, [r0, #0]
 80115da:	60c4      	str	r4, [r0, #12]
 80115dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80115e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115e4:	b94c      	cbnz	r4, 80115fa <__pow5mult+0x56>
 80115e6:	f240 2171 	movw	r1, #625	; 0x271
 80115ea:	4630      	mov	r0, r6
 80115ec:	f7ff ff3a 	bl	8011464 <__i2b>
 80115f0:	2300      	movs	r3, #0
 80115f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80115f6:	4604      	mov	r4, r0
 80115f8:	6003      	str	r3, [r0, #0]
 80115fa:	f04f 0800 	mov.w	r8, #0
 80115fe:	07eb      	lsls	r3, r5, #31
 8011600:	d50a      	bpl.n	8011618 <__pow5mult+0x74>
 8011602:	4639      	mov	r1, r7
 8011604:	4622      	mov	r2, r4
 8011606:	4630      	mov	r0, r6
 8011608:	f7ff ff35 	bl	8011476 <__multiply>
 801160c:	4639      	mov	r1, r7
 801160e:	4681      	mov	r9, r0
 8011610:	4630      	mov	r0, r6
 8011612:	f7ff fe87 	bl	8011324 <_Bfree>
 8011616:	464f      	mov	r7, r9
 8011618:	106d      	asrs	r5, r5, #1
 801161a:	d00b      	beq.n	8011634 <__pow5mult+0x90>
 801161c:	6820      	ldr	r0, [r4, #0]
 801161e:	b938      	cbnz	r0, 8011630 <__pow5mult+0x8c>
 8011620:	4622      	mov	r2, r4
 8011622:	4621      	mov	r1, r4
 8011624:	4630      	mov	r0, r6
 8011626:	f7ff ff26 	bl	8011476 <__multiply>
 801162a:	6020      	str	r0, [r4, #0]
 801162c:	f8c0 8000 	str.w	r8, [r0]
 8011630:	4604      	mov	r4, r0
 8011632:	e7e4      	b.n	80115fe <__pow5mult+0x5a>
 8011634:	4638      	mov	r0, r7
 8011636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801163a:	bf00      	nop
 801163c:	0806df68 	.word	0x0806df68

08011640 <__lshift>:
 8011640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011644:	460c      	mov	r4, r1
 8011646:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801164a:	6923      	ldr	r3, [r4, #16]
 801164c:	6849      	ldr	r1, [r1, #4]
 801164e:	eb0a 0903 	add.w	r9, sl, r3
 8011652:	68a3      	ldr	r3, [r4, #8]
 8011654:	4607      	mov	r7, r0
 8011656:	4616      	mov	r6, r2
 8011658:	f109 0501 	add.w	r5, r9, #1
 801165c:	42ab      	cmp	r3, r5
 801165e:	db32      	blt.n	80116c6 <__lshift+0x86>
 8011660:	4638      	mov	r0, r7
 8011662:	f7ff fe2b 	bl	80112bc <_Balloc>
 8011666:	2300      	movs	r3, #0
 8011668:	4680      	mov	r8, r0
 801166a:	f100 0114 	add.w	r1, r0, #20
 801166e:	461a      	mov	r2, r3
 8011670:	4553      	cmp	r3, sl
 8011672:	db2b      	blt.n	80116cc <__lshift+0x8c>
 8011674:	6920      	ldr	r0, [r4, #16]
 8011676:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801167a:	f104 0314 	add.w	r3, r4, #20
 801167e:	f016 021f 	ands.w	r2, r6, #31
 8011682:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011686:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801168a:	d025      	beq.n	80116d8 <__lshift+0x98>
 801168c:	f1c2 0e20 	rsb	lr, r2, #32
 8011690:	2000      	movs	r0, #0
 8011692:	681e      	ldr	r6, [r3, #0]
 8011694:	468a      	mov	sl, r1
 8011696:	4096      	lsls	r6, r2
 8011698:	4330      	orrs	r0, r6
 801169a:	f84a 0b04 	str.w	r0, [sl], #4
 801169e:	f853 0b04 	ldr.w	r0, [r3], #4
 80116a2:	459c      	cmp	ip, r3
 80116a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80116a8:	d814      	bhi.n	80116d4 <__lshift+0x94>
 80116aa:	6048      	str	r0, [r1, #4]
 80116ac:	b108      	cbz	r0, 80116b2 <__lshift+0x72>
 80116ae:	f109 0502 	add.w	r5, r9, #2
 80116b2:	3d01      	subs	r5, #1
 80116b4:	4638      	mov	r0, r7
 80116b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80116ba:	4621      	mov	r1, r4
 80116bc:	f7ff fe32 	bl	8011324 <_Bfree>
 80116c0:	4640      	mov	r0, r8
 80116c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116c6:	3101      	adds	r1, #1
 80116c8:	005b      	lsls	r3, r3, #1
 80116ca:	e7c7      	b.n	801165c <__lshift+0x1c>
 80116cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80116d0:	3301      	adds	r3, #1
 80116d2:	e7cd      	b.n	8011670 <__lshift+0x30>
 80116d4:	4651      	mov	r1, sl
 80116d6:	e7dc      	b.n	8011692 <__lshift+0x52>
 80116d8:	3904      	subs	r1, #4
 80116da:	f853 2b04 	ldr.w	r2, [r3], #4
 80116de:	f841 2f04 	str.w	r2, [r1, #4]!
 80116e2:	459c      	cmp	ip, r3
 80116e4:	d8f9      	bhi.n	80116da <__lshift+0x9a>
 80116e6:	e7e4      	b.n	80116b2 <__lshift+0x72>

080116e8 <__mcmp>:
 80116e8:	6903      	ldr	r3, [r0, #16]
 80116ea:	690a      	ldr	r2, [r1, #16]
 80116ec:	1a9b      	subs	r3, r3, r2
 80116ee:	b530      	push	{r4, r5, lr}
 80116f0:	d10c      	bne.n	801170c <__mcmp+0x24>
 80116f2:	0092      	lsls	r2, r2, #2
 80116f4:	3014      	adds	r0, #20
 80116f6:	3114      	adds	r1, #20
 80116f8:	1884      	adds	r4, r0, r2
 80116fa:	4411      	add	r1, r2
 80116fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011700:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011704:	4295      	cmp	r5, r2
 8011706:	d003      	beq.n	8011710 <__mcmp+0x28>
 8011708:	d305      	bcc.n	8011716 <__mcmp+0x2e>
 801170a:	2301      	movs	r3, #1
 801170c:	4618      	mov	r0, r3
 801170e:	bd30      	pop	{r4, r5, pc}
 8011710:	42a0      	cmp	r0, r4
 8011712:	d3f3      	bcc.n	80116fc <__mcmp+0x14>
 8011714:	e7fa      	b.n	801170c <__mcmp+0x24>
 8011716:	f04f 33ff 	mov.w	r3, #4294967295
 801171a:	e7f7      	b.n	801170c <__mcmp+0x24>

0801171c <__mdiff>:
 801171c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011720:	460d      	mov	r5, r1
 8011722:	4607      	mov	r7, r0
 8011724:	4611      	mov	r1, r2
 8011726:	4628      	mov	r0, r5
 8011728:	4614      	mov	r4, r2
 801172a:	f7ff ffdd 	bl	80116e8 <__mcmp>
 801172e:	1e06      	subs	r6, r0, #0
 8011730:	d108      	bne.n	8011744 <__mdiff+0x28>
 8011732:	4631      	mov	r1, r6
 8011734:	4638      	mov	r0, r7
 8011736:	f7ff fdc1 	bl	80112bc <_Balloc>
 801173a:	2301      	movs	r3, #1
 801173c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011744:	bfa4      	itt	ge
 8011746:	4623      	movge	r3, r4
 8011748:	462c      	movge	r4, r5
 801174a:	4638      	mov	r0, r7
 801174c:	6861      	ldr	r1, [r4, #4]
 801174e:	bfa6      	itte	ge
 8011750:	461d      	movge	r5, r3
 8011752:	2600      	movge	r6, #0
 8011754:	2601      	movlt	r6, #1
 8011756:	f7ff fdb1 	bl	80112bc <_Balloc>
 801175a:	692b      	ldr	r3, [r5, #16]
 801175c:	60c6      	str	r6, [r0, #12]
 801175e:	6926      	ldr	r6, [r4, #16]
 8011760:	f105 0914 	add.w	r9, r5, #20
 8011764:	f104 0214 	add.w	r2, r4, #20
 8011768:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801176c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011770:	f100 0514 	add.w	r5, r0, #20
 8011774:	f04f 0e00 	mov.w	lr, #0
 8011778:	f852 ab04 	ldr.w	sl, [r2], #4
 801177c:	f859 4b04 	ldr.w	r4, [r9], #4
 8011780:	fa1e f18a 	uxtah	r1, lr, sl
 8011784:	b2a3      	uxth	r3, r4
 8011786:	1ac9      	subs	r1, r1, r3
 8011788:	0c23      	lsrs	r3, r4, #16
 801178a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801178e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011792:	b289      	uxth	r1, r1
 8011794:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011798:	45c8      	cmp	r8, r9
 801179a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801179e:	4694      	mov	ip, r2
 80117a0:	f845 3b04 	str.w	r3, [r5], #4
 80117a4:	d8e8      	bhi.n	8011778 <__mdiff+0x5c>
 80117a6:	45bc      	cmp	ip, r7
 80117a8:	d304      	bcc.n	80117b4 <__mdiff+0x98>
 80117aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80117ae:	b183      	cbz	r3, 80117d2 <__mdiff+0xb6>
 80117b0:	6106      	str	r6, [r0, #16]
 80117b2:	e7c5      	b.n	8011740 <__mdiff+0x24>
 80117b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80117b8:	fa1e f381 	uxtah	r3, lr, r1
 80117bc:	141a      	asrs	r2, r3, #16
 80117be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80117cc:	f845 3b04 	str.w	r3, [r5], #4
 80117d0:	e7e9      	b.n	80117a6 <__mdiff+0x8a>
 80117d2:	3e01      	subs	r6, #1
 80117d4:	e7e9      	b.n	80117aa <__mdiff+0x8e>

080117d6 <__d2b>:
 80117d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80117da:	460e      	mov	r6, r1
 80117dc:	2101      	movs	r1, #1
 80117de:	ec59 8b10 	vmov	r8, r9, d0
 80117e2:	4615      	mov	r5, r2
 80117e4:	f7ff fd6a 	bl	80112bc <_Balloc>
 80117e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80117ec:	4607      	mov	r7, r0
 80117ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117f2:	bb34      	cbnz	r4, 8011842 <__d2b+0x6c>
 80117f4:	9301      	str	r3, [sp, #4]
 80117f6:	f1b8 0300 	subs.w	r3, r8, #0
 80117fa:	d027      	beq.n	801184c <__d2b+0x76>
 80117fc:	a802      	add	r0, sp, #8
 80117fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011802:	f7ff fe00 	bl	8011406 <__lo0bits>
 8011806:	9900      	ldr	r1, [sp, #0]
 8011808:	b1f0      	cbz	r0, 8011848 <__d2b+0x72>
 801180a:	9a01      	ldr	r2, [sp, #4]
 801180c:	f1c0 0320 	rsb	r3, r0, #32
 8011810:	fa02 f303 	lsl.w	r3, r2, r3
 8011814:	430b      	orrs	r3, r1
 8011816:	40c2      	lsrs	r2, r0
 8011818:	617b      	str	r3, [r7, #20]
 801181a:	9201      	str	r2, [sp, #4]
 801181c:	9b01      	ldr	r3, [sp, #4]
 801181e:	61bb      	str	r3, [r7, #24]
 8011820:	2b00      	cmp	r3, #0
 8011822:	bf14      	ite	ne
 8011824:	2102      	movne	r1, #2
 8011826:	2101      	moveq	r1, #1
 8011828:	6139      	str	r1, [r7, #16]
 801182a:	b1c4      	cbz	r4, 801185e <__d2b+0x88>
 801182c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011830:	4404      	add	r4, r0
 8011832:	6034      	str	r4, [r6, #0]
 8011834:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011838:	6028      	str	r0, [r5, #0]
 801183a:	4638      	mov	r0, r7
 801183c:	b003      	add	sp, #12
 801183e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011846:	e7d5      	b.n	80117f4 <__d2b+0x1e>
 8011848:	6179      	str	r1, [r7, #20]
 801184a:	e7e7      	b.n	801181c <__d2b+0x46>
 801184c:	a801      	add	r0, sp, #4
 801184e:	f7ff fdda 	bl	8011406 <__lo0bits>
 8011852:	9b01      	ldr	r3, [sp, #4]
 8011854:	617b      	str	r3, [r7, #20]
 8011856:	2101      	movs	r1, #1
 8011858:	6139      	str	r1, [r7, #16]
 801185a:	3020      	adds	r0, #32
 801185c:	e7e5      	b.n	801182a <__d2b+0x54>
 801185e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011862:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011866:	6030      	str	r0, [r6, #0]
 8011868:	6918      	ldr	r0, [r3, #16]
 801186a:	f7ff fdad 	bl	80113c8 <__hi0bits>
 801186e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011872:	e7e1      	b.n	8011838 <__d2b+0x62>

08011874 <_calloc_r>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	fb02 f401 	mul.w	r4, r2, r1
 801187a:	4621      	mov	r1, r4
 801187c:	f000 f856 	bl	801192c <_malloc_r>
 8011880:	4605      	mov	r5, r0
 8011882:	b118      	cbz	r0, 801188c <_calloc_r+0x18>
 8011884:	4622      	mov	r2, r4
 8011886:	2100      	movs	r1, #0
 8011888:	f7fe fa3a 	bl	800fd00 <memset>
 801188c:	4628      	mov	r0, r5
 801188e:	bd38      	pop	{r3, r4, r5, pc}

08011890 <_free_r>:
 8011890:	b538      	push	{r3, r4, r5, lr}
 8011892:	4605      	mov	r5, r0
 8011894:	2900      	cmp	r1, #0
 8011896:	d045      	beq.n	8011924 <_free_r+0x94>
 8011898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801189c:	1f0c      	subs	r4, r1, #4
 801189e:	2b00      	cmp	r3, #0
 80118a0:	bfb8      	it	lt
 80118a2:	18e4      	addlt	r4, r4, r3
 80118a4:	f000 fa29 	bl	8011cfa <__malloc_lock>
 80118a8:	4a1f      	ldr	r2, [pc, #124]	; (8011928 <_free_r+0x98>)
 80118aa:	6813      	ldr	r3, [r2, #0]
 80118ac:	4610      	mov	r0, r2
 80118ae:	b933      	cbnz	r3, 80118be <_free_r+0x2e>
 80118b0:	6063      	str	r3, [r4, #4]
 80118b2:	6014      	str	r4, [r2, #0]
 80118b4:	4628      	mov	r0, r5
 80118b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118ba:	f000 ba1f 	b.w	8011cfc <__malloc_unlock>
 80118be:	42a3      	cmp	r3, r4
 80118c0:	d90c      	bls.n	80118dc <_free_r+0x4c>
 80118c2:	6821      	ldr	r1, [r4, #0]
 80118c4:	1862      	adds	r2, r4, r1
 80118c6:	4293      	cmp	r3, r2
 80118c8:	bf04      	itt	eq
 80118ca:	681a      	ldreq	r2, [r3, #0]
 80118cc:	685b      	ldreq	r3, [r3, #4]
 80118ce:	6063      	str	r3, [r4, #4]
 80118d0:	bf04      	itt	eq
 80118d2:	1852      	addeq	r2, r2, r1
 80118d4:	6022      	streq	r2, [r4, #0]
 80118d6:	6004      	str	r4, [r0, #0]
 80118d8:	e7ec      	b.n	80118b4 <_free_r+0x24>
 80118da:	4613      	mov	r3, r2
 80118dc:	685a      	ldr	r2, [r3, #4]
 80118de:	b10a      	cbz	r2, 80118e4 <_free_r+0x54>
 80118e0:	42a2      	cmp	r2, r4
 80118e2:	d9fa      	bls.n	80118da <_free_r+0x4a>
 80118e4:	6819      	ldr	r1, [r3, #0]
 80118e6:	1858      	adds	r0, r3, r1
 80118e8:	42a0      	cmp	r0, r4
 80118ea:	d10b      	bne.n	8011904 <_free_r+0x74>
 80118ec:	6820      	ldr	r0, [r4, #0]
 80118ee:	4401      	add	r1, r0
 80118f0:	1858      	adds	r0, r3, r1
 80118f2:	4282      	cmp	r2, r0
 80118f4:	6019      	str	r1, [r3, #0]
 80118f6:	d1dd      	bne.n	80118b4 <_free_r+0x24>
 80118f8:	6810      	ldr	r0, [r2, #0]
 80118fa:	6852      	ldr	r2, [r2, #4]
 80118fc:	605a      	str	r2, [r3, #4]
 80118fe:	4401      	add	r1, r0
 8011900:	6019      	str	r1, [r3, #0]
 8011902:	e7d7      	b.n	80118b4 <_free_r+0x24>
 8011904:	d902      	bls.n	801190c <_free_r+0x7c>
 8011906:	230c      	movs	r3, #12
 8011908:	602b      	str	r3, [r5, #0]
 801190a:	e7d3      	b.n	80118b4 <_free_r+0x24>
 801190c:	6820      	ldr	r0, [r4, #0]
 801190e:	1821      	adds	r1, r4, r0
 8011910:	428a      	cmp	r2, r1
 8011912:	bf04      	itt	eq
 8011914:	6811      	ldreq	r1, [r2, #0]
 8011916:	6852      	ldreq	r2, [r2, #4]
 8011918:	6062      	str	r2, [r4, #4]
 801191a:	bf04      	itt	eq
 801191c:	1809      	addeq	r1, r1, r0
 801191e:	6021      	streq	r1, [r4, #0]
 8011920:	605c      	str	r4, [r3, #4]
 8011922:	e7c7      	b.n	80118b4 <_free_r+0x24>
 8011924:	bd38      	pop	{r3, r4, r5, pc}
 8011926:	bf00      	nop
 8011928:	200095f4 	.word	0x200095f4

0801192c <_malloc_r>:
 801192c:	b570      	push	{r4, r5, r6, lr}
 801192e:	1ccd      	adds	r5, r1, #3
 8011930:	f025 0503 	bic.w	r5, r5, #3
 8011934:	3508      	adds	r5, #8
 8011936:	2d0c      	cmp	r5, #12
 8011938:	bf38      	it	cc
 801193a:	250c      	movcc	r5, #12
 801193c:	2d00      	cmp	r5, #0
 801193e:	4606      	mov	r6, r0
 8011940:	db01      	blt.n	8011946 <_malloc_r+0x1a>
 8011942:	42a9      	cmp	r1, r5
 8011944:	d903      	bls.n	801194e <_malloc_r+0x22>
 8011946:	230c      	movs	r3, #12
 8011948:	6033      	str	r3, [r6, #0]
 801194a:	2000      	movs	r0, #0
 801194c:	bd70      	pop	{r4, r5, r6, pc}
 801194e:	f000 f9d4 	bl	8011cfa <__malloc_lock>
 8011952:	4a21      	ldr	r2, [pc, #132]	; (80119d8 <_malloc_r+0xac>)
 8011954:	6814      	ldr	r4, [r2, #0]
 8011956:	4621      	mov	r1, r4
 8011958:	b991      	cbnz	r1, 8011980 <_malloc_r+0x54>
 801195a:	4c20      	ldr	r4, [pc, #128]	; (80119dc <_malloc_r+0xb0>)
 801195c:	6823      	ldr	r3, [r4, #0]
 801195e:	b91b      	cbnz	r3, 8011968 <_malloc_r+0x3c>
 8011960:	4630      	mov	r0, r6
 8011962:	f000 f98f 	bl	8011c84 <_sbrk_r>
 8011966:	6020      	str	r0, [r4, #0]
 8011968:	4629      	mov	r1, r5
 801196a:	4630      	mov	r0, r6
 801196c:	f000 f98a 	bl	8011c84 <_sbrk_r>
 8011970:	1c43      	adds	r3, r0, #1
 8011972:	d124      	bne.n	80119be <_malloc_r+0x92>
 8011974:	230c      	movs	r3, #12
 8011976:	6033      	str	r3, [r6, #0]
 8011978:	4630      	mov	r0, r6
 801197a:	f000 f9bf 	bl	8011cfc <__malloc_unlock>
 801197e:	e7e4      	b.n	801194a <_malloc_r+0x1e>
 8011980:	680b      	ldr	r3, [r1, #0]
 8011982:	1b5b      	subs	r3, r3, r5
 8011984:	d418      	bmi.n	80119b8 <_malloc_r+0x8c>
 8011986:	2b0b      	cmp	r3, #11
 8011988:	d90f      	bls.n	80119aa <_malloc_r+0x7e>
 801198a:	600b      	str	r3, [r1, #0]
 801198c:	50cd      	str	r5, [r1, r3]
 801198e:	18cc      	adds	r4, r1, r3
 8011990:	4630      	mov	r0, r6
 8011992:	f000 f9b3 	bl	8011cfc <__malloc_unlock>
 8011996:	f104 000b 	add.w	r0, r4, #11
 801199a:	1d23      	adds	r3, r4, #4
 801199c:	f020 0007 	bic.w	r0, r0, #7
 80119a0:	1ac3      	subs	r3, r0, r3
 80119a2:	d0d3      	beq.n	801194c <_malloc_r+0x20>
 80119a4:	425a      	negs	r2, r3
 80119a6:	50e2      	str	r2, [r4, r3]
 80119a8:	e7d0      	b.n	801194c <_malloc_r+0x20>
 80119aa:	428c      	cmp	r4, r1
 80119ac:	684b      	ldr	r3, [r1, #4]
 80119ae:	bf16      	itet	ne
 80119b0:	6063      	strne	r3, [r4, #4]
 80119b2:	6013      	streq	r3, [r2, #0]
 80119b4:	460c      	movne	r4, r1
 80119b6:	e7eb      	b.n	8011990 <_malloc_r+0x64>
 80119b8:	460c      	mov	r4, r1
 80119ba:	6849      	ldr	r1, [r1, #4]
 80119bc:	e7cc      	b.n	8011958 <_malloc_r+0x2c>
 80119be:	1cc4      	adds	r4, r0, #3
 80119c0:	f024 0403 	bic.w	r4, r4, #3
 80119c4:	42a0      	cmp	r0, r4
 80119c6:	d005      	beq.n	80119d4 <_malloc_r+0xa8>
 80119c8:	1a21      	subs	r1, r4, r0
 80119ca:	4630      	mov	r0, r6
 80119cc:	f000 f95a 	bl	8011c84 <_sbrk_r>
 80119d0:	3001      	adds	r0, #1
 80119d2:	d0cf      	beq.n	8011974 <_malloc_r+0x48>
 80119d4:	6025      	str	r5, [r4, #0]
 80119d6:	e7db      	b.n	8011990 <_malloc_r+0x64>
 80119d8:	200095f4 	.word	0x200095f4
 80119dc:	200095f8 	.word	0x200095f8

080119e0 <__ssputs_r>:
 80119e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119e4:	688e      	ldr	r6, [r1, #8]
 80119e6:	429e      	cmp	r6, r3
 80119e8:	4682      	mov	sl, r0
 80119ea:	460c      	mov	r4, r1
 80119ec:	4690      	mov	r8, r2
 80119ee:	4699      	mov	r9, r3
 80119f0:	d837      	bhi.n	8011a62 <__ssputs_r+0x82>
 80119f2:	898a      	ldrh	r2, [r1, #12]
 80119f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80119f8:	d031      	beq.n	8011a5e <__ssputs_r+0x7e>
 80119fa:	6825      	ldr	r5, [r4, #0]
 80119fc:	6909      	ldr	r1, [r1, #16]
 80119fe:	1a6f      	subs	r7, r5, r1
 8011a00:	6965      	ldr	r5, [r4, #20]
 8011a02:	2302      	movs	r3, #2
 8011a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a08:	fb95 f5f3 	sdiv	r5, r5, r3
 8011a0c:	f109 0301 	add.w	r3, r9, #1
 8011a10:	443b      	add	r3, r7
 8011a12:	429d      	cmp	r5, r3
 8011a14:	bf38      	it	cc
 8011a16:	461d      	movcc	r5, r3
 8011a18:	0553      	lsls	r3, r2, #21
 8011a1a:	d530      	bpl.n	8011a7e <__ssputs_r+0x9e>
 8011a1c:	4629      	mov	r1, r5
 8011a1e:	f7ff ff85 	bl	801192c <_malloc_r>
 8011a22:	4606      	mov	r6, r0
 8011a24:	b950      	cbnz	r0, 8011a3c <__ssputs_r+0x5c>
 8011a26:	230c      	movs	r3, #12
 8011a28:	f8ca 3000 	str.w	r3, [sl]
 8011a2c:	89a3      	ldrh	r3, [r4, #12]
 8011a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a32:	81a3      	strh	r3, [r4, #12]
 8011a34:	f04f 30ff 	mov.w	r0, #4294967295
 8011a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a3c:	463a      	mov	r2, r7
 8011a3e:	6921      	ldr	r1, [r4, #16]
 8011a40:	f7fe f953 	bl	800fcea <memcpy>
 8011a44:	89a3      	ldrh	r3, [r4, #12]
 8011a46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a4e:	81a3      	strh	r3, [r4, #12]
 8011a50:	6126      	str	r6, [r4, #16]
 8011a52:	6165      	str	r5, [r4, #20]
 8011a54:	443e      	add	r6, r7
 8011a56:	1bed      	subs	r5, r5, r7
 8011a58:	6026      	str	r6, [r4, #0]
 8011a5a:	60a5      	str	r5, [r4, #8]
 8011a5c:	464e      	mov	r6, r9
 8011a5e:	454e      	cmp	r6, r9
 8011a60:	d900      	bls.n	8011a64 <__ssputs_r+0x84>
 8011a62:	464e      	mov	r6, r9
 8011a64:	4632      	mov	r2, r6
 8011a66:	4641      	mov	r1, r8
 8011a68:	6820      	ldr	r0, [r4, #0]
 8011a6a:	f000 f92d 	bl	8011cc8 <memmove>
 8011a6e:	68a3      	ldr	r3, [r4, #8]
 8011a70:	1b9b      	subs	r3, r3, r6
 8011a72:	60a3      	str	r3, [r4, #8]
 8011a74:	6823      	ldr	r3, [r4, #0]
 8011a76:	441e      	add	r6, r3
 8011a78:	6026      	str	r6, [r4, #0]
 8011a7a:	2000      	movs	r0, #0
 8011a7c:	e7dc      	b.n	8011a38 <__ssputs_r+0x58>
 8011a7e:	462a      	mov	r2, r5
 8011a80:	f000 f93d 	bl	8011cfe <_realloc_r>
 8011a84:	4606      	mov	r6, r0
 8011a86:	2800      	cmp	r0, #0
 8011a88:	d1e2      	bne.n	8011a50 <__ssputs_r+0x70>
 8011a8a:	6921      	ldr	r1, [r4, #16]
 8011a8c:	4650      	mov	r0, sl
 8011a8e:	f7ff feff 	bl	8011890 <_free_r>
 8011a92:	e7c8      	b.n	8011a26 <__ssputs_r+0x46>

08011a94 <_svfiprintf_r>:
 8011a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a98:	461d      	mov	r5, r3
 8011a9a:	898b      	ldrh	r3, [r1, #12]
 8011a9c:	061f      	lsls	r7, r3, #24
 8011a9e:	b09d      	sub	sp, #116	; 0x74
 8011aa0:	4680      	mov	r8, r0
 8011aa2:	460c      	mov	r4, r1
 8011aa4:	4616      	mov	r6, r2
 8011aa6:	d50f      	bpl.n	8011ac8 <_svfiprintf_r+0x34>
 8011aa8:	690b      	ldr	r3, [r1, #16]
 8011aaa:	b96b      	cbnz	r3, 8011ac8 <_svfiprintf_r+0x34>
 8011aac:	2140      	movs	r1, #64	; 0x40
 8011aae:	f7ff ff3d 	bl	801192c <_malloc_r>
 8011ab2:	6020      	str	r0, [r4, #0]
 8011ab4:	6120      	str	r0, [r4, #16]
 8011ab6:	b928      	cbnz	r0, 8011ac4 <_svfiprintf_r+0x30>
 8011ab8:	230c      	movs	r3, #12
 8011aba:	f8c8 3000 	str.w	r3, [r8]
 8011abe:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac2:	e0c8      	b.n	8011c56 <_svfiprintf_r+0x1c2>
 8011ac4:	2340      	movs	r3, #64	; 0x40
 8011ac6:	6163      	str	r3, [r4, #20]
 8011ac8:	2300      	movs	r3, #0
 8011aca:	9309      	str	r3, [sp, #36]	; 0x24
 8011acc:	2320      	movs	r3, #32
 8011ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ad2:	2330      	movs	r3, #48	; 0x30
 8011ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ad8:	9503      	str	r5, [sp, #12]
 8011ada:	f04f 0b01 	mov.w	fp, #1
 8011ade:	4637      	mov	r7, r6
 8011ae0:	463d      	mov	r5, r7
 8011ae2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011ae6:	b10b      	cbz	r3, 8011aec <_svfiprintf_r+0x58>
 8011ae8:	2b25      	cmp	r3, #37	; 0x25
 8011aea:	d13e      	bne.n	8011b6a <_svfiprintf_r+0xd6>
 8011aec:	ebb7 0a06 	subs.w	sl, r7, r6
 8011af0:	d00b      	beq.n	8011b0a <_svfiprintf_r+0x76>
 8011af2:	4653      	mov	r3, sl
 8011af4:	4632      	mov	r2, r6
 8011af6:	4621      	mov	r1, r4
 8011af8:	4640      	mov	r0, r8
 8011afa:	f7ff ff71 	bl	80119e0 <__ssputs_r>
 8011afe:	3001      	adds	r0, #1
 8011b00:	f000 80a4 	beq.w	8011c4c <_svfiprintf_r+0x1b8>
 8011b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b06:	4453      	add	r3, sl
 8011b08:	9309      	str	r3, [sp, #36]	; 0x24
 8011b0a:	783b      	ldrb	r3, [r7, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f000 809d 	beq.w	8011c4c <_svfiprintf_r+0x1b8>
 8011b12:	2300      	movs	r3, #0
 8011b14:	f04f 32ff 	mov.w	r2, #4294967295
 8011b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b1c:	9304      	str	r3, [sp, #16]
 8011b1e:	9307      	str	r3, [sp, #28]
 8011b20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b24:	931a      	str	r3, [sp, #104]	; 0x68
 8011b26:	462f      	mov	r7, r5
 8011b28:	2205      	movs	r2, #5
 8011b2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011b2e:	4850      	ldr	r0, [pc, #320]	; (8011c70 <_svfiprintf_r+0x1dc>)
 8011b30:	f7f4 fc16 	bl	8006360 <memchr>
 8011b34:	9b04      	ldr	r3, [sp, #16]
 8011b36:	b9d0      	cbnz	r0, 8011b6e <_svfiprintf_r+0xda>
 8011b38:	06d9      	lsls	r1, r3, #27
 8011b3a:	bf44      	itt	mi
 8011b3c:	2220      	movmi	r2, #32
 8011b3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011b42:	071a      	lsls	r2, r3, #28
 8011b44:	bf44      	itt	mi
 8011b46:	222b      	movmi	r2, #43	; 0x2b
 8011b48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011b4c:	782a      	ldrb	r2, [r5, #0]
 8011b4e:	2a2a      	cmp	r2, #42	; 0x2a
 8011b50:	d015      	beq.n	8011b7e <_svfiprintf_r+0xea>
 8011b52:	9a07      	ldr	r2, [sp, #28]
 8011b54:	462f      	mov	r7, r5
 8011b56:	2000      	movs	r0, #0
 8011b58:	250a      	movs	r5, #10
 8011b5a:	4639      	mov	r1, r7
 8011b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b60:	3b30      	subs	r3, #48	; 0x30
 8011b62:	2b09      	cmp	r3, #9
 8011b64:	d94d      	bls.n	8011c02 <_svfiprintf_r+0x16e>
 8011b66:	b1b8      	cbz	r0, 8011b98 <_svfiprintf_r+0x104>
 8011b68:	e00f      	b.n	8011b8a <_svfiprintf_r+0xf6>
 8011b6a:	462f      	mov	r7, r5
 8011b6c:	e7b8      	b.n	8011ae0 <_svfiprintf_r+0x4c>
 8011b6e:	4a40      	ldr	r2, [pc, #256]	; (8011c70 <_svfiprintf_r+0x1dc>)
 8011b70:	1a80      	subs	r0, r0, r2
 8011b72:	fa0b f000 	lsl.w	r0, fp, r0
 8011b76:	4318      	orrs	r0, r3
 8011b78:	9004      	str	r0, [sp, #16]
 8011b7a:	463d      	mov	r5, r7
 8011b7c:	e7d3      	b.n	8011b26 <_svfiprintf_r+0x92>
 8011b7e:	9a03      	ldr	r2, [sp, #12]
 8011b80:	1d11      	adds	r1, r2, #4
 8011b82:	6812      	ldr	r2, [r2, #0]
 8011b84:	9103      	str	r1, [sp, #12]
 8011b86:	2a00      	cmp	r2, #0
 8011b88:	db01      	blt.n	8011b8e <_svfiprintf_r+0xfa>
 8011b8a:	9207      	str	r2, [sp, #28]
 8011b8c:	e004      	b.n	8011b98 <_svfiprintf_r+0x104>
 8011b8e:	4252      	negs	r2, r2
 8011b90:	f043 0302 	orr.w	r3, r3, #2
 8011b94:	9207      	str	r2, [sp, #28]
 8011b96:	9304      	str	r3, [sp, #16]
 8011b98:	783b      	ldrb	r3, [r7, #0]
 8011b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8011b9c:	d10c      	bne.n	8011bb8 <_svfiprintf_r+0x124>
 8011b9e:	787b      	ldrb	r3, [r7, #1]
 8011ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8011ba2:	d133      	bne.n	8011c0c <_svfiprintf_r+0x178>
 8011ba4:	9b03      	ldr	r3, [sp, #12]
 8011ba6:	1d1a      	adds	r2, r3, #4
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	9203      	str	r2, [sp, #12]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	bfb8      	it	lt
 8011bb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8011bb4:	3702      	adds	r7, #2
 8011bb6:	9305      	str	r3, [sp, #20]
 8011bb8:	4d2e      	ldr	r5, [pc, #184]	; (8011c74 <_svfiprintf_r+0x1e0>)
 8011bba:	7839      	ldrb	r1, [r7, #0]
 8011bbc:	2203      	movs	r2, #3
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f7f4 fbce 	bl	8006360 <memchr>
 8011bc4:	b138      	cbz	r0, 8011bd6 <_svfiprintf_r+0x142>
 8011bc6:	2340      	movs	r3, #64	; 0x40
 8011bc8:	1b40      	subs	r0, r0, r5
 8011bca:	fa03 f000 	lsl.w	r0, r3, r0
 8011bce:	9b04      	ldr	r3, [sp, #16]
 8011bd0:	4303      	orrs	r3, r0
 8011bd2:	3701      	adds	r7, #1
 8011bd4:	9304      	str	r3, [sp, #16]
 8011bd6:	7839      	ldrb	r1, [r7, #0]
 8011bd8:	4827      	ldr	r0, [pc, #156]	; (8011c78 <_svfiprintf_r+0x1e4>)
 8011bda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bde:	2206      	movs	r2, #6
 8011be0:	1c7e      	adds	r6, r7, #1
 8011be2:	f7f4 fbbd 	bl	8006360 <memchr>
 8011be6:	2800      	cmp	r0, #0
 8011be8:	d038      	beq.n	8011c5c <_svfiprintf_r+0x1c8>
 8011bea:	4b24      	ldr	r3, [pc, #144]	; (8011c7c <_svfiprintf_r+0x1e8>)
 8011bec:	bb13      	cbnz	r3, 8011c34 <_svfiprintf_r+0x1a0>
 8011bee:	9b03      	ldr	r3, [sp, #12]
 8011bf0:	3307      	adds	r3, #7
 8011bf2:	f023 0307 	bic.w	r3, r3, #7
 8011bf6:	3308      	adds	r3, #8
 8011bf8:	9303      	str	r3, [sp, #12]
 8011bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bfc:	444b      	add	r3, r9
 8011bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8011c00:	e76d      	b.n	8011ade <_svfiprintf_r+0x4a>
 8011c02:	fb05 3202 	mla	r2, r5, r2, r3
 8011c06:	2001      	movs	r0, #1
 8011c08:	460f      	mov	r7, r1
 8011c0a:	e7a6      	b.n	8011b5a <_svfiprintf_r+0xc6>
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	3701      	adds	r7, #1
 8011c10:	9305      	str	r3, [sp, #20]
 8011c12:	4619      	mov	r1, r3
 8011c14:	250a      	movs	r5, #10
 8011c16:	4638      	mov	r0, r7
 8011c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c1c:	3a30      	subs	r2, #48	; 0x30
 8011c1e:	2a09      	cmp	r2, #9
 8011c20:	d903      	bls.n	8011c2a <_svfiprintf_r+0x196>
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d0c8      	beq.n	8011bb8 <_svfiprintf_r+0x124>
 8011c26:	9105      	str	r1, [sp, #20]
 8011c28:	e7c6      	b.n	8011bb8 <_svfiprintf_r+0x124>
 8011c2a:	fb05 2101 	mla	r1, r5, r1, r2
 8011c2e:	2301      	movs	r3, #1
 8011c30:	4607      	mov	r7, r0
 8011c32:	e7f0      	b.n	8011c16 <_svfiprintf_r+0x182>
 8011c34:	ab03      	add	r3, sp, #12
 8011c36:	9300      	str	r3, [sp, #0]
 8011c38:	4622      	mov	r2, r4
 8011c3a:	4b11      	ldr	r3, [pc, #68]	; (8011c80 <_svfiprintf_r+0x1ec>)
 8011c3c:	a904      	add	r1, sp, #16
 8011c3e:	4640      	mov	r0, r8
 8011c40:	f7fe f8fa 	bl	800fe38 <_printf_float>
 8011c44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011c48:	4681      	mov	r9, r0
 8011c4a:	d1d6      	bne.n	8011bfa <_svfiprintf_r+0x166>
 8011c4c:	89a3      	ldrh	r3, [r4, #12]
 8011c4e:	065b      	lsls	r3, r3, #25
 8011c50:	f53f af35 	bmi.w	8011abe <_svfiprintf_r+0x2a>
 8011c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c56:	b01d      	add	sp, #116	; 0x74
 8011c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c5c:	ab03      	add	r3, sp, #12
 8011c5e:	9300      	str	r3, [sp, #0]
 8011c60:	4622      	mov	r2, r4
 8011c62:	4b07      	ldr	r3, [pc, #28]	; (8011c80 <_svfiprintf_r+0x1ec>)
 8011c64:	a904      	add	r1, sp, #16
 8011c66:	4640      	mov	r0, r8
 8011c68:	f7fe fb9c 	bl	80103a4 <_printf_i>
 8011c6c:	e7ea      	b.n	8011c44 <_svfiprintf_r+0x1b0>
 8011c6e:	bf00      	nop
 8011c70:	0806df74 	.word	0x0806df74
 8011c74:	0806df7a 	.word	0x0806df7a
 8011c78:	0806df7e 	.word	0x0806df7e
 8011c7c:	0800fe39 	.word	0x0800fe39
 8011c80:	080119e1 	.word	0x080119e1

08011c84 <_sbrk_r>:
 8011c84:	b538      	push	{r3, r4, r5, lr}
 8011c86:	4c06      	ldr	r4, [pc, #24]	; (8011ca0 <_sbrk_r+0x1c>)
 8011c88:	2300      	movs	r3, #0
 8011c8a:	4605      	mov	r5, r0
 8011c8c:	4608      	mov	r0, r1
 8011c8e:	6023      	str	r3, [r4, #0]
 8011c90:	f7f6 fe68 	bl	8008964 <_sbrk>
 8011c94:	1c43      	adds	r3, r0, #1
 8011c96:	d102      	bne.n	8011c9e <_sbrk_r+0x1a>
 8011c98:	6823      	ldr	r3, [r4, #0]
 8011c9a:	b103      	cbz	r3, 8011c9e <_sbrk_r+0x1a>
 8011c9c:	602b      	str	r3, [r5, #0]
 8011c9e:	bd38      	pop	{r3, r4, r5, pc}
 8011ca0:	2000a898 	.word	0x2000a898

08011ca4 <__ascii_mbtowc>:
 8011ca4:	b082      	sub	sp, #8
 8011ca6:	b901      	cbnz	r1, 8011caa <__ascii_mbtowc+0x6>
 8011ca8:	a901      	add	r1, sp, #4
 8011caa:	b142      	cbz	r2, 8011cbe <__ascii_mbtowc+0x1a>
 8011cac:	b14b      	cbz	r3, 8011cc2 <__ascii_mbtowc+0x1e>
 8011cae:	7813      	ldrb	r3, [r2, #0]
 8011cb0:	600b      	str	r3, [r1, #0]
 8011cb2:	7812      	ldrb	r2, [r2, #0]
 8011cb4:	1c10      	adds	r0, r2, #0
 8011cb6:	bf18      	it	ne
 8011cb8:	2001      	movne	r0, #1
 8011cba:	b002      	add	sp, #8
 8011cbc:	4770      	bx	lr
 8011cbe:	4610      	mov	r0, r2
 8011cc0:	e7fb      	b.n	8011cba <__ascii_mbtowc+0x16>
 8011cc2:	f06f 0001 	mvn.w	r0, #1
 8011cc6:	e7f8      	b.n	8011cba <__ascii_mbtowc+0x16>

08011cc8 <memmove>:
 8011cc8:	4288      	cmp	r0, r1
 8011cca:	b510      	push	{r4, lr}
 8011ccc:	eb01 0302 	add.w	r3, r1, r2
 8011cd0:	d807      	bhi.n	8011ce2 <memmove+0x1a>
 8011cd2:	1e42      	subs	r2, r0, #1
 8011cd4:	4299      	cmp	r1, r3
 8011cd6:	d00a      	beq.n	8011cee <memmove+0x26>
 8011cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cdc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011ce0:	e7f8      	b.n	8011cd4 <memmove+0xc>
 8011ce2:	4283      	cmp	r3, r0
 8011ce4:	d9f5      	bls.n	8011cd2 <memmove+0xa>
 8011ce6:	1881      	adds	r1, r0, r2
 8011ce8:	1ad2      	subs	r2, r2, r3
 8011cea:	42d3      	cmn	r3, r2
 8011cec:	d100      	bne.n	8011cf0 <memmove+0x28>
 8011cee:	bd10      	pop	{r4, pc}
 8011cf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011cf4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011cf8:	e7f7      	b.n	8011cea <memmove+0x22>

08011cfa <__malloc_lock>:
 8011cfa:	4770      	bx	lr

08011cfc <__malloc_unlock>:
 8011cfc:	4770      	bx	lr

08011cfe <_realloc_r>:
 8011cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d00:	4607      	mov	r7, r0
 8011d02:	4614      	mov	r4, r2
 8011d04:	460e      	mov	r6, r1
 8011d06:	b921      	cbnz	r1, 8011d12 <_realloc_r+0x14>
 8011d08:	4611      	mov	r1, r2
 8011d0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011d0e:	f7ff be0d 	b.w	801192c <_malloc_r>
 8011d12:	b922      	cbnz	r2, 8011d1e <_realloc_r+0x20>
 8011d14:	f7ff fdbc 	bl	8011890 <_free_r>
 8011d18:	4625      	mov	r5, r4
 8011d1a:	4628      	mov	r0, r5
 8011d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d1e:	f000 f821 	bl	8011d64 <_malloc_usable_size_r>
 8011d22:	42a0      	cmp	r0, r4
 8011d24:	d20f      	bcs.n	8011d46 <_realloc_r+0x48>
 8011d26:	4621      	mov	r1, r4
 8011d28:	4638      	mov	r0, r7
 8011d2a:	f7ff fdff 	bl	801192c <_malloc_r>
 8011d2e:	4605      	mov	r5, r0
 8011d30:	2800      	cmp	r0, #0
 8011d32:	d0f2      	beq.n	8011d1a <_realloc_r+0x1c>
 8011d34:	4631      	mov	r1, r6
 8011d36:	4622      	mov	r2, r4
 8011d38:	f7fd ffd7 	bl	800fcea <memcpy>
 8011d3c:	4631      	mov	r1, r6
 8011d3e:	4638      	mov	r0, r7
 8011d40:	f7ff fda6 	bl	8011890 <_free_r>
 8011d44:	e7e9      	b.n	8011d1a <_realloc_r+0x1c>
 8011d46:	4635      	mov	r5, r6
 8011d48:	e7e7      	b.n	8011d1a <_realloc_r+0x1c>

08011d4a <__ascii_wctomb>:
 8011d4a:	b149      	cbz	r1, 8011d60 <__ascii_wctomb+0x16>
 8011d4c:	2aff      	cmp	r2, #255	; 0xff
 8011d4e:	bf85      	ittet	hi
 8011d50:	238a      	movhi	r3, #138	; 0x8a
 8011d52:	6003      	strhi	r3, [r0, #0]
 8011d54:	700a      	strbls	r2, [r1, #0]
 8011d56:	f04f 30ff 	movhi.w	r0, #4294967295
 8011d5a:	bf98      	it	ls
 8011d5c:	2001      	movls	r0, #1
 8011d5e:	4770      	bx	lr
 8011d60:	4608      	mov	r0, r1
 8011d62:	4770      	bx	lr

08011d64 <_malloc_usable_size_r>:
 8011d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d68:	1f18      	subs	r0, r3, #4
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	bfbc      	itt	lt
 8011d6e:	580b      	ldrlt	r3, [r1, r0]
 8011d70:	18c0      	addlt	r0, r0, r3
 8011d72:	4770      	bx	lr

08011d74 <asinhf>:
 8011d74:	b510      	push	{r4, lr}
 8011d76:	ee10 4a10 	vmov	r4, s0
 8011d7a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011d7e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011d82:	ed2d 8b04 	vpush	{d8-d9}
 8011d86:	eeb0 8a40 	vmov.f32	s16, s0
 8011d8a:	db06      	blt.n	8011d9a <asinhf+0x26>
 8011d8c:	ee30 8a00 	vadd.f32	s16, s0, s0
 8011d90:	eeb0 0a48 	vmov.f32	s0, s16
 8011d94:	ecbd 8b04 	vpop	{d8-d9}
 8011d98:	bd10      	pop	{r4, pc}
 8011d9a:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8011d9e:	da21      	bge.n	8011de4 <asinhf+0x70>
 8011da0:	eddf 7a26 	vldr	s15, [pc, #152]	; 8011e3c <asinhf+0xc8>
 8011da4:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db4:	dcec      	bgt.n	8011d90 <asinhf+0x1c>
 8011db6:	eeb0 0a48 	vmov.f32	s0, s16
 8011dba:	f000 fb77 	bl	80124ac <fabsf>
 8011dbe:	ee68 8a08 	vmul.f32	s17, s16, s16
 8011dc2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011dc6:	eeb0 9a40 	vmov.f32	s18, s0
 8011dca:	ee38 0a88 	vadd.f32	s0, s17, s16
 8011dce:	f002 fc6b 	bl	80146a8 <__ieee754_sqrtf>
 8011dd2:	ee30 8a08 	vadd.f32	s16, s0, s16
 8011dd6:	ee88 0a88 	vdiv.f32	s0, s17, s16
 8011dda:	ee30 0a09 	vadd.f32	s0, s0, s18
 8011dde:	f000 fbaf 	bl	8012540 <log1pf>
 8011de2:	e028      	b.n	8011e36 <asinhf+0xc2>
 8011de4:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8011de8:	dd0c      	ble.n	8011e04 <asinhf+0x90>
 8011dea:	f000 fb5f 	bl	80124ac <fabsf>
 8011dee:	f001 ff13 	bl	8013c18 <__ieee754_logf>
 8011df2:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8011e40 <asinhf+0xcc>
 8011df6:	ee30 8a08 	vadd.f32	s16, s0, s16
 8011dfa:	2c00      	cmp	r4, #0
 8011dfc:	bfd8      	it	le
 8011dfe:	eeb1 8a48 	vnegle.f32	s16, s16
 8011e02:	e7c5      	b.n	8011d90 <asinhf+0x1c>
 8011e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e08:	ddd5      	ble.n	8011db6 <asinhf+0x42>
 8011e0a:	f000 fb4f 	bl	80124ac <fabsf>
 8011e0e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011e12:	eef0 8a40 	vmov.f32	s17, s0
 8011e16:	eeb0 0a49 	vmov.f32	s0, s18
 8011e1a:	eea8 0a08 	vfma.f32	s0, s16, s16
 8011e1e:	f002 fc43 	bl	80146a8 <__ieee754_sqrtf>
 8011e22:	ee70 7a28 	vadd.f32	s15, s0, s17
 8011e26:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8011e2a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011e2e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011e32:	f001 fef1 	bl	8013c18 <__ieee754_logf>
 8011e36:	eeb0 8a40 	vmov.f32	s16, s0
 8011e3a:	e7de      	b.n	8011dfa <asinhf+0x86>
 8011e3c:	7149f2ca 	.word	0x7149f2ca
 8011e40:	3f317218 	.word	0x3f317218

08011e44 <atanf>:
 8011e44:	b538      	push	{r3, r4, r5, lr}
 8011e46:	ee10 5a10 	vmov	r5, s0
 8011e4a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011e4e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8011e52:	eef0 7a40 	vmov.f32	s15, s0
 8011e56:	db10      	blt.n	8011e7a <atanf+0x36>
 8011e58:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011e5c:	dd04      	ble.n	8011e68 <atanf+0x24>
 8011e5e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011e62:	eeb0 0a67 	vmov.f32	s0, s15
 8011e66:	bd38      	pop	{r3, r4, r5, pc}
 8011e68:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8011fa0 <atanf+0x15c>
 8011e6c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011fa4 <atanf+0x160>
 8011e70:	2d00      	cmp	r5, #0
 8011e72:	bfd8      	it	le
 8011e74:	eef0 7a47 	vmovle.f32	s15, s14
 8011e78:	e7f3      	b.n	8011e62 <atanf+0x1e>
 8011e7a:	4b4b      	ldr	r3, [pc, #300]	; (8011fa8 <atanf+0x164>)
 8011e7c:	429c      	cmp	r4, r3
 8011e7e:	dc10      	bgt.n	8011ea2 <atanf+0x5e>
 8011e80:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8011e84:	da0a      	bge.n	8011e9c <atanf+0x58>
 8011e86:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8011fac <atanf+0x168>
 8011e8a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011e92:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9a:	dce2      	bgt.n	8011e62 <atanf+0x1e>
 8011e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011ea0:	e013      	b.n	8011eca <atanf+0x86>
 8011ea2:	f000 fb03 	bl	80124ac <fabsf>
 8011ea6:	4b42      	ldr	r3, [pc, #264]	; (8011fb0 <atanf+0x16c>)
 8011ea8:	429c      	cmp	r4, r3
 8011eaa:	dc4f      	bgt.n	8011f4c <atanf+0x108>
 8011eac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8011eb0:	429c      	cmp	r4, r3
 8011eb2:	dc41      	bgt.n	8011f38 <atanf+0xf4>
 8011eb4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011eb8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011ebc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011ec6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011eca:	1c5a      	adds	r2, r3, #1
 8011ecc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011ed0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011fb4 <atanf+0x170>
 8011ed4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8011fb8 <atanf+0x174>
 8011ed8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8011fbc <atanf+0x178>
 8011edc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011ee0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011ee4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8011fc0 <atanf+0x17c>
 8011ee8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011eec:	eddf 5a35 	vldr	s11, [pc, #212]	; 8011fc4 <atanf+0x180>
 8011ef0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011ef4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8011fc8 <atanf+0x184>
 8011ef8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011efc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011fcc <atanf+0x188>
 8011f00:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011f04:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011fd0 <atanf+0x18c>
 8011f08:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011f0c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011fd4 <atanf+0x190>
 8011f10:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011f14:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8011fd8 <atanf+0x194>
 8011f18:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011f1c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8011fdc <atanf+0x198>
 8011f20:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011f24:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011f28:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011f2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011f30:	d121      	bne.n	8011f76 <atanf+0x132>
 8011f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f36:	e794      	b.n	8011e62 <atanf+0x1e>
 8011f38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011f40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011f44:	2301      	movs	r3, #1
 8011f46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011f4a:	e7be      	b.n	8011eca <atanf+0x86>
 8011f4c:	4b24      	ldr	r3, [pc, #144]	; (8011fe0 <atanf+0x19c>)
 8011f4e:	429c      	cmp	r4, r3
 8011f50:	dc0b      	bgt.n	8011f6a <atanf+0x126>
 8011f52:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011f5a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011f5e:	2302      	movs	r3, #2
 8011f60:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f68:	e7af      	b.n	8011eca <atanf+0x86>
 8011f6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011f6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011f72:	2303      	movs	r3, #3
 8011f74:	e7a9      	b.n	8011eca <atanf+0x86>
 8011f76:	4a1b      	ldr	r2, [pc, #108]	; (8011fe4 <atanf+0x1a0>)
 8011f78:	491b      	ldr	r1, [pc, #108]	; (8011fe8 <atanf+0x1a4>)
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	441a      	add	r2, r3
 8011f7e:	440b      	add	r3, r1
 8011f80:	edd3 6a00 	vldr	s13, [r3]
 8011f84:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011f88:	2d00      	cmp	r5, #0
 8011f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f8e:	ed92 7a00 	vldr	s14, [r2]
 8011f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f96:	bfb8      	it	lt
 8011f98:	eef1 7a67 	vneglt.f32	s15, s15
 8011f9c:	e761      	b.n	8011e62 <atanf+0x1e>
 8011f9e:	bf00      	nop
 8011fa0:	bfc90fdb 	.word	0xbfc90fdb
 8011fa4:	3fc90fdb 	.word	0x3fc90fdb
 8011fa8:	3edfffff 	.word	0x3edfffff
 8011fac:	7149f2ca 	.word	0x7149f2ca
 8011fb0:	3f97ffff 	.word	0x3f97ffff
 8011fb4:	3c8569d7 	.word	0x3c8569d7
 8011fb8:	3d4bda59 	.word	0x3d4bda59
 8011fbc:	bd6ef16b 	.word	0xbd6ef16b
 8011fc0:	3d886b35 	.word	0x3d886b35
 8011fc4:	3dba2e6e 	.word	0x3dba2e6e
 8011fc8:	3e124925 	.word	0x3e124925
 8011fcc:	3eaaaaab 	.word	0x3eaaaaab
 8011fd0:	bd15a221 	.word	0xbd15a221
 8011fd4:	bd9d8795 	.word	0xbd9d8795
 8011fd8:	bde38e38 	.word	0xbde38e38
 8011fdc:	be4ccccd 	.word	0xbe4ccccd
 8011fe0:	401bffff 	.word	0x401bffff
 8011fe4:	0806e090 	.word	0x0806e090
 8011fe8:	0806e0a0 	.word	0x0806e0a0

08011fec <ceilf>:
 8011fec:	ee10 3a10 	vmov	r3, s0
 8011ff0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011ff4:	0dca      	lsrs	r2, r1, #23
 8011ff6:	3a7f      	subs	r2, #127	; 0x7f
 8011ff8:	2a16      	cmp	r2, #22
 8011ffa:	dc2a      	bgt.n	8012052 <ceilf+0x66>
 8011ffc:	2a00      	cmp	r2, #0
 8011ffe:	da11      	bge.n	8012024 <ceilf+0x38>
 8012000:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012064 <ceilf+0x78>
 8012004:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012008:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012010:	dd05      	ble.n	801201e <ceilf+0x32>
 8012012:	2b00      	cmp	r3, #0
 8012014:	db23      	blt.n	801205e <ceilf+0x72>
 8012016:	2900      	cmp	r1, #0
 8012018:	bf18      	it	ne
 801201a:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801201e:	ee00 3a10 	vmov	s0, r3
 8012022:	4770      	bx	lr
 8012024:	4910      	ldr	r1, [pc, #64]	; (8012068 <ceilf+0x7c>)
 8012026:	4111      	asrs	r1, r2
 8012028:	420b      	tst	r3, r1
 801202a:	d0fa      	beq.n	8012022 <ceilf+0x36>
 801202c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012064 <ceilf+0x78>
 8012030:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012034:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801203c:	ddef      	ble.n	801201e <ceilf+0x32>
 801203e:	2b00      	cmp	r3, #0
 8012040:	bfc2      	ittt	gt
 8012042:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8012046:	fa40 f202 	asrgt.w	r2, r0, r2
 801204a:	189b      	addgt	r3, r3, r2
 801204c:	ea23 0301 	bic.w	r3, r3, r1
 8012050:	e7e5      	b.n	801201e <ceilf+0x32>
 8012052:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012056:	d3e4      	bcc.n	8012022 <ceilf+0x36>
 8012058:	ee30 0a00 	vadd.f32	s0, s0, s0
 801205c:	4770      	bx	lr
 801205e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012062:	e7dc      	b.n	801201e <ceilf+0x32>
 8012064:	7149f2ca 	.word	0x7149f2ca
 8012068:	007fffff 	.word	0x007fffff

0801206c <cosf>:
 801206c:	ee10 3a10 	vmov	r3, s0
 8012070:	b507      	push	{r0, r1, r2, lr}
 8012072:	4a1c      	ldr	r2, [pc, #112]	; (80120e4 <cosf+0x78>)
 8012074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012078:	4293      	cmp	r3, r2
 801207a:	dc04      	bgt.n	8012086 <cosf+0x1a>
 801207c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80120e8 <cosf+0x7c>
 8012080:	f002 fb16 	bl	80146b0 <__kernel_cosf>
 8012084:	e004      	b.n	8012090 <cosf+0x24>
 8012086:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801208a:	db04      	blt.n	8012096 <cosf+0x2a>
 801208c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012090:	b003      	add	sp, #12
 8012092:	f85d fb04 	ldr.w	pc, [sp], #4
 8012096:	4668      	mov	r0, sp
 8012098:	f002 f96c 	bl	8014374 <__ieee754_rem_pio2f>
 801209c:	f000 0003 	and.w	r0, r0, #3
 80120a0:	2801      	cmp	r0, #1
 80120a2:	d007      	beq.n	80120b4 <cosf+0x48>
 80120a4:	2802      	cmp	r0, #2
 80120a6:	d00e      	beq.n	80120c6 <cosf+0x5a>
 80120a8:	b9a0      	cbnz	r0, 80120d4 <cosf+0x68>
 80120aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80120ae:	ed9d 0a00 	vldr	s0, [sp]
 80120b2:	e7e5      	b.n	8012080 <cosf+0x14>
 80120b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80120b8:	ed9d 0a00 	vldr	s0, [sp]
 80120bc:	f002 fdd8 	bl	8014c70 <__kernel_sinf>
 80120c0:	eeb1 0a40 	vneg.f32	s0, s0
 80120c4:	e7e4      	b.n	8012090 <cosf+0x24>
 80120c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80120ca:	ed9d 0a00 	vldr	s0, [sp]
 80120ce:	f002 faef 	bl	80146b0 <__kernel_cosf>
 80120d2:	e7f5      	b.n	80120c0 <cosf+0x54>
 80120d4:	2001      	movs	r0, #1
 80120d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80120da:	ed9d 0a00 	vldr	s0, [sp]
 80120de:	f002 fdc7 	bl	8014c70 <__kernel_sinf>
 80120e2:	e7d5      	b.n	8012090 <cosf+0x24>
 80120e4:	3f490fd8 	.word	0x3f490fd8
 80120e8:	00000000 	.word	0x00000000

080120ec <erff>:
 80120ec:	b538      	push	{r3, r4, r5, lr}
 80120ee:	ee10 4a10 	vmov	r4, s0
 80120f2:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 80120f6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80120fa:	ed2d 8b06 	vpush	{d8-d10}
 80120fe:	eef0 7a40 	vmov.f32	s15, s0
 8012102:	db12      	blt.n	801212a <erff+0x3e>
 8012104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801210c:	0fe4      	lsrs	r4, r4, #31
 801210e:	0064      	lsls	r4, r4, #1
 8012110:	f1c4 0301 	rsb	r3, r4, #1
 8012114:	ee00 3a10 	vmov	s0, r3
 8012118:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801211c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012120:	ecbd 8b06 	vpop	{d8-d10}
 8012124:	eeb0 0a67 	vmov.f32	s0, s15
 8012128:	bd38      	pop	{r3, r4, r5, pc}
 801212a:	4ba4      	ldr	r3, [pc, #656]	; (80123bc <erff+0x2d0>)
 801212c:	429d      	cmp	r5, r3
 801212e:	dc4a      	bgt.n	80121c6 <erff+0xda>
 8012130:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 8012134:	da16      	bge.n	8012164 <erff+0x78>
 8012136:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 801213a:	da0e      	bge.n	801215a <erff+0x6e>
 801213c:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80123c0 <erff+0x2d4>
 8012140:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012144:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8012148:	eea7 0a87 	vfma.f32	s0, s15, s14
 801214c:	eef0 7a40 	vmov.f32	s15, s0
 8012150:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8012154:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012158:	e7e2      	b.n	8012120 <erff+0x34>
 801215a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80123c4 <erff+0x2d8>
 801215e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012162:	e7dd      	b.n	8012120 <erff+0x34>
 8012164:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012168:	ed9f 6a97 	vldr	s12, [pc, #604]	; 80123c8 <erff+0x2dc>
 801216c:	eddf 6a97 	vldr	s13, [pc, #604]	; 80123cc <erff+0x2e0>
 8012170:	eddf 5a97 	vldr	s11, [pc, #604]	; 80123d0 <erff+0x2e4>
 8012174:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012178:	ed9f 6a96 	vldr	s12, [pc, #600]	; 80123d4 <erff+0x2e8>
 801217c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012180:	eddf 6a95 	vldr	s13, [pc, #596]	; 80123d8 <erff+0x2ec>
 8012184:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012188:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 80123c4 <erff+0x2d8>
 801218c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012190:	eddf 6a92 	vldr	s13, [pc, #584]	; 80123dc <erff+0x2f0>
 8012194:	eee7 6a25 	vfma.f32	s13, s14, s11
 8012198:	eddf 5a91 	vldr	s11, [pc, #580]	; 80123e0 <erff+0x2f4>
 801219c:	eee6 5a87 	vfma.f32	s11, s13, s14
 80121a0:	eddf 6a90 	vldr	s13, [pc, #576]	; 80123e4 <erff+0x2f8>
 80121a4:	eee5 6a87 	vfma.f32	s13, s11, s14
 80121a8:	eddf 5a8f 	vldr	s11, [pc, #572]	; 80123e8 <erff+0x2fc>
 80121ac:	eee6 5a87 	vfma.f32	s11, s13, s14
 80121b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80121b4:	eee5 6a87 	vfma.f32	s13, s11, s14
 80121b8:	eeb0 7a66 	vmov.f32	s14, s13
 80121bc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80121c0:	eee0 7a26 	vfma.f32	s15, s0, s13
 80121c4:	e7ac      	b.n	8012120 <erff+0x34>
 80121c6:	4b89      	ldr	r3, [pc, #548]	; (80123ec <erff+0x300>)
 80121c8:	429d      	cmp	r5, r3
 80121ca:	dc44      	bgt.n	8012256 <erff+0x16a>
 80121cc:	f000 f96e 	bl	80124ac <fabsf>
 80121d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80121d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80121d8:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80123f0 <erff+0x304>
 80121dc:	eddf 6a85 	vldr	s13, [pc, #532]	; 80123f4 <erff+0x308>
 80121e0:	ed9f 6a85 	vldr	s12, [pc, #532]	; 80123f8 <erff+0x30c>
 80121e4:	eee0 6a07 	vfma.f32	s13, s0, s14
 80121e8:	2c00      	cmp	r4, #0
 80121ea:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80123fc <erff+0x310>
 80121ee:	eea6 7a80 	vfma.f32	s14, s13, s0
 80121f2:	eddf 6a83 	vldr	s13, [pc, #524]	; 8012400 <erff+0x314>
 80121f6:	eee7 6a00 	vfma.f32	s13, s14, s0
 80121fa:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8012404 <erff+0x318>
 80121fe:	eea6 7a80 	vfma.f32	s14, s13, s0
 8012202:	eddf 6a81 	vldr	s13, [pc, #516]	; 8012408 <erff+0x31c>
 8012206:	eee7 6a00 	vfma.f32	s13, s14, s0
 801220a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 801240c <erff+0x320>
 801220e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8012212:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8012410 <erff+0x324>
 8012216:	eee0 6a06 	vfma.f32	s13, s0, s12
 801221a:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 8012414 <erff+0x328>
 801221e:	eea6 6a80 	vfma.f32	s12, s13, s0
 8012222:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8012418 <erff+0x32c>
 8012226:	eee6 6a00 	vfma.f32	s13, s12, s0
 801222a:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 801241c <erff+0x330>
 801222e:	eea6 6a80 	vfma.f32	s12, s13, s0
 8012232:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8012420 <erff+0x334>
 8012236:	eee6 6a00 	vfma.f32	s13, s12, s0
 801223a:	eee6 7a80 	vfma.f32	s15, s13, s0
 801223e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012242:	bfab      	itete	ge
 8012244:	eddf 7a77 	vldrge	s15, [pc, #476]	; 8012424 <erff+0x338>
 8012248:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 8012428 <erff+0x33c>
 801224c:	ee70 7a27 	vaddge.f32	s15, s0, s15
 8012250:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 8012254:	e764      	b.n	8012120 <erff+0x34>
 8012256:	4b75      	ldr	r3, [pc, #468]	; (801242c <erff+0x340>)
 8012258:	429d      	cmp	r5, r3
 801225a:	dd08      	ble.n	801226e <erff+0x182>
 801225c:	2c00      	cmp	r4, #0
 801225e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012262:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012266:	bfa8      	it	ge
 8012268:	eef0 7a40 	vmovge.f32	s15, s0
 801226c:	e758      	b.n	8012120 <erff+0x34>
 801226e:	f000 f91d 	bl	80124ac <fabsf>
 8012272:	4b6f      	ldr	r3, [pc, #444]	; (8012430 <erff+0x344>)
 8012274:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012278:	eeb0 9a40 	vmov.f32	s18, s0
 801227c:	429d      	cmp	r5, r3
 801227e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012282:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8012286:	eef0 8a40 	vmov.f32	s17, s0
 801228a:	dc64      	bgt.n	8012356 <erff+0x26a>
 801228c:	eddf 7a69 	vldr	s15, [pc, #420]	; 8012434 <erff+0x348>
 8012290:	eddf 6a69 	vldr	s13, [pc, #420]	; 8012438 <erff+0x34c>
 8012294:	eddf 9a69 	vldr	s19, [pc, #420]	; 801243c <erff+0x350>
 8012298:	eee7 6a27 	vfma.f32	s13, s14, s15
 801229c:	eddf 7a68 	vldr	s15, [pc, #416]	; 8012440 <erff+0x354>
 80122a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122a4:	eddf 6a67 	vldr	s13, [pc, #412]	; 8012444 <erff+0x358>
 80122a8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80122ac:	eddf 7a66 	vldr	s15, [pc, #408]	; 8012448 <erff+0x35c>
 80122b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122b4:	eddf 6a65 	vldr	s13, [pc, #404]	; 801244c <erff+0x360>
 80122b8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80122bc:	eddf 7a64 	vldr	s15, [pc, #400]	; 8012450 <erff+0x364>
 80122c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122c4:	eddf 6a63 	vldr	s13, [pc, #396]	; 8012454 <erff+0x368>
 80122c8:	eee7 9a87 	vfma.f32	s19, s15, s14
 80122cc:	eddf 7a62 	vldr	s15, [pc, #392]	; 8012458 <erff+0x36c>
 80122d0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80122d4:	eddf 6a61 	vldr	s13, [pc, #388]	; 801245c <erff+0x370>
 80122d8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80122dc:	eddf 7a60 	vldr	s15, [pc, #384]	; 8012460 <erff+0x374>
 80122e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122e4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012464 <erff+0x378>
 80122e8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80122ec:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8012468 <erff+0x37c>
 80122f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80122f4:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801246c <erff+0x380>
 80122f8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80122fc:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8012470 <erff+0x384>
 8012300:	ee19 3a10 	vmov	r3, s18
 8012304:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012308:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801230c:	f023 030f 	bic.w	r3, r3, #15
 8012310:	ee08 3a10 	vmov	s16, r3
 8012314:	eef0 aa68 	vmov.f32	s21, s17
 8012318:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 801231c:	eee7 aa87 	vfma.f32	s21, s15, s14
 8012320:	eea8 0a48 	vfms.f32	s0, s16, s16
 8012324:	f001 fb1c 	bl	8013960 <__ieee754_expf>
 8012328:	eeb0 aa40 	vmov.f32	s20, s0
 801232c:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 8012330:	ee78 7a49 	vsub.f32	s15, s16, s18
 8012334:	ee38 8a09 	vadd.f32	s16, s16, s18
 8012338:	eea7 0a88 	vfma.f32	s0, s15, s16
 801233c:	f001 fb10 	bl	8013960 <__ieee754_expf>
 8012340:	ee2a 0a00 	vmul.f32	s0, s20, s0
 8012344:	2c00      	cmp	r4, #0
 8012346:	eec0 7a09 	vdiv.f32	s15, s0, s18
 801234a:	bfac      	ite	ge
 801234c:	ee78 7ae7 	vsubge.f32	s15, s17, s15
 8012350:	ee77 7ae8 	vsublt.f32	s15, s15, s17
 8012354:	e6e4      	b.n	8012120 <erff+0x34>
 8012356:	eddf 6a47 	vldr	s13, [pc, #284]	; 8012474 <erff+0x388>
 801235a:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012478 <erff+0x38c>
 801235e:	eddf 9a47 	vldr	s19, [pc, #284]	; 801247c <erff+0x390>
 8012362:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012366:	eddf 6a46 	vldr	s13, [pc, #280]	; 8012480 <erff+0x394>
 801236a:	eee7 6a87 	vfma.f32	s13, s15, s14
 801236e:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012484 <erff+0x398>
 8012372:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012376:	eddf 6a44 	vldr	s13, [pc, #272]	; 8012488 <erff+0x39c>
 801237a:	eee7 6a87 	vfma.f32	s13, s15, s14
 801237e:	eddf 7a43 	vldr	s15, [pc, #268]	; 801248c <erff+0x3a0>
 8012382:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012386:	eddf 6a42 	vldr	s13, [pc, #264]	; 8012490 <erff+0x3a4>
 801238a:	eee7 9a87 	vfma.f32	s19, s15, s14
 801238e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8012494 <erff+0x3a8>
 8012392:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012396:	eddf 7a40 	vldr	s15, [pc, #256]	; 8012498 <erff+0x3ac>
 801239a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801239e:	eddf 6a3f 	vldr	s13, [pc, #252]	; 801249c <erff+0x3b0>
 80123a2:	eee7 6a87 	vfma.f32	s13, s15, s14
 80123a6:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80124a0 <erff+0x3b4>
 80123aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80123ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80124a4 <erff+0x3b8>
 80123b2:	eee7 6a87 	vfma.f32	s13, s15, s14
 80123b6:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80124a8 <erff+0x3bc>
 80123ba:	e7a1      	b.n	8012300 <erff+0x214>
 80123bc:	3f57ffff 	.word	0x3f57ffff
 80123c0:	3f8375d4 	.word	0x3f8375d4
 80123c4:	3e0375d4 	.word	0x3e0375d4
 80123c8:	b7c756b1 	.word	0xb7c756b1
 80123cc:	bbbd1489 	.word	0xbbbd1489
 80123d0:	b684e21a 	.word	0xb684e21a
 80123d4:	bce9528f 	.word	0xbce9528f
 80123d8:	bea66beb 	.word	0xbea66beb
 80123dc:	390aee49 	.word	0x390aee49
 80123e0:	3ba68116 	.word	0x3ba68116
 80123e4:	3d852a63 	.word	0x3d852a63
 80123e8:	3ecbbbce 	.word	0x3ecbbbce
 80123ec:	3f9fffff 	.word	0x3f9fffff
 80123f0:	bb0df9c0 	.word	0xbb0df9c0
 80123f4:	3d1151b3 	.word	0x3d1151b3
 80123f8:	3c445aa3 	.word	0x3c445aa3
 80123fc:	bde31cc2 	.word	0xbde31cc2
 8012400:	3ea2fe54 	.word	0x3ea2fe54
 8012404:	bebe9208 	.word	0xbebe9208
 8012408:	3ed46805 	.word	0x3ed46805
 801240c:	bb1acdc6 	.word	0xbb1acdc6
 8012410:	3c5f6e13 	.word	0x3c5f6e13
 8012414:	3e013307 	.word	0x3e013307
 8012418:	3d931ae7 	.word	0x3d931ae7
 801241c:	3f0a5785 	.word	0x3f0a5785
 8012420:	3dd9f331 	.word	0x3dd9f331
 8012424:	3f58560b 	.word	0x3f58560b
 8012428:	bf58560b 	.word	0xbf58560b
 801242c:	40bfffff 	.word	0x40bfffff
 8012430:	4036db6d 	.word	0x4036db6d
 8012434:	c11d077e 	.word	0xc11d077e
 8012438:	c2a2932b 	.word	0xc2a2932b
 801243c:	bc21a093 	.word	0xbc21a093
 8012440:	c3389ae7 	.word	0xc3389ae7
 8012444:	c322658c 	.word	0xc322658c
 8012448:	c2798057 	.word	0xc2798057
 801244c:	c128f022 	.word	0xc128f022
 8012450:	bf31a0b7 	.word	0xbf31a0b7
 8012454:	bd777f97 	.word	0xbd777f97
 8012458:	40d23f7c 	.word	0x40d23f7c
 801245c:	42d9451f 	.word	0x42d9451f
 8012460:	43d6810b 	.word	0x43d6810b
 8012464:	442158c9 	.word	0x442158c9
 8012468:	43d9486f 	.word	0x43d9486f
 801246c:	4309a863 	.word	0x4309a863
 8012470:	419d35ce 	.word	0x419d35ce
 8012474:	c3f1c275 	.word	0xc3f1c275
 8012478:	c480230b 	.word	0xc480230b
 801247c:	bc21a092 	.word	0xbc21a092
 8012480:	c41f6441 	.word	0xc41f6441
 8012484:	c320a2ea 	.word	0xc320a2ea
 8012488:	c18e104b 	.word	0xc18e104b
 801248c:	bf4c9dd4 	.word	0xbf4c9dd4
 8012490:	43ed43a7 	.word	0x43ed43a7
 8012494:	c1b38712 	.word	0xc1b38712
 8012498:	451f90ce 	.word	0x451f90ce
 801249c:	4547fdbb 	.word	0x4547fdbb
 80124a0:	44c01759 	.word	0x44c01759
 80124a4:	43a2e571 	.word	0x43a2e571
 80124a8:	41f2b459 	.word	0x41f2b459

080124ac <fabsf>:
 80124ac:	ee10 3a10 	vmov	r3, s0
 80124b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124b4:	ee00 3a10 	vmov	s0, r3
 80124b8:	4770      	bx	lr
	...

080124bc <floorf>:
 80124bc:	ee10 3a10 	vmov	r3, s0
 80124c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80124c4:	0dca      	lsrs	r2, r1, #23
 80124c6:	3a7f      	subs	r2, #127	; 0x7f
 80124c8:	2a16      	cmp	r2, #22
 80124ca:	dc2a      	bgt.n	8012522 <floorf+0x66>
 80124cc:	2a00      	cmp	r2, #0
 80124ce:	da11      	bge.n	80124f4 <floorf+0x38>
 80124d0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012534 <floorf+0x78>
 80124d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80124d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80124dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e0:	dd05      	ble.n	80124ee <floorf+0x32>
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	da23      	bge.n	801252e <floorf+0x72>
 80124e6:	4a14      	ldr	r2, [pc, #80]	; (8012538 <floorf+0x7c>)
 80124e8:	2900      	cmp	r1, #0
 80124ea:	bf18      	it	ne
 80124ec:	4613      	movne	r3, r2
 80124ee:	ee00 3a10 	vmov	s0, r3
 80124f2:	4770      	bx	lr
 80124f4:	4911      	ldr	r1, [pc, #68]	; (801253c <floorf+0x80>)
 80124f6:	4111      	asrs	r1, r2
 80124f8:	420b      	tst	r3, r1
 80124fa:	d0fa      	beq.n	80124f2 <floorf+0x36>
 80124fc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012534 <floorf+0x78>
 8012500:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012504:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801250c:	ddef      	ble.n	80124ee <floorf+0x32>
 801250e:	2b00      	cmp	r3, #0
 8012510:	bfbe      	ittt	lt
 8012512:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8012516:	fa40 f202 	asrlt.w	r2, r0, r2
 801251a:	189b      	addlt	r3, r3, r2
 801251c:	ea23 0301 	bic.w	r3, r3, r1
 8012520:	e7e5      	b.n	80124ee <floorf+0x32>
 8012522:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012526:	d3e4      	bcc.n	80124f2 <floorf+0x36>
 8012528:	ee30 0a00 	vadd.f32	s0, s0, s0
 801252c:	4770      	bx	lr
 801252e:	2300      	movs	r3, #0
 8012530:	e7dd      	b.n	80124ee <floorf+0x32>
 8012532:	bf00      	nop
 8012534:	7149f2ca 	.word	0x7149f2ca
 8012538:	bf800000 	.word	0xbf800000
 801253c:	007fffff 	.word	0x007fffff

08012540 <log1pf>:
 8012540:	ee10 2a10 	vmov	r2, s0
 8012544:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012548:	db02      	blt.n	8012550 <log1pf+0x10>
 801254a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801254e:	4770      	bx	lr
 8012550:	4b70      	ldr	r3, [pc, #448]	; (8012714 <log1pf+0x1d4>)
 8012552:	429a      	cmp	r2, r3
 8012554:	dc78      	bgt.n	8012648 <log1pf+0x108>
 8012556:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801255a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801255e:	db12      	blt.n	8012586 <log1pf+0x46>
 8012560:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012564:	eeb4 0a67 	vcmp.f32	s0, s15
 8012568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256c:	bf05      	ittet	eq
 801256e:	ed9f 7a6a 	vldreq	s14, [pc, #424]	; 8012718 <log1pf+0x1d8>
 8012572:	eddf 7a6a 	vldreq	s15, [pc, #424]	; 801271c <log1pf+0x1dc>
 8012576:	ee70 7a40 	vsubne.f32	s15, s0, s0
 801257a:	ee87 0a27 	vdiveq.f32	s0, s14, s15
 801257e:	bf18      	it	ne
 8012580:	ee87 0aa7 	vdivne.f32	s0, s15, s15
 8012584:	4770      	bx	lr
 8012586:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 801258a:	da13      	bge.n	80125b4 <log1pf+0x74>
 801258c:	eddf 7a64 	vldr	s15, [pc, #400]	; 8012720 <log1pf+0x1e0>
 8012590:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259c:	dd03      	ble.n	80125a6 <log1pf+0x66>
 801259e:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 80125a2:	f2c0 80b6 	blt.w	8012712 <log1pf+0x1d2>
 80125a6:	ee20 7a40 	vnmul.f32	s14, s0, s0
 80125aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80125ae:	eea7 0a27 	vfma.f32	s0, s14, s15
 80125b2:	4770      	bx	lr
 80125b4:	4b5b      	ldr	r3, [pc, #364]	; (8012724 <log1pf+0x1e4>)
 80125b6:	441a      	add	r2, r3
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d84d      	bhi.n	8012658 <log1pf+0x118>
 80125bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80125c0:	ee30 7a27 	vadd.f32	s14, s0, s15
 80125c4:	ee17 2a10 	vmov	r2, s14
 80125c8:	15d3      	asrs	r3, r2, #23
 80125ca:	3b7f      	subs	r3, #127	; 0x7f
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	bfcb      	itete	gt
 80125d0:	ee37 0a40 	vsubgt.f32	s0, s14, s0
 80125d4:	ee77 7a67 	vsuble.f32	s15, s14, s15
 80125d8:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
 80125dc:	ee30 0a67 	vsuble.f32	s0, s0, s15
 80125e0:	eec0 6a07 	vdiv.f32	s13, s0, s14
 80125e4:	4950      	ldr	r1, [pc, #320]	; (8012728 <log1pf+0x1e8>)
 80125e6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80125ea:	428a      	cmp	r2, r1
 80125ec:	bfc9      	itett	gt
 80125ee:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 80125f2:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 80125f6:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 80125fa:	3301      	addgt	r3, #1
 80125fc:	bfc8      	it	gt
 80125fe:	1092      	asrgt	r2, r2, #2
 8012600:	ee07 1a90 	vmov	s15, r1
 8012604:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012608:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801260c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012610:	ee20 7a07 	vmul.f32	s14, s0, s14
 8012614:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012618:	2a00      	cmp	r2, #0
 801261a:	d13d      	bne.n	8012698 <log1pf+0x158>
 801261c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012624:	d11b      	bne.n	801265e <log1pf+0x11e>
 8012626:	2b00      	cmp	r3, #0
 8012628:	d071      	beq.n	801270e <log1pf+0x1ce>
 801262a:	ee07 3a90 	vmov	s15, r3
 801262e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801272c <log1pf+0x1ec>
 8012632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012636:	eee7 6a87 	vfma.f32	s13, s15, s14
 801263a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8012730 <log1pf+0x1f0>
 801263e:	eeb0 0a66 	vmov.f32	s0, s13
 8012642:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012646:	4770      	bx	lr
 8012648:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 801264c:	dbb6      	blt.n	80125bc <log1pf+0x7c>
 801264e:	15d3      	asrs	r3, r2, #23
 8012650:	3b7f      	subs	r3, #127	; 0x7f
 8012652:	eddf 6a32 	vldr	s13, [pc, #200]	; 801271c <log1pf+0x1dc>
 8012656:	e7c5      	b.n	80125e4 <log1pf+0xa4>
 8012658:	2201      	movs	r2, #1
 801265a:	2300      	movs	r3, #0
 801265c:	e7d6      	b.n	801260c <log1pf+0xcc>
 801265e:	eddf 7a35 	vldr	s15, [pc, #212]	; 8012734 <log1pf+0x1f4>
 8012662:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012666:	eea0 6a67 	vfms.f32	s12, s0, s15
 801266a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801266e:	b913      	cbnz	r3, 8012676 <log1pf+0x136>
 8012670:	ee30 0a46 	vsub.f32	s0, s0, s12
 8012674:	4770      	bx	lr
 8012676:	ee07 3a90 	vmov	s15, r3
 801267a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 801272c <log1pf+0x1ec>
 801267e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012682:	eee7 6a87 	vfma.f32	s13, s15, s14
 8012686:	ee36 7a66 	vsub.f32	s14, s12, s13
 801268a:	ee37 0a40 	vsub.f32	s0, s14, s0
 801268e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012730 <log1pf+0x1f0>
 8012692:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8012696:	4770      	bx	lr
 8012698:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801269c:	ee70 7a27 	vadd.f32	s15, s0, s15
 80126a0:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8012738 <log1pf+0x1f8>
 80126a4:	ed9f 5a25 	vldr	s10, [pc, #148]	; 801273c <log1pf+0x1fc>
 80126a8:	eec0 5a27 	vdiv.f32	s11, s0, s15
 80126ac:	ee65 7aa5 	vmul.f32	s15, s11, s11
 80126b0:	eea7 5a86 	vfma.f32	s10, s15, s12
 80126b4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012740 <log1pf+0x200>
 80126b8:	eea5 6a27 	vfma.f32	s12, s10, s15
 80126bc:	ed9f 5a21 	vldr	s10, [pc, #132]	; 8012744 <log1pf+0x204>
 80126c0:	eea6 5a27 	vfma.f32	s10, s12, s15
 80126c4:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8012748 <log1pf+0x208>
 80126c8:	eea5 6a27 	vfma.f32	s12, s10, s15
 80126cc:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 801274c <log1pf+0x20c>
 80126d0:	eea6 5a27 	vfma.f32	s10, s12, s15
 80126d4:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8012734 <log1pf+0x1f4>
 80126d8:	eea5 6a27 	vfma.f32	s12, s10, s15
 80126dc:	eeb0 5a47 	vmov.f32	s10, s14
 80126e0:	eea6 5a27 	vfma.f32	s10, s12, s15
 80126e4:	ee25 6a25 	vmul.f32	s12, s10, s11
 80126e8:	b923      	cbnz	r3, 80126f4 <log1pf+0x1b4>
 80126ea:	ee37 7a46 	vsub.f32	s14, s14, s12
 80126ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 80126f2:	4770      	bx	lr
 80126f4:	ee07 3a90 	vmov	s15, r3
 80126f8:	eddf 5a0c 	vldr	s11, [pc, #48]	; 801272c <log1pf+0x1ec>
 80126fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012700:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8012704:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012708:	ee37 7a66 	vsub.f32	s14, s14, s13
 801270c:	e7bd      	b.n	801268a <log1pf+0x14a>
 801270e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801271c <log1pf+0x1dc>
 8012712:	4770      	bx	lr
 8012714:	3ed413d6 	.word	0x3ed413d6
 8012718:	cc000000 	.word	0xcc000000
 801271c:	00000000 	.word	0x00000000
 8012720:	4c000000 	.word	0x4c000000
 8012724:	416a09e0 	.word	0x416a09e0
 8012728:	003504f6 	.word	0x003504f6
 801272c:	3717f7d1 	.word	0x3717f7d1
 8012730:	3f317180 	.word	0x3f317180
 8012734:	3f2aaaab 	.word	0x3f2aaaab
 8012738:	3e178897 	.word	0x3e178897
 801273c:	3e1cd04f 	.word	0x3e1cd04f
 8012740:	3e3a3325 	.word	0x3e3a3325
 8012744:	3e638e29 	.word	0x3e638e29
 8012748:	3e924925 	.word	0x3e924925
 801274c:	3ecccccd 	.word	0x3ecccccd

08012750 <roundf>:
 8012750:	ee10 0a10 	vmov	r0, s0
 8012754:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012758:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801275c:	2a16      	cmp	r2, #22
 801275e:	dc15      	bgt.n	801278c <roundf+0x3c>
 8012760:	2a00      	cmp	r2, #0
 8012762:	da08      	bge.n	8012776 <roundf+0x26>
 8012764:	3201      	adds	r2, #1
 8012766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801276a:	d101      	bne.n	8012770 <roundf+0x20>
 801276c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8012770:	ee00 3a10 	vmov	s0, r3
 8012774:	4770      	bx	lr
 8012776:	4908      	ldr	r1, [pc, #32]	; (8012798 <roundf+0x48>)
 8012778:	4111      	asrs	r1, r2
 801277a:	4208      	tst	r0, r1
 801277c:	d0fa      	beq.n	8012774 <roundf+0x24>
 801277e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012782:	4113      	asrs	r3, r2
 8012784:	4403      	add	r3, r0
 8012786:	ea23 0301 	bic.w	r3, r3, r1
 801278a:	e7f1      	b.n	8012770 <roundf+0x20>
 801278c:	2a80      	cmp	r2, #128	; 0x80
 801278e:	d1f1      	bne.n	8012774 <roundf+0x24>
 8012790:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop
 8012798:	007fffff 	.word	0x007fffff

0801279c <sinf>:
 801279c:	ee10 3a10 	vmov	r3, s0
 80127a0:	b507      	push	{r0, r1, r2, lr}
 80127a2:	4a1d      	ldr	r2, [pc, #116]	; (8012818 <sinf+0x7c>)
 80127a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127a8:	4293      	cmp	r3, r2
 80127aa:	dc05      	bgt.n	80127b8 <sinf+0x1c>
 80127ac:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801281c <sinf+0x80>
 80127b0:	2000      	movs	r0, #0
 80127b2:	f002 fa5d 	bl	8014c70 <__kernel_sinf>
 80127b6:	e004      	b.n	80127c2 <sinf+0x26>
 80127b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80127bc:	db04      	blt.n	80127c8 <sinf+0x2c>
 80127be:	ee30 0a40 	vsub.f32	s0, s0, s0
 80127c2:	b003      	add	sp, #12
 80127c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80127c8:	4668      	mov	r0, sp
 80127ca:	f001 fdd3 	bl	8014374 <__ieee754_rem_pio2f>
 80127ce:	f000 0003 	and.w	r0, r0, #3
 80127d2:	2801      	cmp	r0, #1
 80127d4:	d008      	beq.n	80127e8 <sinf+0x4c>
 80127d6:	2802      	cmp	r0, #2
 80127d8:	d00d      	beq.n	80127f6 <sinf+0x5a>
 80127da:	b9b0      	cbnz	r0, 801280a <sinf+0x6e>
 80127dc:	2001      	movs	r0, #1
 80127de:	eddd 0a01 	vldr	s1, [sp, #4]
 80127e2:	ed9d 0a00 	vldr	s0, [sp]
 80127e6:	e7e4      	b.n	80127b2 <sinf+0x16>
 80127e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80127ec:	ed9d 0a00 	vldr	s0, [sp]
 80127f0:	f001 ff5e 	bl	80146b0 <__kernel_cosf>
 80127f4:	e7e5      	b.n	80127c2 <sinf+0x26>
 80127f6:	2001      	movs	r0, #1
 80127f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80127fc:	ed9d 0a00 	vldr	s0, [sp]
 8012800:	f002 fa36 	bl	8014c70 <__kernel_sinf>
 8012804:	eeb1 0a40 	vneg.f32	s0, s0
 8012808:	e7db      	b.n	80127c2 <sinf+0x26>
 801280a:	eddd 0a01 	vldr	s1, [sp, #4]
 801280e:	ed9d 0a00 	vldr	s0, [sp]
 8012812:	f001 ff4d 	bl	80146b0 <__kernel_cosf>
 8012816:	e7f5      	b.n	8012804 <sinf+0x68>
 8012818:	3f490fd8 	.word	0x3f490fd8
 801281c:	00000000 	.word	0x00000000

08012820 <tanf>:
 8012820:	ee10 3a10 	vmov	r3, s0
 8012824:	b507      	push	{r0, r1, r2, lr}
 8012826:	4a10      	ldr	r2, [pc, #64]	; (8012868 <tanf+0x48>)
 8012828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801282c:	4293      	cmp	r3, r2
 801282e:	dc05      	bgt.n	801283c <tanf+0x1c>
 8012830:	eddf 0a0e 	vldr	s1, [pc, #56]	; 801286c <tanf+0x4c>
 8012834:	2001      	movs	r0, #1
 8012836:	f002 fa63 	bl	8014d00 <__kernel_tanf>
 801283a:	e004      	b.n	8012846 <tanf+0x26>
 801283c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012840:	db04      	blt.n	801284c <tanf+0x2c>
 8012842:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012846:	b003      	add	sp, #12
 8012848:	f85d fb04 	ldr.w	pc, [sp], #4
 801284c:	4668      	mov	r0, sp
 801284e:	f001 fd91 	bl	8014374 <__ieee754_rem_pio2f>
 8012852:	0040      	lsls	r0, r0, #1
 8012854:	f000 0002 	and.w	r0, r0, #2
 8012858:	f1c0 0001 	rsb	r0, r0, #1
 801285c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012860:	ed9d 0a00 	vldr	s0, [sp]
 8012864:	e7e7      	b.n	8012836 <tanf+0x16>
 8012866:	bf00      	nop
 8012868:	3f490fda 	.word	0x3f490fda
 801286c:	00000000 	.word	0x00000000

08012870 <tanhf>:
 8012870:	b510      	push	{r4, lr}
 8012872:	ee10 4a10 	vmov	r4, s0
 8012876:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801287a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801287e:	ed2d 8b02 	vpush	{d8}
 8012882:	eef0 7a40 	vmov.f32	s15, s0
 8012886:	db0c      	blt.n	80128a2 <tanhf+0x32>
 8012888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801288c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012890:	2c00      	cmp	r4, #0
 8012892:	bfac      	ite	ge
 8012894:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8012898:	ee30 0a47 	vsublt.f32	s0, s0, s14
 801289c:	ecbd 8b02 	vpop	{d8}
 80128a0:	bd10      	pop	{r4, pc}
 80128a2:	4a1b      	ldr	r2, [pc, #108]	; (8012910 <tanhf+0xa0>)
 80128a4:	4293      	cmp	r3, r2
 80128a6:	dc30      	bgt.n	801290a <tanhf+0x9a>
 80128a8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80128ac:	da06      	bge.n	80128bc <tanhf+0x4c>
 80128ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80128b2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80128b6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80128ba:	e7ef      	b.n	801289c <tanhf+0x2c>
 80128bc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80128c0:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 80128c4:	db12      	blt.n	80128ec <tanhf+0x7c>
 80128c6:	f7ff fdf1 	bl	80124ac <fabsf>
 80128ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80128ce:	f002 fb07 	bl	8014ee0 <expm1f>
 80128d2:	ee30 0a08 	vadd.f32	s0, s0, s16
 80128d6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80128da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80128de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80128e2:	2c00      	cmp	r4, #0
 80128e4:	bfb8      	it	lt
 80128e6:	eeb1 0a40 	vneglt.f32	s0, s0
 80128ea:	e7d7      	b.n	801289c <tanhf+0x2c>
 80128ec:	f7ff fdde 	bl	80124ac <fabsf>
 80128f0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80128f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80128f8:	f002 faf2 	bl	8014ee0 <expm1f>
 80128fc:	ee70 7a08 	vadd.f32	s15, s0, s16
 8012900:	eeb1 7a40 	vneg.f32	s14, s0
 8012904:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012908:	e7eb      	b.n	80128e2 <tanhf+0x72>
 801290a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801290e:	e7e8      	b.n	80128e2 <tanhf+0x72>
 8012910:	41afffff 	.word	0x41afffff

08012914 <acosf>:
 8012914:	b510      	push	{r4, lr}
 8012916:	ed2d 8b02 	vpush	{d8}
 801291a:	4c27      	ldr	r4, [pc, #156]	; (80129b8 <acosf+0xa4>)
 801291c:	b08a      	sub	sp, #40	; 0x28
 801291e:	eeb0 8a40 	vmov.f32	s16, s0
 8012922:	f000 fd3b 	bl	801339c <__ieee754_acosf>
 8012926:	f994 3000 	ldrsb.w	r3, [r4]
 801292a:	3301      	adds	r3, #1
 801292c:	eef0 8a40 	vmov.f32	s17, s0
 8012930:	d03c      	beq.n	80129ac <acosf+0x98>
 8012932:	eeb4 8a48 	vcmp.f32	s16, s16
 8012936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293a:	d637      	bvs.n	80129ac <acosf+0x98>
 801293c:	eeb0 0a48 	vmov.f32	s0, s16
 8012940:	f7ff fdb4 	bl	80124ac <fabsf>
 8012944:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012948:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012950:	dd2c      	ble.n	80129ac <acosf+0x98>
 8012952:	2301      	movs	r3, #1
 8012954:	9300      	str	r3, [sp, #0]
 8012956:	4b19      	ldr	r3, [pc, #100]	; (80129bc <acosf+0xa8>)
 8012958:	9301      	str	r3, [sp, #4]
 801295a:	ee18 0a10 	vmov	r0, s16
 801295e:	2300      	movs	r3, #0
 8012960:	9308      	str	r3, [sp, #32]
 8012962:	f7f3 feb1 	bl	80066c8 <__aeabi_f2d>
 8012966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801296a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801296e:	4814      	ldr	r0, [pc, #80]	; (80129c0 <acosf+0xac>)
 8012970:	f002 faae 	bl	8014ed0 <nan>
 8012974:	f994 3000 	ldrsb.w	r3, [r4]
 8012978:	2b02      	cmp	r3, #2
 801297a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801297e:	d104      	bne.n	801298a <acosf+0x76>
 8012980:	f7fd f97a 	bl	800fc78 <__errno>
 8012984:	2321      	movs	r3, #33	; 0x21
 8012986:	6003      	str	r3, [r0, #0]
 8012988:	e004      	b.n	8012994 <acosf+0x80>
 801298a:	4668      	mov	r0, sp
 801298c:	f002 fa9c 	bl	8014ec8 <matherr>
 8012990:	2800      	cmp	r0, #0
 8012992:	d0f5      	beq.n	8012980 <acosf+0x6c>
 8012994:	9b08      	ldr	r3, [sp, #32]
 8012996:	b11b      	cbz	r3, 80129a0 <acosf+0x8c>
 8012998:	f7fd f96e 	bl	800fc78 <__errno>
 801299c:	9b08      	ldr	r3, [sp, #32]
 801299e:	6003      	str	r3, [r0, #0]
 80129a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129a4:	f7f4 f9c0 	bl	8006d28 <__aeabi_d2f>
 80129a8:	ee08 0a90 	vmov	s17, r0
 80129ac:	eeb0 0a68 	vmov.f32	s0, s17
 80129b0:	b00a      	add	sp, #40	; 0x28
 80129b2:	ecbd 8b02 	vpop	{d8}
 80129b6:	bd10      	pop	{r4, pc}
 80129b8:	20000a7c 	.word	0x20000a7c
 80129bc:	0806e0b0 	.word	0x0806e0b0
 80129c0:	0806df79 	.word	0x0806df79

080129c4 <acoshf>:
 80129c4:	b510      	push	{r4, lr}
 80129c6:	ed2d 8b02 	vpush	{d8}
 80129ca:	b08a      	sub	sp, #40	; 0x28
 80129cc:	eeb0 8a40 	vmov.f32	s16, s0
 80129d0:	f000 fde0 	bl	8013594 <__ieee754_acoshf>
 80129d4:	4b21      	ldr	r3, [pc, #132]	; (8012a5c <acoshf+0x98>)
 80129d6:	f993 4000 	ldrsb.w	r4, [r3]
 80129da:	1c63      	adds	r3, r4, #1
 80129dc:	d039      	beq.n	8012a52 <acoshf+0x8e>
 80129de:	eeb4 8a48 	vcmp.f32	s16, s16
 80129e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e6:	d634      	bvs.n	8012a52 <acoshf+0x8e>
 80129e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80129ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80129f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f4:	d52d      	bpl.n	8012a52 <acoshf+0x8e>
 80129f6:	2301      	movs	r3, #1
 80129f8:	9300      	str	r3, [sp, #0]
 80129fa:	4b19      	ldr	r3, [pc, #100]	; (8012a60 <acoshf+0x9c>)
 80129fc:	9301      	str	r3, [sp, #4]
 80129fe:	ee18 0a10 	vmov	r0, s16
 8012a02:	2300      	movs	r3, #0
 8012a04:	9308      	str	r3, [sp, #32]
 8012a06:	f7f3 fe5f 	bl	80066c8 <__aeabi_f2d>
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a16:	4610      	mov	r0, r2
 8012a18:	4619      	mov	r1, r3
 8012a1a:	f7f3 ffd7 	bl	80069cc <__aeabi_ddiv>
 8012a1e:	2c02      	cmp	r4, #2
 8012a20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012a24:	d104      	bne.n	8012a30 <acoshf+0x6c>
 8012a26:	f7fd f927 	bl	800fc78 <__errno>
 8012a2a:	2321      	movs	r3, #33	; 0x21
 8012a2c:	6003      	str	r3, [r0, #0]
 8012a2e:	e004      	b.n	8012a3a <acoshf+0x76>
 8012a30:	4668      	mov	r0, sp
 8012a32:	f002 fa49 	bl	8014ec8 <matherr>
 8012a36:	2800      	cmp	r0, #0
 8012a38:	d0f5      	beq.n	8012a26 <acoshf+0x62>
 8012a3a:	9b08      	ldr	r3, [sp, #32]
 8012a3c:	b11b      	cbz	r3, 8012a46 <acoshf+0x82>
 8012a3e:	f7fd f91b 	bl	800fc78 <__errno>
 8012a42:	9b08      	ldr	r3, [sp, #32]
 8012a44:	6003      	str	r3, [r0, #0]
 8012a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a4a:	f7f4 f96d 	bl	8006d28 <__aeabi_d2f>
 8012a4e:	ee00 0a10 	vmov	s0, r0
 8012a52:	b00a      	add	sp, #40	; 0x28
 8012a54:	ecbd 8b02 	vpop	{d8}
 8012a58:	bd10      	pop	{r4, pc}
 8012a5a:	bf00      	nop
 8012a5c:	20000a7c 	.word	0x20000a7c
 8012a60:	0806e0b6 	.word	0x0806e0b6

08012a64 <asinf>:
 8012a64:	b510      	push	{r4, lr}
 8012a66:	ed2d 8b02 	vpush	{d8}
 8012a6a:	4c27      	ldr	r4, [pc, #156]	; (8012b08 <asinf+0xa4>)
 8012a6c:	b08a      	sub	sp, #40	; 0x28
 8012a6e:	eeb0 8a40 	vmov.f32	s16, s0
 8012a72:	f000 fde3 	bl	801363c <__ieee754_asinf>
 8012a76:	f994 3000 	ldrsb.w	r3, [r4]
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	eef0 8a40 	vmov.f32	s17, s0
 8012a80:	d03c      	beq.n	8012afc <asinf+0x98>
 8012a82:	eeb4 8a48 	vcmp.f32	s16, s16
 8012a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a8a:	d637      	bvs.n	8012afc <asinf+0x98>
 8012a8c:	eeb0 0a48 	vmov.f32	s0, s16
 8012a90:	f7ff fd0c 	bl	80124ac <fabsf>
 8012a94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012a98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa0:	dd2c      	ble.n	8012afc <asinf+0x98>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	9300      	str	r3, [sp, #0]
 8012aa6:	4b19      	ldr	r3, [pc, #100]	; (8012b0c <asinf+0xa8>)
 8012aa8:	9301      	str	r3, [sp, #4]
 8012aaa:	ee18 0a10 	vmov	r0, s16
 8012aae:	2300      	movs	r3, #0
 8012ab0:	9308      	str	r3, [sp, #32]
 8012ab2:	f7f3 fe09 	bl	80066c8 <__aeabi_f2d>
 8012ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012abe:	4814      	ldr	r0, [pc, #80]	; (8012b10 <asinf+0xac>)
 8012ac0:	f002 fa06 	bl	8014ed0 <nan>
 8012ac4:	f994 3000 	ldrsb.w	r3, [r4]
 8012ac8:	2b02      	cmp	r3, #2
 8012aca:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012ace:	d104      	bne.n	8012ada <asinf+0x76>
 8012ad0:	f7fd f8d2 	bl	800fc78 <__errno>
 8012ad4:	2321      	movs	r3, #33	; 0x21
 8012ad6:	6003      	str	r3, [r0, #0]
 8012ad8:	e004      	b.n	8012ae4 <asinf+0x80>
 8012ada:	4668      	mov	r0, sp
 8012adc:	f002 f9f4 	bl	8014ec8 <matherr>
 8012ae0:	2800      	cmp	r0, #0
 8012ae2:	d0f5      	beq.n	8012ad0 <asinf+0x6c>
 8012ae4:	9b08      	ldr	r3, [sp, #32]
 8012ae6:	b11b      	cbz	r3, 8012af0 <asinf+0x8c>
 8012ae8:	f7fd f8c6 	bl	800fc78 <__errno>
 8012aec:	9b08      	ldr	r3, [sp, #32]
 8012aee:	6003      	str	r3, [r0, #0]
 8012af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012af4:	f7f4 f918 	bl	8006d28 <__aeabi_d2f>
 8012af8:	ee08 0a90 	vmov	s17, r0
 8012afc:	eeb0 0a68 	vmov.f32	s0, s17
 8012b00:	b00a      	add	sp, #40	; 0x28
 8012b02:	ecbd 8b02 	vpop	{d8}
 8012b06:	bd10      	pop	{r4, pc}
 8012b08:	20000a7c 	.word	0x20000a7c
 8012b0c:	0806e0bd 	.word	0x0806e0bd
 8012b10:	0806df79 	.word	0x0806df79

08012b14 <atanhf>:
 8012b14:	b570      	push	{r4, r5, r6, lr}
 8012b16:	ed2d 8b04 	vpush	{d8-d9}
 8012b1a:	4c36      	ldr	r4, [pc, #216]	; (8012bf4 <atanhf+0xe0>)
 8012b1c:	b08a      	sub	sp, #40	; 0x28
 8012b1e:	eeb0 8a40 	vmov.f32	s16, s0
 8012b22:	f000 fe73 	bl	801380c <__ieee754_atanhf>
 8012b26:	f994 3000 	ldrsb.w	r3, [r4]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	eef0 8a40 	vmov.f32	s17, s0
 8012b30:	d059      	beq.n	8012be6 <atanhf+0xd2>
 8012b32:	eeb4 8a48 	vcmp.f32	s16, s16
 8012b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b3a:	d654      	bvs.n	8012be6 <atanhf+0xd2>
 8012b3c:	eeb0 0a48 	vmov.f32	s0, s16
 8012b40:	f7ff fcb4 	bl	80124ac <fabsf>
 8012b44:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012b48:	eeb4 0ac9 	vcmpe.f32	s0, s18
 8012b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b50:	eef0 9a40 	vmov.f32	s19, s0
 8012b54:	db47      	blt.n	8012be6 <atanhf+0xd2>
 8012b56:	ee18 0a10 	vmov	r0, s16
 8012b5a:	f7f3 fdb5 	bl	80066c8 <__aeabi_f2d>
 8012b5e:	eef4 9ac9 	vcmpe.f32	s19, s18
 8012b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b66:	4602      	mov	r2, r0
 8012b68:	460b      	mov	r3, r1
 8012b6a:	f994 4000 	ldrsb.w	r4, [r4]
 8012b6e:	4d22      	ldr	r5, [pc, #136]	; (8012bf8 <atanhf+0xe4>)
 8012b70:	dd17      	ble.n	8012ba2 <atanhf+0x8e>
 8012b72:	2101      	movs	r1, #1
 8012b74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012b78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012b7c:	e9cd 1500 	strd	r1, r5, [sp]
 8012b80:	2200      	movs	r2, #0
 8012b82:	2100      	movs	r1, #0
 8012b84:	2300      	movs	r3, #0
 8012b86:	9108      	str	r1, [sp, #32]
 8012b88:	4610      	mov	r0, r2
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	f7f3 ff1e 	bl	80069cc <__aeabi_ddiv>
 8012b90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012b94:	2c02      	cmp	r4, #2
 8012b96:	d115      	bne.n	8012bc4 <atanhf+0xb0>
 8012b98:	f7fd f86e 	bl	800fc78 <__errno>
 8012b9c:	2321      	movs	r3, #33	; 0x21
 8012b9e:	6003      	str	r3, [r0, #0]
 8012ba0:	e015      	b.n	8012bce <atanhf+0xba>
 8012ba2:	2602      	movs	r6, #2
 8012ba4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012bac:	e9cd 6500 	strd	r6, r5, [sp]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	2500      	movs	r5, #0
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	9508      	str	r5, [sp, #32]
 8012bb8:	f7f3 ff08 	bl	80069cc <__aeabi_ddiv>
 8012bbc:	42b4      	cmp	r4, r6
 8012bbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012bc2:	e7e8      	b.n	8012b96 <atanhf+0x82>
 8012bc4:	4668      	mov	r0, sp
 8012bc6:	f002 f97f 	bl	8014ec8 <matherr>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d0e4      	beq.n	8012b98 <atanhf+0x84>
 8012bce:	9b08      	ldr	r3, [sp, #32]
 8012bd0:	b11b      	cbz	r3, 8012bda <atanhf+0xc6>
 8012bd2:	f7fd f851 	bl	800fc78 <__errno>
 8012bd6:	9b08      	ldr	r3, [sp, #32]
 8012bd8:	6003      	str	r3, [r0, #0]
 8012bda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012bde:	f7f4 f8a3 	bl	8006d28 <__aeabi_d2f>
 8012be2:	ee08 0a90 	vmov	s17, r0
 8012be6:	eeb0 0a68 	vmov.f32	s0, s17
 8012bea:	b00a      	add	sp, #40	; 0x28
 8012bec:	ecbd 8b04 	vpop	{d8-d9}
 8012bf0:	bd70      	pop	{r4, r5, r6, pc}
 8012bf2:	bf00      	nop
 8012bf4:	20000a7c 	.word	0x20000a7c
 8012bf8:	0806e0c3 	.word	0x0806e0c3

08012bfc <coshf>:
 8012bfc:	b510      	push	{r4, lr}
 8012bfe:	ed2d 8b02 	vpush	{d8}
 8012c02:	4c29      	ldr	r4, [pc, #164]	; (8012ca8 <coshf+0xac>)
 8012c04:	b08a      	sub	sp, #40	; 0x28
 8012c06:	eeb0 8a40 	vmov.f32	s16, s0
 8012c0a:	f000 fe45 	bl	8013898 <__ieee754_coshf>
 8012c0e:	f994 3000 	ldrsb.w	r3, [r4]
 8012c12:	3301      	adds	r3, #1
 8012c14:	eef0 8a40 	vmov.f32	s17, s0
 8012c18:	d035      	beq.n	8012c86 <coshf+0x8a>
 8012c1a:	eeb4 8a48 	vcmp.f32	s16, s16
 8012c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c22:	d630      	bvs.n	8012c86 <coshf+0x8a>
 8012c24:	eeb0 0a48 	vmov.f32	s0, s16
 8012c28:	f7ff fc40 	bl	80124ac <fabsf>
 8012c2c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012cac <coshf+0xb0>
 8012c30:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c38:	dd25      	ble.n	8012c86 <coshf+0x8a>
 8012c3a:	2303      	movs	r3, #3
 8012c3c:	9300      	str	r3, [sp, #0]
 8012c3e:	4b1c      	ldr	r3, [pc, #112]	; (8012cb0 <coshf+0xb4>)
 8012c40:	9301      	str	r3, [sp, #4]
 8012c42:	ee18 0a10 	vmov	r0, s16
 8012c46:	2300      	movs	r3, #0
 8012c48:	9308      	str	r3, [sp, #32]
 8012c4a:	f7f3 fd3d 	bl	80066c8 <__aeabi_f2d>
 8012c4e:	f994 3000 	ldrsb.w	r3, [r4]
 8012c52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c5a:	b9d3      	cbnz	r3, 8012c92 <coshf+0x96>
 8012c5c:	4b15      	ldr	r3, [pc, #84]	; (8012cb4 <coshf+0xb8>)
 8012c5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012c62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012c66:	4668      	mov	r0, sp
 8012c68:	f002 f92e 	bl	8014ec8 <matherr>
 8012c6c:	b1b8      	cbz	r0, 8012c9e <coshf+0xa2>
 8012c6e:	9b08      	ldr	r3, [sp, #32]
 8012c70:	b11b      	cbz	r3, 8012c7a <coshf+0x7e>
 8012c72:	f7fd f801 	bl	800fc78 <__errno>
 8012c76:	9b08      	ldr	r3, [sp, #32]
 8012c78:	6003      	str	r3, [r0, #0]
 8012c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c7e:	f7f4 f853 	bl	8006d28 <__aeabi_d2f>
 8012c82:	ee08 0a90 	vmov	s17, r0
 8012c86:	eeb0 0a68 	vmov.f32	s0, s17
 8012c8a:	b00a      	add	sp, #40	; 0x28
 8012c8c:	ecbd 8b02 	vpop	{d8}
 8012c90:	bd10      	pop	{r4, pc}
 8012c92:	4909      	ldr	r1, [pc, #36]	; (8012cb8 <coshf+0xbc>)
 8012c94:	2000      	movs	r0, #0
 8012c96:	2b02      	cmp	r3, #2
 8012c98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012c9c:	d1e3      	bne.n	8012c66 <coshf+0x6a>
 8012c9e:	f7fc ffeb 	bl	800fc78 <__errno>
 8012ca2:	2322      	movs	r3, #34	; 0x22
 8012ca4:	6003      	str	r3, [r0, #0]
 8012ca6:	e7e2      	b.n	8012c6e <coshf+0x72>
 8012ca8:	20000a7c 	.word	0x20000a7c
 8012cac:	42b2d4fc 	.word	0x42b2d4fc
 8012cb0:	0806e0b7 	.word	0x0806e0b7
 8012cb4:	47efffff 	.word	0x47efffff
 8012cb8:	7ff00000 	.word	0x7ff00000

08012cbc <expf>:
 8012cbc:	b530      	push	{r4, r5, lr}
 8012cbe:	ed2d 8b02 	vpush	{d8}
 8012cc2:	4d35      	ldr	r5, [pc, #212]	; (8012d98 <expf+0xdc>)
 8012cc4:	b08b      	sub	sp, #44	; 0x2c
 8012cc6:	eeb0 8a40 	vmov.f32	s16, s0
 8012cca:	f000 fe49 	bl	8013960 <__ieee754_expf>
 8012cce:	f995 3000 	ldrsb.w	r3, [r5]
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	ee10 4a10 	vmov	r4, s0
 8012cd8:	d030      	beq.n	8012d3c <expf+0x80>
 8012cda:	eeb0 0a48 	vmov.f32	s0, s16
 8012cde:	f002 fa2b 	bl	8015138 <finitef>
 8012ce2:	b358      	cbz	r0, 8012d3c <expf+0x80>
 8012ce4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8012d9c <expf+0xe0>
 8012ce8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf0:	dd35      	ble.n	8012d5e <expf+0xa2>
 8012cf2:	2303      	movs	r3, #3
 8012cf4:	9300      	str	r3, [sp, #0]
 8012cf6:	4b2a      	ldr	r3, [pc, #168]	; (8012da0 <expf+0xe4>)
 8012cf8:	9301      	str	r3, [sp, #4]
 8012cfa:	ee18 0a10 	vmov	r0, s16
 8012cfe:	2300      	movs	r3, #0
 8012d00:	9308      	str	r3, [sp, #32]
 8012d02:	f7f3 fce1 	bl	80066c8 <__aeabi_f2d>
 8012d06:	f995 3000 	ldrsb.w	r3, [r5]
 8012d0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d12:	b9cb      	cbnz	r3, 8012d48 <expf+0x8c>
 8012d14:	4b23      	ldr	r3, [pc, #140]	; (8012da4 <expf+0xe8>)
 8012d16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012d1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012d1e:	4668      	mov	r0, sp
 8012d20:	f002 f8d2 	bl	8014ec8 <matherr>
 8012d24:	b1b0      	cbz	r0, 8012d54 <expf+0x98>
 8012d26:	9b08      	ldr	r3, [sp, #32]
 8012d28:	b11b      	cbz	r3, 8012d32 <expf+0x76>
 8012d2a:	f7fc ffa5 	bl	800fc78 <__errno>
 8012d2e:	9b08      	ldr	r3, [sp, #32]
 8012d30:	6003      	str	r3, [r0, #0]
 8012d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d36:	f7f3 fff7 	bl	8006d28 <__aeabi_d2f>
 8012d3a:	4604      	mov	r4, r0
 8012d3c:	ee00 4a10 	vmov	s0, r4
 8012d40:	b00b      	add	sp, #44	; 0x2c
 8012d42:	ecbd 8b02 	vpop	{d8}
 8012d46:	bd30      	pop	{r4, r5, pc}
 8012d48:	4917      	ldr	r1, [pc, #92]	; (8012da8 <expf+0xec>)
 8012d4a:	2000      	movs	r0, #0
 8012d4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012d50:	2b02      	cmp	r3, #2
 8012d52:	d1e4      	bne.n	8012d1e <expf+0x62>
 8012d54:	f7fc ff90 	bl	800fc78 <__errno>
 8012d58:	2322      	movs	r3, #34	; 0x22
 8012d5a:	6003      	str	r3, [r0, #0]
 8012d5c:	e7e3      	b.n	8012d26 <expf+0x6a>
 8012d5e:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012dac <expf+0xf0>
 8012d62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d6a:	d5e7      	bpl.n	8012d3c <expf+0x80>
 8012d6c:	2304      	movs	r3, #4
 8012d6e:	9300      	str	r3, [sp, #0]
 8012d70:	4b0b      	ldr	r3, [pc, #44]	; (8012da0 <expf+0xe4>)
 8012d72:	9301      	str	r3, [sp, #4]
 8012d74:	ee18 0a10 	vmov	r0, s16
 8012d78:	2300      	movs	r3, #0
 8012d7a:	9308      	str	r3, [sp, #32]
 8012d7c:	f7f3 fca4 	bl	80066c8 <__aeabi_f2d>
 8012d80:	2300      	movs	r3, #0
 8012d82:	2200      	movs	r2, #0
 8012d84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012d88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d90:	f995 3000 	ldrsb.w	r3, [r5]
 8012d94:	e7dc      	b.n	8012d50 <expf+0x94>
 8012d96:	bf00      	nop
 8012d98:	20000a7c 	.word	0x20000a7c
 8012d9c:	42b17180 	.word	0x42b17180
 8012da0:	0806e0ca 	.word	0x0806e0ca
 8012da4:	47efffff 	.word	0x47efffff
 8012da8:	7ff00000 	.word	0x7ff00000
 8012dac:	c2cff1b5 	.word	0xc2cff1b5

08012db0 <fmodf>:
 8012db0:	b5d0      	push	{r4, r6, r7, lr}
 8012db2:	ed2d 8b02 	vpush	{d8}
 8012db6:	b08a      	sub	sp, #40	; 0x28
 8012db8:	eef0 8a40 	vmov.f32	s17, s0
 8012dbc:	eeb0 8a60 	vmov.f32	s16, s1
 8012dc0:	f000 fea2 	bl	8013b08 <__ieee754_fmodf>
 8012dc4:	4b26      	ldr	r3, [pc, #152]	; (8012e60 <fmodf+0xb0>)
 8012dc6:	f993 4000 	ldrsb.w	r4, [r3]
 8012dca:	1c63      	adds	r3, r4, #1
 8012dcc:	d035      	beq.n	8012e3a <fmodf+0x8a>
 8012dce:	eeb4 8a48 	vcmp.f32	s16, s16
 8012dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd6:	d630      	bvs.n	8012e3a <fmodf+0x8a>
 8012dd8:	eef4 8a68 	vcmp.f32	s17, s17
 8012ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de0:	d62b      	bvs.n	8012e3a <fmodf+0x8a>
 8012de2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dea:	d126      	bne.n	8012e3a <fmodf+0x8a>
 8012dec:	2301      	movs	r3, #1
 8012dee:	9300      	str	r3, [sp, #0]
 8012df0:	4b1c      	ldr	r3, [pc, #112]	; (8012e64 <fmodf+0xb4>)
 8012df2:	9301      	str	r3, [sp, #4]
 8012df4:	ee18 0a90 	vmov	r0, s17
 8012df8:	2300      	movs	r3, #0
 8012dfa:	9308      	str	r3, [sp, #32]
 8012dfc:	f7f3 fc64 	bl	80066c8 <__aeabi_f2d>
 8012e00:	4606      	mov	r6, r0
 8012e02:	460f      	mov	r7, r1
 8012e04:	ee18 0a10 	vmov	r0, s16
 8012e08:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012e0c:	f7f3 fc5c 	bl	80066c8 <__aeabi_f2d>
 8012e10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e14:	b9ac      	cbnz	r4, 8012e42 <fmodf+0x92>
 8012e16:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012e1a:	4668      	mov	r0, sp
 8012e1c:	f002 f854 	bl	8014ec8 <matherr>
 8012e20:	b1c8      	cbz	r0, 8012e56 <fmodf+0xa6>
 8012e22:	9b08      	ldr	r3, [sp, #32]
 8012e24:	b11b      	cbz	r3, 8012e2e <fmodf+0x7e>
 8012e26:	f7fc ff27 	bl	800fc78 <__errno>
 8012e2a:	9b08      	ldr	r3, [sp, #32]
 8012e2c:	6003      	str	r3, [r0, #0]
 8012e2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e32:	f7f3 ff79 	bl	8006d28 <__aeabi_d2f>
 8012e36:	ee00 0a10 	vmov	s0, r0
 8012e3a:	b00a      	add	sp, #40	; 0x28
 8012e3c:	ecbd 8b02 	vpop	{d8}
 8012e40:	bdd0      	pop	{r4, r6, r7, pc}
 8012e42:	2200      	movs	r2, #0
 8012e44:	2300      	movs	r3, #0
 8012e46:	4610      	mov	r0, r2
 8012e48:	4619      	mov	r1, r3
 8012e4a:	f7f3 fdbf 	bl	80069cc <__aeabi_ddiv>
 8012e4e:	2c02      	cmp	r4, #2
 8012e50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012e54:	d1e1      	bne.n	8012e1a <fmodf+0x6a>
 8012e56:	f7fc ff0f 	bl	800fc78 <__errno>
 8012e5a:	2321      	movs	r3, #33	; 0x21
 8012e5c:	6003      	str	r3, [r0, #0]
 8012e5e:	e7e0      	b.n	8012e22 <fmodf+0x72>
 8012e60:	20000a7c 	.word	0x20000a7c
 8012e64:	0806e0cf 	.word	0x0806e0cf

08012e68 <logf>:
 8012e68:	b510      	push	{r4, lr}
 8012e6a:	ed2d 8b02 	vpush	{d8}
 8012e6e:	b08a      	sub	sp, #40	; 0x28
 8012e70:	eeb0 8a40 	vmov.f32	s16, s0
 8012e74:	f000 fed0 	bl	8013c18 <__ieee754_logf>
 8012e78:	4b31      	ldr	r3, [pc, #196]	; (8012f40 <logf+0xd8>)
 8012e7a:	f993 4000 	ldrsb.w	r4, [r3]
 8012e7e:	1c63      	adds	r3, r4, #1
 8012e80:	d059      	beq.n	8012f36 <logf+0xce>
 8012e82:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e8a:	d654      	bvs.n	8012f36 <logf+0xce>
 8012e8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e94:	dc4f      	bgt.n	8012f36 <logf+0xce>
 8012e96:	4b2b      	ldr	r3, [pc, #172]	; (8012f44 <logf+0xdc>)
 8012e98:	9301      	str	r3, [sp, #4]
 8012e9a:	ee18 0a10 	vmov	r0, s16
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	9308      	str	r3, [sp, #32]
 8012ea2:	f7f3 fc11 	bl	80066c8 <__aeabi_f2d>
 8012ea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012eae:	b994      	cbnz	r4, 8012ed6 <logf+0x6e>
 8012eb0:	4b25      	ldr	r3, [pc, #148]	; (8012f48 <logf+0xe0>)
 8012eb2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012eb6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ebe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012ec2:	d025      	beq.n	8012f10 <logf+0xa8>
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	2c02      	cmp	r4, #2
 8012ec8:	9300      	str	r3, [sp, #0]
 8012eca:	d116      	bne.n	8012efa <logf+0x92>
 8012ecc:	f7fc fed4 	bl	800fc78 <__errno>
 8012ed0:	2321      	movs	r3, #33	; 0x21
 8012ed2:	6003      	str	r3, [r0, #0]
 8012ed4:	e016      	b.n	8012f04 <logf+0x9c>
 8012ed6:	4b1d      	ldr	r3, [pc, #116]	; (8012f4c <logf+0xe4>)
 8012ed8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012edc:	2200      	movs	r2, #0
 8012ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012ee6:	d1ed      	bne.n	8012ec4 <logf+0x5c>
 8012ee8:	2302      	movs	r3, #2
 8012eea:	429c      	cmp	r4, r3
 8012eec:	9300      	str	r3, [sp, #0]
 8012eee:	d111      	bne.n	8012f14 <logf+0xac>
 8012ef0:	f7fc fec2 	bl	800fc78 <__errno>
 8012ef4:	2322      	movs	r3, #34	; 0x22
 8012ef6:	6003      	str	r3, [r0, #0]
 8012ef8:	e011      	b.n	8012f1e <logf+0xb6>
 8012efa:	4668      	mov	r0, sp
 8012efc:	f001 ffe4 	bl	8014ec8 <matherr>
 8012f00:	2800      	cmp	r0, #0
 8012f02:	d0e3      	beq.n	8012ecc <logf+0x64>
 8012f04:	4812      	ldr	r0, [pc, #72]	; (8012f50 <logf+0xe8>)
 8012f06:	f001 ffe3 	bl	8014ed0 <nan>
 8012f0a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012f0e:	e006      	b.n	8012f1e <logf+0xb6>
 8012f10:	2302      	movs	r3, #2
 8012f12:	9300      	str	r3, [sp, #0]
 8012f14:	4668      	mov	r0, sp
 8012f16:	f001 ffd7 	bl	8014ec8 <matherr>
 8012f1a:	2800      	cmp	r0, #0
 8012f1c:	d0e8      	beq.n	8012ef0 <logf+0x88>
 8012f1e:	9b08      	ldr	r3, [sp, #32]
 8012f20:	b11b      	cbz	r3, 8012f2a <logf+0xc2>
 8012f22:	f7fc fea9 	bl	800fc78 <__errno>
 8012f26:	9b08      	ldr	r3, [sp, #32]
 8012f28:	6003      	str	r3, [r0, #0]
 8012f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f2e:	f7f3 fefb 	bl	8006d28 <__aeabi_d2f>
 8012f32:	ee00 0a10 	vmov	s0, r0
 8012f36:	b00a      	add	sp, #40	; 0x28
 8012f38:	ecbd 8b02 	vpop	{d8}
 8012f3c:	bd10      	pop	{r4, pc}
 8012f3e:	bf00      	nop
 8012f40:	20000a7c 	.word	0x20000a7c
 8012f44:	0806e0d5 	.word	0x0806e0d5
 8012f48:	c7efffff 	.word	0xc7efffff
 8012f4c:	fff00000 	.word	0xfff00000
 8012f50:	0806df79 	.word	0x0806df79

08012f54 <log2f>:
 8012f54:	b508      	push	{r3, lr}
 8012f56:	f7ff ff87 	bl	8012e68 <logf>
 8012f5a:	eddf 7a02 	vldr	s15, [pc, #8]	; 8012f64 <log2f+0x10>
 8012f5e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8012f62:	bd08      	pop	{r3, pc}
 8012f64:	3f317218 	.word	0x3f317218

08012f68 <powf>:
 8012f68:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8012f6c:	ed2d 8b04 	vpush	{d8-d9}
 8012f70:	4ca7      	ldr	r4, [pc, #668]	; (8013210 <powf+0x2a8>)
 8012f72:	b08a      	sub	sp, #40	; 0x28
 8012f74:	eef0 8a40 	vmov.f32	s17, s0
 8012f78:	eeb0 8a60 	vmov.f32	s16, s1
 8012f7c:	f000 ff3a 	bl	8013df4 <__ieee754_powf>
 8012f80:	f994 5000 	ldrsb.w	r5, [r4]
 8012f84:	1c6b      	adds	r3, r5, #1
 8012f86:	eeb0 9a40 	vmov.f32	s18, s0
 8012f8a:	4626      	mov	r6, r4
 8012f8c:	d05f      	beq.n	801304e <powf+0xe6>
 8012f8e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f96:	d65a      	bvs.n	801304e <powf+0xe6>
 8012f98:	eef4 8a68 	vcmp.f32	s17, s17
 8012f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa0:	d721      	bvc.n	8012fe6 <powf+0x7e>
 8012fa2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012faa:	d150      	bne.n	801304e <powf+0xe6>
 8012fac:	2301      	movs	r3, #1
 8012fae:	9300      	str	r3, [sp, #0]
 8012fb0:	4b98      	ldr	r3, [pc, #608]	; (8013214 <powf+0x2ac>)
 8012fb2:	9301      	str	r3, [sp, #4]
 8012fb4:	ee18 0a90 	vmov	r0, s17
 8012fb8:	2300      	movs	r3, #0
 8012fba:	9308      	str	r3, [sp, #32]
 8012fbc:	f7f3 fb84 	bl	80066c8 <__aeabi_f2d>
 8012fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fc4:	ee18 0a10 	vmov	r0, s16
 8012fc8:	f7f3 fb7e 	bl	80066c8 <__aeabi_f2d>
 8012fcc:	4b92      	ldr	r3, [pc, #584]	; (8013218 <powf+0x2b0>)
 8012fce:	2200      	movs	r2, #0
 8012fd0:	2d02      	cmp	r5, #2
 8012fd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012fd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012fda:	d032      	beq.n	8013042 <powf+0xda>
 8012fdc:	4668      	mov	r0, sp
 8012fde:	f001 ff73 	bl	8014ec8 <matherr>
 8012fe2:	bb40      	cbnz	r0, 8013036 <powf+0xce>
 8012fe4:	e065      	b.n	80130b2 <powf+0x14a>
 8012fe6:	eddf 9a8d 	vldr	s19, [pc, #564]	; 801321c <powf+0x2b4>
 8012fea:	eef4 8a69 	vcmp.f32	s17, s19
 8012fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff2:	d163      	bne.n	80130bc <powf+0x154>
 8012ff4:	eeb4 8a69 	vcmp.f32	s16, s19
 8012ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ffc:	d12e      	bne.n	801305c <powf+0xf4>
 8012ffe:	2301      	movs	r3, #1
 8013000:	9300      	str	r3, [sp, #0]
 8013002:	4b84      	ldr	r3, [pc, #528]	; (8013214 <powf+0x2ac>)
 8013004:	9301      	str	r3, [sp, #4]
 8013006:	ee18 0a90 	vmov	r0, s17
 801300a:	2300      	movs	r3, #0
 801300c:	9308      	str	r3, [sp, #32]
 801300e:	f7f3 fb5b 	bl	80066c8 <__aeabi_f2d>
 8013012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013016:	ee18 0a10 	vmov	r0, s16
 801301a:	f7f3 fb55 	bl	80066c8 <__aeabi_f2d>
 801301e:	2200      	movs	r2, #0
 8013020:	2300      	movs	r3, #0
 8013022:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801302a:	2d00      	cmp	r5, #0
 801302c:	d0d6      	beq.n	8012fdc <powf+0x74>
 801302e:	4b7a      	ldr	r3, [pc, #488]	; (8013218 <powf+0x2b0>)
 8013030:	2200      	movs	r2, #0
 8013032:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013036:	9b08      	ldr	r3, [sp, #32]
 8013038:	b11b      	cbz	r3, 8013042 <powf+0xda>
 801303a:	f7fc fe1d 	bl	800fc78 <__errno>
 801303e:	9b08      	ldr	r3, [sp, #32]
 8013040:	6003      	str	r3, [r0, #0]
 8013042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013046:	f7f3 fe6f 	bl	8006d28 <__aeabi_d2f>
 801304a:	ee09 0a10 	vmov	s18, r0
 801304e:	eeb0 0a49 	vmov.f32	s0, s18
 8013052:	b00a      	add	sp, #40	; 0x28
 8013054:	ecbd 8b04 	vpop	{d8-d9}
 8013058:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801305c:	eeb0 0a48 	vmov.f32	s0, s16
 8013060:	f002 f86a 	bl	8015138 <finitef>
 8013064:	2800      	cmp	r0, #0
 8013066:	d0f2      	beq.n	801304e <powf+0xe6>
 8013068:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013070:	d5ed      	bpl.n	801304e <powf+0xe6>
 8013072:	2301      	movs	r3, #1
 8013074:	9300      	str	r3, [sp, #0]
 8013076:	4b67      	ldr	r3, [pc, #412]	; (8013214 <powf+0x2ac>)
 8013078:	9301      	str	r3, [sp, #4]
 801307a:	ee18 0a90 	vmov	r0, s17
 801307e:	2300      	movs	r3, #0
 8013080:	9308      	str	r3, [sp, #32]
 8013082:	f7f3 fb21 	bl	80066c8 <__aeabi_f2d>
 8013086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801308a:	ee18 0a10 	vmov	r0, s16
 801308e:	f7f3 fb1b 	bl	80066c8 <__aeabi_f2d>
 8013092:	f994 3000 	ldrsb.w	r3, [r4]
 8013096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801309a:	b923      	cbnz	r3, 80130a6 <powf+0x13e>
 801309c:	2200      	movs	r2, #0
 801309e:	2300      	movs	r3, #0
 80130a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80130a4:	e79a      	b.n	8012fdc <powf+0x74>
 80130a6:	495e      	ldr	r1, [pc, #376]	; (8013220 <powf+0x2b8>)
 80130a8:	2000      	movs	r0, #0
 80130aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80130ae:	2b02      	cmp	r3, #2
 80130b0:	d194      	bne.n	8012fdc <powf+0x74>
 80130b2:	f7fc fde1 	bl	800fc78 <__errno>
 80130b6:	2321      	movs	r3, #33	; 0x21
 80130b8:	6003      	str	r3, [r0, #0]
 80130ba:	e7bc      	b.n	8013036 <powf+0xce>
 80130bc:	f002 f83c 	bl	8015138 <finitef>
 80130c0:	4605      	mov	r5, r0
 80130c2:	2800      	cmp	r0, #0
 80130c4:	d173      	bne.n	80131ae <powf+0x246>
 80130c6:	eeb0 0a68 	vmov.f32	s0, s17
 80130ca:	f002 f835 	bl	8015138 <finitef>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d06d      	beq.n	80131ae <powf+0x246>
 80130d2:	eeb0 0a48 	vmov.f32	s0, s16
 80130d6:	f002 f82f 	bl	8015138 <finitef>
 80130da:	2800      	cmp	r0, #0
 80130dc:	d067      	beq.n	80131ae <powf+0x246>
 80130de:	ee18 0a90 	vmov	r0, s17
 80130e2:	f7f3 faf1 	bl	80066c8 <__aeabi_f2d>
 80130e6:	4680      	mov	r8, r0
 80130e8:	ee18 0a10 	vmov	r0, s16
 80130ec:	4689      	mov	r9, r1
 80130ee:	f7f3 faeb 	bl	80066c8 <__aeabi_f2d>
 80130f2:	eeb4 9a49 	vcmp.f32	s18, s18
 80130f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130fa:	f994 4000 	ldrsb.w	r4, [r4]
 80130fe:	4b45      	ldr	r3, [pc, #276]	; (8013214 <powf+0x2ac>)
 8013100:	d713      	bvc.n	801312a <powf+0x1c2>
 8013102:	2201      	movs	r2, #1
 8013104:	e9cd 2300 	strd	r2, r3, [sp]
 8013108:	9508      	str	r5, [sp, #32]
 801310a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801310e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013112:	2c00      	cmp	r4, #0
 8013114:	d0c2      	beq.n	801309c <powf+0x134>
 8013116:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801311a:	ee17 0a90 	vmov	r0, s15
 801311e:	f7f3 fad3 	bl	80066c8 <__aeabi_f2d>
 8013122:	2c02      	cmp	r4, #2
 8013124:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013128:	e7c2      	b.n	80130b0 <powf+0x148>
 801312a:	2203      	movs	r2, #3
 801312c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013130:	e9cd 2300 	strd	r2, r3, [sp]
 8013134:	9508      	str	r5, [sp, #32]
 8013136:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801313a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801313e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013142:	b9fc      	cbnz	r4, 8013184 <powf+0x21c>
 8013144:	4b37      	ldr	r3, [pc, #220]	; (8013224 <powf+0x2bc>)
 8013146:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801314a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801314e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013152:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013156:	d553      	bpl.n	8013200 <powf+0x298>
 8013158:	eeb0 0a48 	vmov.f32	s0, s16
 801315c:	f001 fffc 	bl	8015158 <rintf>
 8013160:	eeb4 0a48 	vcmp.f32	s0, s16
 8013164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013168:	d004      	beq.n	8013174 <powf+0x20c>
 801316a:	4b2f      	ldr	r3, [pc, #188]	; (8013228 <powf+0x2c0>)
 801316c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013170:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013174:	f996 3000 	ldrsb.w	r3, [r6]
 8013178:	2b02      	cmp	r3, #2
 801317a:	d141      	bne.n	8013200 <powf+0x298>
 801317c:	f7fc fd7c 	bl	800fc78 <__errno>
 8013180:	2322      	movs	r3, #34	; 0x22
 8013182:	e799      	b.n	80130b8 <powf+0x150>
 8013184:	4b29      	ldr	r3, [pc, #164]	; (801322c <powf+0x2c4>)
 8013186:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801318a:	2200      	movs	r2, #0
 801318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013190:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013194:	d5ee      	bpl.n	8013174 <powf+0x20c>
 8013196:	eeb0 0a48 	vmov.f32	s0, s16
 801319a:	f001 ffdd 	bl	8015158 <rintf>
 801319e:	eeb4 0a48 	vcmp.f32	s0, s16
 80131a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a6:	d0e5      	beq.n	8013174 <powf+0x20c>
 80131a8:	2200      	movs	r2, #0
 80131aa:	4b1d      	ldr	r3, [pc, #116]	; (8013220 <powf+0x2b8>)
 80131ac:	e7e0      	b.n	8013170 <powf+0x208>
 80131ae:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80131b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b6:	f47f af4a 	bne.w	801304e <powf+0xe6>
 80131ba:	eeb0 0a68 	vmov.f32	s0, s17
 80131be:	f001 ffbb 	bl	8015138 <finitef>
 80131c2:	2800      	cmp	r0, #0
 80131c4:	f43f af43 	beq.w	801304e <powf+0xe6>
 80131c8:	eeb0 0a48 	vmov.f32	s0, s16
 80131cc:	f001 ffb4 	bl	8015138 <finitef>
 80131d0:	2800      	cmp	r0, #0
 80131d2:	f43f af3c 	beq.w	801304e <powf+0xe6>
 80131d6:	2304      	movs	r3, #4
 80131d8:	9300      	str	r3, [sp, #0]
 80131da:	4b0e      	ldr	r3, [pc, #56]	; (8013214 <powf+0x2ac>)
 80131dc:	9301      	str	r3, [sp, #4]
 80131de:	ee18 0a90 	vmov	r0, s17
 80131e2:	2300      	movs	r3, #0
 80131e4:	9308      	str	r3, [sp, #32]
 80131e6:	f7f3 fa6f 	bl	80066c8 <__aeabi_f2d>
 80131ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131ee:	ee18 0a10 	vmov	r0, s16
 80131f2:	f7f3 fa69 	bl	80066c8 <__aeabi_f2d>
 80131f6:	2200      	movs	r2, #0
 80131f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80131fc:	2300      	movs	r3, #0
 80131fe:	e7b7      	b.n	8013170 <powf+0x208>
 8013200:	4668      	mov	r0, sp
 8013202:	f001 fe61 	bl	8014ec8 <matherr>
 8013206:	2800      	cmp	r0, #0
 8013208:	f47f af15 	bne.w	8013036 <powf+0xce>
 801320c:	e7b6      	b.n	801317c <powf+0x214>
 801320e:	bf00      	nop
 8013210:	20000a7c 	.word	0x20000a7c
 8013214:	0806e0da 	.word	0x0806e0da
 8013218:	3ff00000 	.word	0x3ff00000
 801321c:	00000000 	.word	0x00000000
 8013220:	fff00000 	.word	0xfff00000
 8013224:	47efffff 	.word	0x47efffff
 8013228:	c7efffff 	.word	0xc7efffff
 801322c:	7ff00000 	.word	0x7ff00000

08013230 <sinhf>:
 8013230:	b530      	push	{r4, r5, lr}
 8013232:	ed2d 8b02 	vpush	{d8}
 8013236:	4c2b      	ldr	r4, [pc, #172]	; (80132e4 <sinhf+0xb4>)
 8013238:	b08b      	sub	sp, #44	; 0x2c
 801323a:	eeb0 8a40 	vmov.f32	s16, s0
 801323e:	f001 f9c5 	bl	80145cc <__ieee754_sinhf>
 8013242:	f994 3000 	ldrsb.w	r3, [r4]
 8013246:	3301      	adds	r3, #1
 8013248:	eef0 8a40 	vmov.f32	s17, s0
 801324c:	d034      	beq.n	80132b8 <sinhf+0x88>
 801324e:	f001 ff73 	bl	8015138 <finitef>
 8013252:	4605      	mov	r5, r0
 8013254:	2800      	cmp	r0, #0
 8013256:	d12f      	bne.n	80132b8 <sinhf+0x88>
 8013258:	eeb0 0a48 	vmov.f32	s0, s16
 801325c:	f001 ff6c 	bl	8015138 <finitef>
 8013260:	b350      	cbz	r0, 80132b8 <sinhf+0x88>
 8013262:	2303      	movs	r3, #3
 8013264:	9300      	str	r3, [sp, #0]
 8013266:	ee18 0a10 	vmov	r0, s16
 801326a:	4b1f      	ldr	r3, [pc, #124]	; (80132e8 <sinhf+0xb8>)
 801326c:	9301      	str	r3, [sp, #4]
 801326e:	9508      	str	r5, [sp, #32]
 8013270:	f7f3 fa2a 	bl	80066c8 <__aeabi_f2d>
 8013274:	f994 3000 	ldrsb.w	r3, [r4]
 8013278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801327c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013280:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013284:	b9f3      	cbnz	r3, 80132c4 <sinhf+0x94>
 8013286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328a:	bfd4      	ite	le
 801328c:	4b17      	ldrle	r3, [pc, #92]	; (80132ec <sinhf+0xbc>)
 801328e:	4b18      	ldrgt	r3, [pc, #96]	; (80132f0 <sinhf+0xc0>)
 8013290:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013294:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013298:	4668      	mov	r0, sp
 801329a:	f001 fe15 	bl	8014ec8 <matherr>
 801329e:	b1d8      	cbz	r0, 80132d8 <sinhf+0xa8>
 80132a0:	9b08      	ldr	r3, [sp, #32]
 80132a2:	b11b      	cbz	r3, 80132ac <sinhf+0x7c>
 80132a4:	f7fc fce8 	bl	800fc78 <__errno>
 80132a8:	9b08      	ldr	r3, [sp, #32]
 80132aa:	6003      	str	r3, [r0, #0]
 80132ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132b0:	f7f3 fd3a 	bl	8006d28 <__aeabi_d2f>
 80132b4:	ee08 0a90 	vmov	s17, r0
 80132b8:	eeb0 0a68 	vmov.f32	s0, s17
 80132bc:	b00b      	add	sp, #44	; 0x2c
 80132be:	ecbd 8b02 	vpop	{d8}
 80132c2:	bd30      	pop	{r4, r5, pc}
 80132c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c8:	bfd4      	ite	le
 80132ca:	490a      	ldrle	r1, [pc, #40]	; (80132f4 <sinhf+0xc4>)
 80132cc:	490a      	ldrgt	r1, [pc, #40]	; (80132f8 <sinhf+0xc8>)
 80132ce:	2000      	movs	r0, #0
 80132d0:	2b02      	cmp	r3, #2
 80132d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80132d6:	d1df      	bne.n	8013298 <sinhf+0x68>
 80132d8:	f7fc fcce 	bl	800fc78 <__errno>
 80132dc:	2322      	movs	r3, #34	; 0x22
 80132de:	6003      	str	r3, [r0, #0]
 80132e0:	e7de      	b.n	80132a0 <sinhf+0x70>
 80132e2:	bf00      	nop
 80132e4:	20000a7c 	.word	0x20000a7c
 80132e8:	0806e0df 	.word	0x0806e0df
 80132ec:	c7efffff 	.word	0xc7efffff
 80132f0:	47efffff 	.word	0x47efffff
 80132f4:	fff00000 	.word	0xfff00000
 80132f8:	7ff00000 	.word	0x7ff00000

080132fc <sqrtf>:
 80132fc:	b510      	push	{r4, lr}
 80132fe:	ed2d 8b02 	vpush	{d8}
 8013302:	b08a      	sub	sp, #40	; 0x28
 8013304:	eeb0 8a40 	vmov.f32	s16, s0
 8013308:	f001 f9ce 	bl	80146a8 <__ieee754_sqrtf>
 801330c:	4b21      	ldr	r3, [pc, #132]	; (8013394 <sqrtf+0x98>)
 801330e:	f993 4000 	ldrsb.w	r4, [r3]
 8013312:	1c63      	adds	r3, r4, #1
 8013314:	d02c      	beq.n	8013370 <sqrtf+0x74>
 8013316:	eeb4 8a48 	vcmp.f32	s16, s16
 801331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801331e:	d627      	bvs.n	8013370 <sqrtf+0x74>
 8013320:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013328:	d522      	bpl.n	8013370 <sqrtf+0x74>
 801332a:	2301      	movs	r3, #1
 801332c:	9300      	str	r3, [sp, #0]
 801332e:	4b1a      	ldr	r3, [pc, #104]	; (8013398 <sqrtf+0x9c>)
 8013330:	9301      	str	r3, [sp, #4]
 8013332:	ee18 0a10 	vmov	r0, s16
 8013336:	2300      	movs	r3, #0
 8013338:	9308      	str	r3, [sp, #32]
 801333a:	f7f3 f9c5 	bl	80066c8 <__aeabi_f2d>
 801333e:	2200      	movs	r2, #0
 8013340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013348:	2300      	movs	r3, #0
 801334a:	b9ac      	cbnz	r4, 8013378 <sqrtf+0x7c>
 801334c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013350:	4668      	mov	r0, sp
 8013352:	f001 fdb9 	bl	8014ec8 <matherr>
 8013356:	b1b8      	cbz	r0, 8013388 <sqrtf+0x8c>
 8013358:	9b08      	ldr	r3, [sp, #32]
 801335a:	b11b      	cbz	r3, 8013364 <sqrtf+0x68>
 801335c:	f7fc fc8c 	bl	800fc78 <__errno>
 8013360:	9b08      	ldr	r3, [sp, #32]
 8013362:	6003      	str	r3, [r0, #0]
 8013364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013368:	f7f3 fcde 	bl	8006d28 <__aeabi_d2f>
 801336c:	ee00 0a10 	vmov	s0, r0
 8013370:	b00a      	add	sp, #40	; 0x28
 8013372:	ecbd 8b02 	vpop	{d8}
 8013376:	bd10      	pop	{r4, pc}
 8013378:	4610      	mov	r0, r2
 801337a:	4619      	mov	r1, r3
 801337c:	f7f3 fb26 	bl	80069cc <__aeabi_ddiv>
 8013380:	2c02      	cmp	r4, #2
 8013382:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013386:	d1e3      	bne.n	8013350 <sqrtf+0x54>
 8013388:	f7fc fc76 	bl	800fc78 <__errno>
 801338c:	2321      	movs	r3, #33	; 0x21
 801338e:	6003      	str	r3, [r0, #0]
 8013390:	e7e2      	b.n	8013358 <sqrtf+0x5c>
 8013392:	bf00      	nop
 8013394:	20000a7c 	.word	0x20000a7c
 8013398:	0806e0e5 	.word	0x0806e0e5

0801339c <__ieee754_acosf>:
 801339c:	b508      	push	{r3, lr}
 801339e:	ee10 3a10 	vmov	r3, s0
 80133a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80133a6:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80133aa:	ed2d 8b0c 	vpush	{d8-d13}
 80133ae:	d10a      	bne.n	80133c6 <__ieee754_acosf+0x2a>
 80133b0:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8013550 <__ieee754_acosf+0x1b4>
 80133b4:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8013554 <__ieee754_acosf+0x1b8>
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	bfd8      	it	le
 80133bc:	eeb0 0a48 	vmovle.f32	s0, s16
 80133c0:	ecbd 8b0c 	vpop	{d8-d13}
 80133c4:	bd08      	pop	{r3, pc}
 80133c6:	dd04      	ble.n	80133d2 <__ieee754_acosf+0x36>
 80133c8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80133cc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80133d0:	e7f6      	b.n	80133c0 <__ieee754_acosf+0x24>
 80133d2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80133d6:	da3e      	bge.n	8013456 <__ieee754_acosf+0xba>
 80133d8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80133dc:	f340 80b5 	ble.w	801354a <__ieee754_acosf+0x1ae>
 80133e0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80133e4:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8013558 <__ieee754_acosf+0x1bc>
 80133e8:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801355c <__ieee754_acosf+0x1c0>
 80133ec:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8013560 <__ieee754_acosf+0x1c4>
 80133f0:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8013564 <__ieee754_acosf+0x1c8>
 80133f4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80133f8:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8013568 <__ieee754_acosf+0x1cc>
 80133fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013400:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 801356c <__ieee754_acosf+0x1d0>
 8013404:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013408:	eddf 6a59 	vldr	s13, [pc, #356]	; 8013570 <__ieee754_acosf+0x1d4>
 801340c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013410:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8013574 <__ieee754_acosf+0x1d8>
 8013414:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013418:	eddf 6a57 	vldr	s13, [pc, #348]	; 8013578 <__ieee754_acosf+0x1dc>
 801341c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8013420:	eddf 6a56 	vldr	s13, [pc, #344]	; 801357c <__ieee754_acosf+0x1e0>
 8013424:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013428:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8013580 <__ieee754_acosf+0x1e4>
 801342c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013434:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013438:	ee27 7a27 	vmul.f32	s14, s14, s15
 801343c:	eef0 7a66 	vmov.f32	s15, s13
 8013440:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013444:	eea0 8a66 	vfms.f32	s16, s0, s13
 8013448:	ee30 8a48 	vsub.f32	s16, s0, s16
 801344c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8013584 <__ieee754_acosf+0x1e8>
 8013450:	ee30 0a48 	vsub.f32	s0, s0, s16
 8013454:	e7b4      	b.n	80133c0 <__ieee754_acosf+0x24>
 8013456:	2b00      	cmp	r3, #0
 8013458:	eddf da3f 	vldr	s27, [pc, #252]	; 8013558 <__ieee754_acosf+0x1bc>
 801345c:	eddf ca3f 	vldr	s25, [pc, #252]	; 801355c <__ieee754_acosf+0x1c0>
 8013460:	ed9f ca41 	vldr	s24, [pc, #260]	; 8013568 <__ieee754_acosf+0x1cc>
 8013464:	eddf ba41 	vldr	s23, [pc, #260]	; 801356c <__ieee754_acosf+0x1d0>
 8013468:	ed9f ba41 	vldr	s22, [pc, #260]	; 8013570 <__ieee754_acosf+0x1d4>
 801346c:	eddf 8a41 	vldr	s17, [pc, #260]	; 8013574 <__ieee754_acosf+0x1d8>
 8013470:	ed9f da41 	vldr	s26, [pc, #260]	; 8013578 <__ieee754_acosf+0x1dc>
 8013474:	eddf aa3a 	vldr	s21, [pc, #232]	; 8013560 <__ieee754_acosf+0x1c4>
 8013478:	ed9f aa40 	vldr	s20, [pc, #256]	; 801357c <__ieee754_acosf+0x1e0>
 801347c:	eddf 9a40 	vldr	s19, [pc, #256]	; 8013580 <__ieee754_acosf+0x1e4>
 8013480:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013484:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013488:	da28      	bge.n	80134dc <__ieee754_acosf+0x140>
 801348a:	ee30 0a09 	vadd.f32	s0, s0, s18
 801348e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013492:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8013496:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801349a:	eeac ca80 	vfma.f32	s24, s25, s0
 801349e:	eeaa aa80 	vfma.f32	s20, s21, s0
 80134a2:	eeec ba00 	vfma.f32	s23, s24, s0
 80134a6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80134aa:	eeab ba80 	vfma.f32	s22, s23, s0
 80134ae:	eea9 9a80 	vfma.f32	s18, s19, s0
 80134b2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80134b6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80134ba:	f001 f8f5 	bl	80146a8 <__ieee754_sqrtf>
 80134be:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80134c2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013588 <__ieee754_acosf+0x1ec>
 80134c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80134ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80134ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80134d2:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 801358c <__ieee754_acosf+0x1f0>
 80134d6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80134da:	e771      	b.n	80133c0 <__ieee754_acosf+0x24>
 80134dc:	ee39 8a40 	vsub.f32	s16, s18, s0
 80134e0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80134e4:	eeb0 0a48 	vmov.f32	s0, s16
 80134e8:	f001 f8de 	bl	80146a8 <__ieee754_sqrtf>
 80134ec:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80134f0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80134f4:	eeac ca88 	vfma.f32	s24, s25, s16
 80134f8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80134fc:	eeec ba08 	vfma.f32	s23, s24, s16
 8013500:	ee10 3a10 	vmov	r3, s0
 8013504:	eeab ba88 	vfma.f32	s22, s23, s16
 8013508:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801350c:	f023 030f 	bic.w	r3, r3, #15
 8013510:	eeea 9a08 	vfma.f32	s19, s20, s16
 8013514:	ee07 3a90 	vmov	s15, r3
 8013518:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801351c:	eeb0 6a48 	vmov.f32	s12, s16
 8013520:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8013524:	eea9 9a88 	vfma.f32	s18, s19, s16
 8013528:	ee70 6a27 	vadd.f32	s13, s0, s15
 801352c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8013530:	eeb0 7a40 	vmov.f32	s14, s0
 8013534:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8013538:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801353c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8013540:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013544:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013548:	e73a      	b.n	80133c0 <__ieee754_acosf+0x24>
 801354a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8013590 <__ieee754_acosf+0x1f4>
 801354e:	e737      	b.n	80133c0 <__ieee754_acosf+0x24>
 8013550:	00000000 	.word	0x00000000
 8013554:	40490fdb 	.word	0x40490fdb
 8013558:	3811ef08 	.word	0x3811ef08
 801355c:	3a4f7f04 	.word	0x3a4f7f04
 8013560:	bf303361 	.word	0xbf303361
 8013564:	33a22168 	.word	0x33a22168
 8013568:	bd241146 	.word	0xbd241146
 801356c:	3e4e0aa8 	.word	0x3e4e0aa8
 8013570:	bea6b090 	.word	0xbea6b090
 8013574:	3e2aaaab 	.word	0x3e2aaaab
 8013578:	3d9dc62e 	.word	0x3d9dc62e
 801357c:	4001572d 	.word	0x4001572d
 8013580:	c019d139 	.word	0xc019d139
 8013584:	3fc90fda 	.word	0x3fc90fda
 8013588:	b3a22168 	.word	0xb3a22168
 801358c:	40490fda 	.word	0x40490fda
 8013590:	3fc90fdb 	.word	0x3fc90fdb

08013594 <__ieee754_acoshf>:
 8013594:	b508      	push	{r3, lr}
 8013596:	ee10 3a10 	vmov	r3, s0
 801359a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801359e:	ed2d 8b04 	vpush	{d8-d9}
 80135a2:	eeb0 8a40 	vmov.f32	s16, s0
 80135a6:	da06      	bge.n	80135b6 <__ieee754_acoshf+0x22>
 80135a8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80135ac:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80135b0:	ecbd 8b04 	vpop	{d8-d9}
 80135b4:	bd08      	pop	{r3, pc}
 80135b6:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 80135ba:	db0c      	blt.n	80135d6 <__ieee754_acoshf+0x42>
 80135bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80135c0:	db02      	blt.n	80135c8 <__ieee754_acoshf+0x34>
 80135c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80135c6:	e7f3      	b.n	80135b0 <__ieee754_acoshf+0x1c>
 80135c8:	f000 fb26 	bl	8013c18 <__ieee754_logf>
 80135cc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8013634 <__ieee754_acoshf+0xa0>
 80135d0:	ee30 0a08 	vadd.f32	s0, s0, s16
 80135d4:	e7ec      	b.n	80135b0 <__ieee754_acoshf+0x1c>
 80135d6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80135da:	d028      	beq.n	801362e <__ieee754_acoshf+0x9a>
 80135dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80135e0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80135e4:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 80135e8:	dd11      	ble.n	801360e <__ieee754_acoshf+0x7a>
 80135ea:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80135ee:	eea8 0a08 	vfma.f32	s0, s16, s16
 80135f2:	f001 f859 	bl	80146a8 <__ieee754_sqrtf>
 80135f6:	ee70 7a08 	vadd.f32	s15, s0, s16
 80135fa:	ee89 0a27 	vdiv.f32	s0, s18, s15
 80135fe:	ee98 0a28 	vfnms.f32	s0, s16, s17
 8013602:	ecbd 8b04 	vpop	{d8-d9}
 8013606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801360a:	f000 bb05 	b.w	8013c18 <__ieee754_logf>
 801360e:	ee30 8a49 	vsub.f32	s16, s0, s18
 8013612:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013616:	eea8 0a28 	vfma.f32	s0, s16, s17
 801361a:	f001 f845 	bl	80146a8 <__ieee754_sqrtf>
 801361e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8013622:	ecbd 8b04 	vpop	{d8-d9}
 8013626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801362a:	f7fe bf89 	b.w	8012540 <log1pf>
 801362e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8013638 <__ieee754_acoshf+0xa4>
 8013632:	e7bd      	b.n	80135b0 <__ieee754_acoshf+0x1c>
 8013634:	3f317218 	.word	0x3f317218
 8013638:	00000000 	.word	0x00000000

0801363c <__ieee754_asinf>:
 801363c:	b538      	push	{r3, r4, r5, lr}
 801363e:	ee10 5a10 	vmov	r5, s0
 8013642:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013646:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801364a:	ed2d 8b04 	vpush	{d8-d9}
 801364e:	d10c      	bne.n	801366a <__ieee754_asinf+0x2e>
 8013650:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80137cc <__ieee754_asinf+0x190>
 8013654:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80137d0 <__ieee754_asinf+0x194>
 8013658:	ee60 7a27 	vmul.f32	s15, s0, s15
 801365c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013660:	eeb0 0a67 	vmov.f32	s0, s15
 8013664:	ecbd 8b04 	vpop	{d8-d9}
 8013668:	bd38      	pop	{r3, r4, r5, pc}
 801366a:	dd04      	ble.n	8013676 <__ieee754_asinf+0x3a>
 801366c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013670:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013674:	e7f6      	b.n	8013664 <__ieee754_asinf+0x28>
 8013676:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801367a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801367e:	da0b      	bge.n	8013698 <__ieee754_asinf+0x5c>
 8013680:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8013684:	da52      	bge.n	801372c <__ieee754_asinf+0xf0>
 8013686:	eddf 7a53 	vldr	s15, [pc, #332]	; 80137d4 <__ieee754_asinf+0x198>
 801368a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801368e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013696:	dce5      	bgt.n	8013664 <__ieee754_asinf+0x28>
 8013698:	f7fe ff08 	bl	80124ac <fabsf>
 801369c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80136a0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80136a4:	ee20 8a08 	vmul.f32	s16, s0, s16
 80136a8:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80137d8 <__ieee754_asinf+0x19c>
 80136ac:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80137dc <__ieee754_asinf+0x1a0>
 80136b0:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 80137e0 <__ieee754_asinf+0x1a4>
 80136b4:	eea8 7a27 	vfma.f32	s14, s16, s15
 80136b8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80137e4 <__ieee754_asinf+0x1a8>
 80136bc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80136c0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80137e8 <__ieee754_asinf+0x1ac>
 80136c4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80136c8:	eddf 7a48 	vldr	s15, [pc, #288]	; 80137ec <__ieee754_asinf+0x1b0>
 80136cc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80136d0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80137f0 <__ieee754_asinf+0x1b4>
 80136d4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80136d8:	eddf 7a46 	vldr	s15, [pc, #280]	; 80137f4 <__ieee754_asinf+0x1b8>
 80136dc:	eee8 7a07 	vfma.f32	s15, s16, s14
 80136e0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80137f8 <__ieee754_asinf+0x1bc>
 80136e4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80136e8:	eddf 7a44 	vldr	s15, [pc, #272]	; 80137fc <__ieee754_asinf+0x1c0>
 80136ec:	eee7 7a08 	vfma.f32	s15, s14, s16
 80136f0:	eeb0 0a48 	vmov.f32	s0, s16
 80136f4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80136f8:	f000 ffd6 	bl	80146a8 <__ieee754_sqrtf>
 80136fc:	4b40      	ldr	r3, [pc, #256]	; (8013800 <__ieee754_asinf+0x1c4>)
 80136fe:	ee29 9a08 	vmul.f32	s18, s18, s16
 8013702:	429c      	cmp	r4, r3
 8013704:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013708:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801370c:	dd3d      	ble.n	801378a <__ieee754_asinf+0x14e>
 801370e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8013712:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8013804 <__ieee754_asinf+0x1c8>
 8013716:	eee0 7a07 	vfma.f32	s15, s0, s14
 801371a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80137d0 <__ieee754_asinf+0x194>
 801371e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013722:	2d00      	cmp	r5, #0
 8013724:	bfd8      	it	le
 8013726:	eeb1 0a40 	vnegle.f32	s0, s0
 801372a:	e79b      	b.n	8013664 <__ieee754_asinf+0x28>
 801372c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013730:	eddf 6a29 	vldr	s13, [pc, #164]	; 80137d8 <__ieee754_asinf+0x19c>
 8013734:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80137dc <__ieee754_asinf+0x1a0>
 8013738:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80137f0 <__ieee754_asinf+0x1b4>
 801373c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013740:	eddf 6a28 	vldr	s13, [pc, #160]	; 80137e4 <__ieee754_asinf+0x1a8>
 8013744:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013748:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80137e8 <__ieee754_asinf+0x1ac>
 801374c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013750:	eddf 6a26 	vldr	s13, [pc, #152]	; 80137ec <__ieee754_asinf+0x1b0>
 8013754:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013758:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80137e0 <__ieee754_asinf+0x1a4>
 801375c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013760:	eddf 6a24 	vldr	s13, [pc, #144]	; 80137f4 <__ieee754_asinf+0x1b8>
 8013764:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013768:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80137f8 <__ieee754_asinf+0x1bc>
 801376c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013770:	eddf 6a22 	vldr	s13, [pc, #136]	; 80137fc <__ieee754_asinf+0x1c0>
 8013774:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013778:	ee27 7a27 	vmul.f32	s14, s14, s15
 801377c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013780:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013784:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013788:	e76c      	b.n	8013664 <__ieee754_asinf+0x28>
 801378a:	ee10 3a10 	vmov	r3, s0
 801378e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013792:	f023 030f 	bic.w	r3, r3, #15
 8013796:	ee07 3a90 	vmov	s15, r3
 801379a:	eef1 6a67 	vneg.f32	s13, s15
 801379e:	eea6 8aa7 	vfma.f32	s16, s13, s15
 80137a2:	ee70 5a00 	vadd.f32	s11, s0, s0
 80137a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80137aa:	eddf 7a08 	vldr	s15, [pc, #32]	; 80137cc <__ieee754_asinf+0x190>
 80137ae:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80137b2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8013808 <__ieee754_asinf+0x1cc>
 80137b6:	eee5 7a47 	vfms.f32	s15, s10, s14
 80137ba:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80137be:	eeb0 6a40 	vmov.f32	s12, s0
 80137c2:	eea6 6a87 	vfma.f32	s12, s13, s14
 80137c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80137ca:	e7a8      	b.n	801371e <__ieee754_asinf+0xe2>
 80137cc:	b33bbd2e 	.word	0xb33bbd2e
 80137d0:	3fc90fdb 	.word	0x3fc90fdb
 80137d4:	7149f2ca 	.word	0x7149f2ca
 80137d8:	3811ef08 	.word	0x3811ef08
 80137dc:	3a4f7f04 	.word	0x3a4f7f04
 80137e0:	3e2aaaab 	.word	0x3e2aaaab
 80137e4:	bd241146 	.word	0xbd241146
 80137e8:	3e4e0aa8 	.word	0x3e4e0aa8
 80137ec:	bea6b090 	.word	0xbea6b090
 80137f0:	3d9dc62e 	.word	0x3d9dc62e
 80137f4:	bf303361 	.word	0xbf303361
 80137f8:	4001572d 	.word	0x4001572d
 80137fc:	c019d139 	.word	0xc019d139
 8013800:	3f799999 	.word	0x3f799999
 8013804:	333bbd2e 	.word	0x333bbd2e
 8013808:	3f490fdb 	.word	0x3f490fdb

0801380c <__ieee754_atanhf>:
 801380c:	b510      	push	{r4, lr}
 801380e:	ee10 4a10 	vmov	r4, s0
 8013812:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013816:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801381a:	ed2d 8b02 	vpush	{d8}
 801381e:	dd06      	ble.n	801382e <__ieee754_atanhf+0x22>
 8013820:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013824:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013828:	ecbd 8b02 	vpop	{d8}
 801382c:	bd10      	pop	{r4, pc}
 801382e:	d104      	bne.n	801383a <__ieee754_atanhf+0x2e>
 8013830:	eddf 7a17 	vldr	s15, [pc, #92]	; 8013890 <__ieee754_atanhf+0x84>
 8013834:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8013838:	e7f6      	b.n	8013828 <__ieee754_atanhf+0x1c>
 801383a:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 801383e:	da08      	bge.n	8013852 <__ieee754_atanhf+0x46>
 8013840:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013894 <__ieee754_atanhf+0x88>
 8013844:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013848:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013850:	dcea      	bgt.n	8013828 <__ieee754_atanhf+0x1c>
 8013852:	ee07 3a90 	vmov	s15, r3
 8013856:	ee37 0aa7 	vadd.f32	s0, s15, s15
 801385a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801385e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013866:	bfb6      	itet	lt
 8013868:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801386c:	ee80 0a07 	vdivge.f32	s0, s0, s14
 8013870:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 8013874:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8013878:	bfb8      	it	lt
 801387a:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 801387e:	f7fe fe5f 	bl	8012540 <log1pf>
 8013882:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013886:	2c00      	cmp	r4, #0
 8013888:	bfb8      	it	lt
 801388a:	eeb1 0a40 	vneglt.f32	s0, s0
 801388e:	e7cb      	b.n	8013828 <__ieee754_atanhf+0x1c>
 8013890:	00000000 	.word	0x00000000
 8013894:	7149f2ca 	.word	0x7149f2ca

08013898 <__ieee754_coshf>:
 8013898:	b510      	push	{r4, lr}
 801389a:	ee10 4a10 	vmov	r4, s0
 801389e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80138a2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80138a6:	ed2d 8b02 	vpush	{d8}
 80138aa:	db04      	blt.n	80138b6 <__ieee754_coshf+0x1e>
 80138ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 80138b0:	ecbd 8b02 	vpop	{d8}
 80138b4:	bd10      	pop	{r4, pc}
 80138b6:	4b25      	ldr	r3, [pc, #148]	; (801394c <__ieee754_coshf+0xb4>)
 80138b8:	429c      	cmp	r4, r3
 80138ba:	dc15      	bgt.n	80138e8 <__ieee754_coshf+0x50>
 80138bc:	f7fe fdf6 	bl	80124ac <fabsf>
 80138c0:	f001 fb0e 	bl	8014ee0 <expm1f>
 80138c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80138c8:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 80138cc:	eef0 7a40 	vmov.f32	s15, s0
 80138d0:	ee30 0a07 	vadd.f32	s0, s0, s14
 80138d4:	dbec      	blt.n	80138b0 <__ieee754_coshf+0x18>
 80138d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80138da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80138de:	eec7 6a80 	vdiv.f32	s13, s15, s0
 80138e2:	ee36 0a87 	vadd.f32	s0, s13, s14
 80138e6:	e7e3      	b.n	80138b0 <__ieee754_coshf+0x18>
 80138e8:	4b19      	ldr	r3, [pc, #100]	; (8013950 <__ieee754_coshf+0xb8>)
 80138ea:	429c      	cmp	r4, r3
 80138ec:	dc0c      	bgt.n	8013908 <__ieee754_coshf+0x70>
 80138ee:	f7fe fddd 	bl	80124ac <fabsf>
 80138f2:	f000 f835 	bl	8013960 <__ieee754_expf>
 80138f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80138fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80138fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013902:	eeb0 0a67 	vmov.f32	s0, s15
 8013906:	e7d3      	b.n	80138b0 <__ieee754_coshf+0x18>
 8013908:	4b12      	ldr	r3, [pc, #72]	; (8013954 <__ieee754_coshf+0xbc>)
 801390a:	429c      	cmp	r4, r3
 801390c:	dc08      	bgt.n	8013920 <__ieee754_coshf+0x88>
 801390e:	f7fe fdcd 	bl	80124ac <fabsf>
 8013912:	f000 f825 	bl	8013960 <__ieee754_expf>
 8013916:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801391a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801391e:	e7c7      	b.n	80138b0 <__ieee754_coshf+0x18>
 8013920:	4b0d      	ldr	r3, [pc, #52]	; (8013958 <__ieee754_coshf+0xc0>)
 8013922:	429c      	cmp	r4, r3
 8013924:	dc0c      	bgt.n	8013940 <__ieee754_coshf+0xa8>
 8013926:	f7fe fdc1 	bl	80124ac <fabsf>
 801392a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801392e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013932:	f000 f815 	bl	8013960 <__ieee754_expf>
 8013936:	ee20 8a08 	vmul.f32	s16, s0, s16
 801393a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801393e:	e7b7      	b.n	80138b0 <__ieee754_coshf+0x18>
 8013940:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801395c <__ieee754_coshf+0xc4>
 8013944:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013948:	e7b2      	b.n	80138b0 <__ieee754_coshf+0x18>
 801394a:	bf00      	nop
 801394c:	3eb17217 	.word	0x3eb17217
 8013950:	41afffff 	.word	0x41afffff
 8013954:	42b17217 	.word	0x42b17217
 8013958:	42b2d4fc 	.word	0x42b2d4fc
 801395c:	7149f2ca 	.word	0x7149f2ca

08013960 <__ieee754_expf>:
 8013960:	ee10 2a10 	vmov	r2, s0
 8013964:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013968:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801396c:	d902      	bls.n	8013974 <__ieee754_expf+0x14>
 801396e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013972:	4770      	bx	lr
 8013974:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8013978:	d106      	bne.n	8013988 <__ieee754_expf+0x28>
 801397a:	eddf 7a51 	vldr	s15, [pc, #324]	; 8013ac0 <__ieee754_expf+0x160>
 801397e:	2b00      	cmp	r3, #0
 8013980:	bf18      	it	ne
 8013982:	eeb0 0a67 	vmovne.f32	s0, s15
 8013986:	4770      	bx	lr
 8013988:	484e      	ldr	r0, [pc, #312]	; (8013ac4 <__ieee754_expf+0x164>)
 801398a:	4282      	cmp	r2, r0
 801398c:	dd04      	ble.n	8013998 <__ieee754_expf+0x38>
 801398e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8013ac8 <__ieee754_expf+0x168>
 8013992:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013996:	4770      	bx	lr
 8013998:	2a00      	cmp	r2, #0
 801399a:	da03      	bge.n	80139a4 <__ieee754_expf+0x44>
 801399c:	4a4b      	ldr	r2, [pc, #300]	; (8013acc <__ieee754_expf+0x16c>)
 801399e:	4291      	cmp	r1, r2
 80139a0:	f200 808a 	bhi.w	8013ab8 <__ieee754_expf+0x158>
 80139a4:	4a4a      	ldr	r2, [pc, #296]	; (8013ad0 <__ieee754_expf+0x170>)
 80139a6:	4291      	cmp	r1, r2
 80139a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80139ac:	d954      	bls.n	8013a58 <__ieee754_expf+0xf8>
 80139ae:	4a49      	ldr	r2, [pc, #292]	; (8013ad4 <__ieee754_expf+0x174>)
 80139b0:	4291      	cmp	r1, r2
 80139b2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80139b6:	d836      	bhi.n	8013a26 <__ieee754_expf+0xc6>
 80139b8:	4947      	ldr	r1, [pc, #284]	; (8013ad8 <__ieee754_expf+0x178>)
 80139ba:	4411      	add	r1, r2
 80139bc:	ed91 7a00 	vldr	s14, [r1]
 80139c0:	4946      	ldr	r1, [pc, #280]	; (8013adc <__ieee754_expf+0x17c>)
 80139c2:	440a      	add	r2, r1
 80139c4:	edd2 7a00 	vldr	s15, [r2]
 80139c8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80139cc:	f1c3 0201 	rsb	r2, r3, #1
 80139d0:	1ad2      	subs	r2, r2, r3
 80139d2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80139d6:	ee60 6a00 	vmul.f32	s13, s0, s0
 80139da:	eddf 5a41 	vldr	s11, [pc, #260]	; 8013ae0 <__ieee754_expf+0x180>
 80139de:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8013ae4 <__ieee754_expf+0x184>
 80139e2:	eea6 5aa5 	vfma.f32	s10, s13, s11
 80139e6:	eddf 5a40 	vldr	s11, [pc, #256]	; 8013ae8 <__ieee754_expf+0x188>
 80139ea:	eee5 5a26 	vfma.f32	s11, s10, s13
 80139ee:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8013aec <__ieee754_expf+0x18c>
 80139f2:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80139f6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8013af0 <__ieee754_expf+0x190>
 80139fa:	eee5 5a26 	vfma.f32	s11, s10, s13
 80139fe:	eeb0 5a40 	vmov.f32	s10, s0
 8013a02:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8013a06:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013a0a:	eef0 6a45 	vmov.f32	s13, s10
 8013a0e:	ee20 5a05 	vmul.f32	s10, s0, s10
 8013a12:	bb92      	cbnz	r2, 8013a7a <__ieee754_expf+0x11a>
 8013a14:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8013a18:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013a1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013a20:	ee36 0a40 	vsub.f32	s0, s12, s0
 8013a24:	4770      	bx	lr
 8013a26:	4b33      	ldr	r3, [pc, #204]	; (8013af4 <__ieee754_expf+0x194>)
 8013a28:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013af8 <__ieee754_expf+0x198>
 8013a2c:	4413      	add	r3, r2
 8013a2e:	edd3 7a00 	vldr	s15, [r3]
 8013a32:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013a36:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013afc <__ieee754_expf+0x19c>
 8013a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a3e:	ee17 2a90 	vmov	r2, s15
 8013a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a46:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013a4a:	eeb0 7a40 	vmov.f32	s14, s0
 8013a4e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013b00 <__ieee754_expf+0x1a0>
 8013a52:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013a56:	e7bc      	b.n	80139d2 <__ieee754_expf+0x72>
 8013a58:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8013a5c:	d20b      	bcs.n	8013a76 <__ieee754_expf+0x116>
 8013a5e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8013ac8 <__ieee754_expf+0x168>
 8013a62:	ee70 6a26 	vadd.f32	s13, s0, s13
 8013a66:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a6e:	dd02      	ble.n	8013a76 <__ieee754_expf+0x116>
 8013a70:	ee30 0a06 	vadd.f32	s0, s0, s12
 8013a74:	4770      	bx	lr
 8013a76:	2200      	movs	r2, #0
 8013a78:	e7ad      	b.n	80139d6 <__ieee754_expf+0x76>
 8013a7a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8013a7e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8013a82:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8013a86:	bfb8      	it	lt
 8013a88:	3264      	addlt	r2, #100	; 0x64
 8013a8a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013a8e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013a92:	ee76 7a40 	vsub.f32	s15, s12, s0
 8013a96:	ee17 3a90 	vmov	r3, s15
 8013a9a:	bfab      	itete	ge
 8013a9c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8013aa0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8013aa4:	ee00 3a10 	vmovge	s0, r3
 8013aa8:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8013b04 <__ieee754_expf+0x1a4>
 8013aac:	bfbc      	itt	lt
 8013aae:	ee00 3a10 	vmovlt	s0, r3
 8013ab2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8013ab6:	4770      	bx	lr
 8013ab8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013ac0 <__ieee754_expf+0x160>
 8013abc:	4770      	bx	lr
 8013abe:	bf00      	nop
 8013ac0:	00000000 	.word	0x00000000
 8013ac4:	42b17217 	.word	0x42b17217
 8013ac8:	7149f2ca 	.word	0x7149f2ca
 8013acc:	42cff1b5 	.word	0x42cff1b5
 8013ad0:	3eb17218 	.word	0x3eb17218
 8013ad4:	3f851591 	.word	0x3f851591
 8013ad8:	0806e0f4 	.word	0x0806e0f4
 8013adc:	0806e0fc 	.word	0x0806e0fc
 8013ae0:	3331bb4c 	.word	0x3331bb4c
 8013ae4:	b5ddea0e 	.word	0xb5ddea0e
 8013ae8:	388ab355 	.word	0x388ab355
 8013aec:	bb360b61 	.word	0xbb360b61
 8013af0:	3e2aaaab 	.word	0x3e2aaaab
 8013af4:	0806e0ec 	.word	0x0806e0ec
 8013af8:	3fb8aa3b 	.word	0x3fb8aa3b
 8013afc:	3f317180 	.word	0x3f317180
 8013b00:	3717f7d1 	.word	0x3717f7d1
 8013b04:	0d800000 	.word	0x0d800000

08013b08 <__ieee754_fmodf>:
 8013b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b0a:	ee10 6a90 	vmov	r6, s1
 8013b0e:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8013b12:	ee10 3a10 	vmov	r3, s0
 8013b16:	d009      	beq.n	8013b2c <__ieee754_fmodf+0x24>
 8013b18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013b1c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013b20:	ee10 7a10 	vmov	r7, s0
 8013b24:	da02      	bge.n	8013b2c <__ieee754_fmodf+0x24>
 8013b26:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013b2a:	dd0a      	ble.n	8013b42 <__ieee754_fmodf+0x3a>
 8013b2c:	ee07 3a90 	vmov	s15, r3
 8013b30:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013b34:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8013b38:	ee17 3a90 	vmov	r3, s15
 8013b3c:	ee00 3a10 	vmov	s0, r3
 8013b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b42:	42a9      	cmp	r1, r5
 8013b44:	dbfa      	blt.n	8013b3c <__ieee754_fmodf+0x34>
 8013b46:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8013b4a:	d105      	bne.n	8013b58 <__ieee754_fmodf+0x50>
 8013b4c:	4a30      	ldr	r2, [pc, #192]	; (8013c10 <__ieee754_fmodf+0x108>)
 8013b4e:	0fe3      	lsrs	r3, r4, #31
 8013b50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	e7f1      	b.n	8013b3c <__ieee754_fmodf+0x34>
 8013b58:	4b2e      	ldr	r3, [pc, #184]	; (8013c14 <__ieee754_fmodf+0x10c>)
 8013b5a:	4299      	cmp	r1, r3
 8013b5c:	dc3e      	bgt.n	8013bdc <__ieee754_fmodf+0xd4>
 8013b5e:	020a      	lsls	r2, r1, #8
 8013b60:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8013b64:	2a00      	cmp	r2, #0
 8013b66:	dc36      	bgt.n	8013bd6 <__ieee754_fmodf+0xce>
 8013b68:	429d      	cmp	r5, r3
 8013b6a:	dc3a      	bgt.n	8013be2 <__ieee754_fmodf+0xda>
 8013b6c:	022b      	lsls	r3, r5, #8
 8013b6e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8013b72:	005b      	lsls	r3, r3, #1
 8013b74:	f102 32ff 	add.w	r2, r2, #4294967295
 8013b78:	d5fb      	bpl.n	8013b72 <__ieee754_fmodf+0x6a>
 8013b7a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8013b7e:	bfbb      	ittet	lt
 8013b80:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8013b84:	1a1b      	sublt	r3, r3, r0
 8013b86:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8013b8a:	4099      	lsllt	r1, r3
 8013b8c:	bfa8      	it	ge
 8013b8e:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8013b92:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8013b96:	bfb5      	itete	lt
 8013b98:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8013b9c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8013ba0:	1a9b      	sublt	r3, r3, r2
 8013ba2:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8013ba6:	bfb8      	it	lt
 8013ba8:	409d      	lsllt	r5, r3
 8013baa:	1a80      	subs	r0, r0, r2
 8013bac:	1b4b      	subs	r3, r1, r5
 8013bae:	b9d8      	cbnz	r0, 8013be8 <__ieee754_fmodf+0xe0>
 8013bb0:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8013bb4:	bf28      	it	cs
 8013bb6:	460b      	movcs	r3, r1
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d0c7      	beq.n	8013b4c <__ieee754_fmodf+0x44>
 8013bbc:	4915      	ldr	r1, [pc, #84]	; (8013c14 <__ieee754_fmodf+0x10c>)
 8013bbe:	428b      	cmp	r3, r1
 8013bc0:	dd1a      	ble.n	8013bf8 <__ieee754_fmodf+0xf0>
 8013bc2:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8013bc6:	db1a      	blt.n	8013bfe <__ieee754_fmodf+0xf6>
 8013bc8:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8013bcc:	4323      	orrs	r3, r4
 8013bce:	327f      	adds	r2, #127	; 0x7f
 8013bd0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013bd4:	e7b2      	b.n	8013b3c <__ieee754_fmodf+0x34>
 8013bd6:	3801      	subs	r0, #1
 8013bd8:	0052      	lsls	r2, r2, #1
 8013bda:	e7c3      	b.n	8013b64 <__ieee754_fmodf+0x5c>
 8013bdc:	15c8      	asrs	r0, r1, #23
 8013bde:	387f      	subs	r0, #127	; 0x7f
 8013be0:	e7c2      	b.n	8013b68 <__ieee754_fmodf+0x60>
 8013be2:	15ea      	asrs	r2, r5, #23
 8013be4:	3a7f      	subs	r2, #127	; 0x7f
 8013be6:	e7c8      	b.n	8013b7a <__ieee754_fmodf+0x72>
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	da02      	bge.n	8013bf2 <__ieee754_fmodf+0xea>
 8013bec:	0049      	lsls	r1, r1, #1
 8013bee:	3801      	subs	r0, #1
 8013bf0:	e7dc      	b.n	8013bac <__ieee754_fmodf+0xa4>
 8013bf2:	d0ab      	beq.n	8013b4c <__ieee754_fmodf+0x44>
 8013bf4:	0059      	lsls	r1, r3, #1
 8013bf6:	e7fa      	b.n	8013bee <__ieee754_fmodf+0xe6>
 8013bf8:	005b      	lsls	r3, r3, #1
 8013bfa:	3a01      	subs	r2, #1
 8013bfc:	e7df      	b.n	8013bbe <__ieee754_fmodf+0xb6>
 8013bfe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013c02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013c06:	3282      	adds	r2, #130	; 0x82
 8013c08:	4113      	asrs	r3, r2
 8013c0a:	4323      	orrs	r3, r4
 8013c0c:	e796      	b.n	8013b3c <__ieee754_fmodf+0x34>
 8013c0e:	bf00      	nop
 8013c10:	0806e104 	.word	0x0806e104
 8013c14:	007fffff 	.word	0x007fffff

08013c18 <__ieee754_logf>:
 8013c18:	ee10 3a10 	vmov	r3, s0
 8013c1c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013c20:	d106      	bne.n	8013c30 <__ieee754_logf+0x18>
 8013c22:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8013db8 <__ieee754_logf+0x1a0>
 8013c26:	eddf 7a65 	vldr	s15, [pc, #404]	; 8013dbc <__ieee754_logf+0x1a4>
 8013c2a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8013c2e:	4770      	bx	lr
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	da02      	bge.n	8013c3a <__ieee754_logf+0x22>
 8013c34:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013c38:	e7f5      	b.n	8013c26 <__ieee754_logf+0xe>
 8013c3a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013c3e:	db02      	blt.n	8013c46 <__ieee754_logf+0x2e>
 8013c40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013c44:	4770      	bx	lr
 8013c46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013c4a:	bfbf      	itttt	lt
 8013c4c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8013dc0 <__ieee754_logf+0x1a8>
 8013c50:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8013c54:	f06f 0118 	mvnlt.w	r1, #24
 8013c58:	ee17 3a90 	vmovlt	r3, s15
 8013c5c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8013c60:	bfa8      	it	ge
 8013c62:	2100      	movge	r1, #0
 8013c64:	3a7f      	subs	r2, #127	; 0x7f
 8013c66:	440a      	add	r2, r1
 8013c68:	4956      	ldr	r1, [pc, #344]	; (8013dc4 <__ieee754_logf+0x1ac>)
 8013c6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013c6e:	4419      	add	r1, r3
 8013c70:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8013c74:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8013c78:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8013c7c:	4319      	orrs	r1, r3
 8013c7e:	ee07 1a90 	vmov	s15, r1
 8013c82:	f103 010f 	add.w	r1, r3, #15
 8013c86:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8013c8a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013c8e:	290f      	cmp	r1, #15
 8013c90:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013c94:	dc31      	bgt.n	8013cfa <__ieee754_logf+0xe2>
 8013c96:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c9e:	d10f      	bne.n	8013cc0 <__ieee754_logf+0xa8>
 8013ca0:	2a00      	cmp	r2, #0
 8013ca2:	f000 8085 	beq.w	8013db0 <__ieee754_logf+0x198>
 8013ca6:	ee07 2a90 	vmov	s15, r2
 8013caa:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8013dc8 <__ieee754_logf+0x1b0>
 8013cae:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013dcc <__ieee754_logf+0x1b4>
 8013cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cb6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013cba:	eea7 0a87 	vfma.f32	s0, s15, s14
 8013cbe:	4770      	bx	lr
 8013cc0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013dd0 <__ieee754_logf+0x1b8>
 8013cc4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013cc8:	eea0 7a67 	vfms.f32	s14, s0, s15
 8013ccc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013cd4:	b912      	cbnz	r2, 8013cdc <__ieee754_logf+0xc4>
 8013cd6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013cda:	4770      	bx	lr
 8013cdc:	ee07 2a90 	vmov	s15, r2
 8013ce0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8013dc8 <__ieee754_logf+0x1b0>
 8013ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ce8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8013cec:	ee37 0a40 	vsub.f32	s0, s14, s0
 8013cf0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013dcc <__ieee754_logf+0x1b4>
 8013cf4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8013cf8:	4770      	bx	lr
 8013cfa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013cfe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013d02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013dd4 <__ieee754_logf+0x1bc>
 8013d06:	eddf 4a34 	vldr	s9, [pc, #208]	; 8013dd8 <__ieee754_logf+0x1c0>
 8013d0a:	4934      	ldr	r1, [pc, #208]	; (8013ddc <__ieee754_logf+0x1c4>)
 8013d0c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8013d10:	4419      	add	r1, r3
 8013d12:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8013d16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8013d1a:	430b      	orrs	r3, r1
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	ee07 2a90 	vmov	s15, r2
 8013d22:	ee26 5a06 	vmul.f32	s10, s12, s12
 8013d26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013d2a:	ee25 7a05 	vmul.f32	s14, s10, s10
 8013d2e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8013de0 <__ieee754_logf+0x1c8>
 8013d32:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013d36:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8013de4 <__ieee754_logf+0x1cc>
 8013d3a:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013d3e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8013de8 <__ieee754_logf+0x1d0>
 8013d42:	eee7 7a24 	vfma.f32	s15, s14, s9
 8013d46:	eddf 4a29 	vldr	s9, [pc, #164]	; 8013dec <__ieee754_logf+0x1d4>
 8013d4a:	eee7 4a87 	vfma.f32	s9, s15, s14
 8013d4e:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013df0 <__ieee754_logf+0x1d8>
 8013d52:	eee4 7a87 	vfma.f32	s15, s9, s14
 8013d56:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013d5a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8013d5e:	dd1c      	ble.n	8013d9a <__ieee754_logf+0x182>
 8013d60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013d64:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013d68:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013d6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d70:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013d74:	b922      	cbnz	r2, 8013d80 <__ieee754_logf+0x168>
 8013d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013d7e:	4770      	bx	lr
 8013d80:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8013dc8 <__ieee754_logf+0x1b0>
 8013d84:	eee6 7a86 	vfma.f32	s15, s13, s12
 8013d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d8c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013d90:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8013dcc <__ieee754_logf+0x1b4>
 8013d94:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8013d98:	4770      	bx	lr
 8013d9a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013d9e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013da2:	2a00      	cmp	r2, #0
 8013da4:	d0e9      	beq.n	8013d7a <__ieee754_logf+0x162>
 8013da6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013dc8 <__ieee754_logf+0x1b0>
 8013daa:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8013dae:	e7ed      	b.n	8013d8c <__ieee754_logf+0x174>
 8013db0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8013dbc <__ieee754_logf+0x1a4>
 8013db4:	4770      	bx	lr
 8013db6:	bf00      	nop
 8013db8:	cc000000 	.word	0xcc000000
 8013dbc:	00000000 	.word	0x00000000
 8013dc0:	4c000000 	.word	0x4c000000
 8013dc4:	004afb20 	.word	0x004afb20
 8013dc8:	3717f7d1 	.word	0x3717f7d1
 8013dcc:	3f317180 	.word	0x3f317180
 8013dd0:	3eaaaaab 	.word	0x3eaaaaab
 8013dd4:	3e1cd04f 	.word	0x3e1cd04f
 8013dd8:	3e178897 	.word	0x3e178897
 8013ddc:	ffcf5c30 	.word	0xffcf5c30
 8013de0:	3e638e29 	.word	0x3e638e29
 8013de4:	3ecccccd 	.word	0x3ecccccd
 8013de8:	3e3a3325 	.word	0x3e3a3325
 8013dec:	3e924925 	.word	0x3e924925
 8013df0:	3f2aaaab 	.word	0x3f2aaaab

08013df4 <__ieee754_powf>:
 8013df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df8:	ee10 5a90 	vmov	r5, s1
 8013dfc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8013e00:	ed2d 8b02 	vpush	{d8}
 8013e04:	eeb0 8a40 	vmov.f32	s16, s0
 8013e08:	eef0 8a60 	vmov.f32	s17, s1
 8013e0c:	f000 8293 	beq.w	8014336 <__ieee754_powf+0x542>
 8013e10:	ee10 8a10 	vmov	r8, s0
 8013e14:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8013e18:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013e1c:	dc06      	bgt.n	8013e2c <__ieee754_powf+0x38>
 8013e1e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013e22:	dd0a      	ble.n	8013e3a <__ieee754_powf+0x46>
 8013e24:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013e28:	f000 8285 	beq.w	8014336 <__ieee754_powf+0x542>
 8013e2c:	ecbd 8b02 	vpop	{d8}
 8013e30:	48d9      	ldr	r0, [pc, #868]	; (8014198 <__ieee754_powf+0x3a4>)
 8013e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e36:	f001 b989 	b.w	801514c <nanf>
 8013e3a:	f1b8 0f00 	cmp.w	r8, #0
 8013e3e:	da1d      	bge.n	8013e7c <__ieee754_powf+0x88>
 8013e40:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8013e44:	da2c      	bge.n	8013ea0 <__ieee754_powf+0xac>
 8013e46:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8013e4a:	db30      	blt.n	8013eae <__ieee754_powf+0xba>
 8013e4c:	15fb      	asrs	r3, r7, #23
 8013e4e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013e52:	fa47 f603 	asr.w	r6, r7, r3
 8013e56:	fa06 f303 	lsl.w	r3, r6, r3
 8013e5a:	42bb      	cmp	r3, r7
 8013e5c:	d127      	bne.n	8013eae <__ieee754_powf+0xba>
 8013e5e:	f006 0601 	and.w	r6, r6, #1
 8013e62:	f1c6 0602 	rsb	r6, r6, #2
 8013e66:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8013e6a:	d122      	bne.n	8013eb2 <__ieee754_powf+0xbe>
 8013e6c:	2d00      	cmp	r5, #0
 8013e6e:	f280 8268 	bge.w	8014342 <__ieee754_powf+0x54e>
 8013e72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e76:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013e7a:	e00d      	b.n	8013e98 <__ieee754_powf+0xa4>
 8013e7c:	2600      	movs	r6, #0
 8013e7e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013e82:	d1f0      	bne.n	8013e66 <__ieee754_powf+0x72>
 8013e84:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013e88:	f000 8255 	beq.w	8014336 <__ieee754_powf+0x542>
 8013e8c:	dd0a      	ble.n	8013ea4 <__ieee754_powf+0xb0>
 8013e8e:	2d00      	cmp	r5, #0
 8013e90:	f280 8254 	bge.w	801433c <__ieee754_powf+0x548>
 8013e94:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801419c <__ieee754_powf+0x3a8>
 8013e98:	ecbd 8b02 	vpop	{d8}
 8013e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ea0:	2602      	movs	r6, #2
 8013ea2:	e7ec      	b.n	8013e7e <__ieee754_powf+0x8a>
 8013ea4:	2d00      	cmp	r5, #0
 8013ea6:	daf5      	bge.n	8013e94 <__ieee754_powf+0xa0>
 8013ea8:	eeb1 0a68 	vneg.f32	s0, s17
 8013eac:	e7f4      	b.n	8013e98 <__ieee754_powf+0xa4>
 8013eae:	2600      	movs	r6, #0
 8013eb0:	e7d9      	b.n	8013e66 <__ieee754_powf+0x72>
 8013eb2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8013eb6:	d102      	bne.n	8013ebe <__ieee754_powf+0xca>
 8013eb8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013ebc:	e7ec      	b.n	8013e98 <__ieee754_powf+0xa4>
 8013ebe:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8013ec2:	eeb0 0a48 	vmov.f32	s0, s16
 8013ec6:	d108      	bne.n	8013eda <__ieee754_powf+0xe6>
 8013ec8:	f1b8 0f00 	cmp.w	r8, #0
 8013ecc:	db05      	blt.n	8013eda <__ieee754_powf+0xe6>
 8013ece:	ecbd 8b02 	vpop	{d8}
 8013ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed6:	f000 bbe7 	b.w	80146a8 <__ieee754_sqrtf>
 8013eda:	f7fe fae7 	bl	80124ac <fabsf>
 8013ede:	b124      	cbz	r4, 8013eea <__ieee754_powf+0xf6>
 8013ee0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8013ee4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013ee8:	d117      	bne.n	8013f1a <__ieee754_powf+0x126>
 8013eea:	2d00      	cmp	r5, #0
 8013eec:	bfbc      	itt	lt
 8013eee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013ef2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013ef6:	f1b8 0f00 	cmp.w	r8, #0
 8013efa:	dacd      	bge.n	8013e98 <__ieee754_powf+0xa4>
 8013efc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8013f00:	ea54 0306 	orrs.w	r3, r4, r6
 8013f04:	d104      	bne.n	8013f10 <__ieee754_powf+0x11c>
 8013f06:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013f0a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013f0e:	e7c3      	b.n	8013e98 <__ieee754_powf+0xa4>
 8013f10:	2e01      	cmp	r6, #1
 8013f12:	d1c1      	bne.n	8013e98 <__ieee754_powf+0xa4>
 8013f14:	eeb1 0a40 	vneg.f32	s0, s0
 8013f18:	e7be      	b.n	8013e98 <__ieee754_powf+0xa4>
 8013f1a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8013f1e:	3801      	subs	r0, #1
 8013f20:	ea56 0300 	orrs.w	r3, r6, r0
 8013f24:	d104      	bne.n	8013f30 <__ieee754_powf+0x13c>
 8013f26:	ee38 8a48 	vsub.f32	s16, s16, s16
 8013f2a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013f2e:	e7b3      	b.n	8013e98 <__ieee754_powf+0xa4>
 8013f30:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8013f34:	dd6d      	ble.n	8014012 <__ieee754_powf+0x21e>
 8013f36:	4b9a      	ldr	r3, [pc, #616]	; (80141a0 <__ieee754_powf+0x3ac>)
 8013f38:	429c      	cmp	r4, r3
 8013f3a:	dc06      	bgt.n	8013f4a <__ieee754_powf+0x156>
 8013f3c:	2d00      	cmp	r5, #0
 8013f3e:	daa9      	bge.n	8013e94 <__ieee754_powf+0xa0>
 8013f40:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80141a4 <__ieee754_powf+0x3b0>
 8013f44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013f48:	e7a6      	b.n	8013e98 <__ieee754_powf+0xa4>
 8013f4a:	4b97      	ldr	r3, [pc, #604]	; (80141a8 <__ieee754_powf+0x3b4>)
 8013f4c:	429c      	cmp	r4, r3
 8013f4e:	dd02      	ble.n	8013f56 <__ieee754_powf+0x162>
 8013f50:	2d00      	cmp	r5, #0
 8013f52:	dcf5      	bgt.n	8013f40 <__ieee754_powf+0x14c>
 8013f54:	e79e      	b.n	8013e94 <__ieee754_powf+0xa0>
 8013f56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013f5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013f5e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80141ac <__ieee754_powf+0x3b8>
 8013f62:	eef1 6a40 	vneg.f32	s13, s0
 8013f66:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013f6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013f6e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013f72:	eee7 7a40 	vfms.f32	s15, s14, s0
 8013f76:	ee60 0a00 	vmul.f32	s1, s0, s0
 8013f7a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80141b0 <__ieee754_powf+0x3bc>
 8013f7e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013f82:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80141b4 <__ieee754_powf+0x3c0>
 8013f86:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8013f8a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013f8e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80141b8 <__ieee754_powf+0x3c4>
 8013f92:	eeb0 6a67 	vmov.f32	s12, s15
 8013f96:	eea0 6a07 	vfma.f32	s12, s0, s14
 8013f9a:	ee16 3a10 	vmov	r3, s12
 8013f9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013fa2:	f023 030f 	bic.w	r3, r3, #15
 8013fa6:	ee00 3a90 	vmov	s1, r3
 8013faa:	eee6 0a87 	vfma.f32	s1, s13, s14
 8013fae:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013fb2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8013fb6:	f025 050f 	bic.w	r5, r5, #15
 8013fba:	ee07 5a10 	vmov	s14, r5
 8013fbe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013fc2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013fc6:	ee07 3a90 	vmov	s15, r3
 8013fca:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013fce:	3e01      	subs	r6, #1
 8013fd0:	ea56 0200 	orrs.w	r2, r6, r0
 8013fd4:	ee07 5a10 	vmov	s14, r5
 8013fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013fdc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013fe0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013fe4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013fe8:	ee17 4a10 	vmov	r4, s14
 8013fec:	bf08      	it	eq
 8013fee:	eeb0 8a40 	vmoveq.f32	s16, s0
 8013ff2:	2c00      	cmp	r4, #0
 8013ff4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013ff8:	f340 8184 	ble.w	8014304 <__ieee754_powf+0x510>
 8013ffc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8014000:	f340 80fc 	ble.w	80141fc <__ieee754_powf+0x408>
 8014004:	eddf 7a67 	vldr	s15, [pc, #412]	; 80141a4 <__ieee754_powf+0x3b0>
 8014008:	ee28 0a27 	vmul.f32	s0, s16, s15
 801400c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014010:	e742      	b.n	8013e98 <__ieee754_powf+0xa4>
 8014012:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8014016:	bfbf      	itttt	lt
 8014018:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80141bc <__ieee754_powf+0x3c8>
 801401c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8014020:	f06f 0217 	mvnlt.w	r2, #23
 8014024:	ee17 4a90 	vmovlt	r4, s15
 8014028:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801402c:	bfa8      	it	ge
 801402e:	2200      	movge	r2, #0
 8014030:	3b7f      	subs	r3, #127	; 0x7f
 8014032:	4413      	add	r3, r2
 8014034:	4a62      	ldr	r2, [pc, #392]	; (80141c0 <__ieee754_powf+0x3cc>)
 8014036:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801403a:	4294      	cmp	r4, r2
 801403c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8014040:	dd06      	ble.n	8014050 <__ieee754_powf+0x25c>
 8014042:	4a60      	ldr	r2, [pc, #384]	; (80141c4 <__ieee754_powf+0x3d0>)
 8014044:	4294      	cmp	r4, r2
 8014046:	f340 80a5 	ble.w	8014194 <__ieee754_powf+0x3a0>
 801404a:	3301      	adds	r3, #1
 801404c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014050:	2400      	movs	r4, #0
 8014052:	4a5d      	ldr	r2, [pc, #372]	; (80141c8 <__ieee754_powf+0x3d4>)
 8014054:	00a7      	lsls	r7, r4, #2
 8014056:	443a      	add	r2, r7
 8014058:	ee07 1a90 	vmov	s15, r1
 801405c:	ed92 7a00 	vldr	s14, [r2]
 8014060:	4a5a      	ldr	r2, [pc, #360]	; (80141cc <__ieee754_powf+0x3d8>)
 8014062:	ee37 6a27 	vadd.f32	s12, s14, s15
 8014066:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801406a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801406e:	1049      	asrs	r1, r1, #1
 8014070:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8014074:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8014078:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801407c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8014080:	ee06 1a10 	vmov	s12, r1
 8014084:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8014088:	ee14 ca90 	vmov	ip, s9
 801408c:	ea02 0c0c 	and.w	ip, r2, ip
 8014090:	ee05 ca10 	vmov	s10, ip
 8014094:	eeb1 4a45 	vneg.f32	s8, s10
 8014098:	eee4 5a06 	vfma.f32	s11, s8, s12
 801409c:	ee36 6a47 	vsub.f32	s12, s12, s14
 80140a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80141d0 <__ieee754_powf+0x3dc>
 80140a4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80140a8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80140ac:	eee4 5a06 	vfma.f32	s11, s8, s12
 80140b0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80140b4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80140b8:	eddf 5a46 	vldr	s11, [pc, #280]	; 80141d4 <__ieee754_powf+0x3e0>
 80140bc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80140c0:	eddf 5a45 	vldr	s11, [pc, #276]	; 80141d8 <__ieee754_powf+0x3e4>
 80140c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80140c8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80141ac <__ieee754_powf+0x3b8>
 80140cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80140d0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80141dc <__ieee754_powf+0x3e8>
 80140d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80140d8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80141e0 <__ieee754_powf+0x3ec>
 80140dc:	ee75 6a24 	vadd.f32	s13, s10, s9
 80140e0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80140e4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80140e8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80140ec:	eef0 7a65 	vmov.f32	s15, s11
 80140f0:	eee3 6a87 	vfma.f32	s13, s7, s14
 80140f4:	eee5 7a05 	vfma.f32	s15, s10, s10
 80140f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140fc:	ee17 1a90 	vmov	r1, s15
 8014100:	4011      	ands	r1, r2
 8014102:	ee07 1a90 	vmov	s15, r1
 8014106:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801410a:	eddf 5a36 	vldr	s11, [pc, #216]	; 80141e4 <__ieee754_powf+0x3f0>
 801410e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8014112:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014116:	ee27 7a24 	vmul.f32	s14, s14, s9
 801411a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801411e:	eeb0 6a47 	vmov.f32	s12, s14
 8014122:	eea5 6a27 	vfma.f32	s12, s10, s15
 8014126:	ee16 1a10 	vmov	r1, s12
 801412a:	4011      	ands	r1, r2
 801412c:	ee06 1a90 	vmov	s13, r1
 8014130:	eee4 6a27 	vfma.f32	s13, s8, s15
 8014134:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80141e8 <__ieee754_powf+0x3f4>
 8014138:	ee37 7a66 	vsub.f32	s14, s14, s13
 801413c:	ee06 1a10 	vmov	s12, r1
 8014140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014144:	eddf 7a29 	vldr	s15, [pc, #164]	; 80141ec <__ieee754_powf+0x3f8>
 8014148:	4929      	ldr	r1, [pc, #164]	; (80141f0 <__ieee754_powf+0x3fc>)
 801414a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801414e:	4439      	add	r1, r7
 8014150:	edd1 7a00 	vldr	s15, [r1]
 8014154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014158:	ee07 3a90 	vmov	s15, r3
 801415c:	eef0 0a47 	vmov.f32	s1, s14
 8014160:	4b24      	ldr	r3, [pc, #144]	; (80141f4 <__ieee754_powf+0x400>)
 8014162:	eee6 0a25 	vfma.f32	s1, s12, s11
 8014166:	443b      	add	r3, r7
 8014168:	ed93 5a00 	vldr	s10, [r3]
 801416c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014170:	ee70 0a85 	vadd.f32	s1, s1, s10
 8014174:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8014178:	ee17 3a90 	vmov	r3, s15
 801417c:	4013      	ands	r3, r2
 801417e:	ee07 3a90 	vmov	s15, r3
 8014182:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014186:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801418a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801418e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014192:	e70e      	b.n	8013fb2 <__ieee754_powf+0x1be>
 8014194:	2401      	movs	r4, #1
 8014196:	e75c      	b.n	8014052 <__ieee754_powf+0x25e>
 8014198:	0806df79 	.word	0x0806df79
 801419c:	00000000 	.word	0x00000000
 80141a0:	3f7ffff7 	.word	0x3f7ffff7
 80141a4:	7149f2ca 	.word	0x7149f2ca
 80141a8:	3f800007 	.word	0x3f800007
 80141ac:	3eaaaaab 	.word	0x3eaaaaab
 80141b0:	36eca570 	.word	0x36eca570
 80141b4:	3fb8aa3b 	.word	0x3fb8aa3b
 80141b8:	3fb8aa00 	.word	0x3fb8aa00
 80141bc:	4b800000 	.word	0x4b800000
 80141c0:	001cc471 	.word	0x001cc471
 80141c4:	005db3d6 	.word	0x005db3d6
 80141c8:	0806e10c 	.word	0x0806e10c
 80141cc:	fffff000 	.word	0xfffff000
 80141d0:	3e6c3255 	.word	0x3e6c3255
 80141d4:	3e53f142 	.word	0x3e53f142
 80141d8:	3e8ba305 	.word	0x3e8ba305
 80141dc:	3edb6db7 	.word	0x3edb6db7
 80141e0:	3f19999a 	.word	0x3f19999a
 80141e4:	3f763800 	.word	0x3f763800
 80141e8:	3f76384f 	.word	0x3f76384f
 80141ec:	369dc3a0 	.word	0x369dc3a0
 80141f0:	0806e11c 	.word	0x0806e11c
 80141f4:	0806e114 	.word	0x0806e114
 80141f8:	3338aa3c 	.word	0x3338aa3c
 80141fc:	f040 8092 	bne.w	8014324 <__ieee754_powf+0x530>
 8014200:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80141f8 <__ieee754_powf+0x404>
 8014204:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014208:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801420c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014214:	f73f aef6 	bgt.w	8014004 <__ieee754_powf+0x210>
 8014218:	15db      	asrs	r3, r3, #23
 801421a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801421e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014222:	4103      	asrs	r3, r0
 8014224:	4423      	add	r3, r4
 8014226:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801422a:	4947      	ldr	r1, [pc, #284]	; (8014348 <__ieee754_powf+0x554>)
 801422c:	3a7f      	subs	r2, #127	; 0x7f
 801422e:	4111      	asrs	r1, r2
 8014230:	ea23 0101 	bic.w	r1, r3, r1
 8014234:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014238:	ee07 1a10 	vmov	s14, r1
 801423c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014240:	f1c2 0217 	rsb	r2, r2, #23
 8014244:	4110      	asrs	r0, r2
 8014246:	2c00      	cmp	r4, #0
 8014248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801424c:	bfb8      	it	lt
 801424e:	4240      	neglt	r0, r0
 8014250:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014254:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801434c <__ieee754_powf+0x558>
 8014258:	ee17 3a10 	vmov	r3, s14
 801425c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014260:	f023 030f 	bic.w	r3, r3, #15
 8014264:	ee07 3a10 	vmov	s14, r3
 8014268:	ee77 7a67 	vsub.f32	s15, s14, s15
 801426c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014270:	eddf 7a37 	vldr	s15, [pc, #220]	; 8014350 <__ieee754_powf+0x55c>
 8014274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014278:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801427c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8014354 <__ieee754_powf+0x560>
 8014280:	eeb0 0a67 	vmov.f32	s0, s15
 8014284:	eea7 0a26 	vfma.f32	s0, s14, s13
 8014288:	eeb0 6a40 	vmov.f32	s12, s0
 801428c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014290:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014294:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014298:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8014358 <__ieee754_powf+0x564>
 801429c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801435c <__ieee754_powf+0x568>
 80142a0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80142a4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8014360 <__ieee754_powf+0x56c>
 80142a8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80142ac:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8014364 <__ieee754_powf+0x570>
 80142b0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80142b4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8014368 <__ieee754_powf+0x574>
 80142b8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80142bc:	eeb0 6a40 	vmov.f32	s12, s0
 80142c0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80142c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80142c8:	eeb0 7a46 	vmov.f32	s14, s12
 80142cc:	ee77 6a66 	vsub.f32	s13, s14, s13
 80142d0:	ee20 6a06 	vmul.f32	s12, s0, s12
 80142d4:	eee0 7a27 	vfma.f32	s15, s0, s15
 80142d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80142dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80142e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80142e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80142ec:	ee10 3a10 	vmov	r3, s0
 80142f0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80142f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80142f8:	da1a      	bge.n	8014330 <__ieee754_powf+0x53c>
 80142fa:	f000 ff87 	bl	801520c <scalbnf>
 80142fe:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014302:	e5c9      	b.n	8013e98 <__ieee754_powf+0xa4>
 8014304:	4a19      	ldr	r2, [pc, #100]	; (801436c <__ieee754_powf+0x578>)
 8014306:	4293      	cmp	r3, r2
 8014308:	dd02      	ble.n	8014310 <__ieee754_powf+0x51c>
 801430a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014370 <__ieee754_powf+0x57c>
 801430e:	e67b      	b.n	8014008 <__ieee754_powf+0x214>
 8014310:	d108      	bne.n	8014324 <__ieee754_powf+0x530>
 8014312:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014316:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801431e:	f6ff af7b 	blt.w	8014218 <__ieee754_powf+0x424>
 8014322:	e7f2      	b.n	801430a <__ieee754_powf+0x516>
 8014324:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8014328:	f73f af76 	bgt.w	8014218 <__ieee754_powf+0x424>
 801432c:	2000      	movs	r0, #0
 801432e:	e78f      	b.n	8014250 <__ieee754_powf+0x45c>
 8014330:	ee00 3a10 	vmov	s0, r3
 8014334:	e7e3      	b.n	80142fe <__ieee754_powf+0x50a>
 8014336:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801433a:	e5ad      	b.n	8013e98 <__ieee754_powf+0xa4>
 801433c:	eeb0 0a68 	vmov.f32	s0, s17
 8014340:	e5aa      	b.n	8013e98 <__ieee754_powf+0xa4>
 8014342:	eeb0 0a48 	vmov.f32	s0, s16
 8014346:	e5a7      	b.n	8013e98 <__ieee754_powf+0xa4>
 8014348:	007fffff 	.word	0x007fffff
 801434c:	3f317218 	.word	0x3f317218
 8014350:	35bfbe8c 	.word	0x35bfbe8c
 8014354:	3f317200 	.word	0x3f317200
 8014358:	3331bb4c 	.word	0x3331bb4c
 801435c:	b5ddea0e 	.word	0xb5ddea0e
 8014360:	388ab355 	.word	0x388ab355
 8014364:	bb360b61 	.word	0xbb360b61
 8014368:	3e2aaaab 	.word	0x3e2aaaab
 801436c:	43160000 	.word	0x43160000
 8014370:	0da24260 	.word	0x0da24260

08014374 <__ieee754_rem_pio2f>:
 8014374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014376:	ee10 6a10 	vmov	r6, s0
 801437a:	4b86      	ldr	r3, [pc, #536]	; (8014594 <__ieee754_rem_pio2f+0x220>)
 801437c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8014380:	429c      	cmp	r4, r3
 8014382:	b087      	sub	sp, #28
 8014384:	4605      	mov	r5, r0
 8014386:	dc05      	bgt.n	8014394 <__ieee754_rem_pio2f+0x20>
 8014388:	2300      	movs	r3, #0
 801438a:	ed85 0a00 	vstr	s0, [r5]
 801438e:	6043      	str	r3, [r0, #4]
 8014390:	2000      	movs	r0, #0
 8014392:	e020      	b.n	80143d6 <__ieee754_rem_pio2f+0x62>
 8014394:	4b80      	ldr	r3, [pc, #512]	; (8014598 <__ieee754_rem_pio2f+0x224>)
 8014396:	429c      	cmp	r4, r3
 8014398:	dc38      	bgt.n	801440c <__ieee754_rem_pio2f+0x98>
 801439a:	2e00      	cmp	r6, #0
 801439c:	f024 040f 	bic.w	r4, r4, #15
 80143a0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 801459c <__ieee754_rem_pio2f+0x228>
 80143a4:	4b7e      	ldr	r3, [pc, #504]	; (80145a0 <__ieee754_rem_pio2f+0x22c>)
 80143a6:	dd18      	ble.n	80143da <__ieee754_rem_pio2f+0x66>
 80143a8:	429c      	cmp	r4, r3
 80143aa:	ee70 7a47 	vsub.f32	s15, s0, s14
 80143ae:	bf09      	itett	eq
 80143b0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80145a4 <__ieee754_rem_pio2f+0x230>
 80143b4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80145a8 <__ieee754_rem_pio2f+0x234>
 80143b8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80143bc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80145ac <__ieee754_rem_pio2f+0x238>
 80143c0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80143c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80143c8:	edc0 6a00 	vstr	s13, [r0]
 80143cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80143d0:	edc0 7a01 	vstr	s15, [r0, #4]
 80143d4:	2001      	movs	r0, #1
 80143d6:	b007      	add	sp, #28
 80143d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143da:	429c      	cmp	r4, r3
 80143dc:	ee70 7a07 	vadd.f32	s15, s0, s14
 80143e0:	bf09      	itett	eq
 80143e2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80145a4 <__ieee754_rem_pio2f+0x230>
 80143e6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80145a8 <__ieee754_rem_pio2f+0x234>
 80143ea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80143ee:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80145ac <__ieee754_rem_pio2f+0x238>
 80143f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80143f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80143fa:	edc0 6a00 	vstr	s13, [r0]
 80143fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014402:	edc0 7a01 	vstr	s15, [r0, #4]
 8014406:	f04f 30ff 	mov.w	r0, #4294967295
 801440a:	e7e4      	b.n	80143d6 <__ieee754_rem_pio2f+0x62>
 801440c:	4b68      	ldr	r3, [pc, #416]	; (80145b0 <__ieee754_rem_pio2f+0x23c>)
 801440e:	429c      	cmp	r4, r3
 8014410:	dc71      	bgt.n	80144f6 <__ieee754_rem_pio2f+0x182>
 8014412:	f7fe f84b 	bl	80124ac <fabsf>
 8014416:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80145b4 <__ieee754_rem_pio2f+0x240>
 801441a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801441e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014426:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801442a:	ee17 0a90 	vmov	r0, s15
 801442e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801459c <__ieee754_rem_pio2f+0x228>
 8014432:	eeb1 7a46 	vneg.f32	s14, s12
 8014436:	eea7 0a27 	vfma.f32	s0, s14, s15
 801443a:	281f      	cmp	r0, #31
 801443c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80145a8 <__ieee754_rem_pio2f+0x234>
 8014440:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014444:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014448:	ee16 3a90 	vmov	r3, s13
 801444c:	dc1c      	bgt.n	8014488 <__ieee754_rem_pio2f+0x114>
 801444e:	1e47      	subs	r7, r0, #1
 8014450:	4959      	ldr	r1, [pc, #356]	; (80145b8 <__ieee754_rem_pio2f+0x244>)
 8014452:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8014456:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801445a:	428a      	cmp	r2, r1
 801445c:	d014      	beq.n	8014488 <__ieee754_rem_pio2f+0x114>
 801445e:	602b      	str	r3, [r5, #0]
 8014460:	ed95 7a00 	vldr	s14, [r5]
 8014464:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014468:	2e00      	cmp	r6, #0
 801446a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801446e:	ed85 0a01 	vstr	s0, [r5, #4]
 8014472:	dab0      	bge.n	80143d6 <__ieee754_rem_pio2f+0x62>
 8014474:	eeb1 7a47 	vneg.f32	s14, s14
 8014478:	eeb1 0a40 	vneg.f32	s0, s0
 801447c:	ed85 7a00 	vstr	s14, [r5]
 8014480:	ed85 0a01 	vstr	s0, [r5, #4]
 8014484:	4240      	negs	r0, r0
 8014486:	e7a6      	b.n	80143d6 <__ieee754_rem_pio2f+0x62>
 8014488:	15e4      	asrs	r4, r4, #23
 801448a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801448e:	1aa2      	subs	r2, r4, r2
 8014490:	2a08      	cmp	r2, #8
 8014492:	dde4      	ble.n	801445e <__ieee754_rem_pio2f+0xea>
 8014494:	eddf 7a43 	vldr	s15, [pc, #268]	; 80145a4 <__ieee754_rem_pio2f+0x230>
 8014498:	eef0 6a40 	vmov.f32	s13, s0
 801449c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80144a0:	ee30 0a66 	vsub.f32	s0, s0, s13
 80144a4:	eea7 0a27 	vfma.f32	s0, s14, s15
 80144a8:	eddf 7a40 	vldr	s15, [pc, #256]	; 80145ac <__ieee754_rem_pio2f+0x238>
 80144ac:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80144b0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80144b4:	eef0 7a40 	vmov.f32	s15, s0
 80144b8:	ee15 3a90 	vmov	r3, s11
 80144bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80144c0:	1aa4      	subs	r4, r4, r2
 80144c2:	2c19      	cmp	r4, #25
 80144c4:	dc04      	bgt.n	80144d0 <__ieee754_rem_pio2f+0x15c>
 80144c6:	edc5 5a00 	vstr	s11, [r5]
 80144ca:	eeb0 0a66 	vmov.f32	s0, s13
 80144ce:	e7c7      	b.n	8014460 <__ieee754_rem_pio2f+0xec>
 80144d0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80145bc <__ieee754_rem_pio2f+0x248>
 80144d4:	eeb0 0a66 	vmov.f32	s0, s13
 80144d8:	eea7 0a25 	vfma.f32	s0, s14, s11
 80144dc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80144e0:	eee7 7a25 	vfma.f32	s15, s14, s11
 80144e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80145c0 <__ieee754_rem_pio2f+0x24c>
 80144e8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80144ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 80144f0:	ed85 7a00 	vstr	s14, [r5]
 80144f4:	e7b4      	b.n	8014460 <__ieee754_rem_pio2f+0xec>
 80144f6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80144fa:	db06      	blt.n	801450a <__ieee754_rem_pio2f+0x196>
 80144fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014500:	edc0 7a01 	vstr	s15, [r0, #4]
 8014504:	edc0 7a00 	vstr	s15, [r0]
 8014508:	e742      	b.n	8014390 <__ieee754_rem_pio2f+0x1c>
 801450a:	15e2      	asrs	r2, r4, #23
 801450c:	3a86      	subs	r2, #134	; 0x86
 801450e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8014512:	ee07 3a90 	vmov	s15, r3
 8014516:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801451a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80145c4 <__ieee754_rem_pio2f+0x250>
 801451e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014526:	ed8d 7a03 	vstr	s14, [sp, #12]
 801452a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801452e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014532:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801453a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801453e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014542:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454a:	edcd 7a05 	vstr	s15, [sp, #20]
 801454e:	d11e      	bne.n	801458e <__ieee754_rem_pio2f+0x21a>
 8014550:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014558:	bf0c      	ite	eq
 801455a:	2301      	moveq	r3, #1
 801455c:	2302      	movne	r3, #2
 801455e:	491a      	ldr	r1, [pc, #104]	; (80145c8 <__ieee754_rem_pio2f+0x254>)
 8014560:	9101      	str	r1, [sp, #4]
 8014562:	2102      	movs	r1, #2
 8014564:	9100      	str	r1, [sp, #0]
 8014566:	a803      	add	r0, sp, #12
 8014568:	4629      	mov	r1, r5
 801456a:	f000 f8ff 	bl	801476c <__kernel_rem_pio2f>
 801456e:	2e00      	cmp	r6, #0
 8014570:	f6bf af31 	bge.w	80143d6 <__ieee754_rem_pio2f+0x62>
 8014574:	edd5 7a00 	vldr	s15, [r5]
 8014578:	eef1 7a67 	vneg.f32	s15, s15
 801457c:	edc5 7a00 	vstr	s15, [r5]
 8014580:	edd5 7a01 	vldr	s15, [r5, #4]
 8014584:	eef1 7a67 	vneg.f32	s15, s15
 8014588:	edc5 7a01 	vstr	s15, [r5, #4]
 801458c:	e77a      	b.n	8014484 <__ieee754_rem_pio2f+0x110>
 801458e:	2303      	movs	r3, #3
 8014590:	e7e5      	b.n	801455e <__ieee754_rem_pio2f+0x1ea>
 8014592:	bf00      	nop
 8014594:	3f490fd8 	.word	0x3f490fd8
 8014598:	4016cbe3 	.word	0x4016cbe3
 801459c:	3fc90f80 	.word	0x3fc90f80
 80145a0:	3fc90fd0 	.word	0x3fc90fd0
 80145a4:	37354400 	.word	0x37354400
 80145a8:	37354443 	.word	0x37354443
 80145ac:	2e85a308 	.word	0x2e85a308
 80145b0:	43490f80 	.word	0x43490f80
 80145b4:	3f22f984 	.word	0x3f22f984
 80145b8:	0806e124 	.word	0x0806e124
 80145bc:	2e85a300 	.word	0x2e85a300
 80145c0:	248d3132 	.word	0x248d3132
 80145c4:	43800000 	.word	0x43800000
 80145c8:	0806e1a4 	.word	0x0806e1a4

080145cc <__ieee754_sinhf>:
 80145cc:	b510      	push	{r4, lr}
 80145ce:	ee10 3a10 	vmov	r3, s0
 80145d2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80145d6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80145da:	ed2d 8b02 	vpush	{d8}
 80145de:	eef0 7a40 	vmov.f32	s15, s0
 80145e2:	db06      	blt.n	80145f2 <__ieee754_sinhf+0x26>
 80145e4:	ee70 7a00 	vadd.f32	s15, s0, s0
 80145e8:	ecbd 8b02 	vpop	{d8}
 80145ec:	eeb0 0a67 	vmov.f32	s0, s15
 80145f0:	bd10      	pop	{r4, pc}
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	4b28      	ldr	r3, [pc, #160]	; (8014698 <__ieee754_sinhf+0xcc>)
 80145f6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80145fa:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 80145fe:	bfa8      	it	ge
 8014600:	eeb0 8a68 	vmovge.f32	s16, s17
 8014604:	429c      	cmp	r4, r3
 8014606:	dc2a      	bgt.n	801465e <__ieee754_sinhf+0x92>
 8014608:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 801460c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014610:	da08      	bge.n	8014624 <__ieee754_sinhf+0x58>
 8014612:	ed9f 7a22 	vldr	s14, [pc, #136]	; 801469c <__ieee754_sinhf+0xd0>
 8014616:	ee30 7a07 	vadd.f32	s14, s0, s14
 801461a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 801461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014622:	dce1      	bgt.n	80145e8 <__ieee754_sinhf+0x1c>
 8014624:	eeb0 0a67 	vmov.f32	s0, s15
 8014628:	f7fd ff40 	bl	80124ac <fabsf>
 801462c:	f000 fc58 	bl	8014ee0 <expm1f>
 8014630:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014634:	bfbb      	ittet	lt
 8014636:	ee20 7a00 	vmullt.f32	s14, s0, s0
 801463a:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 801463e:	ee70 8a28 	vaddge.f32	s17, s0, s17
 8014642:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 8014646:	bfad      	iteet	ge
 8014648:	eec0 7a28 	vdivge.f32	s15, s0, s17
 801464c:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 8014650:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 8014654:	ee77 7a80 	vaddge.f32	s15, s15, s0
 8014658:	ee67 7a88 	vmul.f32	s15, s15, s16
 801465c:	e7c4      	b.n	80145e8 <__ieee754_sinhf+0x1c>
 801465e:	4b10      	ldr	r3, [pc, #64]	; (80146a0 <__ieee754_sinhf+0xd4>)
 8014660:	429c      	cmp	r4, r3
 8014662:	dc06      	bgt.n	8014672 <__ieee754_sinhf+0xa6>
 8014664:	f7fd ff22 	bl	80124ac <fabsf>
 8014668:	f7ff f97a 	bl	8013960 <__ieee754_expf>
 801466c:	ee60 7a08 	vmul.f32	s15, s0, s16
 8014670:	e7ba      	b.n	80145e8 <__ieee754_sinhf+0x1c>
 8014672:	4b0c      	ldr	r3, [pc, #48]	; (80146a4 <__ieee754_sinhf+0xd8>)
 8014674:	429c      	cmp	r4, r3
 8014676:	dc0a      	bgt.n	801468e <__ieee754_sinhf+0xc2>
 8014678:	f7fd ff18 	bl	80124ac <fabsf>
 801467c:	ee20 0a28 	vmul.f32	s0, s0, s17
 8014680:	f7ff f96e 	bl	8013960 <__ieee754_expf>
 8014684:	ee68 7a00 	vmul.f32	s15, s16, s0
 8014688:	ee67 7a80 	vmul.f32	s15, s15, s0
 801468c:	e7ac      	b.n	80145e8 <__ieee754_sinhf+0x1c>
 801468e:	ed9f 7a03 	vldr	s14, [pc, #12]	; 801469c <__ieee754_sinhf+0xd0>
 8014692:	ee60 7a07 	vmul.f32	s15, s0, s14
 8014696:	e7a7      	b.n	80145e8 <__ieee754_sinhf+0x1c>
 8014698:	41afffff 	.word	0x41afffff
 801469c:	7cf0bdc2 	.word	0x7cf0bdc2
 80146a0:	42b17217 	.word	0x42b17217
 80146a4:	42b2d4fc 	.word	0x42b2d4fc

080146a8 <__ieee754_sqrtf>:
 80146a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80146ac:	4770      	bx	lr
	...

080146b0 <__kernel_cosf>:
 80146b0:	ee10 3a10 	vmov	r3, s0
 80146b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80146b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80146bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80146c0:	da05      	bge.n	80146ce <__kernel_cosf+0x1e>
 80146c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80146c6:	ee17 2a90 	vmov	r2, s15
 80146ca:	2a00      	cmp	r2, #0
 80146cc:	d03b      	beq.n	8014746 <__kernel_cosf+0x96>
 80146ce:	ee20 6a00 	vmul.f32	s12, s0, s0
 80146d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80146d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801474c <__kernel_cosf+0x9c>
 80146da:	4a1d      	ldr	r2, [pc, #116]	; (8014750 <__kernel_cosf+0xa0>)
 80146dc:	ee66 7a07 	vmul.f32	s15, s12, s14
 80146e0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8014754 <__kernel_cosf+0xa4>
 80146e4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80146e8:	4293      	cmp	r3, r2
 80146ea:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8014758 <__kernel_cosf+0xa8>
 80146ee:	eee7 5a06 	vfma.f32	s11, s14, s12
 80146f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801475c <__kernel_cosf+0xac>
 80146f6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80146fa:	eddf 5a19 	vldr	s11, [pc, #100]	; 8014760 <__kernel_cosf+0xb0>
 80146fe:	eee7 5a06 	vfma.f32	s11, s14, s12
 8014702:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8014764 <__kernel_cosf+0xb4>
 8014706:	eea5 7a86 	vfma.f32	s14, s11, s12
 801470a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801470e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014712:	eee6 0a07 	vfma.f32	s1, s12, s14
 8014716:	dc04      	bgt.n	8014722 <__kernel_cosf+0x72>
 8014718:	ee77 0ae0 	vsub.f32	s1, s15, s1
 801471c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8014720:	4770      	bx	lr
 8014722:	4a11      	ldr	r2, [pc, #68]	; (8014768 <__kernel_cosf+0xb8>)
 8014724:	4293      	cmp	r3, r2
 8014726:	bfda      	itte	le
 8014728:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801472c:	ee07 3a10 	vmovle	s14, r3
 8014730:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8014734:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014738:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801473c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014740:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014744:	4770      	bx	lr
 8014746:	eeb0 0a66 	vmov.f32	s0, s13
 801474a:	4770      	bx	lr
 801474c:	ad47d74e 	.word	0xad47d74e
 8014750:	3e999999 	.word	0x3e999999
 8014754:	310f74f6 	.word	0x310f74f6
 8014758:	b493f27c 	.word	0xb493f27c
 801475c:	37d00d01 	.word	0x37d00d01
 8014760:	bab60b61 	.word	0xbab60b61
 8014764:	3d2aaaab 	.word	0x3d2aaaab
 8014768:	3f480000 	.word	0x3f480000

0801476c <__kernel_rem_pio2f>:
 801476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014770:	ed2d 8b04 	vpush	{d8-d9}
 8014774:	b0d7      	sub	sp, #348	; 0x15c
 8014776:	469b      	mov	fp, r3
 8014778:	460e      	mov	r6, r1
 801477a:	4bbe      	ldr	r3, [pc, #760]	; (8014a74 <__kernel_rem_pio2f+0x308>)
 801477c:	9964      	ldr	r1, [sp, #400]	; 0x190
 801477e:	9002      	str	r0, [sp, #8]
 8014780:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8014784:	9865      	ldr	r0, [sp, #404]	; 0x194
 8014786:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8014a84 <__kernel_rem_pio2f+0x318>
 801478a:	1ed1      	subs	r1, r2, #3
 801478c:	2308      	movs	r3, #8
 801478e:	fb91 f1f3 	sdiv	r1, r1, r3
 8014792:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8014796:	f10b 3aff 	add.w	sl, fp, #4294967295
 801479a:	1c4c      	adds	r4, r1, #1
 801479c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80147a0:	eba1 050a 	sub.w	r5, r1, sl
 80147a4:	aa1a      	add	r2, sp, #104	; 0x68
 80147a6:	eb09 070a 	add.w	r7, r9, sl
 80147aa:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80147ae:	4696      	mov	lr, r2
 80147b0:	2300      	movs	r3, #0
 80147b2:	42bb      	cmp	r3, r7
 80147b4:	dd0f      	ble.n	80147d6 <__kernel_rem_pio2f+0x6a>
 80147b6:	af42      	add	r7, sp, #264	; 0x108
 80147b8:	2200      	movs	r2, #0
 80147ba:	454a      	cmp	r2, r9
 80147bc:	dc27      	bgt.n	801480e <__kernel_rem_pio2f+0xa2>
 80147be:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80147c2:	eb0b 0302 	add.w	r3, fp, r2
 80147c6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80147ca:	9d02      	ldr	r5, [sp, #8]
 80147cc:	eddf 7aad 	vldr	s15, [pc, #692]	; 8014a84 <__kernel_rem_pio2f+0x318>
 80147d0:	f04f 0c00 	mov.w	ip, #0
 80147d4:	e015      	b.n	8014802 <__kernel_rem_pio2f+0x96>
 80147d6:	42dd      	cmn	r5, r3
 80147d8:	bf5d      	ittte	pl
 80147da:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80147de:	ee07 2a90 	vmovpl	s15, r2
 80147e2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80147e6:	eef0 7a47 	vmovmi.f32	s15, s14
 80147ea:	ecee 7a01 	vstmia	lr!, {s15}
 80147ee:	3301      	adds	r3, #1
 80147f0:	e7df      	b.n	80147b2 <__kernel_rem_pio2f+0x46>
 80147f2:	ecf5 6a01 	vldmia	r5!, {s13}
 80147f6:	ed33 7a01 	vldmdb	r3!, {s14}
 80147fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80147fe:	f10c 0c01 	add.w	ip, ip, #1
 8014802:	45d4      	cmp	ip, sl
 8014804:	ddf5      	ble.n	80147f2 <__kernel_rem_pio2f+0x86>
 8014806:	ece7 7a01 	vstmia	r7!, {s15}
 801480a:	3201      	adds	r2, #1
 801480c:	e7d5      	b.n	80147ba <__kernel_rem_pio2f+0x4e>
 801480e:	ab06      	add	r3, sp, #24
 8014810:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8014814:	9304      	str	r3, [sp, #16]
 8014816:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8014a80 <__kernel_rem_pio2f+0x314>
 801481a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8014a7c <__kernel_rem_pio2f+0x310>
 801481e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8014822:	9303      	str	r3, [sp, #12]
 8014824:	464d      	mov	r5, r9
 8014826:	ab56      	add	r3, sp, #344	; 0x158
 8014828:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 801482c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8014830:	3f01      	subs	r7, #1
 8014832:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8014836:	00bf      	lsls	r7, r7, #2
 8014838:	ab56      	add	r3, sp, #344	; 0x158
 801483a:	19da      	adds	r2, r3, r7
 801483c:	3a4c      	subs	r2, #76	; 0x4c
 801483e:	2300      	movs	r3, #0
 8014840:	1ae9      	subs	r1, r5, r3
 8014842:	2900      	cmp	r1, #0
 8014844:	dc4c      	bgt.n	80148e0 <__kernel_rem_pio2f+0x174>
 8014846:	4620      	mov	r0, r4
 8014848:	f000 fce0 	bl	801520c <scalbnf>
 801484c:	eeb0 8a40 	vmov.f32	s16, s0
 8014850:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8014854:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014858:	f7fd fe30 	bl	80124bc <floorf>
 801485c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8014860:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014864:	2c00      	cmp	r4, #0
 8014866:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801486a:	edcd 7a01 	vstr	s15, [sp, #4]
 801486e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014872:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014876:	dd48      	ble.n	801490a <__kernel_rem_pio2f+0x19e>
 8014878:	1e69      	subs	r1, r5, #1
 801487a:	ab06      	add	r3, sp, #24
 801487c:	f1c4 0008 	rsb	r0, r4, #8
 8014880:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8014884:	9a01      	ldr	r2, [sp, #4]
 8014886:	fa4c f300 	asr.w	r3, ip, r0
 801488a:	441a      	add	r2, r3
 801488c:	4083      	lsls	r3, r0
 801488e:	9201      	str	r2, [sp, #4]
 8014890:	ebac 0203 	sub.w	r2, ip, r3
 8014894:	ab06      	add	r3, sp, #24
 8014896:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801489a:	f1c4 0307 	rsb	r3, r4, #7
 801489e:	fa42 f803 	asr.w	r8, r2, r3
 80148a2:	f1b8 0f00 	cmp.w	r8, #0
 80148a6:	dd41      	ble.n	801492c <__kernel_rem_pio2f+0x1c0>
 80148a8:	9b01      	ldr	r3, [sp, #4]
 80148aa:	2000      	movs	r0, #0
 80148ac:	3301      	adds	r3, #1
 80148ae:	9301      	str	r3, [sp, #4]
 80148b0:	4601      	mov	r1, r0
 80148b2:	4285      	cmp	r5, r0
 80148b4:	dc6d      	bgt.n	8014992 <__kernel_rem_pio2f+0x226>
 80148b6:	2c00      	cmp	r4, #0
 80148b8:	dd04      	ble.n	80148c4 <__kernel_rem_pio2f+0x158>
 80148ba:	2c01      	cmp	r4, #1
 80148bc:	d07e      	beq.n	80149bc <__kernel_rem_pio2f+0x250>
 80148be:	2c02      	cmp	r4, #2
 80148c0:	f000 8086 	beq.w	80149d0 <__kernel_rem_pio2f+0x264>
 80148c4:	f1b8 0f02 	cmp.w	r8, #2
 80148c8:	d130      	bne.n	801492c <__kernel_rem_pio2f+0x1c0>
 80148ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80148ce:	ee30 8a48 	vsub.f32	s16, s0, s16
 80148d2:	b359      	cbz	r1, 801492c <__kernel_rem_pio2f+0x1c0>
 80148d4:	4620      	mov	r0, r4
 80148d6:	f000 fc99 	bl	801520c <scalbnf>
 80148da:	ee38 8a40 	vsub.f32	s16, s16, s0
 80148de:	e025      	b.n	801492c <__kernel_rem_pio2f+0x1c0>
 80148e0:	ee60 7a28 	vmul.f32	s15, s0, s17
 80148e4:	a806      	add	r0, sp, #24
 80148e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148ee:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80148f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80148f6:	ee10 1a10 	vmov	r1, s0
 80148fa:	ed32 0a01 	vldmdb	r2!, {s0}
 80148fe:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8014902:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014906:	3301      	adds	r3, #1
 8014908:	e79a      	b.n	8014840 <__kernel_rem_pio2f+0xd4>
 801490a:	d106      	bne.n	801491a <__kernel_rem_pio2f+0x1ae>
 801490c:	1e6b      	subs	r3, r5, #1
 801490e:	aa06      	add	r2, sp, #24
 8014910:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014914:	ea4f 2822 	mov.w	r8, r2, asr #8
 8014918:	e7c3      	b.n	80148a2 <__kernel_rem_pio2f+0x136>
 801491a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801491e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014926:	da31      	bge.n	801498c <__kernel_rem_pio2f+0x220>
 8014928:	f04f 0800 	mov.w	r8, #0
 801492c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014934:	f040 80a8 	bne.w	8014a88 <__kernel_rem_pio2f+0x31c>
 8014938:	1e6b      	subs	r3, r5, #1
 801493a:	4618      	mov	r0, r3
 801493c:	2200      	movs	r2, #0
 801493e:	4548      	cmp	r0, r9
 8014940:	da4d      	bge.n	80149de <__kernel_rem_pio2f+0x272>
 8014942:	2a00      	cmp	r2, #0
 8014944:	f000 8087 	beq.w	8014a56 <__kernel_rem_pio2f+0x2ea>
 8014948:	aa06      	add	r2, sp, #24
 801494a:	3c08      	subs	r4, #8
 801494c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014950:	2900      	cmp	r1, #0
 8014952:	f000 808d 	beq.w	8014a70 <__kernel_rem_pio2f+0x304>
 8014956:	4620      	mov	r0, r4
 8014958:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801495c:	9302      	str	r3, [sp, #8]
 801495e:	f000 fc55 	bl	801520c <scalbnf>
 8014962:	9b02      	ldr	r3, [sp, #8]
 8014964:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014a80 <__kernel_rem_pio2f+0x314>
 8014968:	0099      	lsls	r1, r3, #2
 801496a:	aa42      	add	r2, sp, #264	; 0x108
 801496c:	1850      	adds	r0, r2, r1
 801496e:	1d05      	adds	r5, r0, #4
 8014970:	461c      	mov	r4, r3
 8014972:	2c00      	cmp	r4, #0
 8014974:	f280 80b8 	bge.w	8014ae8 <__kernel_rem_pio2f+0x37c>
 8014978:	2500      	movs	r5, #0
 801497a:	1b5c      	subs	r4, r3, r5
 801497c:	2c00      	cmp	r4, #0
 801497e:	f2c0 80d8 	blt.w	8014b32 <__kernel_rem_pio2f+0x3c6>
 8014982:	4f3d      	ldr	r7, [pc, #244]	; (8014a78 <__kernel_rem_pio2f+0x30c>)
 8014984:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8014a84 <__kernel_rem_pio2f+0x318>
 8014988:	2400      	movs	r4, #0
 801498a:	e0c6      	b.n	8014b1a <__kernel_rem_pio2f+0x3ae>
 801498c:	f04f 0802 	mov.w	r8, #2
 8014990:	e78a      	b.n	80148a8 <__kernel_rem_pio2f+0x13c>
 8014992:	ab06      	add	r3, sp, #24
 8014994:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014998:	b949      	cbnz	r1, 80149ae <__kernel_rem_pio2f+0x242>
 801499a:	b12b      	cbz	r3, 80149a8 <__kernel_rem_pio2f+0x23c>
 801499c:	aa06      	add	r2, sp, #24
 801499e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80149a2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80149a6:	2301      	movs	r3, #1
 80149a8:	3001      	adds	r0, #1
 80149aa:	4619      	mov	r1, r3
 80149ac:	e781      	b.n	80148b2 <__kernel_rem_pio2f+0x146>
 80149ae:	aa06      	add	r2, sp, #24
 80149b0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80149b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80149b8:	460b      	mov	r3, r1
 80149ba:	e7f5      	b.n	80149a8 <__kernel_rem_pio2f+0x23c>
 80149bc:	1e68      	subs	r0, r5, #1
 80149be:	ab06      	add	r3, sp, #24
 80149c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80149c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149c8:	aa06      	add	r2, sp, #24
 80149ca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80149ce:	e779      	b.n	80148c4 <__kernel_rem_pio2f+0x158>
 80149d0:	1e68      	subs	r0, r5, #1
 80149d2:	ab06      	add	r3, sp, #24
 80149d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80149d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80149dc:	e7f4      	b.n	80149c8 <__kernel_rem_pio2f+0x25c>
 80149de:	a906      	add	r1, sp, #24
 80149e0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80149e4:	3801      	subs	r0, #1
 80149e6:	430a      	orrs	r2, r1
 80149e8:	e7a9      	b.n	801493e <__kernel_rem_pio2f+0x1d2>
 80149ea:	f10c 0c01 	add.w	ip, ip, #1
 80149ee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80149f2:	2a00      	cmp	r2, #0
 80149f4:	d0f9      	beq.n	80149ea <__kernel_rem_pio2f+0x27e>
 80149f6:	eb0b 0305 	add.w	r3, fp, r5
 80149fa:	aa1a      	add	r2, sp, #104	; 0x68
 80149fc:	009b      	lsls	r3, r3, #2
 80149fe:	1898      	adds	r0, r3, r2
 8014a00:	3004      	adds	r0, #4
 8014a02:	1c69      	adds	r1, r5, #1
 8014a04:	3704      	adds	r7, #4
 8014a06:	2200      	movs	r2, #0
 8014a08:	4465      	add	r5, ip
 8014a0a:	9005      	str	r0, [sp, #20]
 8014a0c:	428d      	cmp	r5, r1
 8014a0e:	f6ff af0a 	blt.w	8014826 <__kernel_rem_pio2f+0xba>
 8014a12:	a81a      	add	r0, sp, #104	; 0x68
 8014a14:	eb02 0c03 	add.w	ip, r2, r3
 8014a18:	4484      	add	ip, r0
 8014a1a:	9803      	ldr	r0, [sp, #12]
 8014a1c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014a20:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8014a24:	9001      	str	r0, [sp, #4]
 8014a26:	ee07 0a90 	vmov	s15, r0
 8014a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a2e:	9805      	ldr	r0, [sp, #20]
 8014a30:	edcc 7a00 	vstr	s15, [ip]
 8014a34:	eddf 7a13 	vldr	s15, [pc, #76]	; 8014a84 <__kernel_rem_pio2f+0x318>
 8014a38:	eb00 0802 	add.w	r8, r0, r2
 8014a3c:	f04f 0c00 	mov.w	ip, #0
 8014a40:	45d4      	cmp	ip, sl
 8014a42:	dd0c      	ble.n	8014a5e <__kernel_rem_pio2f+0x2f2>
 8014a44:	eb02 0c07 	add.w	ip, r2, r7
 8014a48:	a842      	add	r0, sp, #264	; 0x108
 8014a4a:	4484      	add	ip, r0
 8014a4c:	edcc 7a01 	vstr	s15, [ip, #4]
 8014a50:	3101      	adds	r1, #1
 8014a52:	3204      	adds	r2, #4
 8014a54:	e7da      	b.n	8014a0c <__kernel_rem_pio2f+0x2a0>
 8014a56:	9b04      	ldr	r3, [sp, #16]
 8014a58:	f04f 0c01 	mov.w	ip, #1
 8014a5c:	e7c7      	b.n	80149ee <__kernel_rem_pio2f+0x282>
 8014a5e:	ecfe 6a01 	vldmia	lr!, {s13}
 8014a62:	ed38 7a01 	vldmdb	r8!, {s14}
 8014a66:	f10c 0c01 	add.w	ip, ip, #1
 8014a6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014a6e:	e7e7      	b.n	8014a40 <__kernel_rem_pio2f+0x2d4>
 8014a70:	3b01      	subs	r3, #1
 8014a72:	e769      	b.n	8014948 <__kernel_rem_pio2f+0x1dc>
 8014a74:	0806e4e8 	.word	0x0806e4e8
 8014a78:	0806e4bc 	.word	0x0806e4bc
 8014a7c:	43800000 	.word	0x43800000
 8014a80:	3b800000 	.word	0x3b800000
 8014a84:	00000000 	.word	0x00000000
 8014a88:	4260      	negs	r0, r4
 8014a8a:	eeb0 0a48 	vmov.f32	s0, s16
 8014a8e:	f000 fbbd 	bl	801520c <scalbnf>
 8014a92:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8014a7c <__kernel_rem_pio2f+0x310>
 8014a96:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a9e:	db1a      	blt.n	8014ad6 <__kernel_rem_pio2f+0x36a>
 8014aa0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8014a80 <__kernel_rem_pio2f+0x314>
 8014aa4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014aa8:	aa06      	add	r2, sp, #24
 8014aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014aae:	a906      	add	r1, sp, #24
 8014ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ab4:	3408      	adds	r4, #8
 8014ab6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014abe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014ac2:	ee10 3a10 	vmov	r3, s0
 8014ac6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8014aca:	1c6b      	adds	r3, r5, #1
 8014acc:	ee17 2a90 	vmov	r2, s15
 8014ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014ad4:	e73f      	b.n	8014956 <__kernel_rem_pio2f+0x1ea>
 8014ad6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014ada:	aa06      	add	r2, sp, #24
 8014adc:	ee10 3a10 	vmov	r3, s0
 8014ae0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8014ae4:	462b      	mov	r3, r5
 8014ae6:	e736      	b.n	8014956 <__kernel_rem_pio2f+0x1ea>
 8014ae8:	aa06      	add	r2, sp, #24
 8014aea:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8014aee:	9202      	str	r2, [sp, #8]
 8014af0:	ee07 2a90 	vmov	s15, r2
 8014af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014af8:	3c01      	subs	r4, #1
 8014afa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014afe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014b02:	ed65 7a01 	vstmdb	r5!, {s15}
 8014b06:	e734      	b.n	8014972 <__kernel_rem_pio2f+0x206>
 8014b08:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8014b0c:	ecf7 6a01 	vldmia	r7!, {s13}
 8014b10:	ed9c 7a00 	vldr	s14, [ip]
 8014b14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014b18:	3401      	adds	r4, #1
 8014b1a:	454c      	cmp	r4, r9
 8014b1c:	dc01      	bgt.n	8014b22 <__kernel_rem_pio2f+0x3b6>
 8014b1e:	42a5      	cmp	r5, r4
 8014b20:	daf2      	bge.n	8014b08 <__kernel_rem_pio2f+0x39c>
 8014b22:	aa56      	add	r2, sp, #344	; 0x158
 8014b24:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8014b28:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8014b2c:	3501      	adds	r5, #1
 8014b2e:	3804      	subs	r0, #4
 8014b30:	e723      	b.n	801497a <__kernel_rem_pio2f+0x20e>
 8014b32:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014b34:	2a03      	cmp	r2, #3
 8014b36:	d84d      	bhi.n	8014bd4 <__kernel_rem_pio2f+0x468>
 8014b38:	e8df f002 	tbb	[pc, r2]
 8014b3c:	021f1f3e 	.word	0x021f1f3e
 8014b40:	aa56      	add	r2, sp, #344	; 0x158
 8014b42:	4411      	add	r1, r2
 8014b44:	399c      	subs	r1, #156	; 0x9c
 8014b46:	4608      	mov	r0, r1
 8014b48:	461c      	mov	r4, r3
 8014b4a:	2c00      	cmp	r4, #0
 8014b4c:	dc5f      	bgt.n	8014c0e <__kernel_rem_pio2f+0x4a2>
 8014b4e:	4608      	mov	r0, r1
 8014b50:	461c      	mov	r4, r3
 8014b52:	2c01      	cmp	r4, #1
 8014b54:	dc6b      	bgt.n	8014c2e <__kernel_rem_pio2f+0x4c2>
 8014b56:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8014a84 <__kernel_rem_pio2f+0x318>
 8014b5a:	2b01      	cmp	r3, #1
 8014b5c:	dc77      	bgt.n	8014c4e <__kernel_rem_pio2f+0x4e2>
 8014b5e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8014b62:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8014b66:	f1b8 0f00 	cmp.w	r8, #0
 8014b6a:	d176      	bne.n	8014c5a <__kernel_rem_pio2f+0x4ee>
 8014b6c:	edc6 6a00 	vstr	s13, [r6]
 8014b70:	ed86 7a01 	vstr	s14, [r6, #4]
 8014b74:	edc6 7a02 	vstr	s15, [r6, #8]
 8014b78:	e02c      	b.n	8014bd4 <__kernel_rem_pio2f+0x468>
 8014b7a:	aa56      	add	r2, sp, #344	; 0x158
 8014b7c:	4411      	add	r1, r2
 8014b7e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8014a84 <__kernel_rem_pio2f+0x318>
 8014b82:	399c      	subs	r1, #156	; 0x9c
 8014b84:	4618      	mov	r0, r3
 8014b86:	2800      	cmp	r0, #0
 8014b88:	da32      	bge.n	8014bf0 <__kernel_rem_pio2f+0x484>
 8014b8a:	f1b8 0f00 	cmp.w	r8, #0
 8014b8e:	d035      	beq.n	8014bfc <__kernel_rem_pio2f+0x490>
 8014b90:	eef1 7a47 	vneg.f32	s15, s14
 8014b94:	edc6 7a00 	vstr	s15, [r6]
 8014b98:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8014b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ba0:	a82f      	add	r0, sp, #188	; 0xbc
 8014ba2:	2101      	movs	r1, #1
 8014ba4:	428b      	cmp	r3, r1
 8014ba6:	da2c      	bge.n	8014c02 <__kernel_rem_pio2f+0x496>
 8014ba8:	f1b8 0f00 	cmp.w	r8, #0
 8014bac:	d001      	beq.n	8014bb2 <__kernel_rem_pio2f+0x446>
 8014bae:	eef1 7a67 	vneg.f32	s15, s15
 8014bb2:	edc6 7a01 	vstr	s15, [r6, #4]
 8014bb6:	e00d      	b.n	8014bd4 <__kernel_rem_pio2f+0x468>
 8014bb8:	aa56      	add	r2, sp, #344	; 0x158
 8014bba:	4411      	add	r1, r2
 8014bbc:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8014a84 <__kernel_rem_pio2f+0x318>
 8014bc0:	399c      	subs	r1, #156	; 0x9c
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	da0e      	bge.n	8014be4 <__kernel_rem_pio2f+0x478>
 8014bc6:	f1b8 0f00 	cmp.w	r8, #0
 8014bca:	d001      	beq.n	8014bd0 <__kernel_rem_pio2f+0x464>
 8014bcc:	eef1 7a67 	vneg.f32	s15, s15
 8014bd0:	edc6 7a00 	vstr	s15, [r6]
 8014bd4:	9b01      	ldr	r3, [sp, #4]
 8014bd6:	f003 0007 	and.w	r0, r3, #7
 8014bda:	b057      	add	sp, #348	; 0x15c
 8014bdc:	ecbd 8b04 	vpop	{d8-d9}
 8014be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014be4:	ed31 7a01 	vldmdb	r1!, {s14}
 8014be8:	3b01      	subs	r3, #1
 8014bea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014bee:	e7e8      	b.n	8014bc2 <__kernel_rem_pio2f+0x456>
 8014bf0:	ed71 7a01 	vldmdb	r1!, {s15}
 8014bf4:	3801      	subs	r0, #1
 8014bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014bfa:	e7c4      	b.n	8014b86 <__kernel_rem_pio2f+0x41a>
 8014bfc:	eef0 7a47 	vmov.f32	s15, s14
 8014c00:	e7c8      	b.n	8014b94 <__kernel_rem_pio2f+0x428>
 8014c02:	ecb0 7a01 	vldmia	r0!, {s14}
 8014c06:	3101      	adds	r1, #1
 8014c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c0c:	e7ca      	b.n	8014ba4 <__kernel_rem_pio2f+0x438>
 8014c0e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8014c12:	ed70 6a01 	vldmdb	r0!, {s13}
 8014c16:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014c1a:	3c01      	subs	r4, #1
 8014c1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014c20:	ed00 7a01 	vstr	s14, [r0, #-4]
 8014c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014c28:	edc0 7a00 	vstr	s15, [r0]
 8014c2c:	e78d      	b.n	8014b4a <__kernel_rem_pio2f+0x3de>
 8014c2e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8014c32:	ed70 6a01 	vldmdb	r0!, {s13}
 8014c36:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014c3a:	3c01      	subs	r4, #1
 8014c3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014c40:	ed00 7a01 	vstr	s14, [r0, #-4]
 8014c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014c48:	edc0 7a00 	vstr	s15, [r0]
 8014c4c:	e781      	b.n	8014b52 <__kernel_rem_pio2f+0x3e6>
 8014c4e:	ed31 7a01 	vldmdb	r1!, {s14}
 8014c52:	3b01      	subs	r3, #1
 8014c54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014c58:	e77f      	b.n	8014b5a <__kernel_rem_pio2f+0x3ee>
 8014c5a:	eef1 6a66 	vneg.f32	s13, s13
 8014c5e:	eeb1 7a47 	vneg.f32	s14, s14
 8014c62:	edc6 6a00 	vstr	s13, [r6]
 8014c66:	ed86 7a01 	vstr	s14, [r6, #4]
 8014c6a:	eef1 7a67 	vneg.f32	s15, s15
 8014c6e:	e781      	b.n	8014b74 <__kernel_rem_pio2f+0x408>

08014c70 <__kernel_sinf>:
 8014c70:	ee10 3a10 	vmov	r3, s0
 8014c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014c78:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014c7c:	da04      	bge.n	8014c88 <__kernel_sinf+0x18>
 8014c7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014c82:	ee17 3a90 	vmov	r3, s15
 8014c86:	b35b      	cbz	r3, 8014ce0 <__kernel_sinf+0x70>
 8014c88:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014c8c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014ce4 <__kernel_sinf+0x74>
 8014c90:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014ce8 <__kernel_sinf+0x78>
 8014c94:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014c98:	eddf 7a14 	vldr	s15, [pc, #80]	; 8014cec <__kernel_sinf+0x7c>
 8014c9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014ca0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014cf0 <__kernel_sinf+0x80>
 8014ca4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014ca8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014cf4 <__kernel_sinf+0x84>
 8014cac:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014cb0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014cb4:	b930      	cbnz	r0, 8014cc4 <__kernel_sinf+0x54>
 8014cb6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8014cf8 <__kernel_sinf+0x88>
 8014cba:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014cbe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014cc2:	4770      	bx	lr
 8014cc4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014cc8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014ccc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014cd0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014cd4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014cfc <__kernel_sinf+0x8c>
 8014cd8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014cdc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014ce0:	4770      	bx	lr
 8014ce2:	bf00      	nop
 8014ce4:	2f2ec9d3 	.word	0x2f2ec9d3
 8014ce8:	b2d72f34 	.word	0xb2d72f34
 8014cec:	3638ef1b 	.word	0x3638ef1b
 8014cf0:	b9500d01 	.word	0xb9500d01
 8014cf4:	3c088889 	.word	0x3c088889
 8014cf8:	be2aaaab 	.word	0xbe2aaaab
 8014cfc:	3e2aaaab 	.word	0x3e2aaaab

08014d00 <__kernel_tanf>:
 8014d00:	b508      	push	{r3, lr}
 8014d02:	ee10 3a10 	vmov	r3, s0
 8014d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014d0a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8014d0e:	eef0 7a40 	vmov.f32	s15, s0
 8014d12:	da17      	bge.n	8014d44 <__kernel_tanf+0x44>
 8014d14:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8014d18:	ee17 1a10 	vmov	r1, s14
 8014d1c:	bb41      	cbnz	r1, 8014d70 <__kernel_tanf+0x70>
 8014d1e:	1c43      	adds	r3, r0, #1
 8014d20:	4313      	orrs	r3, r2
 8014d22:	d108      	bne.n	8014d36 <__kernel_tanf+0x36>
 8014d24:	f7fd fbc2 	bl	80124ac <fabsf>
 8014d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014d2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014d30:	eeb0 0a67 	vmov.f32	s0, s15
 8014d34:	bd08      	pop	{r3, pc}
 8014d36:	2801      	cmp	r0, #1
 8014d38:	d0fa      	beq.n	8014d30 <__kernel_tanf+0x30>
 8014d3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014d3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014d42:	e7f5      	b.n	8014d30 <__kernel_tanf+0x30>
 8014d44:	494e      	ldr	r1, [pc, #312]	; (8014e80 <__kernel_tanf+0x180>)
 8014d46:	428a      	cmp	r2, r1
 8014d48:	dd12      	ble.n	8014d70 <__kernel_tanf+0x70>
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8014e84 <__kernel_tanf+0x184>
 8014d50:	bfb8      	it	lt
 8014d52:	eef1 7a40 	vneglt.f32	s15, s0
 8014d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d5a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014e88 <__kernel_tanf+0x188>
 8014d5e:	bfb8      	it	lt
 8014d60:	eef1 0a60 	vneglt.f32	s1, s1
 8014d64:	ee77 0a60 	vsub.f32	s1, s14, s1
 8014d68:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8014d6c:	eddf 0a47 	vldr	s1, [pc, #284]	; 8014e8c <__kernel_tanf+0x18c>
 8014d70:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8014e90 <__kernel_tanf+0x190>
 8014d74:	eddf 5a47 	vldr	s11, [pc, #284]	; 8014e94 <__kernel_tanf+0x194>
 8014d78:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8014e98 <__kernel_tanf+0x198>
 8014d7c:	4940      	ldr	r1, [pc, #256]	; (8014e80 <__kernel_tanf+0x180>)
 8014d7e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014d82:	428a      	cmp	r2, r1
 8014d84:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014d88:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8014d8c:	eee7 5a06 	vfma.f32	s11, s14, s12
 8014d90:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8014e9c <__kernel_tanf+0x19c>
 8014d94:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014d98:	eddf 5a41 	vldr	s11, [pc, #260]	; 8014ea0 <__kernel_tanf+0x1a0>
 8014d9c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014da0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8014ea4 <__kernel_tanf+0x1a4>
 8014da4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014da8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8014ea8 <__kernel_tanf+0x1a8>
 8014dac:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014db0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8014eac <__kernel_tanf+0x1ac>
 8014db4:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014db8:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8014eb0 <__kernel_tanf+0x1b0>
 8014dbc:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014dc0:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8014eb4 <__kernel_tanf+0x1b4>
 8014dc4:	eea5 6a07 	vfma.f32	s12, s10, s14
 8014dc8:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8014eb8 <__kernel_tanf+0x1b8>
 8014dcc:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014dd0:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8014ebc <__kernel_tanf+0x1bc>
 8014dd4:	eea5 6a07 	vfma.f32	s12, s10, s14
 8014dd8:	eeb0 7a46 	vmov.f32	s14, s12
 8014ddc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014de0:	eeb0 6a60 	vmov.f32	s12, s1
 8014de4:	eea7 6a24 	vfma.f32	s12, s14, s9
 8014de8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8014ec0 <__kernel_tanf+0x1c0>
 8014dec:	eee6 0a26 	vfma.f32	s1, s12, s13
 8014df0:	eee4 0a87 	vfma.f32	s1, s9, s14
 8014df4:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8014df8:	dd1d      	ble.n	8014e36 <__kernel_tanf+0x136>
 8014dfa:	ee07 0a10 	vmov	s14, r0
 8014dfe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e02:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8014e06:	ee76 6a87 	vadd.f32	s13, s13, s14
 8014e0a:	179b      	asrs	r3, r3, #30
 8014e0c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8014e10:	f003 0302 	and.w	r3, r3, #2
 8014e14:	f1c3 0301 	rsb	r3, r3, #1
 8014e18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014e1c:	ee76 0a60 	vsub.f32	s1, s12, s1
 8014e20:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014e24:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8014e28:	ee07 3a90 	vmov	s15, r3
 8014e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e34:	e77c      	b.n	8014d30 <__kernel_tanf+0x30>
 8014e36:	2801      	cmp	r0, #1
 8014e38:	d01f      	beq.n	8014e7a <__kernel_tanf+0x17a>
 8014e3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014e3e:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8014e42:	4b20      	ldr	r3, [pc, #128]	; (8014ec4 <__kernel_tanf+0x1c4>)
 8014e44:	ee16 2a90 	vmov	r2, s13
 8014e48:	401a      	ands	r2, r3
 8014e4a:	ee06 2a10 	vmov	s12, r2
 8014e4e:	ee15 2a90 	vmov	r2, s11
 8014e52:	4013      	ands	r3, r2
 8014e54:	ee07 3a10 	vmov	s14, r3
 8014e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014e5c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014e60:	ee76 7a67 	vsub.f32	s15, s12, s15
 8014e64:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014e68:	eef0 7a66 	vmov.f32	s15, s13
 8014e6c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8014e70:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8014e74:	eef0 7a47 	vmov.f32	s15, s14
 8014e78:	e75a      	b.n	8014d30 <__kernel_tanf+0x30>
 8014e7a:	eef0 7a66 	vmov.f32	s15, s13
 8014e7e:	e757      	b.n	8014d30 <__kernel_tanf+0x30>
 8014e80:	3f2ca13f 	.word	0x3f2ca13f
 8014e84:	3f490fda 	.word	0x3f490fda
 8014e88:	33222168 	.word	0x33222168
 8014e8c:	00000000 	.word	0x00000000
 8014e90:	37d95384 	.word	0x37d95384
 8014e94:	3895c07a 	.word	0x3895c07a
 8014e98:	b79bae5f 	.word	0xb79bae5f
 8014e9c:	398137b9 	.word	0x398137b9
 8014ea0:	3abede48 	.word	0x3abede48
 8014ea4:	3c11371f 	.word	0x3c11371f
 8014ea8:	3d5d0dd1 	.word	0x3d5d0dd1
 8014eac:	38a3f445 	.word	0x38a3f445
 8014eb0:	3a1a26c8 	.word	0x3a1a26c8
 8014eb4:	3b6b6916 	.word	0x3b6b6916
 8014eb8:	3cb327a4 	.word	0x3cb327a4
 8014ebc:	3e088889 	.word	0x3e088889
 8014ec0:	3eaaaaab 	.word	0x3eaaaaab
 8014ec4:	fffff000 	.word	0xfffff000

08014ec8 <matherr>:
 8014ec8:	2000      	movs	r0, #0
 8014eca:	4770      	bx	lr
 8014ecc:	0000      	movs	r0, r0
	...

08014ed0 <nan>:
 8014ed0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014ed8 <nan+0x8>
 8014ed4:	4770      	bx	lr
 8014ed6:	bf00      	nop
 8014ed8:	00000000 	.word	0x00000000
 8014edc:	7ff80000 	.word	0x7ff80000

08014ee0 <expm1f>:
 8014ee0:	ee10 2a10 	vmov	r2, s0
 8014ee4:	4985      	ldr	r1, [pc, #532]	; (80150fc <expm1f+0x21c>)
 8014ee6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8014eea:	428b      	cmp	r3, r1
 8014eec:	d924      	bls.n	8014f38 <expm1f+0x58>
 8014eee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014ef2:	d902      	bls.n	8014efa <expm1f+0x1a>
 8014ef4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014ef8:	4770      	bx	lr
 8014efa:	d106      	bne.n	8014f0a <expm1f+0x2a>
 8014efc:	2a00      	cmp	r2, #0
 8014efe:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014f02:	bfb8      	it	lt
 8014f04:	eeb0 0a67 	vmovlt.f32	s0, s15
 8014f08:	4770      	bx	lr
 8014f0a:	2a00      	cmp	r2, #0
 8014f0c:	db08      	blt.n	8014f20 <expm1f+0x40>
 8014f0e:	4a7c      	ldr	r2, [pc, #496]	; (8015100 <expm1f+0x220>)
 8014f10:	4293      	cmp	r3, r2
 8014f12:	f240 80eb 	bls.w	80150ec <expm1f+0x20c>
 8014f16:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8015104 <expm1f+0x224>
 8014f1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014f1e:	4770      	bx	lr
 8014f20:	eddf 7a79 	vldr	s15, [pc, #484]	; 8015108 <expm1f+0x228>
 8014f24:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014f28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f30:	d554      	bpl.n	8014fdc <expm1f+0xfc>
 8014f32:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014f36:	4770      	bx	lr
 8014f38:	4974      	ldr	r1, [pc, #464]	; (801510c <expm1f+0x22c>)
 8014f3a:	428b      	cmp	r3, r1
 8014f3c:	d96d      	bls.n	801501a <expm1f+0x13a>
 8014f3e:	4974      	ldr	r1, [pc, #464]	; (8015110 <expm1f+0x230>)
 8014f40:	428b      	cmp	r3, r1
 8014f42:	d84b      	bhi.n	8014fdc <expm1f+0xfc>
 8014f44:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8015114 <expm1f+0x234>
 8014f48:	2a00      	cmp	r2, #0
 8014f4a:	bfa7      	ittee	ge
 8014f4c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8014f50:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8015118 <expm1f+0x238>
 8014f54:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 801511c <expm1f+0x23c>
 8014f58:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8014f5c:	bfac      	ite	ge
 8014f5e:	2301      	movge	r3, #1
 8014f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f64:	ee37 0a67 	vsub.f32	s0, s14, s15
 8014f68:	ee37 7a40 	vsub.f32	s14, s14, s0
 8014f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f70:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8014f74:	ee20 5a25 	vmul.f32	s10, s0, s11
 8014f78:	eddf 6a69 	vldr	s13, [pc, #420]	; 8015120 <expm1f+0x240>
 8014f7c:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8015124 <expm1f+0x244>
 8014f80:	ee20 7a05 	vmul.f32	s14, s0, s10
 8014f84:	eea7 6a26 	vfma.f32	s12, s14, s13
 8014f88:	eddf 6a67 	vldr	s13, [pc, #412]	; 8015128 <expm1f+0x248>
 8014f8c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014f90:	ed9f 6a66 	vldr	s12, [pc, #408]	; 801512c <expm1f+0x24c>
 8014f94:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014f98:	eddf 6a65 	vldr	s13, [pc, #404]	; 8015130 <expm1f+0x250>
 8014f9c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014fa0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014fa4:	eef0 4a46 	vmov.f32	s9, s12
 8014fa8:	eee6 4a87 	vfma.f32	s9, s13, s14
 8014fac:	eef0 6a64 	vmov.f32	s13, s9
 8014fb0:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8014fb4:	eee5 4a66 	vfms.f32	s9, s10, s13
 8014fb8:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8014fbc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8014fc0:	eee0 6a64 	vfms.f32	s13, s0, s9
 8014fc4:	eef0 4a66 	vmov.f32	s9, s13
 8014fc8:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8014fcc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014fd0:	bb8b      	cbnz	r3, 8015036 <expm1f+0x156>
 8014fd2:	eef0 7a47 	vmov.f32	s15, s14
 8014fd6:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8014fda:	e027      	b.n	801502c <expm1f+0x14c>
 8014fdc:	eddf 7a55 	vldr	s15, [pc, #340]	; 8015134 <expm1f+0x254>
 8014fe0:	2a00      	cmp	r2, #0
 8014fe2:	ee20 7a27 	vmul.f32	s14, s0, s15
 8014fe6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014fea:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8014fee:	bfa8      	it	ge
 8014ff0:	eef0 7a66 	vmovge.f32	s15, s13
 8014ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014ff8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8015114 <expm1f+0x234>
 8014ffc:	eddf 6a46 	vldr	s13, [pc, #280]	; 8015118 <expm1f+0x238>
 8015000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015004:	ee17 3a90 	vmov	r3, s15
 8015008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801500c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015010:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015014:	eeb0 7a40 	vmov.f32	s14, s0
 8015018:	e7a4      	b.n	8014f64 <expm1f+0x84>
 801501a:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801501e:	d208      	bcs.n	8015032 <expm1f+0x152>
 8015020:	eddf 7a38 	vldr	s15, [pc, #224]	; 8015104 <expm1f+0x224>
 8015024:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015028:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801502c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015030:	4770      	bx	lr
 8015032:	2300      	movs	r3, #0
 8015034:	e79c      	b.n	8014f70 <expm1f+0x90>
 8015036:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801503a:	1c5a      	adds	r2, r3, #1
 801503c:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8015040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015044:	d106      	bne.n	8015054 <expm1f+0x174>
 8015046:	ee70 7a67 	vsub.f32	s15, s0, s15
 801504a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801504e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8015052:	4770      	bx	lr
 8015054:	2b01      	cmp	r3, #1
 8015056:	d118      	bne.n	801508a <expm1f+0x1aa>
 8015058:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801505c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8015060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015064:	bf41      	itttt	mi
 8015066:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801506a:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 801506e:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8015072:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8015076:	bf5f      	itttt	pl
 8015078:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 801507c:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8015080:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8015084:	eeb0 0a46 	vmovpl.f32	s0, s12
 8015088:	4770      	bx	lr
 801508a:	1c5a      	adds	r2, r3, #1
 801508c:	2a39      	cmp	r2, #57	; 0x39
 801508e:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8015092:	d90b      	bls.n	80150ac <expm1f+0x1cc>
 8015094:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015098:	ee36 0a40 	vsub.f32	s0, s12, s0
 801509c:	ee10 3a10 	vmov	r3, s0
 80150a0:	440b      	add	r3, r1
 80150a2:	ee00 3a10 	vmov	s0, r3
 80150a6:	ee30 0a46 	vsub.f32	s0, s0, s12
 80150aa:	4770      	bx	lr
 80150ac:	2b16      	cmp	r3, #22
 80150ae:	dc11      	bgt.n	80150d4 <expm1f+0x1f4>
 80150b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80150b4:	fa42 f303 	asr.w	r3, r2, r3
 80150b8:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 80150bc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80150c0:	ee07 3a90 	vmov	s15, r3
 80150c4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80150c8:	ee10 3a10 	vmov	r3, s0
 80150cc:	440b      	add	r3, r1
 80150ce:	ee00 3a10 	vmov	s0, r3
 80150d2:	4770      	bx	lr
 80150d4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80150d8:	05db      	lsls	r3, r3, #23
 80150da:	ee07 3a10 	vmov	s14, r3
 80150de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80150e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80150e6:	ee30 0a06 	vadd.f32	s0, s0, s12
 80150ea:	e7ed      	b.n	80150c8 <expm1f+0x1e8>
 80150ec:	eddf 7a11 	vldr	s15, [pc, #68]	; 8015134 <expm1f+0x254>
 80150f0:	ee20 7a27 	vmul.f32	s14, s0, s15
 80150f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80150f8:	e77c      	b.n	8014ff4 <expm1f+0x114>
 80150fa:	bf00      	nop
 80150fc:	4195b843 	.word	0x4195b843
 8015100:	42b17217 	.word	0x42b17217
 8015104:	7149f2ca 	.word	0x7149f2ca
 8015108:	0da24260 	.word	0x0da24260
 801510c:	3eb17218 	.word	0x3eb17218
 8015110:	3f851591 	.word	0x3f851591
 8015114:	3f317180 	.word	0x3f317180
 8015118:	3717f7d1 	.word	0x3717f7d1
 801511c:	b717f7d1 	.word	0xb717f7d1
 8015120:	b457edbb 	.word	0xb457edbb
 8015124:	36867e54 	.word	0x36867e54
 8015128:	b8a670cd 	.word	0xb8a670cd
 801512c:	3ad00d01 	.word	0x3ad00d01
 8015130:	bd088889 	.word	0xbd088889
 8015134:	3fb8aa3b 	.word	0x3fb8aa3b

08015138 <finitef>:
 8015138:	ee10 3a10 	vmov	r3, s0
 801513c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8015140:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015144:	bfac      	ite	ge
 8015146:	2000      	movge	r0, #0
 8015148:	2001      	movlt	r0, #1
 801514a:	4770      	bx	lr

0801514c <nanf>:
 801514c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015154 <nanf+0x8>
 8015150:	4770      	bx	lr
 8015152:	bf00      	nop
 8015154:	7fc00000 	.word	0x7fc00000

08015158 <rintf>:
 8015158:	b513      	push	{r0, r1, r4, lr}
 801515a:	ee10 1a10 	vmov	r1, s0
 801515e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015162:	0ddc      	lsrs	r4, r3, #23
 8015164:	3c7f      	subs	r4, #127	; 0x7f
 8015166:	2c16      	cmp	r4, #22
 8015168:	dc46      	bgt.n	80151f8 <rintf+0xa0>
 801516a:	b32b      	cbz	r3, 80151b8 <rintf+0x60>
 801516c:	2c00      	cmp	r4, #0
 801516e:	ee10 2a10 	vmov	r2, s0
 8015172:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8015176:	da21      	bge.n	80151bc <rintf+0x64>
 8015178:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801517c:	425b      	negs	r3, r3
 801517e:	4a21      	ldr	r2, [pc, #132]	; (8015204 <rintf+0xac>)
 8015180:	0a5b      	lsrs	r3, r3, #9
 8015182:	0d09      	lsrs	r1, r1, #20
 8015184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015188:	0509      	lsls	r1, r1, #20
 801518a:	430b      	orrs	r3, r1
 801518c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8015190:	ee07 3a90 	vmov	s15, r3
 8015194:	edd2 6a00 	vldr	s13, [r2]
 8015198:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801519c:	ed8d 7a01 	vstr	s14, [sp, #4]
 80151a0:	eddd 7a01 	vldr	s15, [sp, #4]
 80151a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80151a8:	ee17 3a90 	vmov	r3, s15
 80151ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151b0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80151b4:	ee00 3a10 	vmov	s0, r3
 80151b8:	b002      	add	sp, #8
 80151ba:	bd10      	pop	{r4, pc}
 80151bc:	4b12      	ldr	r3, [pc, #72]	; (8015208 <rintf+0xb0>)
 80151be:	4123      	asrs	r3, r4
 80151c0:	4219      	tst	r1, r3
 80151c2:	d0f9      	beq.n	80151b8 <rintf+0x60>
 80151c4:	085b      	lsrs	r3, r3, #1
 80151c6:	4219      	tst	r1, r3
 80151c8:	d006      	beq.n	80151d8 <rintf+0x80>
 80151ca:	ea21 0203 	bic.w	r2, r1, r3
 80151ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80151d2:	fa43 f404 	asr.w	r4, r3, r4
 80151d6:	4322      	orrs	r2, r4
 80151d8:	4b0a      	ldr	r3, [pc, #40]	; (8015204 <rintf+0xac>)
 80151da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80151de:	ed90 7a00 	vldr	s14, [r0]
 80151e2:	ee07 2a90 	vmov	s15, r2
 80151e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151ea:	edcd 7a01 	vstr	s15, [sp, #4]
 80151ee:	ed9d 0a01 	vldr	s0, [sp, #4]
 80151f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80151f6:	e7df      	b.n	80151b8 <rintf+0x60>
 80151f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80151fc:	d3dc      	bcc.n	80151b8 <rintf+0x60>
 80151fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015202:	e7d9      	b.n	80151b8 <rintf+0x60>
 8015204:	0806e4f4 	.word	0x0806e4f4
 8015208:	007fffff 	.word	0x007fffff

0801520c <scalbnf>:
 801520c:	b508      	push	{r3, lr}
 801520e:	ee10 2a10 	vmov	r2, s0
 8015212:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8015216:	ed2d 8b02 	vpush	{d8}
 801521a:	eef0 0a40 	vmov.f32	s1, s0
 801521e:	d004      	beq.n	801522a <scalbnf+0x1e>
 8015220:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015224:	d306      	bcc.n	8015234 <scalbnf+0x28>
 8015226:	ee70 0a00 	vadd.f32	s1, s0, s0
 801522a:	ecbd 8b02 	vpop	{d8}
 801522e:	eeb0 0a60 	vmov.f32	s0, s1
 8015232:	bd08      	pop	{r3, pc}
 8015234:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015238:	d21c      	bcs.n	8015274 <scalbnf+0x68>
 801523a:	4b1f      	ldr	r3, [pc, #124]	; (80152b8 <scalbnf+0xac>)
 801523c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80152bc <scalbnf+0xb0>
 8015240:	4298      	cmp	r0, r3
 8015242:	ee60 0a27 	vmul.f32	s1, s0, s15
 8015246:	db10      	blt.n	801526a <scalbnf+0x5e>
 8015248:	ee10 2a90 	vmov	r2, s1
 801524c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8015250:	3b19      	subs	r3, #25
 8015252:	4403      	add	r3, r0
 8015254:	2bfe      	cmp	r3, #254	; 0xfe
 8015256:	dd0f      	ble.n	8015278 <scalbnf+0x6c>
 8015258:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80152c0 <scalbnf+0xb4>
 801525c:	eeb0 0a48 	vmov.f32	s0, s16
 8015260:	f000 f834 	bl	80152cc <copysignf>
 8015264:	ee60 0a08 	vmul.f32	s1, s0, s16
 8015268:	e7df      	b.n	801522a <scalbnf+0x1e>
 801526a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80152c4 <scalbnf+0xb8>
 801526e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015272:	e7da      	b.n	801522a <scalbnf+0x1e>
 8015274:	0ddb      	lsrs	r3, r3, #23
 8015276:	e7ec      	b.n	8015252 <scalbnf+0x46>
 8015278:	2b00      	cmp	r3, #0
 801527a:	dd06      	ble.n	801528a <scalbnf+0x7e>
 801527c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8015280:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8015284:	ee00 3a90 	vmov	s1, r3
 8015288:	e7cf      	b.n	801522a <scalbnf+0x1e>
 801528a:	f113 0f16 	cmn.w	r3, #22
 801528e:	da06      	bge.n	801529e <scalbnf+0x92>
 8015290:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015294:	4298      	cmp	r0, r3
 8015296:	dcdf      	bgt.n	8015258 <scalbnf+0x4c>
 8015298:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80152c4 <scalbnf+0xb8>
 801529c:	e7de      	b.n	801525c <scalbnf+0x50>
 801529e:	3319      	adds	r3, #25
 80152a0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80152a4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80152a8:	eddf 7a07 	vldr	s15, [pc, #28]	; 80152c8 <scalbnf+0xbc>
 80152ac:	ee07 3a10 	vmov	s14, r3
 80152b0:	ee67 0a27 	vmul.f32	s1, s14, s15
 80152b4:	e7b9      	b.n	801522a <scalbnf+0x1e>
 80152b6:	bf00      	nop
 80152b8:	ffff3cb0 	.word	0xffff3cb0
 80152bc:	4c000000 	.word	0x4c000000
 80152c0:	7149f2ca 	.word	0x7149f2ca
 80152c4:	0da24260 	.word	0x0da24260
 80152c8:	33000000 	.word	0x33000000

080152cc <copysignf>:
 80152cc:	ee10 3a10 	vmov	r3, s0
 80152d0:	ee10 2a90 	vmov	r2, s1
 80152d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80152d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80152dc:	4313      	orrs	r3, r2
 80152de:	ee00 3a10 	vmov	s0, r3
 80152e2:	4770      	bx	lr

080152e4 <_init>:
 80152e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152e6:	bf00      	nop
 80152e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152ea:	bc08      	pop	{r3}
 80152ec:	469e      	mov	lr, r3
 80152ee:	4770      	bx	lr

080152f0 <_fini>:
 80152f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152f2:	bf00      	nop
 80152f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152f6:	bc08      	pop	{r3}
 80152f8:	469e      	mov	lr, r3
 80152fa:	4770      	bx	lr
